
twelding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c234  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ba0  0801c3e8  0801c3e8  0002c3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ff88  0801ff88  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  0801ff88  0801ff88  0002ff88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ff90  0801ff90  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ff90  0801ff90  0002ff90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ff94  0801ff94  0002ff94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801ff98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030094  2**0
                  CONTENTS
 10 .bss          00010fec  20000094  20000094  00030094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20011080  20011080  00030094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006e2e5  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a444  00000000  00000000  0009e3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028b0  00000000  00000000  000a87f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000026b0  00000000  00000000  000ab0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016191  00000000  00000000  000ad750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043aa3  00000000  00000000  000c38e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00106a8f  00000000  00000000  00107384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0020de13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b1dc  00000000  00000000  0020de68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801c3cc 	.word	0x0801c3cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0801c3cc 	.word	0x0801c3cc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c40:	f000 b96e 	b.w	8000f20 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9d08      	ldr	r5, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	468c      	mov	ip, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8083 	bne.w	8000d72 <__udivmoddi4+0x116>
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	4617      	mov	r7, r2
 8000c70:	d947      	bls.n	8000d02 <__udivmoddi4+0xa6>
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	b142      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c78:	f1c2 0020 	rsb	r0, r2, #32
 8000c7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c80:	4091      	lsls	r1, r2
 8000c82:	4097      	lsls	r7, r2
 8000c84:	ea40 0c01 	orr.w	ip, r0, r1
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbbc f6f8 	udiv	r6, ip, r8
 8000c94:	fa1f fe87 	uxth.w	lr, r7
 8000c98:	fb08 c116 	mls	r1, r8, r6, ip
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 8119 	bcs.w	8000ee4 <__udivmoddi4+0x288>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8116 	bls.w	8000ee4 <__udivmoddi4+0x288>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	443b      	add	r3, r7
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	f080 8105 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	f240 8102 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	443c      	add	r4, r7
 8000ce8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cec:	eba4 040e 	sub.w	r4, r4, lr
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b902      	cbnz	r2, 8000d06 <__udivmoddi4+0xaa>
 8000d04:	deff      	udf	#255	; 0xff
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d150      	bne.n	8000db0 <__udivmoddi4+0x154>
 8000d0e:	1bcb      	subs	r3, r1, r7
 8000d10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d14:	fa1f f887 	uxth.w	r8, r7
 8000d18:	2601      	movs	r6, #1
 8000d1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1e:	0c21      	lsrs	r1, r4, #16
 8000d20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d28:	fb08 f30c 	mul.w	r3, r8, ip
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000d30:	1879      	adds	r1, r7, r1
 8000d32:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0xe2>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	f200 80e9 	bhi.w	8000f10 <__udivmoddi4+0x2b4>
 8000d3e:	4684      	mov	ip, r0
 8000d40:	1ac9      	subs	r1, r1, r3
 8000d42:	b2a3      	uxth	r3, r4
 8000d44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d50:	fb08 f800 	mul.w	r8, r8, r0
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x10c>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x10a>
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	f200 80d9 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d66:	4618      	mov	r0, r3
 8000d68:	eba4 0408 	sub.w	r4, r4, r8
 8000d6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d70:	e7bf      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x12e>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80b1 	beq.w	8000ede <__udivmoddi4+0x282>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x1cc>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0x140>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80b8 	bhi.w	8000f0c <__udivmoddi4+0x2b0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	468c      	mov	ip, r1
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0a8      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000daa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dae:	e7a5      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f603 	lsr.w	r6, r0, r3
 8000db8:	4097      	lsls	r7, r2
 8000dba:	fa01 f002 	lsl.w	r0, r1, r2
 8000dbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc2:	40d9      	lsrs	r1, r3
 8000dc4:	4330      	orrs	r0, r6
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f108 	mul.w	r1, r6, r8
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	fa04 f402 	lsl.w	r4, r4, r2
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x19c>
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dea:	f080 808d 	bcs.w	8000f08 <__udivmoddi4+0x2ac>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 808a 	bls.w	8000f08 <__udivmoddi4+0x2ac>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b281      	uxth	r1, r0
 8000dfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e08:	fb00 f308 	mul.w	r3, r0, r8
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x1c4>
 8000e10:	1879      	adds	r1, r7, r1
 8000e12:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e16:	d273      	bcs.n	8000f00 <__udivmoddi4+0x2a4>
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d971      	bls.n	8000f00 <__udivmoddi4+0x2a4>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4439      	add	r1, r7
 8000e20:	1acb      	subs	r3, r1, r3
 8000e22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e26:	e778      	b.n	8000d1a <__udivmoddi4+0xbe>
 8000e28:	f1c6 0c20 	rsb	ip, r6, #32
 8000e2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e34:	431c      	orrs	r4, r3
 8000e36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e46:	431f      	orrs	r7, r3
 8000e48:	0c3b      	lsrs	r3, r7, #16
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fa1f f884 	uxth.w	r8, r4
 8000e52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	fa02 f206 	lsl.w	r2, r2, r6
 8000e64:	fa00 f306 	lsl.w	r3, r0, r6
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x220>
 8000e6a:	1861      	adds	r1, r4, r1
 8000e6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e70:	d248      	bcs.n	8000f04 <__udivmoddi4+0x2a8>
 8000e72:	458a      	cmp	sl, r1
 8000e74:	d946      	bls.n	8000f04 <__udivmoddi4+0x2a8>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4421      	add	r1, r4
 8000e7c:	eba1 010a 	sub.w	r1, r1, sl
 8000e80:	b2bf      	uxth	r7, r7
 8000e82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8e:	fb00 f808 	mul.w	r8, r0, r8
 8000e92:	45b8      	cmp	r8, r7
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x24a>
 8000e96:	19e7      	adds	r7, r4, r7
 8000e98:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e9c:	d22e      	bcs.n	8000efc <__udivmoddi4+0x2a0>
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d92c      	bls.n	8000efc <__udivmoddi4+0x2a0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4427      	add	r7, r4
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	eba7 0708 	sub.w	r7, r7, r8
 8000eae:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb2:	454f      	cmp	r7, r9
 8000eb4:	46c6      	mov	lr, r8
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	d31a      	bcc.n	8000ef0 <__udivmoddi4+0x294>
 8000eba:	d017      	beq.n	8000eec <__udivmoddi4+0x290>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x27a>
 8000ebe:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eca:	40f2      	lsrs	r2, r6
 8000ecc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ed0:	40f7      	lsrs	r7, r6
 8000ed2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	4631      	mov	r1, r6
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e70b      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e9      	b.n	8000cbc <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fd      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000eec:	4543      	cmp	r3, r8
 8000eee:	d2e5      	bcs.n	8000ebc <__udivmoddi4+0x260>
 8000ef0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7df      	b.n	8000ebc <__udivmoddi4+0x260>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e7d2      	b.n	8000ea6 <__udivmoddi4+0x24a>
 8000f00:	4660      	mov	r0, ip
 8000f02:	e78d      	b.n	8000e20 <__udivmoddi4+0x1c4>
 8000f04:	4681      	mov	r9, r0
 8000f06:	e7b9      	b.n	8000e7c <__udivmoddi4+0x220>
 8000f08:	4666      	mov	r6, ip
 8000f0a:	e775      	b.n	8000df8 <__udivmoddi4+0x19c>
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	e74a      	b.n	8000da6 <__udivmoddi4+0x14a>
 8000f10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f14:	4439      	add	r1, r7
 8000f16:	e713      	b.n	8000d40 <__udivmoddi4+0xe4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	443c      	add	r4, r7
 8000f1c:	e724      	b.n	8000d68 <__udivmoddi4+0x10c>
 8000f1e:	bf00      	nop

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f28:	f001 f9de 	bl	80022e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2c:	f000 f944 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f30:	f000 fb10 	bl	8001554 <MX_GPIO_Init>
  MX_RTC_Init();
 8000f34:	f000 f9e0 	bl	80012f8 <MX_RTC_Init>
  MX_DMA_Init();
 8000f38:	f000 fae4 	bl	8001504 <MX_DMA_Init>
  MX_UART8_Init();
 8000f3c:	f000 fa70 	bl	8001420 <MX_UART8_Init>
  MX_TIM7_Init();
 8000f40:	f000 fa34 	bl	80013ac <MX_TIM7_Init>
  MX_USART3_UART_Init();
 8000f44:	f000 faa4 	bl	8001490 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000f48:	f000 f9aa 	bl	80012a0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  //-- The hardware initialized successful.
  HAL_UART_Transmit(&huart8, (uint8_t*)"Hello World\r\n", sizeof("Hello World\r\n")-1, 50);
 8000f4c:	2332      	movs	r3, #50	; 0x32
 8000f4e:	220d      	movs	r2, #13
 8000f50:	4962      	ldr	r1, [pc, #392]	; (80010dc <main+0x1b8>)
 8000f52:	4863      	ldr	r0, [pc, #396]	; (80010e0 <main+0x1bc>)
 8000f54:	f004 ffe1 	bl	8005f1a <HAL_UART_Transmit>
  software_init();    // system initialize
 8000f58:	f018 fb08 	bl	801956c <software_init>
  get_eeprom_data();  // read EEPROM
 8000f5c:	f018 fb0e 	bl	801957c <get_eeprom_data>
  check_machine();    // self checking of board and the machines
 8000f60:	f018 fb56 	bl	8019610 <check_machine>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f64:	f006 fef6 	bl	8007d54 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of IPCUartMutex */
  IPCUartMutexHandle = osMutexNew(&IPCUartMutex_attributes);
 8000f68:	485e      	ldr	r0, [pc, #376]	; (80010e4 <main+0x1c0>)
 8000f6a:	f007 f8bf 	bl	80080ec <osMutexNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a5d      	ldr	r2, [pc, #372]	; (80010e8 <main+0x1c4>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* creation of StepMotorXMutex */
  StepMotorXMutexHandle = osMutexNew(&StepMotorXMutex_attributes);
 8000f74:	485d      	ldr	r0, [pc, #372]	; (80010ec <main+0x1c8>)
 8000f76:	f007 f8b9 	bl	80080ec <osMutexNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a5c      	ldr	r2, [pc, #368]	; (80010f0 <main+0x1cc>)
 8000f7e:	6013      	str	r3, [r2, #0]

  /* creation of StepMotorYMutex */
  StepMotorYMutexHandle = osMutexNew(&StepMotorYMutex_attributes);
 8000f80:	485c      	ldr	r0, [pc, #368]	; (80010f4 <main+0x1d0>)
 8000f82:	f007 f8b3 	bl	80080ec <osMutexNew>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a5b      	ldr	r2, [pc, #364]	; (80010f8 <main+0x1d4>)
 8000f8a:	6013      	str	r3, [r2, #0]

  /* creation of M24512Mutex */
  M24512MutexHandle = osMutexNew(&M24512Mutex_attributes);
 8000f8c:	485b      	ldr	r0, [pc, #364]	; (80010fc <main+0x1d8>)
 8000f8e:	f007 f8ad 	bl	80080ec <osMutexNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a5a      	ldr	r2, [pc, #360]	; (8001100 <main+0x1dc>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of CCDUartMutex */
  CCDUartMutexHandle = osMutexNew(&CCDUartMutex_attributes);
 8000f98:	485a      	ldr	r0, [pc, #360]	; (8001104 <main+0x1e0>)
 8000f9a:	f007 f8a7 	bl	80080ec <osMutexNew>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a59      	ldr	r2, [pc, #356]	; (8001108 <main+0x1e4>)
 8000fa2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of LaserAlarmBinarySem */
  LaserAlarmBinarySemHandle = osSemaphoreNew(1, 1, &LaserAlarmBinarySem_attributes);
 8000fa4:	4a59      	ldr	r2, [pc, #356]	; (800110c <main+0x1e8>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f007 f9ad 	bl	8008308 <osSemaphoreNew>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a57      	ldr	r2, [pc, #348]	; (8001110 <main+0x1ec>)
 8000fb2:	6013      	str	r3, [r2, #0]

  /* creation of MotorAlarm1BinarySem */
  MotorAlarm1BinarySemHandle = osSemaphoreNew(1, 1, &MotorAlarm1BinarySem_attributes);
 8000fb4:	4a57      	ldr	r2, [pc, #348]	; (8001114 <main+0x1f0>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f007 f9a5 	bl	8008308 <osSemaphoreNew>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a55      	ldr	r2, [pc, #340]	; (8001118 <main+0x1f4>)
 8000fc2:	6013      	str	r3, [r2, #0]

  /* creation of MotorAlarm2BinarySem */
  MotorAlarm2BinarySemHandle = osSemaphoreNew(1, 1, &MotorAlarm2BinarySem_attributes);
 8000fc4:	4a55      	ldr	r2, [pc, #340]	; (800111c <main+0x1f8>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f007 f99d 	bl	8008308 <osSemaphoreNew>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a53      	ldr	r2, [pc, #332]	; (8001120 <main+0x1fc>)
 8000fd2:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimeCountTimer */
  TimeCountTimerHandle = osTimerNew(TimeCountCallback, osTimerPeriodic, NULL, &TimeCountTimer_attributes);
 8000fd4:	4b53      	ldr	r3, [pc, #332]	; (8001124 <main+0x200>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4853      	ldr	r0, [pc, #332]	; (8001128 <main+0x204>)
 8000fdc:	f006 ffdc 	bl	8007f98 <osTimerNew>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a52      	ldr	r2, [pc, #328]	; (800112c <main+0x208>)
 8000fe4:	6013      	str	r3, [r2, #0]

  /* creation of CheckCCDTimer */
  CheckCCDTimerHandle = osTimerNew(CheckCCDCallback, osTimerPeriodic, NULL, &CheckCCDTimer_attributes);
 8000fe6:	4b52      	ldr	r3, [pc, #328]	; (8001130 <main+0x20c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2101      	movs	r1, #1
 8000fec:	4851      	ldr	r0, [pc, #324]	; (8001134 <main+0x210>)
 8000fee:	f006 ffd3 	bl	8007f98 <osTimerNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <main+0x214>)
 8000ff6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(TimeCountTimerHandle, 1000);  // start time count each 1s
 8000ff8:	4b4c      	ldr	r3, [pc, #304]	; (800112c <main+0x208>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001000:	4618      	mov	r0, r3
 8001002:	f007 f845 	bl	8008090 <osTimerStart>
  osTimerStart(CheckCCDTimerHandle, 5000);   // read CCD data each 5s
 8001006:	4b4c      	ldr	r3, [pc, #304]	; (8001138 <main+0x214>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f241 3188 	movw	r1, #5000	; 0x1388
 800100e:	4618      	mov	r0, r3
 8001010:	f007 f83e 	bl	8008090 <osTimerStart>

  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of IPCUartQueue */
  IPCUartQueueHandle = osMessageQueueNew (1, sizeof(uint64_t), &IPCUartQueue_attributes);
 8001014:	4a49      	ldr	r2, [pc, #292]	; (800113c <main+0x218>)
 8001016:	2108      	movs	r1, #8
 8001018:	2001      	movs	r0, #1
 800101a:	f007 fab9 	bl	8008590 <osMessageQueueNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a47      	ldr	r2, [pc, #284]	; (8001140 <main+0x21c>)
 8001022:	6013      	str	r3, [r2, #0]

  /* creation of MotorControlQueue */
  MotorControlQueueHandle = osMessageQueueNew (20, sizeof(uint64_t), &MotorControlQueue_attributes);
 8001024:	4a47      	ldr	r2, [pc, #284]	; (8001144 <main+0x220>)
 8001026:	2108      	movs	r1, #8
 8001028:	2014      	movs	r0, #20
 800102a:	f007 fab1 	bl	8008590 <osMessageQueueNew>
 800102e:	4603      	mov	r3, r0
 8001030:	4a45      	ldr	r2, [pc, #276]	; (8001148 <main+0x224>)
 8001032:	6013      	str	r3, [r2, #0]

  /* creation of CCDUartQueue */
  CCDUartQueueHandle = osMessageQueueNew (20, sizeof(uint64_t), &CCDUartQueue_attributes);
 8001034:	4a45      	ldr	r2, [pc, #276]	; (800114c <main+0x228>)
 8001036:	2108      	movs	r1, #8
 8001038:	2014      	movs	r0, #20
 800103a:	f007 faa9 	bl	8008590 <osMessageQueueNew>
 800103e:	4603      	mov	r3, r0
 8001040:	4a43      	ldr	r2, [pc, #268]	; (8001150 <main+0x22c>)
 8001042:	6013      	str	r3, [r2, #0]

  /* creation of CmdhandleQueue */
  CmdhandleQueueHandle = osMessageQueueNew (20, sizeof(uint64_t), &CmdhandleQueue_attributes);
 8001044:	4a43      	ldr	r2, [pc, #268]	; (8001154 <main+0x230>)
 8001046:	2108      	movs	r1, #8
 8001048:	2014      	movs	r0, #20
 800104a:	f007 faa1 	bl	8008590 <osMessageQueueNew>
 800104e:	4603      	mov	r3, r0
 8001050:	4a41      	ldr	r2, [pc, #260]	; (8001158 <main+0x234>)
 8001052:	6013      	str	r3, [r2, #0]

  /* creation of LaserEthernetQueue */
  LaserEthernetQueueHandle = osMessageQueueNew (20, sizeof(uint64_t), &LaserEthernetQueue_attributes);
 8001054:	4a41      	ldr	r2, [pc, #260]	; (800115c <main+0x238>)
 8001056:	2108      	movs	r1, #8
 8001058:	2014      	movs	r0, #20
 800105a:	f007 fa99 	bl	8008590 <osMessageQueueNew>
 800105e:	4603      	mov	r3, r0
 8001060:	4a3f      	ldr	r2, [pc, #252]	; (8001160 <main+0x23c>)
 8001062:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LwipTask */
  LwipTaskHandle = osThreadNew(StartLwipTask, NULL, &LwipTask_attributes);
 8001064:	4a3f      	ldr	r2, [pc, #252]	; (8001164 <main+0x240>)
 8001066:	2100      	movs	r1, #0
 8001068:	483f      	ldr	r0, [pc, #252]	; (8001168 <main+0x244>)
 800106a:	f006 fed2 	bl	8007e12 <osThreadNew>
 800106e:	4603      	mov	r3, r0
 8001070:	4a3e      	ldr	r2, [pc, #248]	; (800116c <main+0x248>)
 8001072:	6013      	str	r3, [r2, #0]

  /* creation of SampleTask */
  SampleTaskHandle = osThreadNew(StartSampleTask, NULL, &SampleTask_attributes);
 8001074:	4a3e      	ldr	r2, [pc, #248]	; (8001170 <main+0x24c>)
 8001076:	2100      	movs	r1, #0
 8001078:	483e      	ldr	r0, [pc, #248]	; (8001174 <main+0x250>)
 800107a:	f006 feca 	bl	8007e12 <osThreadNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <main+0x254>)
 8001082:	6013      	str	r3, [r2, #0]

  /* creation of CmdHandleTask */
  CmdHandleTaskHandle = osThreadNew(StartCmdHandleTask, NULL, &CmdHandleTask_attributes);
 8001084:	4a3d      	ldr	r2, [pc, #244]	; (800117c <main+0x258>)
 8001086:	2100      	movs	r1, #0
 8001088:	483d      	ldr	r0, [pc, #244]	; (8001180 <main+0x25c>)
 800108a:	f006 fec2 	bl	8007e12 <osThreadNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a3c      	ldr	r2, [pc, #240]	; (8001184 <main+0x260>)
 8001092:	6013      	str	r3, [r2, #0]

  /* creation of ProtectTask */
  ProtectTaskHandle = osThreadNew(StartProtectTask, NULL, &ProtectTask_attributes);
 8001094:	4a3c      	ldr	r2, [pc, #240]	; (8001188 <main+0x264>)
 8001096:	2100      	movs	r1, #0
 8001098:	483c      	ldr	r0, [pc, #240]	; (800118c <main+0x268>)
 800109a:	f006 feba 	bl	8007e12 <osThreadNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a3b      	ldr	r2, [pc, #236]	; (8001190 <main+0x26c>)
 80010a2:	6013      	str	r3, [r2, #0]

  /* creation of MotorControlTask */
  MotorControlTaskHandle = osThreadNew(StartMotorContorlTask, NULL, &MotorControlTask_attributes);
 80010a4:	4a3b      	ldr	r2, [pc, #236]	; (8001194 <main+0x270>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	483b      	ldr	r0, [pc, #236]	; (8001198 <main+0x274>)
 80010aa:	f006 feb2 	bl	8007e12 <osThreadNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a3a      	ldr	r2, [pc, #232]	; (800119c <main+0x278>)
 80010b2:	6013      	str	r3, [r2, #0]

  /* creation of IPCUartTask */
  IPCUartTaskHandle = osThreadNew(StartIPCUartTask, NULL, &IPCUartTask_attributes);
 80010b4:	4a3a      	ldr	r2, [pc, #232]	; (80011a0 <main+0x27c>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	483a      	ldr	r0, [pc, #232]	; (80011a4 <main+0x280>)
 80010ba:	f006 feaa 	bl	8007e12 <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a39      	ldr	r2, [pc, #228]	; (80011a8 <main+0x284>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of CCDUartTask */
  CCDUartTaskHandle = osThreadNew(StartCCDUartTask, NULL, &CCDUartTask_attributes);
 80010c4:	4a39      	ldr	r2, [pc, #228]	; (80011ac <main+0x288>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4839      	ldr	r0, [pc, #228]	; (80011b0 <main+0x28c>)
 80010ca:	f006 fea2 	bl	8007e12 <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a38      	ldr	r2, [pc, #224]	; (80011b4 <main+0x290>)
 80010d2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010d4:	f006 fe62 	bl	8007d9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <main+0x1b4>
 80010da:	bf00      	nop
 80010dc:	0801c550 	.word	0x0801c550
 80010e0:	2000a698 	.word	0x2000a698
 80010e4:	0801fc40 	.word	0x0801fc40
 80010e8:	2000a52c 	.word	0x2000a52c
 80010ec:	0801fc50 	.word	0x0801fc50
 80010f0:	2000a744 	.word	0x2000a744
 80010f4:	0801fc60 	.word	0x0801fc60
 80010f8:	2000a518 	.word	0x2000a518
 80010fc:	0801fc70 	.word	0x0801fc70
 8001100:	2000a748 	.word	0x2000a748
 8001104:	0801fc80 	.word	0x0801fc80
 8001108:	2000a690 	.word	0x2000a690
 800110c:	0801fc90 	.word	0x0801fc90
 8001110:	2000a524 	.word	0x2000a524
 8001114:	0801fca0 	.word	0x0801fca0
 8001118:	2000a604 	.word	0x2000a604
 800111c:	0801fcb0 	.word	0x0801fcb0
 8001120:	2000a534 	.word	0x2000a534
 8001124:	0801fc20 	.word	0x0801fc20
 8001128:	08001b29 	.word	0x08001b29
 800112c:	2000a51c 	.word	0x2000a51c
 8001130:	0801fc30 	.word	0x0801fc30
 8001134:	08001b59 	.word	0x08001b59
 8001138:	2000a5e0 	.word	0x2000a5e0
 800113c:	0801fba8 	.word	0x0801fba8
 8001140:	2000a6ec 	.word	0x2000a6ec
 8001144:	0801fbc0 	.word	0x0801fbc0
 8001148:	2000a608 	.word	0x2000a608
 800114c:	0801fbd8 	.word	0x0801fbd8
 8001150:	2000a5fc 	.word	0x2000a5fc
 8001154:	0801fbf0 	.word	0x0801fbf0
 8001158:	2000a6f4 	.word	0x2000a6f4
 800115c:	0801fc08 	.word	0x0801fc08
 8001160:	2000a6e4 	.word	0x2000a6e4
 8001164:	0801faac 	.word	0x0801faac
 8001168:	08001755 	.word	0x08001755
 800116c:	2000a5dc 	.word	0x2000a5dc
 8001170:	0801fad0 	.word	0x0801fad0
 8001174:	080017bd 	.word	0x080017bd
 8001178:	2000a6f0 	.word	0x2000a6f0
 800117c:	0801faf4 	.word	0x0801faf4
 8001180:	080017cd 	.word	0x080017cd
 8001184:	2000a6e8 	.word	0x2000a6e8
 8001188:	0801fb18 	.word	0x0801fb18
 800118c:	08001825 	.word	0x08001825
 8001190:	2000a740 	.word	0x2000a740
 8001194:	0801fb3c 	.word	0x0801fb3c
 8001198:	08001895 	.word	0x08001895
 800119c:	2000a528 	.word	0x2000a528
 80011a0:	0801fb60 	.word	0x0801fb60
 80011a4:	08001905 	.word	0x08001905
 80011a8:	2000a520 	.word	0x2000a520
 80011ac:	0801fb84 	.word	0x0801fb84
 80011b0:	080019c9 	.word	0x080019c9
 80011b4:	2000a5f8 	.word	0x2000a5f8

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	; 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f019 ff96 	bl	801b0f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <SystemClock_Config+0xe0>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	4a2c      	ldr	r2, [pc, #176]	; (8001298 <SystemClock_Config+0xe0>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	; 0x40
 80011ec:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <SystemClock_Config+0xe0>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b27      	ldr	r3, [pc, #156]	; (800129c <SystemClock_Config+0xe4>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a26      	ldr	r2, [pc, #152]	; (800129c <SystemClock_Config+0xe4>)
 8001202:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <SystemClock_Config+0xe4>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001214:	2305      	movs	r3, #5
 8001216:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001218:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800121e:	2301      	movs	r3, #1
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001226:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 20;
 800122c:	2314      	movs	r3, #20
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001230:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f992 	bl	800456c <HAL_RCC_OscConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800124e:	f000 fcb3 	bl	8001bb8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001252:	f003 f93b 	bl	80044cc <HAL_PWREx_EnableOverDrive>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800125c:	f000 fcac 	bl	8001bb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001260:	230f      	movs	r3, #15
 8001262:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001264:	2302      	movs	r3, #2
 8001266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800126c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001276:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2105      	movs	r1, #5
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fbec 	bl	8004a5c <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800128a:	f000 fc95 	bl	8001bb8 <Error_Handler>
  }
}
 800128e:	bf00      	nop
 8001290:	3750      	adds	r7, #80	; 0x50
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40007000 	.word	0x40007000

080012a0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2105      	movs	r1, #5
 80012a8:	2027      	movs	r0, #39	; 0x27
 80012aa:	f001 f93b 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012ae:	2027      	movs	r0, #39	; 0x27
 80012b0:	f001 f954 	bl	800255c <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2105      	movs	r1, #5
 80012b8:	2028      	movs	r0, #40	; 0x28
 80012ba:	f001 f933 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012be:	2028      	movs	r0, #40	; 0x28
 80012c0:	f001 f94c 	bl	800255c <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2105      	movs	r1, #5
 80012c8:	2037      	movs	r0, #55	; 0x37
 80012ca:	f001 f92b 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012ce:	2037      	movs	r0, #55	; 0x37
 80012d0:	f001 f944 	bl	800255c <HAL_NVIC_EnableIRQ>
  /* ETH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2105      	movs	r1, #5
 80012d8:	203d      	movs	r0, #61	; 0x3d
 80012da:	f001 f923 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80012de:	203d      	movs	r0, #61	; 0x3d
 80012e0:	f001 f93c 	bl	800255c <HAL_NVIC_EnableIRQ>
  /* UART8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2105      	movs	r1, #5
 80012e8:	2053      	movs	r0, #83	; 0x53
 80012ea:	f001 f91b 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART8_IRQn);
 80012ee:	2053      	movs	r0, #83	; 0x53
 80012f0:	f001 f934 	bl	800255c <HAL_NVIC_EnableIRQ>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <MX_RTC_Init+0xac>)
 8001312:	4a25      	ldr	r2, [pc, #148]	; (80013a8 <MX_RTC_Init+0xb0>)
 8001314:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001316:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <MX_RTC_Init+0xac>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <MX_RTC_Init+0xac>)
 800131e:	227f      	movs	r2, #127	; 0x7f
 8001320:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <MX_RTC_Init+0xac>)
 8001324:	22ff      	movs	r2, #255	; 0xff
 8001326:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MX_RTC_Init+0xac>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <MX_RTC_Init+0xac>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_RTC_Init+0xac>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800133a:	481a      	ldr	r0, [pc, #104]	; (80013a4 <MX_RTC_Init+0xac>)
 800133c:	f003 ff4e 	bl	80051dc <HAL_RTC_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001346:	f000 fc37 	bl	8001bb8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <MX_RTC_Init+0xac>)
 8001366:	f003 ffca 	bl	80052fe <HAL_RTC_SetTime>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001370:	f000 fc22 	bl	8001bb8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001374:	2301      	movs	r3, #1
 8001376:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001378:	2301      	movs	r3, #1
 800137a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001384:	463b      	mov	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_RTC_Init+0xac>)
 800138c:	f004 f8d2 	bl	8005534 <HAL_RTC_SetDate>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001396:	f000 fc0f 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000a670 	.word	0x2000a670
 80013a8:	40002800 	.word	0x40002800

080013ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_TIM7_Init+0x6c>)
 80013bc:	4a17      	ldr	r2, [pc, #92]	; (800141c <MX_TIM7_Init+0x70>)
 80013be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9000;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_TIM7_Init+0x6c>)
 80013c2:	f242 3228 	movw	r2, #9000	; 0x2328
 80013c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <MX_TIM7_Init+0x6c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_TIM7_Init+0x6c>)
 80013d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80013d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_TIM7_Init+0x6c>)
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013dc:	480e      	ldr	r0, [pc, #56]	; (8001418 <MX_TIM7_Init+0x6c>)
 80013de:	f004 fa2f 	bl	8005840 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80013e8:	f000 fbe6 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	4807      	ldr	r0, [pc, #28]	; (8001418 <MX_TIM7_Init+0x6c>)
 80013fa:	f004 fcb1 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001404:	f000 fbd8 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  HAL_TIM_Base_Start_IT(&INIT_TIM);  // start the timer
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <MX_TIM7_Init+0x6c>)
 800140a:	f004 fa69 	bl	80058e0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END TIM7_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000a6f8 	.word	0x2000a6f8
 800141c:	40001400 	.word	0x40001400

08001420 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_UART8_Init+0x64>)
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <MX_UART8_Init+0x68>)
 8001428:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800142a:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_UART8_Init+0x64>)
 800142c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001430:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_UART8_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <MX_UART8_Init+0x64>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_UART8_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_UART8_Init+0x64>)
 8001446:	220c      	movs	r2, #12
 8001448:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_UART8_Init+0x64>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_UART8_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001456:	480b      	ldr	r0, [pc, #44]	; (8001484 <MX_UART8_Init+0x64>)
 8001458:	f004 fd12 	bl	8005e80 <HAL_UART_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001462:	f000 fba9 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */
  //-- idle interrupt and DMA receive
  __HAL_UART_ENABLE_IT(&IPC_UART, UART_IT_IDLE);
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_UART8_Init+0x64>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <MX_UART8_Init+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0210 	orr.w	r2, r2, #16
 8001474:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&IPC_UART, IPC_rx_buffer, sizeof(IPC_rx_buffer));
 8001476:	2264      	movs	r2, #100	; 0x64
 8001478:	4904      	ldr	r1, [pc, #16]	; (800148c <MX_UART8_Init+0x6c>)
 800147a:	4802      	ldr	r0, [pc, #8]	; (8001484 <MX_UART8_Init+0x64>)
 800147c:	f004 fddf 	bl	800603e <HAL_UART_Receive_DMA>

  /* USER CODE END UART8_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000a698 	.word	0x2000a698
 8001488:	40007c00 	.word	0x40007c00
 800148c:	200000b0 	.word	0x200000b0

08001490 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001494:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 8001496:	4a19      	ldr	r2, [pc, #100]	; (80014fc <MX_USART3_UART_Init+0x6c>)
 8001498:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014c8:	f004 fcda 	bl	8005e80 <HAL_UART_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80014d2:	f000 fb71 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  __HAL_UART_ENABLE_IT(&CCD_UART, UART_IT_IDLE);
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f042 0210 	orr.w	r2, r2, #16
 80014e4:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&CCD_UART, CCD_rx_buffer, sizeof(CCD_rx_buffer));
 80014e6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014ea:	4905      	ldr	r1, [pc, #20]	; (8001500 <MX_USART3_UART_Init+0x70>)
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <MX_USART3_UART_Init+0x68>)
 80014ee:	f004 fda6 	bl	800603e <HAL_UART_Receive_DMA>

  /* USER CODE END USART3_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000a598 	.word	0x2000a598
 80014fc:	40004800 	.word	0x40004800
 8001500:	200085d8 	.word	0x200085d8

08001504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_DMA_Init+0x4c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <MX_DMA_Init+0x4c>)
 8001514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MX_DMA_Init+0x4c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2105      	movs	r1, #5
 800152a:	200c      	movs	r0, #12
 800152c:	f000 fffa 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001530:	200c      	movs	r0, #12
 8001532:	f001 f813 	bl	800255c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2105      	movs	r1, #5
 800153a:	2011      	movs	r0, #17
 800153c:	f000 fff2 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001540:	2011      	movs	r0, #17
 8001542:	f001 f80b 	bl	800255c <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	; 0x30
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	4b73      	ldr	r3, [pc, #460]	; (800173c <MX_GPIO_Init+0x1e8>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a72      	ldr	r2, [pc, #456]	; (800173c <MX_GPIO_Init+0x1e8>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b70      	ldr	r3, [pc, #448]	; (800173c <MX_GPIO_Init+0x1e8>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	4b6c      	ldr	r3, [pc, #432]	; (800173c <MX_GPIO_Init+0x1e8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a6b      	ldr	r2, [pc, #428]	; (800173c <MX_GPIO_Init+0x1e8>)
 8001590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b69      	ldr	r3, [pc, #420]	; (800173c <MX_GPIO_Init+0x1e8>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b65      	ldr	r3, [pc, #404]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a64      	ldr	r2, [pc, #400]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b62      	ldr	r3, [pc, #392]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	4b5e      	ldr	r3, [pc, #376]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a5d      	ldr	r2, [pc, #372]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b5b      	ldr	r3, [pc, #364]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	4b57      	ldr	r3, [pc, #348]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a56      	ldr	r2, [pc, #344]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015e4:	f043 0310 	orr.w	r3, r3, #16
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b50      	ldr	r3, [pc, #320]	; (800173c <MX_GPIO_Init+0x1e8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a4f      	ldr	r2, [pc, #316]	; (800173c <MX_GPIO_Init+0x1e8>)
 8001600:	f043 0308 	orr.w	r3, r3, #8
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b4d      	ldr	r3, [pc, #308]	; (800173c <MX_GPIO_Init+0x1e8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WELD_START_GPIO_Port, WELD_START_Pin, GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	2101      	movs	r1, #1
 8001616:	484a      	ldr	r0, [pc, #296]	; (8001740 <MX_GPIO_Init+0x1ec>)
 8001618:	f002 ff1a 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_PU1_GPIO_Port, MOTOR_PU1_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2108      	movs	r1, #8
 8001620:	4848      	ldr	r0, [pc, #288]	; (8001744 <MX_GPIO_Init+0x1f0>)
 8001622:	f002 ff15 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_PU2_Pin|EEPROM_WC_Pin|EEPROM_SCL_Pin|EEPROM_SDA_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f240 3181 	movw	r1, #897	; 0x381
 800162c:	4846      	ldr	r0, [pc, #280]	; (8001748 <MX_GPIO_Init+0x1f4>)
 800162e:	f002 ff0f 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SHTC3_SDA_Pin|SHTC3_SCL_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001638:	4844      	ldr	r0, [pc, #272]	; (800174c <MX_GPIO_Init+0x1f8>)
 800163a:	f002 ff09 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR_EN2_Pin|MOTOR_DR2_Pin|MOTOR_EN1_Pin|MOTOR_DR1_Pin
 800163e:	2200      	movs	r2, #0
 8001640:	f649 6180 	movw	r1, #40576	; 0x9e80
 8001644:	4842      	ldr	r0, [pc, #264]	; (8001750 <MX_GPIO_Init+0x1fc>)
 8001646:	f002 ff03 	bl	8004450 <HAL_GPIO_WritePin>
                          |LASER_INTERLOCK_Pin|LINE_LASER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_NRST_GPIO_Port, ETH_NRST_Pin, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	2120      	movs	r1, #32
 800164e:	483e      	ldr	r0, [pc, #248]	; (8001748 <MX_GPIO_Init+0x1f4>)
 8001650:	f002 fefe 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WELD_START_Pin */
  GPIO_InitStruct.Pin = WELD_START_Pin;
 8001654:	2301      	movs	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001658:	2301      	movs	r3, #1
 800165a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WELD_START_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	4835      	ldr	r0, [pc, #212]	; (8001740 <MX_GPIO_Init+0x1ec>)
 800166c:	f002 fd2c 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_PU1_Pin */
  GPIO_InitStruct.Pin = MOTOR_PU1_Pin;
 8001670:	2308      	movs	r3, #8
 8001672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001674:	2301      	movs	r3, #1
 8001676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOTOR_PU1_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	482f      	ldr	r0, [pc, #188]	; (8001744 <MX_GPIO_Init+0x1f0>)
 8001688:	f002 fd1e 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_PU2_Pin ETH_NRST_Pin EEPROM_WC_Pin EEPROM_SCL_Pin
                           EEPROM_SDA_Pin */
  GPIO_InitStruct.Pin = MOTOR_PU2_Pin|ETH_NRST_Pin|EEPROM_WC_Pin|EEPROM_SCL_Pin
 800168c:	f240 33a1 	movw	r3, #929	; 0x3a1
 8001690:	61fb      	str	r3, [r7, #28]
                          |EEPROM_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	2301      	movs	r3, #1
 8001694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4828      	ldr	r0, [pc, #160]	; (8001748 <MX_GPIO_Init+0x1f4>)
 80016a6:	f002 fd0f 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHTC3_SDA_Pin SHTC3_SCL_Pin */
  GPIO_InitStruct.Pin = SHTC3_SDA_Pin|SHTC3_SCL_Pin;
 80016aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016bc:	f107 031c 	add.w	r3, r7, #28
 80016c0:	4619      	mov	r1, r3
 80016c2:	4822      	ldr	r0, [pc, #136]	; (800174c <MX_GPIO_Init+0x1f8>)
 80016c4:	f002 fd00 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIMIT_SW1_Pin LIMIT_SW2_Pin */
  GPIO_InitStruct.Pin = LIMIT_SW1_Pin|LIMIT_SW2_Pin;
 80016c8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	481b      	ldr	r0, [pc, #108]	; (800174c <MX_GPIO_Init+0x1f8>)
 80016de:	f002 fcf3 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_EN2_Pin MOTOR_DR2_Pin MOTOR_EN1_Pin MOTOR_DR1_Pin
                           LASER_INTERLOCK_Pin LINE_LASER_Pin */
  GPIO_InitStruct.Pin = MOTOR_EN2_Pin|MOTOR_DR2_Pin|MOTOR_EN1_Pin|MOTOR_DR1_Pin
 80016e2:	f649 6380 	movw	r3, #40576	; 0x9e80
 80016e6:	61fb      	str	r3, [r7, #28]
                          |LASER_INTERLOCK_Pin|LINE_LASER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	4619      	mov	r1, r3
 80016fa:	4815      	ldr	r0, [pc, #84]	; (8001750 <MX_GPIO_Init+0x1fc>)
 80016fc:	f002 fce4 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LASER_ERROR_Pin */
  GPIO_InitStruct.Pin = LASER_ERROR_Pin;
 8001700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001706:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800170a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LASER_ERROR_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	4619      	mov	r1, r3
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <MX_GPIO_Init+0x1fc>)
 8001718:	f002 fcd6 	bl	80040c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_ALM1_Pin MOTOR_ALM2_Pin */
  GPIO_InitStruct.Pin = MOTOR_ALM1_Pin|MOTOR_ALM2_Pin;
 800171c:	2303      	movs	r3, #3
 800171e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	4808      	ldr	r0, [pc, #32]	; (8001750 <MX_GPIO_Init+0x1fc>)
 8001730:	f002 fcca 	bl	80040c8 <HAL_GPIO_Init>

}
 8001734:	bf00      	nop
 8001736:	3730      	adds	r7, #48	; 0x30
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40020800 	.word	0x40020800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40021000 	.word	0x40021000
 8001750:	40020c00 	.word	0x40020c00

08001754 <StartLwipTask>:
  * Function: initialize LwIP protocol and connected to the laser
  *           IP address of board is set in MX_LWIP_INIT()
  */
/* USER CODE END Header_StartLwipTask */
void StartLwipTask(void *argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b09e      	sub	sp, #120	; 0x78
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800175c:	f005 fd6a 	bl	8007234 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  uint8_t msg_prio = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
  uint8_t cmd_len;
  uint8_t recv_data[DMA_RECV_LEN] = {0};
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	2260      	movs	r2, #96	; 0x60
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f019 fcc0 	bl	801b0f8 <memset>
  struct netconn *laser_conn;

  laser_conn = laser_tcp_init();
 8001778:	f017 ff52 	bl	8019620 <laser_tcp_init>
 800177c:	6778      	str	r0, [r7, #116]	; 0x74

  /* Infinite loop */
  for(;;)
  {
	  if(osOK == osMessageQueueGet((osMessageQueueId_t)LaserEthernetQueueHandle,
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <StartLwipTask+0x64>)
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	f107 0272 	add.w	r2, r7, #114	; 0x72
 8001786:	f107 010c 	add.w	r1, r7, #12
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	f006 ffd3 	bl	8008738 <osMessageQueueGet>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10b      	bne.n	80017b0 <StartLwipTask+0x5c>
				 				    (void *)recv_data,
								    (uint8_t *)&msg_prio,
								    (uint32_t)osWaitForever))
	  {
		  cmd_len = recv_data[2];
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		  laser_tcp_comm(recv_data, cmd_len, laser_conn);
 800179e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80017a2:	b299      	uxth	r1, r3
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80017aa:	4618      	mov	r0, r3
 80017ac:	f017 ff54 	bl	8019658 <laser_tcp_comm>
	  }

	  osDelay(100);
 80017b0:	2064      	movs	r0, #100	; 0x64
 80017b2:	f006 fbc0 	bl	8007f36 <osDelay>
	  if(osOK == osMessageQueueGet((osMessageQueueId_t)LaserEthernetQueueHandle,
 80017b6:	e7e2      	b.n	800177e <StartLwipTask+0x2a>
 80017b8:	2000a6e4 	.word	0x2000a6e4

080017bc <StartSampleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSampleTask */
void StartSampleTask(void *argument)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSampleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f006 fbb6 	bl	8007f36 <osDelay>
 80017ca:	e7fb      	b.n	80017c4 <StartSampleTask+0x8>

080017cc <StartCmdHandleTask>:
*
* Function: call command parsing program
*/
/* USER CODE END Header_StartCmdHandleTask */
void StartCmdHandleTask(void *argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09c      	sub	sp, #112	; 0x70
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCmdHandleTask */
	uint8_t msg_prio = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t recv_data[DMA_RECV_LEN] = {0};
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2260      	movs	r2, #96	; 0x60
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f019 fc86 	bl	801b0f8 <memset>
  /* Infinite loop */
  for (;;)
  {
	  if(osOK == osMessageQueueGet((osMessageQueueId_t)CmdhandleQueueHandle,
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <StartCmdHandleTask+0x54>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 80017f4:	f107 0108 	add.w	r1, r7, #8
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	f006 ff9c 	bl	8008738 <osMessageQueueGet>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d108      	bne.n	8001818 <StartCmdHandleTask+0x4c>
				 				    (void *)recv_data,
								    (uint8_t *)&msg_prio,
								    (uint32_t)osWaitForever))
	  {
		  Cmd_Handle(recv_data, recv_data[2]+3);
 8001806:	7abb      	ldrb	r3, [r7, #10]
 8001808:	3303      	adds	r3, #3
 800180a:	b2da      	uxtb	r2, r3
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	4611      	mov	r1, r2
 8001812:	4618      	mov	r0, r3
 8001814:	f017 fcaa 	bl	801916c <Cmd_Handle>
	  }
    osDelay(1);
 8001818:	2001      	movs	r0, #1
 800181a:	f006 fb8c 	bl	8007f36 <osDelay>
	  if(osOK == osMessageQueueGet((osMessageQueueId_t)CmdhandleQueueHandle,
 800181e:	e7e5      	b.n	80017ec <StartCmdHandleTask+0x20>
 8001820:	2000a6f4 	.word	0x2000a6f4

08001824 <StartProtectTask>:
*                      X motor error: B0000 0001
*                      Y motor error: B0000 0010
*/
/* USER CODE END Header_StartProtectTask */
void StartProtectTask(void *argument)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartProtectTask */
  /* Infinite loop */
	 for (;;)
	  {
		 //-- X stepmoter
		 if (HAL_GPIO_ReadPin(MOTOR_ALM1_GPIO_Port, MOTOR_ALM1_Pin) == GPIO_PIN_SET)
 800182c:	2101      	movs	r1, #1
 800182e:	4817      	ldr	r0, [pc, #92]	; (800188c <StartProtectTask+0x68>)
 8001830:	f002 fdf6 	bl	8004420 <HAL_GPIO_ReadPin>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <StartProtectTask+0x26>
			  warning[0] |= STEPMOTOR_X_WARNING_BIT;
 800183a:	4b15      	ldr	r3, [pc, #84]	; (8001890 <StartProtectTask+0x6c>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <StartProtectTask+0x6c>)
 8001846:	701a      	strb	r2, [r3, #0]
 8001848:	e006      	b.n	8001858 <StartProtectTask+0x34>
		 else
			  warning[0] &= ~STEPMOTOR_X_WARNING_BIT;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <StartProtectTask+0x6c>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <StartProtectTask+0x6c>)
 8001856:	701a      	strb	r2, [r3, #0]

		 //-- Y stepmotor
		  if (HAL_GPIO_ReadPin(MOTOR_ALM2_GPIO_Port, MOTOR_ALM2_Pin) == GPIO_PIN_SET)
 8001858:	2102      	movs	r1, #2
 800185a:	480c      	ldr	r0, [pc, #48]	; (800188c <StartProtectTask+0x68>)
 800185c:	f002 fde0 	bl	8004420 <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <StartProtectTask+0x52>
			  warning[0] |= STEPMOTOR_Y_WARNING_BIT;
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <StartProtectTask+0x6c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	f043 0302 	orr.w	r3, r3, #2
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <StartProtectTask+0x6c>)
 8001872:	701a      	strb	r2, [r3, #0]
 8001874:	e006      	b.n	8001884 <StartProtectTask+0x60>
		  else
			  warning[0] &= ~STEPMOTOR_Y_WARNING_BIT;
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <StartProtectTask+0x6c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	f023 0302 	bic.w	r3, r3, #2
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <StartProtectTask+0x6c>)
 8001882:	701a      	strb	r2, [r3, #0]

	      osDelay(100);
 8001884:	2064      	movs	r0, #100	; 0x64
 8001886:	f006 fb56 	bl	8007f36 <osDelay>
		 if (HAL_GPIO_ReadPin(MOTOR_ALM1_GPIO_Port, MOTOR_ALM1_Pin) == GPIO_PIN_SET)
 800188a:	e7cf      	b.n	800182c <StartProtectTask+0x8>
 800188c:	40020c00 	.word	0x40020c00
 8001890:	20000118 	.word	0x20000118

08001894 <StartMotorContorlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorContorlTask */
void StartMotorContorlTask(void *argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorContorlTask */
	typedef_stepmotor_para stepmotor_para = {0};
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
	uint8_t msg_prio = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
	  for (;;)
	  {
		  if (osOK == osMessageQueueGet((osMessageQueueId_t)MotorControlQueueHandle,
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <StartMotorContorlTask+0x6c>)
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f107 020f 	add.w	r2, r7, #15
 80018b2:	f107 0110 	add.w	r1, r7, #16
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	f006 ff3d 	bl	8008738 <osMessageQueueGet>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d117      	bne.n	80018f4 <StartMotorContorlTask+0x60>
									    (void *)&stepmotor_para,
									    (uint8_t *)&msg_prio,
									    (uint32_t)osWaitForever))
		  {
			  switch (stepmotor_para.stepmotor)
 80018c4:	7c3b      	ldrb	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <StartMotorContorlTask+0x3c>
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d009      	beq.n	80018e2 <StartMotorContorlTask+0x4e>
				  // TODO check warning bits of stepmotor
				  stepmotor_y_run(stepmotor_para.direction, stepmotor_para.degree);
				  break;

			  default:
				  break;
 80018ce:	e012      	b.n	80018f6 <StartMotorContorlTask+0x62>
				  stepmotor_x_run(stepmotor_para.direction, stepmotor_para.degree);
 80018d0:	7c7b      	ldrb	r3, [r7, #17]
 80018d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	4618      	mov	r0, r3
 80018dc:	f019 f8aa 	bl	801aa34 <stepmotor_x_run>
				  break;
 80018e0:	e009      	b.n	80018f6 <StartMotorContorlTask+0x62>
				  stepmotor_y_run(stepmotor_para.direction, stepmotor_para.degree);
 80018e2:	7c7b      	ldrb	r3, [r7, #17]
 80018e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ec:	4618      	mov	r0, r3
 80018ee:	f019 f8e9 	bl	801aac4 <stepmotor_y_run>
				  break;
 80018f2:	e000      	b.n	80018f6 <StartMotorContorlTask+0x62>
			  }
		  }
 80018f4:	bf00      	nop
		  osDelay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f006 fb1d 	bl	8007f36 <osDelay>
		  if (osOK == osMessageQueueGet((osMessageQueueId_t)MotorControlQueueHandle,
 80018fc:	e7d5      	b.n	80018aa <StartMotorContorlTask+0x16>
 80018fe:	bf00      	nop
 8001900:	2000a608 	.word	0x2000a608

08001904 <StartIPCUartTask>:
* Function: sort the command from the master.
*
*/
/* USER CODE END Header_StartIPCUartTask */
void StartIPCUartTask(void *argument)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b09e      	sub	sp, #120	; 0x78
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIPCUartTask */
	uint8_t msg_prio;
	uint8_t recv_data[DMA_RECV_LEN] = {0};
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	2260      	movs	r2, #96	; 0x60
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f019 fbed 	bl	801b0f8 <memset>
	osStatus_t status;

  /* Infinite loop */
  for (;;)
  {
	  status = osMessageQueueGet((osMessageQueueId_t)IPCUartQueueHandle,
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <StartIPCUartTask+0xb8>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	f107 0272 	add.w	r2, r7, #114	; 0x72
 8001926:	f107 010c 	add.w	r1, r7, #12
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	f006 ff03 	bl	8008738 <osMessageQueueGet>
 8001932:	6778      	str	r0, [r7, #116]	; 0x74
			  	  	  	  		 (void *)recv_data,
								 (uint8_t *)&msg_prio,
								 (uint32_t)osWaitForever);
	  if (status == osOK)
 8001934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001936:	2b00      	cmp	r3, #0
 8001938:	d13c      	bne.n	80019b4 <StartIPCUartTask+0xb0>
	  {
		  if (recv_data[0] == LASER_COMMEND_HEAD1 &&
 800193a:	7b3b      	ldrb	r3, [r7, #12]
 800193c:	2bab      	cmp	r3, #171	; 0xab
 800193e:	d10d      	bne.n	800195c <StartIPCUartTask+0x58>
			  recv_data[1] == LASER_COMMEND_HEAD2)  // of the laser commands
 8001940:	7b7b      	ldrb	r3, [r7, #13]
		  if (recv_data[0] == LASER_COMMEND_HEAD1 &&
 8001942:	2bcd      	cmp	r3, #205	; 0xcd
 8001944:	d10a      	bne.n	800195c <StartIPCUartTask+0x58>
		  {
			  osMessageQueuePut((osMessageQueueId_t)LaserEthernetQueueHandle,
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <StartIPCUartTask+0xbc>)
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 800194e:	f107 010c 	add.w	r1, r7, #12
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	f006 fe8f 	bl	8008678 <osMessageQueuePut>
 800195a:	e02b      	b.n	80019b4 <StartIPCUartTask+0xb0>
			  					(const void *)recv_data,
			  					(uint8_t)msg_prio,
			  					(uint32_t)osWaitForever);
		  }
		  else if (recv_data[0] == BOARD_COMMEND_HEAD1 &&
 800195c:	7b3b      	ldrb	r3, [r7, #12]
 800195e:	2bba      	cmp	r3, #186	; 0xba
 8001960:	d128      	bne.n	80019b4 <StartIPCUartTask+0xb0>
				   recv_data[1] == BOARD_COMMEND_HEAD2)  // of the board commands
 8001962:	7b7b      	ldrb	r3, [r7, #13]
		  else if (recv_data[0] == BOARD_COMMEND_HEAD1 &&
 8001964:	2bdc      	cmp	r3, #220	; 0xdc
 8001966:	d125      	bne.n	80019b4 <StartIPCUartTask+0xb0>
		  {
			  cmd_len = recv_data[2];
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			  if (recv_data[3] == BOARD_ADDRESS &&
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d11f      	bne.n	80019b4 <StartIPCUartTask+0xb0>
				  get_add(recv_data, cmd_len+2) == recv_data[cmd_len+2])
 8001974:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001978:	3302      	adds	r3, #2
 800197a:	b2da      	uxtb	r2, r3
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f017 fa0a 	bl	8018d9c <get_add>
 8001988:	4603      	mov	r3, r0
 800198a:	461a      	mov	r2, r3
 800198c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001990:	3302      	adds	r3, #2
 8001992:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001996:	440b      	add	r3, r1
 8001998:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
			  if (recv_data[3] == BOARD_ADDRESS &&
 800199c:	429a      	cmp	r2, r3
 800199e:	d109      	bne.n	80019b4 <StartIPCUartTask+0xb0>
			  {
				  osMessageQueuePut((osMessageQueueId_t)CmdhandleQueueHandle,
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <StartIPCUartTask+0xc0>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	f897 2072 	ldrb.w	r2, [r7, #114]	; 0x72
 80019a8:	f107 010c 	add.w	r1, r7, #12
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	f006 fe62 	bl	8008678 <osMessageQueuePut>
				  					(uint8_t)msg_prio,
				  					(uint32_t)osWaitForever);
			  }
		  }
	  }
    osDelay(1);
 80019b4:	2001      	movs	r0, #1
 80019b6:	f006 fabe 	bl	8007f36 <osDelay>
	  status = osMessageQueueGet((osMessageQueueId_t)IPCUartQueueHandle,
 80019ba:	e7b0      	b.n	800191e <StartIPCUartTask+0x1a>
 80019bc:	2000a6ec 	.word	0x2000a6ec
 80019c0:	2000a6e4 	.word	0x2000a6e4
 80019c4:	2000a6f4 	.word	0x2000a6f4

080019c8 <StartCCDUartTask>:
* Function: check the data header from CCD,
*           and call seam_find subprogram
*/
/* USER CODE END Header_StartCCDUartTask */
void StartCCDUartTask(void *argument)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	f5ad 5de7 	sub.w	sp, sp, #7392	; 0x1ce0
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	3b14      	subs	r3, #20
 80019d8:	6018      	str	r0, [r3, #0]
	uint16_t slot_location[3648]; // data of slot to be welding

  /* Infinite loop */
	for (;;)
	{
		status = osMessageQueueGet((osMessageQueueId_t)CCDUartQueueHandle,
 80019da:	4b52      	ldr	r3, [pc, #328]	; (8001b24 <StartCCDUartTask+0x15c>)
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 80019e2:	f102 020d 	add.w	r2, r2, #13
 80019e6:	f507 51e4 	add.w	r1, r7, #7296	; 0x1c80
 80019ea:	f101 0108 	add.w	r1, r1, #8
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	f006 fea1 	bl	8008738 <osMessageQueueGet>
 80019f6:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 80019fa:	f103 0310 	add.w	r3, r3, #16
 80019fe:	6018      	str	r0, [r3, #0]
	  	  	  	 	               (void *)recv_data,
				                   (uint8_t *)&msg_prio,
				                   (uint32_t)osWaitForever);
		if (status == osOK)
 8001a00:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a04:	f103 0310 	add.w	r3, r3, #16
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 8085 	bne.w	8001b1a <StartCCDUartTask+0x152>
		{
		  if (recv_data[0]==0x3c && recv_data[1]==0xc3 &&
 8001a10:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 8001a14:	f103 0308 	add.w	r3, r3, #8
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b3c      	cmp	r3, #60	; 0x3c
 8001a1c:	d17d      	bne.n	8001b1a <StartCCDUartTask+0x152>
 8001a1e:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 8001a22:	f103 0309 	add.w	r3, r3, #9
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2bc3      	cmp	r3, #195	; 0xc3
 8001a2a:	d176      	bne.n	8001b1a <StartCCDUartTask+0x152>
			  recv_data[2]==0x33 && recv_data[3]==0xcc)  // CCD header check
 8001a2c:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 8001a30:	f103 030a 	add.w	r3, r3, #10
 8001a34:	781b      	ldrb	r3, [r3, #0]
		  if (recv_data[0]==0x3c && recv_data[1]==0xc3 &&
 8001a36:	2b33      	cmp	r3, #51	; 0x33
 8001a38:	d16f      	bne.n	8001b1a <StartCCDUartTask+0x152>
			  recv_data[2]==0x33 && recv_data[3]==0xcc)  // CCD header check
 8001a3a:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 8001a3e:	f103 030b 	add.w	r3, r3, #11
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2bcc      	cmp	r3, #204	; 0xcc
 8001a46:	d168      	bne.n	8001b1a <StartCCDUartTask+0x152>
			{
				recv_len = osMessageQueueGetMsgSize(CCDUartQueueHandle);
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <StartCCDUartTask+0x15c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f006 fed1 	bl	80087f4 <osMessageQueueGetMsgSize>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a58:	f102 020e 	add.w	r2, r2, #14
 8001a5c:	8013      	strh	r3, [r2, #0]

				//-- pass through to the master computer
				IPC_UART_SendData(recv_data, recv_len);
 8001a5e:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a62:	f103 030e 	add.w	r3, r3, #14
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	f507 53e4 	add.w	r3, r7, #7296	; 0x1c80
 8001a6c:	f103 0308 	add.w	r3, r3, #8
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f017 fe54 	bl	8019720 <IPC_UART_SendData>

				//-- collect the data of slot.
				// each pixel contains 2 bytes, in which it used the lower 4 bits
				//   in the first byte and all 8 bits in the second byte.
				for (i=4; i<recv_len-2; i+=2)
 8001a78:	2304      	movs	r3, #4
 8001a7a:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a7e:	f102 0216 	add.w	r2, r2, #22
 8001a82:	8013      	strh	r3, [r2, #0]
 8001a84:	e036      	b.n	8001af4 <StartCCDUartTask+0x12c>
				{
					slot_location[i/2-2] = (recv_data[i]<<4) | recv_data[i+1];
 8001a86:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001a8a:	f103 0316 	add.w	r3, r3, #22
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001a94:	f102 0218 	add.w	r2, r2, #24
 8001a98:	4413      	add	r3, r2
 8001a9a:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001aa6:	f103 0316 	add.w	r3, r3, #22
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	f507 51e7 	add.w	r1, r7, #7392	; 0x1ce0
 8001ab2:	f101 0118 	add.w	r1, r1, #24
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	b219      	sxth	r1, r3
 8001ac2:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001ac6:	f103 0316 	add.w	r3, r3, #22
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	085b      	lsrs	r3, r3, #1
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	1e9a      	subs	r2, r3, #2
 8001ad2:	b289      	uxth	r1, r1
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	3b10      	subs	r3, #16
 8001ada:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for (i=4; i<recv_len-2; i+=2)
 8001ade:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001ae2:	f103 0316 	add.w	r3, r3, #22
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	3302      	adds	r3, #2
 8001aea:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001aee:	f102 0216 	add.w	r2, r2, #22
 8001af2:	8013      	strh	r3, [r2, #0]
 8001af4:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001af8:	f103 0316 	add.w	r3, r3, #22
 8001afc:	881a      	ldrh	r2, [r3, #0]
 8001afe:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 8001b02:	f103 030e 	add.w	r3, r3, #14
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	3b02      	subs	r3, #2
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	dbbb      	blt.n	8001a86 <StartCCDUartTask+0xbe>
				}
				//-- find the slot by the Gaussian fitting
				find_seam(slot_location);
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	3b10      	subs	r3, #16
 8001b14:	4618      	mov	r0, r3
 8001b16:	f018 feff 	bl	801a918 <find_seam>
			}
		}

	  osDelay(100);
 8001b1a:	2064      	movs	r0, #100	; 0x64
 8001b1c:	f006 fa0b 	bl	8007f36 <osDelay>
		status = osMessageQueueGet((osMessageQueueId_t)CCDUartQueueHandle,
 8001b20:	e75b      	b.n	80019da <StartCCDUartTask+0x12>
 8001b22:	bf00      	nop
 8001b24:	2000a5fc 	.word	0x2000a5fc

08001b28 <TimeCountCallback>:
  /* USER CODE END StartCCDUartTask */
}

/* TimeCountCallback function */
void TimeCountCallback(void *argument)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TimeCountCallback */
	//-- get current time and data from system clock.
	HAL_RTC_GetTime(&hrtc, &TimeNow, RTC_FORMAT_BIN);
 8001b30:	2200      	movs	r2, #0
 8001b32:	4906      	ldr	r1, [pc, #24]	; (8001b4c <TimeCountCallback+0x24>)
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <TimeCountCallback+0x28>)
 8001b36:	f003 fc9f 	bl	8005478 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &DateNow, RTC_FORMAT_BIN);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4905      	ldr	r1, [pc, #20]	; (8001b54 <TimeCountCallback+0x2c>)
 8001b3e:	4804      	ldr	r0, [pc, #16]	; (8001b50 <TimeCountCallback+0x28>)
 8001b40:	f003 fd9f 	bl	8005682 <HAL_RTC_GetDate>

  /* USER CODE END TimeCountCallback */
}
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000a5e4 	.word	0x2000a5e4
 8001b50:	2000a670 	.word	0x2000a670
 8001b54:	2000a6dc 	.word	0x2000a6dc

08001b58 <CheckCCDCallback>:

/* CheckCCDCallback function */
void CheckCCDCallback(void *argument)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  //-- read data from CCD, the command to ask CCD data is
  //   @c0080#@ in ASCII code, defined by the TCD 1304CCD driver.

  uint8_t check_ccd_cmd[8];

  check_ccd_cmd[0] = 0x40;
 8001b60:	2340      	movs	r3, #64	; 0x40
 8001b62:	723b      	strb	r3, [r7, #8]
  check_ccd_cmd[1] = 0x63;
 8001b64:	2363      	movs	r3, #99	; 0x63
 8001b66:	727b      	strb	r3, [r7, #9]
  check_ccd_cmd[2] = 0x30;
 8001b68:	2330      	movs	r3, #48	; 0x30
 8001b6a:	72bb      	strb	r3, [r7, #10]
  check_ccd_cmd[3] = 0x30;
 8001b6c:	2330      	movs	r3, #48	; 0x30
 8001b6e:	72fb      	strb	r3, [r7, #11]
  check_ccd_cmd[4] = 0x38;
 8001b70:	2338      	movs	r3, #56	; 0x38
 8001b72:	733b      	strb	r3, [r7, #12]
  check_ccd_cmd[5] = 0x23;
 8001b74:	2323      	movs	r3, #35	; 0x23
 8001b76:	737b      	strb	r3, [r7, #13]
  check_ccd_cmd[6] = 0x30;
 8001b78:	2330      	movs	r3, #48	; 0x30
 8001b7a:	73bb      	strb	r3, [r7, #14]
  check_ccd_cmd[7] = 0x40;
 8001b7c:	2340      	movs	r3, #64	; 0x40
 8001b7e:	73fb      	strb	r3, [r7, #15]

  CCD_UART_SendData(check_ccd_cmd, sizeof(check_ccd_cmd));
 8001b80:	f107 0308 	add.w	r3, r7, #8
 8001b84:	2108      	movs	r1, #8
 8001b86:	4618      	mov	r0, r3
 8001b88:	f017 fdaa 	bl	80196e0 <CCD_UART_SendData>
  /* USER CODE END CheckCCDCallback */
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ba6:	f000 fbc1 	bl	800232c <HAL_IncTick>
  else if (htim->Instance == TIM7)
  {
    // TODO LED lights periodically
  }
  /* USER CODE END Callback 1 */
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40001000 	.word	0x40001000

08001bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i
}
 8001bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <Error_Handler+0x8>
	...

08001bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_MspInit+0x54>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <HAL_MspInit+0x54>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_MspInit+0x54>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_MspInit+0x54>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_MspInit+0x54>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_MspInit+0x54>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	210f      	movs	r1, #15
 8001c06:	f06f 0001 	mvn.w	r0, #1
 8001c0a:	f000 fc8b 	bl	8002524 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08e      	sub	sp, #56	; 0x38
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c24:	f107 0308 	add.w	r3, r7, #8
 8001c28:	2230      	movs	r2, #48	; 0x30
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f019 fa63 	bl	801b0f8 <memset>
  if(hrtc->Instance==RTC)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_RTC_MspInit+0x4c>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d111      	bne.n	8001c60 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c44:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 f908 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c56:	f7ff ffaf 	bl	8001bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <HAL_RTC_MspInit+0x50>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c60:	bf00      	nop
 8001c62:	3738      	adds	r7, #56	; 0x38
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40002800 	.word	0x40002800
 8001c6c:	42470e3c 	.word	0x42470e3c

08001c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <HAL_TIM_Base_MspInit+0x3c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10d      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_TIM_Base_MspInit+0x40>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_TIM_Base_MspInit+0x40>)
 8001c8c:	f043 0320 	orr.w	r3, r3, #32
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_TIM_Base_MspInit+0x40>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40001400 	.word	0x40001400
 8001cb0:	40023800 	.word	0x40023800

08001cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a60      	ldr	r2, [pc, #384]	; (8001e54 <HAL_UART_MspInit+0x1a0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d15a      	bne.n	8001d8c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	4b5f      	ldr	r3, [pc, #380]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	4a5e      	ldr	r2, [pc, #376]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce6:	4b5c      	ldr	r3, [pc, #368]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a57      	ldr	r2, [pc, #348]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001cfc:	f043 0310 	orr.w	r3, r3, #16
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b55      	ldr	r3, [pc, #340]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = IPC_RS232_RX_Pin|IPC_RS232_TX_Pin;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001d1e:	2308      	movs	r3, #8
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	484c      	ldr	r0, [pc, #304]	; (8001e5c <HAL_UART_MspInit+0x1a8>)
 8001d2a:	f002 f9cd 	bl	80040c8 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d30:	4a4c      	ldr	r2, [pc, #304]	; (8001e64 <HAL_UART_MspInit+0x1b0>)
 8001d32:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8001d34:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d36:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001d3a:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d3c:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d42:	4b47      	ldr	r3, [pc, #284]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d48:	4b45      	ldr	r3, [pc, #276]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d4e:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d56:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001d5c:	4b40      	ldr	r3, [pc, #256]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d62:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d68:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001d6e:	483c      	ldr	r0, [pc, #240]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d70:	f000 fc02 	bl	8002578 <HAL_DMA_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001d7a:	f7ff ff1d 	bl	8001bb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a37      	ldr	r2, [pc, #220]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
 8001d84:	4a36      	ldr	r2, [pc, #216]	; (8001e60 <HAL_UART_MspInit+0x1ac>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d8a:	e05f      	b.n	8001e4c <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a35      	ldr	r2, [pc, #212]	; (8001e68 <HAL_UART_MspInit+0x1b4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d15a      	bne.n	8001e4c <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_UART_MspInit+0x1a4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CCD_TX_Pin|CCD_RX_Pin;
 8001dce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001de0:	2307      	movs	r3, #7
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	4820      	ldr	r0, [pc, #128]	; (8001e6c <HAL_UART_MspInit+0x1b8>)
 8001dec:	f002 f96c 	bl	80040c8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001df2:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_UART_MspInit+0x1c0>)
 8001df4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001df8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dfc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e10:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e24:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001e30:	480f      	ldr	r0, [pc, #60]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e32:	f000 fba1 	bl	8002578 <HAL_DMA_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001e3c:	f7ff febc 	bl	8001bb8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <HAL_UART_MspInit+0x1bc>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e4c:	bf00      	nop
 8001e4e:	3730      	adds	r7, #48	; 0x30
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40007c00 	.word	0x40007c00
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	2000a60c 	.word	0x2000a60c
 8001e64:	400260a0 	.word	0x400260a0
 8001e68:	40004800 	.word	0x40004800
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	2000a538 	.word	0x2000a538
 8001e74:	40026028 	.word	0x40026028

08001e78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	2036      	movs	r0, #54	; 0x36
 8001e8e:	f000 fb49 	bl	8002524 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e92:	2036      	movs	r0, #54	; 0x36
 8001e94:	f000 fb62 	bl	800255c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <HAL_InitTick+0xa4>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_InitTick+0xa4>)
 8001ea2:	f043 0310 	orr.w	r3, r3, #16
 8001ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_InitTick+0xa4>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f003 0310 	and.w	r3, r3, #16
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb4:	f107 0210 	add.w	r2, r7, #16
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 ff9c 	bl	8004dfc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001ec4:	f002 ff72 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed0:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <HAL_InitTick+0xa8>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	0c9b      	lsrs	r3, r3, #18
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_InitTick+0xac>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_InitTick+0xb0>)
 8001ee0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <HAL_InitTick+0xac>)
 8001ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001eea:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <HAL_InitTick+0xac>)
 8001eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_InitTick+0xac>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_InitTick+0xac>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001efc:	4809      	ldr	r0, [pc, #36]	; (8001f24 <HAL_InitTick+0xac>)
 8001efe:	f003 fc9f 	bl	8005840 <HAL_TIM_Base_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d104      	bne.n	8001f12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001f08:	4806      	ldr	r0, [pc, #24]	; (8001f24 <HAL_InitTick+0xac>)
 8001f0a:	f003 fce9 	bl	80058e0 <HAL_TIM_Base_Start_IT>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	e000      	b.n	8001f14 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3730      	adds	r7, #48	; 0x30
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	431bde83 	.word	0x431bde83
 8001f24:	2000a74c 	.word	0x2000a74c
 8001f28:	40001000 	.word	0x40001000

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <NMI_Handler+0x4>

08001f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <MemManage_Handler+0x4>

08001f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <DMA1_Stream1_IRQHandler+0x10>)
 8001f5e:	f000 fca3 	bl	80028a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000a538 	.word	0x2000a538

08001f6c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <DMA1_Stream6_IRQHandler+0x10>)
 8001f72:	f000 fc99 	bl	80028a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000a60c 	.word	0x2000a60c

08001f80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
    uint32_t tmp_flag = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
	uint8_t msg_prio = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	72fb      	strb	r3, [r7, #11]

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f8e:	481a      	ldr	r0, [pc, #104]	; (8001ff8 <USART3_IRQHandler+0x78>)
 8001f90:	f004 f904 	bl	800619c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	if (USART3 == CCD_UART.Instance)
 8001f94:	4b18      	ldr	r3, [pc, #96]	; (8001ff8 <USART3_IRQHandler+0x78>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <USART3_IRQHandler+0x7c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d128      	bne.n	8001ff0 <USART3_IRQHandler+0x70>
	{
		tmp_flag =__HAL_UART_GET_FLAG(&CCD_UART, UART_FLAG_IDLE);
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <USART3_IRQHandler+0x78>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	60fb      	str	r3, [r7, #12]
		if (tmp_flag != RESET)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d01a      	beq.n	8001ff0 <USART3_IRQHandler+0x70>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&CCD_UART);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <USART3_IRQHandler+0x78>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <USART3_IRQHandler+0x78>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
			HAL_UART_DMAStop(&CCD_UART);
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <USART3_IRQHandler+0x78>)
 8001fd2:	f004 f864 	bl	800609e <HAL_UART_DMAStop>

			HAL_UART_Receive_DMA(&CCD_UART, CCD_rx_buffer, sizeof(CCD_rx_buffer));
 8001fd6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001fda:	4909      	ldr	r1, [pc, #36]	; (8002000 <USART3_IRQHandler+0x80>)
 8001fdc:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <USART3_IRQHandler+0x78>)
 8001fde:	f004 f82e 	bl	800603e <HAL_UART_Receive_DMA>
			osMessageQueuePut((osMessageQueueId_t)CCDUartQueueHandle,
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <USART3_IRQHandler+0x84>)
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	7afa      	ldrb	r2, [r7, #11]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	4905      	ldr	r1, [pc, #20]	; (8002000 <USART3_IRQHandler+0x80>)
 8001fec:	f006 fb44 	bl	8008678 <osMessageQueuePut>
							  (uint8_t)msg_prio,
							  (uint32_t)0);
		}
	}
  /* USER CODE END USART3_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000a598 	.word	0x2000a598
 8001ffc:	40004800 	.word	0x40004800
 8002000:	200085d8 	.word	0x200085d8
 8002004:	2000a5fc 	.word	0x2000a5fc

08002008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_SW2_Pin);
 800200c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002010:	f002 fa38 	bl	8004484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <TIM6_DAC_IRQHandler+0x10>)
 800201e:	f003 fccf 	bl	80059c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000a74c 	.word	0x2000a74c

0800202c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <TIM7_IRQHandler+0x10>)
 8002032:	f003 fcc5 	bl	80059c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000a6f8 	.word	0x2000a6f8

08002040 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <ETH_IRQHandler+0x10>)
 8002046:	f001 fa7d 	bl	8003544 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000c0e0 	.word	0x2000c0e0

08002054 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */
    uint32_t tmp_flag = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
	uint8_t msg_prio = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	72fb      	strb	r3, [r7, #11]

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002062:	481a      	ldr	r0, [pc, #104]	; (80020cc <UART8_IRQHandler+0x78>)
 8002064:	f004 f89a 	bl	800619c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */
	if(UART8 == IPC_UART.Instance)
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <UART8_IRQHandler+0x78>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <UART8_IRQHandler+0x7c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d127      	bne.n	80020c2 <UART8_IRQHandler+0x6e>
	{
		tmp_flag =__HAL_UART_GET_FLAG(&IPC_UART, UART_FLAG_IDLE);
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <UART8_IRQHandler+0x78>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b10      	cmp	r3, #16
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	60fb      	str	r3, [r7, #12]
		if(tmp_flag != RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d019      	beq.n	80020c2 <UART8_IRQHandler+0x6e>
		{
			__HAL_UART_CLEAR_IDLEFLAG(&IPC_UART);
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <UART8_IRQHandler+0x78>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <UART8_IRQHandler+0x78>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	607b      	str	r3, [r7, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
			HAL_UART_DMAStop(&IPC_UART);
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <UART8_IRQHandler+0x78>)
 80020a6:	f003 fffa 	bl	800609e <HAL_UART_DMAStop>

			HAL_UART_Receive_DMA(&IPC_UART, IPC_rx_buffer, sizeof(IPC_rx_buffer));
 80020aa:	2264      	movs	r2, #100	; 0x64
 80020ac:	4909      	ldr	r1, [pc, #36]	; (80020d4 <UART8_IRQHandler+0x80>)
 80020ae:	4807      	ldr	r0, [pc, #28]	; (80020cc <UART8_IRQHandler+0x78>)
 80020b0:	f003 ffc5 	bl	800603e <HAL_UART_Receive_DMA>
			osMessageQueuePut((osMessageQueueId_t)IPCUartQueueHandle,
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <UART8_IRQHandler+0x84>)
 80020b6:	6818      	ldr	r0, [r3, #0]
 80020b8:	7afa      	ldrb	r2, [r7, #11]
 80020ba:	2300      	movs	r3, #0
 80020bc:	4905      	ldr	r1, [pc, #20]	; (80020d4 <UART8_IRQHandler+0x80>)
 80020be:	f006 fadb 	bl	8008678 <osMessageQueuePut>
							  (uint8_t)msg_prio,
							  (uint32_t)0);
		}
	}
  /* USER CODE END UART8_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000a698 	.word	0x2000a698
 80020d0:	40007c00 	.word	0x40007c00
 80020d4:	200000b0 	.word	0x200000b0
 80020d8:	2000a6ec 	.word	0x2000a6ec

080020dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
	return 1;
 80020e0:	2301      	movs	r3, #1
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_kill>:

int _kill(int pid, int sig)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <_kill+0x20>)
 80020f8:	2216      	movs	r2, #22
 80020fa:	601a      	str	r2, [r3, #0]
	return -1;
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	2001106c 	.word	0x2001106c

08002110 <_exit>:

void _exit (int status)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff ffe5 	bl	80020ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8002122:	e7fe      	b.n	8002122 <_exit+0x12>

08002124 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e00a      	b.n	800214c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002136:	f3af 8000 	nop.w
 800213a:	4601      	mov	r1, r0
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	60ba      	str	r2, [r7, #8]
 8002142:	b2ca      	uxtb	r2, r1
 8002144:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3301      	adds	r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	dbf0      	blt.n	8002136 <_read+0x12>
	}

return len;
 8002154:	687b      	ldr	r3, [r7, #4]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	60f8      	str	r0, [r7, #12]
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	e009      	b.n	8002184 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	60ba      	str	r2, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	3301      	adds	r3, #1
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	dbf1      	blt.n	8002170 <_write+0x12>
	}
	return len;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <_close>:

int _close(int file)
{
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
	return -1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021be:	605a      	str	r2, [r3, #4]
	return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_isatty>:

int _isatty(int file)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
	return 1;
 80021d6:	2301      	movs	r3, #1
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
	return 0;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <_sbrk+0x5c>)
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <_sbrk+0x60>)
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002214:	4b13      	ldr	r3, [pc, #76]	; (8002264 <_sbrk+0x64>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_sbrk+0x64>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <_sbrk+0x68>)
 8002220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	429a      	cmp	r2, r3
 800222e:	d205      	bcs.n	800223c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <_sbrk+0x6c>)
 8002232:	220c      	movs	r2, #12
 8002234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002236:	f04f 33ff 	mov.w	r3, #4294967295
 800223a:	e009      	b.n	8002250 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	4a06      	ldr	r2, [pc, #24]	; (8002264 <_sbrk+0x64>)
 800224c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800224e:	68fb      	ldr	r3, [r7, #12]
}
 8002250:	4618      	mov	r0, r3
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	20030000 	.word	0x20030000
 8002260:	00000400 	.word	0x00000400
 8002264:	2000011c 	.word	0x2000011c
 8002268:	20011080 	.word	0x20011080
 800226c:	2001106c 	.word	0x2001106c

08002270 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <SystemInit+0x20>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	4a05      	ldr	r2, [pc, #20]	; (8002290 <SystemInit+0x20>)
 800227c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800229a:	490e      	ldr	r1, [pc, #56]	; (80022d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a0:	e002      	b.n	80022a8 <LoopCopyDataInit>

080022a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a6:	3304      	adds	r3, #4

080022a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ac:	d3f9      	bcc.n	80022a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b0:	4c0b      	ldr	r4, [pc, #44]	; (80022e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b4:	e001      	b.n	80022ba <LoopFillZerobss>

080022b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b8:	3204      	adds	r2, #4

080022ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022bc:	d3fb      	bcc.n	80022b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022be:	f7ff ffd7 	bl	8002270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c2:	f018 fec5 	bl	801b050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c6:	f7fe fe2d 	bl	8000f24 <main>
  bx  lr    
 80022ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80022d8:	0801ff98 	.word	0x0801ff98
  ldr r2, =_sbss
 80022dc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80022e0:	20011080 	.word	0x20011080

080022e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e4:	e7fe      	b.n	80022e4 <ADC_IRQHandler>
	...

080022e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <HAL_Init+0x40>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <HAL_Init+0x40>)
 80022f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_Init+0x40>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_Init+0x40>)
 80022fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <HAL_Init+0x40>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <HAL_Init+0x40>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002310:	2003      	movs	r0, #3
 8002312:	f000 f8fc 	bl	800250e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002316:	200f      	movs	r0, #15
 8002318:	f7ff fdae 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800231c:	f7ff fc52 	bl	8001bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023c00 	.word	0x40023c00

0800232c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_IncTick+0x20>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x24>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_IncTick+0x24>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000008 	.word	0x20000008
 8002350:	2000a794 	.word	0x2000a794

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_GetTick+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	2000a794 	.word	0x2000a794

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff ffee 	bl	8002354 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_Delay+0x44>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffde 	bl	8002354 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000008 	.word	0x20000008

080023b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4907      	ldr	r1, [pc, #28]	; (8002450 <__NVIC_EnableIRQ+0x38>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	; (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	; (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff4c 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002536:	f7ff ff61 	bl	80023fc <__NVIC_GetPriorityGrouping>
 800253a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	6978      	ldr	r0, [r7, #20]
 8002542:	f7ff ffb1 	bl	80024a8 <NVIC_EncodePriority>
 8002546:	4602      	mov	r2, r0
 8002548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff80 	bl	8002454 <__NVIC_SetPriority>
}
 8002554:	bf00      	nop
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff54 	bl	8002418 <__NVIC_EnableIRQ>
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff fee6 	bl	8002354 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e099      	b.n	80026c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b4:	e00f      	b.n	80025d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b6:	f7ff fecd 	bl	8002354 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d908      	bls.n	80025d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2203      	movs	r2, #3
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e078      	b.n	80026c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e8      	bne.n	80025b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4b38      	ldr	r3, [pc, #224]	; (80026d0 <HAL_DMA_Init+0x158>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	2b04      	cmp	r3, #4
 800262e:	d107      	bne.n	8002640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	4313      	orrs	r3, r2
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f023 0307 	bic.w	r3, r3, #7
 8002656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2b04      	cmp	r3, #4
 8002668:	d117      	bne.n	800269a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fb01 	bl	8002c84 <DMA_CheckFifoParam>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2240      	movs	r2, #64	; 0x40
 800268c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002696:	2301      	movs	r3, #1
 8002698:	e016      	b.n	80026c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fab8 	bl	8002c18 <DMA_CalcBaseAndBitshift>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	223f      	movs	r2, #63	; 0x3f
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	f010803f 	.word	0xf010803f

080026d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_DMA_Start_IT+0x26>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e040      	b.n	800277c <HAL_DMA_Start_IT+0xa8>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d12f      	bne.n	800276e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fa4a 	bl	8002bbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	223f      	movs	r2, #63	; 0x3f
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0216 	orr.w	r2, r2, #22
 8002742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0208 	orr.w	r2, r2, #8
 800275a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e005      	b.n	800277a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800277a:	7dfb      	ldrb	r3, [r7, #23]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002792:	f7ff fddf 	bl	8002354 <HAL_GetTick>
 8002796:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d008      	beq.n	80027b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e052      	b.n	800285c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0216 	bic.w	r2, r2, #22
 80027c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_DMA_Abort+0x62>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0208 	bic.w	r2, r2, #8
 80027f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002806:	e013      	b.n	8002830 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002808:	f7ff fda4 	bl	8002354 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b05      	cmp	r3, #5
 8002814:	d90c      	bls.n	8002830 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2203      	movs	r2, #3
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e015      	b.n	800285c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e4      	bne.n	8002808 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	223f      	movs	r2, #63	; 0x3f
 8002844:	409a      	lsls	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e00c      	b.n	800289c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2205      	movs	r2, #5
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028b4:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_DMA_IRQHandler+0x258>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a92      	ldr	r2, [pc, #584]	; (8002b04 <HAL_DMA_IRQHandler+0x25c>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2208      	movs	r2, #8
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01a      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2208      	movs	r2, #8
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2201      	movs	r2, #1
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2201      	movs	r2, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d012      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	2204      	movs	r2, #4
 800296e:	409a      	lsls	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2210      	movs	r2, #16
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d043      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03c      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	2210      	movs	r2, #16
 80029a4:	409a      	lsls	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d024      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e01f      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e016      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0208 	bic.w	r2, r2, #8
 8002a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 808e 	beq.w	8002b46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8086 	beq.w	8002b46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2220      	movs	r2, #32
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d136      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0216 	bic.w	r2, r2, #22
 8002a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x1da>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0208 	bic.w	r2, r2, #8
 8002a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	223f      	movs	r2, #63	; 0x3f
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d07d      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
        }
        return;
 8002abe:	e078      	b.n	8002bb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01c      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d030      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e02b      	b.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d027      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
 8002afe:	e022      	b.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
 8002b00:	20000000 	.word	0x20000000
 8002b04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0210 	bic.w	r2, r2, #16
 8002b24:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d032      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d022      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3301      	adds	r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d307      	bcc.n	8002b8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f2      	bne.n	8002b72 <HAL_DMA_IRQHandler+0x2ca>
 8002b8c:	e000      	b.n	8002b90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b8e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
 8002bb0:	e000      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bb2:	bf00      	nop
    }
  }
}
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop

08002bbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d108      	bne.n	8002bfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bfa:	e007      	b.n	8002c0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	60da      	str	r2, [r3, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	3b10      	subs	r3, #16
 8002c28:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <DMA_CalcBaseAndBitshift+0x64>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c32:	4a13      	ldr	r2, [pc, #76]	; (8002c80 <DMA_CalcBaseAndBitshift+0x68>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4413      	add	r3, r2
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d909      	bls.n	8002c5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	1d1a      	adds	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
 8002c58:	e007      	b.n	8002c6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	aaaaaaab 	.word	0xaaaaaaab
 8002c80:	0801fcd8 	.word	0x0801fcd8

08002c84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11f      	bne.n	8002cde <DMA_CheckFifoParam+0x5a>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d856      	bhi.n	8002d52 <DMA_CheckFifoParam+0xce>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <DMA_CheckFifoParam+0x28>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002ccf 	.word	0x08002ccf
 8002cb4:	08002cbd 	.word	0x08002cbd
 8002cb8:	08002d53 	.word	0x08002d53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d046      	beq.n	8002d56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ccc:	e043      	b.n	8002d56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd6:	d140      	bne.n	8002d5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cdc:	e03d      	b.n	8002d5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ce6:	d121      	bne.n	8002d2c <DMA_CheckFifoParam+0xa8>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d837      	bhi.n	8002d5e <DMA_CheckFifoParam+0xda>
 8002cee:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <DMA_CheckFifoParam+0x70>)
 8002cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d0b 	.word	0x08002d0b
 8002cfc:	08002d05 	.word	0x08002d05
 8002d00:	08002d1d 	.word	0x08002d1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e030      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d025      	beq.n	8002d62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1a:	e022      	b.n	8002d62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d24:	d11f      	bne.n	8002d66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d2a:	e01c      	b.n	8002d66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d903      	bls.n	8002d3a <DMA_CheckFifoParam+0xb6>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d003      	beq.n	8002d40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d38:	e018      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3e:	e015      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00e      	beq.n	8002d6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d50:	e00b      	b.n	8002d6a <DMA_CheckFifoParam+0xe6>
      break;
 8002d52:	bf00      	nop
 8002d54:	e00a      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e008      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e006      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e004      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
 8002d64:	e002      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <DMA_CheckFifoParam+0xe8>
      break;
 8002d6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop

08002d7c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002d8c:	4baa      	ldr	r3, [pc, #680]	; (8003038 <HAL_ETH_Init+0x2bc>)
 8002d8e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e183      	b.n	80030aa <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f004 fb9e 	bl	80074f8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	4b9e      	ldr	r3, [pc, #632]	; (800303c <HAL_ETH_Init+0x2c0>)
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc4:	4a9d      	ldr	r2, [pc, #628]	; (800303c <HAL_ETH_Init+0x2c0>)
 8002dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dca:	6453      	str	r3, [r2, #68]	; 0x44
 8002dcc:	4b9b      	ldr	r3, [pc, #620]	; (800303c <HAL_ETH_Init+0x2c0>)
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002dd8:	4b99      	ldr	r3, [pc, #612]	; (8003040 <HAL_ETH_Init+0x2c4>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a98      	ldr	r2, [pc, #608]	; (8003040 <HAL_ETH_Init+0x2c4>)
 8002dde:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002de2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002de4:	4b96      	ldr	r3, [pc, #600]	; (8003040 <HAL_ETH_Init+0x2c4>)
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	4994      	ldr	r1, [pc, #592]	; (8003040 <HAL_ETH_Init+0x2c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e08:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e0a:	f7ff faa3 	bl	8002354 <HAL_GetTick>
 8002e0e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002e10:	e011      	b.n	8002e36 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002e12:	f7ff fa9f 	bl	8002354 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e20:	d909      	bls.n	8002e36 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2203      	movs	r2, #3
 8002e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e139      	b.n	80030aa <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e4      	bne.n	8002e12 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f023 031c 	bic.w	r3, r3, #28
 8002e56:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002e58:	f001 ff9c 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8002e5c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	4a78      	ldr	r2, [pc, #480]	; (8003044 <HAL_ETH_Init+0x2c8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d908      	bls.n	8002e78 <HAL_ETH_Init+0xfc>
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4a77      	ldr	r2, [pc, #476]	; (8003048 <HAL_ETH_Init+0x2cc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d804      	bhi.n	8002e78 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	e027      	b.n	8002ec8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	4a73      	ldr	r2, [pc, #460]	; (8003048 <HAL_ETH_Init+0x2cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d908      	bls.n	8002e92 <HAL_ETH_Init+0x116>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4a6d      	ldr	r2, [pc, #436]	; (8003038 <HAL_ETH_Init+0x2bc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d204      	bcs.n	8002e92 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f043 030c 	orr.w	r3, r3, #12
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	e01a      	b.n	8002ec8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4a68      	ldr	r2, [pc, #416]	; (8003038 <HAL_ETH_Init+0x2bc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d303      	bcc.n	8002ea2 <HAL_ETH_Init+0x126>
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	4a6b      	ldr	r2, [pc, #428]	; (800304c <HAL_ETH_Init+0x2d0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d911      	bls.n	8002ec6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4a69      	ldr	r2, [pc, #420]	; (800304c <HAL_ETH_Init+0x2d0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d908      	bls.n	8002ebc <HAL_ETH_Init+0x140>
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4a68      	ldr	r2, [pc, #416]	; (8003050 <HAL_ETH_Init+0x2d4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d804      	bhi.n	8002ebc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	e005      	b.n	8002ec8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f043 0310 	orr.w	r3, r3, #16
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	e000      	b.n	8002ec8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002ec6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002ed0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fc17 	bl	800370a <HAL_ETH_WritePHYRegister>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002ee6:	6939      	ldr	r1, [r7, #16]
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fdcd 	bl	8003a88 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0d7      	b.n	80030aa <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002efa:	20ff      	movs	r0, #255	; 0xff
 8002efc:	f7ff fa36 	bl	800236c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a5 	beq.w	8003054 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f0a:	f7ff fa23 	bl	8002354 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002f10:	f107 030c 	add.w	r3, r7, #12
 8002f14:	461a      	mov	r2, r3
 8002f16:	2101      	movs	r1, #1
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fb8e 	bl	800363a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002f1e:	f7ff fa19 	bl	8002354 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d90f      	bls.n	8002f50 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002f34:	6939      	ldr	r1, [r7, #16]
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fda6 	bl	8003a88 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0ac      	b.n	80030aa <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0da      	beq.n	8002f10 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002f5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f5e:	2100      	movs	r1, #0
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fbd2 	bl	800370a <HAL_ETH_WritePHYRegister>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002f70:	6939      	ldr	r1, [r7, #16]
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fd88 	bl	8003a88 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002f80:	2301      	movs	r3, #1
 8002f82:	e092      	b.n	80030aa <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f84:	f7ff f9e6 	bl	8002354 <HAL_GetTick>
 8002f88:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002f8a:	f107 030c 	add.w	r3, r7, #12
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2101      	movs	r1, #1
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fb51 	bl	800363a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002f98:	f7ff f9dc 	bl	8002354 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d90f      	bls.n	8002fca <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002fae:	6939      	ldr	r1, [r7, #16]
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fd69 	bl	8003a88 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e06f      	b.n	80030aa <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0da      	beq.n	8002f8a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	461a      	mov	r2, r3
 8002fda:	211f      	movs	r1, #31
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb2c 	bl	800363a <HAL_ETH_ReadPHYRegister>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00b      	beq.n	8003000 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002fec:	6939      	ldr	r1, [r7, #16]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fd4a 	bl	8003a88 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e054      	b.n	80030aa <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b00      	cmp	r3, #0
 8003008:	d004      	beq.n	8003014 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	e002      	b.n	800301a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	e035      	b.n	8003098 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	e030      	b.n	8003098 <HAL_ETH_Init+0x31c>
 8003036:	bf00      	nop
 8003038:	03938700 	.word	0x03938700
 800303c:	40023800 	.word	0x40023800
 8003040:	40013800 	.word	0x40013800
 8003044:	01312cff 	.word	0x01312cff
 8003048:	02160ebf 	.word	0x02160ebf
 800304c:	05f5e0ff 	.word	0x05f5e0ff
 8003050:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	08db      	lsrs	r3, r3, #3
 800305a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	085b      	lsrs	r3, r3, #1
 8003062:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003064:	4313      	orrs	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	2100      	movs	r1, #0
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fb4c 	bl	800370a <HAL_ETH_WritePHYRegister>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800307c:	6939      	ldr	r1, [r7, #16]
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fd02 	bl	8003a88 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e00c      	b.n	80030aa <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003090:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003094:	f7ff f96a 	bl	800236c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003098:	6939      	ldr	r1, [r7, #16]
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fcf4 	bl	8003a88 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_ETH_DMATxDescListInit+0x20>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e052      	b.n	800317a <HAL_ETH_DMATxDescListInit+0xc6>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e030      	b.n	8003152 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	015b      	lsls	r3, r3, #5
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4413      	add	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003100:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003108:	fb02 f303 	mul.w	r3, r2, r3
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	461a      	mov	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	3b01      	subs	r3, #1
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	429a      	cmp	r2, r3
 8003132:	d208      	bcs.n	8003146 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	3301      	adds	r3, #1
 8003138:	015b      	lsls	r3, r3, #5
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	461a      	mov	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	e002      	b.n	800314c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	3301      	adds	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d3ca      	bcc.n	80030f0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003164:	3310      	adds	r3, #16
 8003166:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_ETH_DMARxDescListInit+0x20>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e056      	b.n	8003254 <HAL_ETH_DMARxDescListInit+0xce>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2202      	movs	r2, #2
 80031b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e034      	b.n	800322c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	015b      	lsls	r3, r3, #5
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	4413      	add	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031d2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80031da:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	461a      	mov	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	3b01      	subs	r3, #1
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	429a      	cmp	r2, r3
 800320c:	d208      	bcs.n	8003220 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3301      	adds	r3, #1
 8003212:	015b      	lsls	r3, r3, #5
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	4413      	add	r3, r2
 8003218:	461a      	mov	r2, r3
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	e002      	b.n	8003226 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	3301      	adds	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d3c6      	bcc.n	80031c2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800323e:	330c      	adds	r3, #12
 8003240:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	371c      	adds	r7, #28
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_ETH_TransmitFrame+0x24>
 8003280:	2302      	movs	r3, #2
 8003282:	e0cd      	b.n	8003420 <HAL_ETH_TransmitFrame+0x1c0>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0b8      	b.n	8003420 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da09      	bge.n	80032cc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2212      	movs	r2, #18
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0a9      	b.n	8003420 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d915      	bls.n	8003302 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	4a54      	ldr	r2, [pc, #336]	; (800342c <HAL_ETH_TransmitFrame+0x1cc>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0a9b      	lsrs	r3, r3, #10
 80032e0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	4b51      	ldr	r3, [pc, #324]	; (800342c <HAL_ETH_TransmitFrame+0x1cc>)
 80032e6:	fba3 1302 	umull	r1, r3, r3, r2
 80032ea:	0a9b      	lsrs	r3, r3, #10
 80032ec:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e001      	b.n	8003306 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003302:	2301      	movs	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d11c      	bne.n	8003346 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800331a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003326:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003336:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	461a      	mov	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	62da      	str	r2, [r3, #44]	; 0x2c
 8003344:	e04b      	b.n	80033de <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	e044      	b.n	80033d6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800335a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d107      	bne.n	8003372 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003370:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800337a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3b01      	subs	r3, #1
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	429a      	cmp	r2, r3
 8003384:	d116      	bne.n	80033b4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003394:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	4a25      	ldr	r2, [pc, #148]	; (8003430 <HAL_ETH_TransmitFrame+0x1d0>)
 800339a:	fb02 f203 	mul.w	r2, r2, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80033a6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80033b2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80033c2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	461a      	mov	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	3301      	adds	r3, #1
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3b6      	bcc.n	800334c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e6:	3314      	adds	r3, #20
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00d      	beq.n	800340e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fa:	3314      	adds	r3, #20
 80033fc:	2204      	movs	r2, #4
 80033fe:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003408:	3304      	adds	r3, #4
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	ac02b00b 	.word	0xac02b00b
 8003430:	fffffa0c 	.word	0xfffffa0c

08003434 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800344a:	2302      	movs	r3, #2
 800344c:	e074      	b.n	8003538 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800345e:	e05a      	b.n	8003516 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3301      	adds	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003474:	d10d      	bne.n	8003492 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	461a      	mov	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
 8003490:	e041      	b.n	8003516 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	461a      	mov	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	629a      	str	r2, [r3, #40]	; 0x28
 80034b6:	e02e      	b.n	8003516 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d103      	bne.n	80034da <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	0c1b      	lsrs	r3, r3, #16
 80034e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80034e6:	1f1a      	subs	r2, r3, #4
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	e010      	b.n	8003538 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	db02      	blt.n	8003526 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d99c      	bls.n	8003460 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003554:	3314      	adds	r3, #20
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d112      	bne.n	8003586 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f004 f86f 	bl	8007644 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356e:	3314      	adds	r3, #20
 8003570:	2240      	movs	r2, #64	; 0x40
 8003572:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003584:	e01b      	b.n	80035be <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800358e:	3314      	adds	r3, #20
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b01      	cmp	r3, #1
 8003598:	d111      	bne.n	80035be <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f839 	bl	8003612 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035a8:	3314      	adds	r3, #20
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035c6:	3314      	adds	r3, #20
 80035c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035cc:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d6:	3314      	adds	r3, #20
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e2:	d112      	bne.n	800360a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f81e 	bl	8003626 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f2:	3314      	adds	r3, #20
 80035f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035f8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b086      	sub	sp, #24
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	460b      	mov	r3, r1
 8003644:	607a      	str	r2, [r7, #4]
 8003646:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b82      	cmp	r3, #130	; 0x82
 800365a:	d101      	bne.n	8003660 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
 800365e:	e050      	b.n	8003702 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2282      	movs	r2, #130	; 0x82
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 031c 	and.w	r3, r3, #28
 8003676:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8a1b      	ldrh	r3, [r3, #16]
 800367c:	02db      	lsls	r3, r3, #11
 800367e:	b29b      	uxth	r3, r3
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	019b      	lsls	r3, r3, #6
 800368a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0302 	bic.w	r3, r3, #2
 800369a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80036ac:	f7fe fe52 	bl	8002354 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036b2:	e015      	b.n	80036e0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80036b4:	f7fe fe4e 	bl	8002354 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c2:	d309      	bcc.n	80036d8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e014      	b.n	8003702 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1e4      	bne.n	80036b4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	461a      	mov	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b086      	sub	sp, #24
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	460b      	mov	r3, r1
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b42      	cmp	r3, #66	; 0x42
 800372a:	d101      	bne.n	8003730 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
 800372e:	e04e      	b.n	80037ce <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2242      	movs	r2, #66	; 0x42
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 031c 	and.w	r3, r3, #28
 8003746:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8a1b      	ldrh	r3, [r3, #16]
 800374c:	02db      	lsls	r3, r3, #11
 800374e:	b29b      	uxth	r3, r3
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	4313      	orrs	r3, r2
 8003762:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003786:	f7fe fde5 	bl	8002354 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800378c:	e015      	b.n	80037ba <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800378e:	f7fe fde1 	bl	8002354 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379c:	d309      	bcc.n	80037b2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e00d      	b.n	80037ce <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e4      	bne.n	800378e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_ETH_Start+0x16>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e01f      	b.n	800382c <HAL_ETH_Start+0x56>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fb45 	bl	8003e8c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fb7c 	bl	8003f00 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fc13 	bl	8004034 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fbb0 	bl	8003f74 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fbdd 	bl	8003fd4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_ETH_Stop+0x16>
 8003846:	2302      	movs	r3, #2
 8003848:	e01f      	b.n	800388a <HAL_ETH_Stop+0x56>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fba2 	bl	8003fa4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fbcf 	bl	8004004 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fb67 	bl	8003f3a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fbe1 	bl	8004034 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fb27 	bl	8003ec6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_ETH_ConfigMAC+0x1c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e0e4      	b.n	8003a7a <HAL_ETH_ConfigMAC+0x1e6>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80b1 	beq.w	8003a2a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <HAL_ETH_ConfigMAC+0x1f0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80038e0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80038e6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80038ec:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80038f2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80038f8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80038fe:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003904:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800390a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003910:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003916:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800391c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003922:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800393a:	2001      	movs	r0, #1
 800393c:	f7fe fd16 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003950:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003956:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800395c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003962:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003968:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800396e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800397a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800397c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003986:	2001      	movs	r0, #1
 8003988:	f7fe fcf0 	bl	800236c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800399c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039a6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80039b6:	4013      	ands	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80039c4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80039ca:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80039d0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80039d6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80039dc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80039f4:	2001      	movs	r0, #1
 80039f6:	f7fe fcb9 	bl	800236c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f7fe fca6 	bl	800236c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	61da      	str	r2, [r3, #28]
 8003a28:	e01e      	b.n	8003a68 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003a38:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f7fe fc86 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	ff20810f 	.word	0xff20810f

08003a88 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b0b0      	sub	sp, #192	; 0xc0
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aa4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aac:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d103      	bne.n	8003ad6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad4:	e001      	b.n	8003ada <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003ada:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ade:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003af4:	2340      	movs	r3, #64	; 0x40
 8003af6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b60:	4bac      	ldr	r3, [pc, #688]	; (8003e14 <ETH_MACDMAConfig+0x38c>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003b6c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003b70:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003b74:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003b7a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003b7e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003b82:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003b88:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003b8c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003b90:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003b94:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003b98:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003b9c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003b9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bb0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	f7fe fbd5 	bl	800236c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bca:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003bcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003bd0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003bd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003bd4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003bda:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003be0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003be6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003bec:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003bf0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003bf8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003bfa:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c06:	2001      	movs	r0, #1
 8003c08:	f7fe fbb0 	bl	800236c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c14:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c1e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003c28:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003c34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c38:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003c42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c46:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003c4c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003c52:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003c54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003c58:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003c5e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003c64:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003c66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c78:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c84:	2001      	movs	r0, #1
 8003c86:	f7fe fb71 	bl	800236c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c92:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003c94:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003c98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f7fe fb5c 	bl	800236c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cbc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cc6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003ccc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cd0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cf0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003cf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cf6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003cf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cfc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d06:	2300      	movs	r3, #0
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d12:	3318      	adds	r3, #24
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003d1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d1e:	4b3e      	ldr	r3, [pc, #248]	; (8003e18 <ETH_MACDMAConfig+0x390>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d26:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003d28:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d2a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003d2c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003d2e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003d30:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003d32:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003d34:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003d36:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003d38:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003d3a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003d3e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003d42:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003d46:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d60:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6a:	3318      	adds	r3, #24
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d72:	2001      	movs	r0, #1
 8003d74:	f7fe fafa 	bl	800236c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d80:	3318      	adds	r3, #24
 8003d82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d86:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003d8c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003d90:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003d94:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003d98:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003d9e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003da2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003db0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f7fe fad3 	bl	800236c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dd2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10f      	bne.n	8003dfc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de4:	331c      	adds	r3, #28
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df8:	331c      	adds	r3, #28
 8003dfa:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	461a      	mov	r2, r3
 8003e02:	2100      	movs	r1, #0
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f809 	bl	8003e1c <ETH_MACAddressConfig>
}
 8003e0a:	bf00      	nop
 8003e0c:	37c0      	adds	r7, #192	; 0xc0
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	ff20810f 	.word	0xff20810f
 8003e18:	f8de3f23 	.word	0xf8de3f23

08003e1c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3305      	adds	r3, #5
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	021b      	lsls	r3, r3, #8
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	3204      	adds	r2, #4
 8003e34:	7812      	ldrb	r2, [r2, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <ETH_MACAddressConfig+0x68>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3303      	adds	r3, #3
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	061a      	lsls	r2, r3, #24
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3302      	adds	r3, #2
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	4313      	orrs	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <ETH_MACAddressConfig+0x6c>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	461a      	mov	r2, r3
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	6013      	str	r3, [r2, #0]
}
 8003e76:	bf00      	nop
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	40028040 	.word	0x40028040
 8003e88:	40028044 	.word	0x40028044

08003e8c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0208 	orr.w	r2, r2, #8
 8003ea6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	f000 f8e9 	bl	8004088 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0208 	bic.w	r2, r2, #8
 8003ee0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003eea:	2001      	movs	r0, #1
 8003eec:	f000 f8cc 	bl	8004088 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	601a      	str	r2, [r3, #0]
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0204 	orr.w	r2, r2, #4
 8003f1a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003f24:	2001      	movs	r0, #1
 8003f26:	f000 f8af 	bl	8004088 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	601a      	str	r2, [r3, #0]
}
 8003f32:	bf00      	nop
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0204 	bic.w	r2, r2, #4
 8003f54:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003f5e:	2001      	movs	r0, #1
 8003f60:	f000 f892 	bl	8004088 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f84:	3318      	adds	r3, #24
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f94:	3318      	adds	r3, #24
 8003f96:	601a      	str	r2, [r3, #0]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fb4:	3318      	adds	r3, #24
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc4:	3318      	adds	r3, #24
 8003fc6:	601a      	str	r2, [r3, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0202 	orr.w	r2, r2, #2
 8003ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff4:	3318      	adds	r3, #24
 8003ff6:	601a      	str	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004014:	3318      	adds	r3, #24
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0202 	bic.w	r2, r2, #2
 8004020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004024:	3318      	adds	r3, #24
 8004026:	601a      	str	r2, [r3, #0]
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004048:	3318      	adds	r3, #24
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004058:	3318      	adds	r3, #24
 800405a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004064:	3318      	adds	r3, #24
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800406a:	2001      	movs	r0, #1
 800406c:	f000 f80c 	bl	8004088 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407a:	3318      	adds	r3, #24
 800407c:	601a      	str	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <ETH_Delay+0x38>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <ETH_Delay+0x3c>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0a5b      	lsrs	r3, r3, #9
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80040a4:	bf00      	nop
  } 
  while (Delay --);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1e5a      	subs	r2, r3, #1
 80040aa:	60fa      	str	r2, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f9      	bne.n	80040a4 <ETH_Delay+0x1c>
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000000 	.word	0x20000000
 80040c4:	10624dd3 	.word	0x10624dd3

080040c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e177      	b.n	80043d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040e4:	2201      	movs	r2, #1
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f040 8166 	bne.w	80043ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b01      	cmp	r3, #1
 800410c:	d005      	beq.n	800411a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004116:	2b02      	cmp	r3, #2
 8004118:	d130      	bne.n	800417c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2203      	movs	r2, #3
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4313      	orrs	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004150:	2201      	movs	r2, #1
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43db      	mvns	r3, r3
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	091b      	lsrs	r3, r3, #4
 8004166:	f003 0201 	and.w	r2, r3, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b03      	cmp	r3, #3
 8004186:	d017      	beq.n	80041b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d123      	bne.n	800420c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	08da      	lsrs	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3208      	adds	r2, #8
 80041cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	220f      	movs	r2, #15
 80041dc:	fa02 f303 	lsl.w	r3, r2, r3
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	08da      	lsrs	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3208      	adds	r2, #8
 8004206:	69b9      	ldr	r1, [r7, #24]
 8004208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0203 	and.w	r2, r3, #3
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80c0 	beq.w	80043ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	4b66      	ldr	r3, [pc, #408]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	4a65      	ldr	r2, [pc, #404]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800425c:	6453      	str	r3, [r2, #68]	; 0x44
 800425e:	4b63      	ldr	r3, [pc, #396]	; (80043ec <HAL_GPIO_Init+0x324>)
 8004260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800426a:	4a61      	ldr	r2, [pc, #388]	; (80043f0 <HAL_GPIO_Init+0x328>)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	220f      	movs	r2, #15
 8004282:	fa02 f303 	lsl.w	r3, r2, r3
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a58      	ldr	r2, [pc, #352]	; (80043f4 <HAL_GPIO_Init+0x32c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d037      	beq.n	8004306 <HAL_GPIO_Init+0x23e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a57      	ldr	r2, [pc, #348]	; (80043f8 <HAL_GPIO_Init+0x330>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d031      	beq.n	8004302 <HAL_GPIO_Init+0x23a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a56      	ldr	r2, [pc, #344]	; (80043fc <HAL_GPIO_Init+0x334>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d02b      	beq.n	80042fe <HAL_GPIO_Init+0x236>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a55      	ldr	r2, [pc, #340]	; (8004400 <HAL_GPIO_Init+0x338>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d025      	beq.n	80042fa <HAL_GPIO_Init+0x232>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a54      	ldr	r2, [pc, #336]	; (8004404 <HAL_GPIO_Init+0x33c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01f      	beq.n	80042f6 <HAL_GPIO_Init+0x22e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a53      	ldr	r2, [pc, #332]	; (8004408 <HAL_GPIO_Init+0x340>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d019      	beq.n	80042f2 <HAL_GPIO_Init+0x22a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a52      	ldr	r2, [pc, #328]	; (800440c <HAL_GPIO_Init+0x344>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_GPIO_Init+0x226>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a51      	ldr	r2, [pc, #324]	; (8004410 <HAL_GPIO_Init+0x348>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00d      	beq.n	80042ea <HAL_GPIO_Init+0x222>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a50      	ldr	r2, [pc, #320]	; (8004414 <HAL_GPIO_Init+0x34c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <HAL_GPIO_Init+0x21e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a4f      	ldr	r2, [pc, #316]	; (8004418 <HAL_GPIO_Init+0x350>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d101      	bne.n	80042e2 <HAL_GPIO_Init+0x21a>
 80042de:	2309      	movs	r3, #9
 80042e0:	e012      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042e2:	230a      	movs	r3, #10
 80042e4:	e010      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042e6:	2308      	movs	r3, #8
 80042e8:	e00e      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042ea:	2307      	movs	r3, #7
 80042ec:	e00c      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042ee:	2306      	movs	r3, #6
 80042f0:	e00a      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042f2:	2305      	movs	r3, #5
 80042f4:	e008      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042f6:	2304      	movs	r3, #4
 80042f8:	e006      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042fa:	2303      	movs	r3, #3
 80042fc:	e004      	b.n	8004308 <HAL_GPIO_Init+0x240>
 80042fe:	2302      	movs	r3, #2
 8004300:	e002      	b.n	8004308 <HAL_GPIO_Init+0x240>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <HAL_GPIO_Init+0x240>
 8004306:	2300      	movs	r3, #0
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	f002 0203 	and.w	r2, r2, #3
 800430e:	0092      	lsls	r2, r2, #2
 8004310:	4093      	lsls	r3, r2
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004318:	4935      	ldr	r1, [pc, #212]	; (80043f0 <HAL_GPIO_Init+0x328>)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	3302      	adds	r3, #2
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004326:	4b3d      	ldr	r3, [pc, #244]	; (800441c <HAL_GPIO_Init+0x354>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800434a:	4a34      	ldr	r2, [pc, #208]	; (800441c <HAL_GPIO_Init+0x354>)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004350:	4b32      	ldr	r3, [pc, #200]	; (800441c <HAL_GPIO_Init+0x354>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004374:	4a29      	ldr	r2, [pc, #164]	; (800441c <HAL_GPIO_Init+0x354>)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800437a:	4b28      	ldr	r3, [pc, #160]	; (800441c <HAL_GPIO_Init+0x354>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800439e:	4a1f      	ldr	r2, [pc, #124]	; (800441c <HAL_GPIO_Init+0x354>)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_GPIO_Init+0x354>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043c8:	4a14      	ldr	r2, [pc, #80]	; (800441c <HAL_GPIO_Init+0x354>)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b0f      	cmp	r3, #15
 80043d8:	f67f ae84 	bls.w	80040e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	3724      	adds	r7, #36	; 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40013800 	.word	0x40013800
 80043f4:	40020000 	.word	0x40020000
 80043f8:	40020400 	.word	0x40020400
 80043fc:	40020800 	.word	0x40020800
 8004400:	40020c00 	.word	0x40020c00
 8004404:	40021000 	.word	0x40021000
 8004408:	40021400 	.word	0x40021400
 800440c:	40021800 	.word	0x40021800
 8004410:	40021c00 	.word	0x40021c00
 8004414:	40022000 	.word	0x40022000
 8004418:	40022400 	.word	0x40022400
 800441c:	40013c00 	.word	0x40013c00

08004420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	887b      	ldrh	r3, [r7, #2]
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
 800443c:	e001      	b.n	8004442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
 800445c:	4613      	mov	r3, r2
 800445e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004460:	787b      	ldrb	r3, [r7, #1]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800446c:	e003      	b.n	8004476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800446e:	887b      	ldrh	r3, [r7, #2]
 8004470:	041a      	lsls	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	619a      	str	r2, [r3, #24]
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004490:	695a      	ldr	r2, [r3, #20]
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800449a:	4a05      	ldr	r2, [pc, #20]	; (80044b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f806 	bl	80044b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40013c00 	.word	0x40013c00

080044b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <HAL_PWREx_EnableOverDrive+0x90>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	4a1f      	ldr	r2, [pc, #124]	; (800455c <HAL_PWREx_EnableOverDrive+0x90>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6413      	str	r3, [r2, #64]	; 0x40
 80044e6:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_PWREx_EnableOverDrive+0x90>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044f2:	4b1b      	ldr	r3, [pc, #108]	; (8004560 <HAL_PWREx_EnableOverDrive+0x94>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044f8:	f7fd ff2c 	bl	8002354 <HAL_GetTick>
 80044fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044fe:	e009      	b.n	8004514 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004500:	f7fd ff28 	bl	8002354 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800450e:	d901      	bls.n	8004514 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e01f      	b.n	8004554 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_PWREx_EnableOverDrive+0x98>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d1ee      	bne.n	8004500 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004522:	4b11      	ldr	r3, [pc, #68]	; (8004568 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004528:	f7fd ff14 	bl	8002354 <HAL_GetTick>
 800452c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800452e:	e009      	b.n	8004544 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004530:	f7fd ff10 	bl	8002354 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800453e:	d901      	bls.n	8004544 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e007      	b.n	8004554 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_PWREx_EnableOverDrive+0x98>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004550:	d1ee      	bne.n	8004530 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	420e0040 	.word	0x420e0040
 8004564:	40007000 	.word	0x40007000
 8004568:	420e0044 	.word	0x420e0044

0800456c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e264      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d075      	beq.n	8004676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800458a:	4ba3      	ldr	r3, [pc, #652]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b04      	cmp	r3, #4
 8004594:	d00c      	beq.n	80045b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004596:	4ba0      	ldr	r3, [pc, #640]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800459e:	2b08      	cmp	r3, #8
 80045a0:	d112      	bne.n	80045c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045a2:	4b9d      	ldr	r3, [pc, #628]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ae:	d10b      	bne.n	80045c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	4b99      	ldr	r3, [pc, #612]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d05b      	beq.n	8004674 <HAL_RCC_OscConfig+0x108>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d157      	bne.n	8004674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e23f      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d0:	d106      	bne.n	80045e0 <HAL_RCC_OscConfig+0x74>
 80045d2:	4b91      	ldr	r3, [pc, #580]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a90      	ldr	r2, [pc, #576]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	e01d      	b.n	800461c <HAL_RCC_OscConfig+0xb0>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e8:	d10c      	bne.n	8004604 <HAL_RCC_OscConfig+0x98>
 80045ea:	4b8b      	ldr	r3, [pc, #556]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a8a      	ldr	r2, [pc, #552]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	4b88      	ldr	r3, [pc, #544]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a87      	ldr	r2, [pc, #540]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	e00b      	b.n	800461c <HAL_RCC_OscConfig+0xb0>
 8004604:	4b84      	ldr	r3, [pc, #528]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a83      	ldr	r2, [pc, #524]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 800460a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	4b81      	ldr	r3, [pc, #516]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a80      	ldr	r2, [pc, #512]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800461a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d013      	beq.n	800464c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004624:	f7fd fe96 	bl	8002354 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800462c:	f7fd fe92 	bl	8002354 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e204      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463e:	4b76      	ldr	r3, [pc, #472]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0xc0>
 800464a:	e014      	b.n	8004676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464c:	f7fd fe82 	bl	8002354 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004654:	f7fd fe7e 	bl	8002354 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b64      	cmp	r3, #100	; 0x64
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e1f0      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004666:	4b6c      	ldr	r3, [pc, #432]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <HAL_RCC_OscConfig+0xe8>
 8004672:	e000      	b.n	8004676 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d063      	beq.n	800474a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004682:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 030c 	and.w	r3, r3, #12
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800468e:	4b62      	ldr	r3, [pc, #392]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004696:	2b08      	cmp	r3, #8
 8004698:	d11c      	bne.n	80046d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800469a:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d116      	bne.n	80046d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046a6:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_RCC_OscConfig+0x152>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d001      	beq.n	80046be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e1c4      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046be:	4b56      	ldr	r3, [pc, #344]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4952      	ldr	r1, [pc, #328]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d2:	e03a      	b.n	800474a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d020      	beq.n	800471e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046dc:	4b4f      	ldr	r3, [pc, #316]	; (800481c <HAL_RCC_OscConfig+0x2b0>)
 80046de:	2201      	movs	r2, #1
 80046e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fd fe37 	bl	8002354 <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ea:	f7fd fe33 	bl	8002354 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e1a5      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fc:	4b46      	ldr	r3, [pc, #280]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004708:	4b43      	ldr	r3, [pc, #268]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	4940      	ldr	r1, [pc, #256]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	600b      	str	r3, [r1, #0]
 800471c:	e015      	b.n	800474a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800471e:	4b3f      	ldr	r3, [pc, #252]	; (800481c <HAL_RCC_OscConfig+0x2b0>)
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004724:	f7fd fe16 	bl	8002354 <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800472c:	f7fd fe12 	bl	8002354 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e184      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800473e:	4b36      	ldr	r3, [pc, #216]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d030      	beq.n	80047b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800475e:	4b30      	ldr	r3, [pc, #192]	; (8004820 <HAL_RCC_OscConfig+0x2b4>)
 8004760:	2201      	movs	r2, #1
 8004762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd fdf6 	bl	8002354 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800476c:	f7fd fdf2 	bl	8002354 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e164      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800477e:	4b26      	ldr	r3, [pc, #152]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 8004780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x200>
 800478a:	e015      	b.n	80047b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478c:	4b24      	ldr	r3, [pc, #144]	; (8004820 <HAL_RCC_OscConfig+0x2b4>)
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004792:	f7fd fddf 	bl	8002354 <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479a:	f7fd fddb 	bl	8002354 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e14d      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ac:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1f0      	bne.n	800479a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 80a0 	beq.w	8004906 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ca:	4b13      	ldr	r3, [pc, #76]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10f      	bne.n	80047f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a0e      	ldr	r2, [pc, #56]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <HAL_RCC_OscConfig+0x2b8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d121      	bne.n	8004846 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004802:	4b08      	ldr	r3, [pc, #32]	; (8004824 <HAL_RCC_OscConfig+0x2b8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a07      	ldr	r2, [pc, #28]	; (8004824 <HAL_RCC_OscConfig+0x2b8>)
 8004808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800480c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480e:	f7fd fda1 	bl	8002354 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	e011      	b.n	800483a <HAL_RCC_OscConfig+0x2ce>
 8004816:	bf00      	nop
 8004818:	40023800 	.word	0x40023800
 800481c:	42470000 	.word	0x42470000
 8004820:	42470e80 	.word	0x42470e80
 8004824:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004828:	f7fd fd94 	bl	8002354 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e106      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483a:	4b85      	ldr	r3, [pc, #532]	; (8004a50 <HAL_RCC_OscConfig+0x4e4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d106      	bne.n	800485c <HAL_RCC_OscConfig+0x2f0>
 800484e:	4b81      	ldr	r3, [pc, #516]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	4a80      	ldr	r2, [pc, #512]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6713      	str	r3, [r2, #112]	; 0x70
 800485a:	e01c      	b.n	8004896 <HAL_RCC_OscConfig+0x32a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b05      	cmp	r3, #5
 8004862:	d10c      	bne.n	800487e <HAL_RCC_OscConfig+0x312>
 8004864:	4b7b      	ldr	r3, [pc, #492]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	4a7a      	ldr	r2, [pc, #488]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 800486a:	f043 0304 	orr.w	r3, r3, #4
 800486e:	6713      	str	r3, [r2, #112]	; 0x70
 8004870:	4b78      	ldr	r3, [pc, #480]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	4a77      	ldr	r2, [pc, #476]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004876:	f043 0301 	orr.w	r3, r3, #1
 800487a:	6713      	str	r3, [r2, #112]	; 0x70
 800487c:	e00b      	b.n	8004896 <HAL_RCC_OscConfig+0x32a>
 800487e:	4b75      	ldr	r3, [pc, #468]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	4a74      	ldr	r2, [pc, #464]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	6713      	str	r3, [r2, #112]	; 0x70
 800488a:	4b72      	ldr	r3, [pc, #456]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	4a71      	ldr	r2, [pc, #452]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004890:	f023 0304 	bic.w	r3, r3, #4
 8004894:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d015      	beq.n	80048ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489e:	f7fd fd59 	bl	8002354 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a4:	e00a      	b.n	80048bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a6:	f7fd fd55 	bl	8002354 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e0c5      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048bc:	4b65      	ldr	r3, [pc, #404]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 80048be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0ee      	beq.n	80048a6 <HAL_RCC_OscConfig+0x33a>
 80048c8:	e014      	b.n	80048f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ca:	f7fd fd43 	bl	8002354 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d0:	e00a      	b.n	80048e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fd fd3f 	bl	8002354 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e0af      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e8:	4b5a      	ldr	r3, [pc, #360]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ee      	bne.n	80048d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d105      	bne.n	8004906 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fa:	4b56      	ldr	r3, [pc, #344]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	4a55      	ldr	r2, [pc, #340]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004904:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 809b 	beq.w	8004a46 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004910:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 030c 	and.w	r3, r3, #12
 8004918:	2b08      	cmp	r3, #8
 800491a:	d05c      	beq.n	80049d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d141      	bne.n	80049a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004924:	4b4c      	ldr	r3, [pc, #304]	; (8004a58 <HAL_RCC_OscConfig+0x4ec>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7fd fd13 	bl	8002354 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004932:	f7fd fd0f 	bl	8002354 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e081      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004944:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	019b      	lsls	r3, r3, #6
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	3b01      	subs	r3, #1
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	061b      	lsls	r3, r3, #24
 8004974:	4937      	ldr	r1, [pc, #220]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800497a:	4b37      	ldr	r3, [pc, #220]	; (8004a58 <HAL_RCC_OscConfig+0x4ec>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fd fce8 	bl	8002354 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004988:	f7fd fce4 	bl	8002354 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e056      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499a:	4b2e      	ldr	r3, [pc, #184]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x41c>
 80049a6:	e04e      	b.n	8004a46 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b2b      	ldr	r3, [pc, #172]	; (8004a58 <HAL_RCC_OscConfig+0x4ec>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fd fcd1 	bl	8002354 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fd fccd 	bl	8002354 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e03f      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c8:	4b22      	ldr	r3, [pc, #136]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x44a>
 80049d4:	e037      	b.n	8004a46 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e032      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e2:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <HAL_RCC_OscConfig+0x4e8>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d028      	beq.n	8004a42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d121      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d11a      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a12:	4013      	ands	r3, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a18:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d111      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	085b      	lsrs	r3, r3, #1
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d107      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40007000 	.word	0x40007000
 8004a54:	40023800 	.word	0x40023800
 8004a58:	42470060 	.word	0x42470060

08004a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0cc      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a70:	4b68      	ldr	r3, [pc, #416]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d90c      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b65      	ldr	r3, [pc, #404]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b63      	ldr	r3, [pc, #396]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0b8      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab0:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004aba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac8:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4a52      	ldr	r2, [pc, #328]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	494d      	ldr	r1, [pc, #308]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d044      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d119      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e07f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d003      	beq.n	8004b1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1a:	4b3f      	ldr	r3, [pc, #252]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e06f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2a:	4b3b      	ldr	r3, [pc, #236]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e067      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3a:	4b37      	ldr	r3, [pc, #220]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 0203 	bic.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4934      	ldr	r1, [pc, #208]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b4c:	f7fd fc02 	bl	8002354 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b54:	f7fd fbfe 	bl	8002354 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e04f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	4b2b      	ldr	r3, [pc, #172]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 020c 	and.w	r2, r3, #12
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d1eb      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b25      	ldr	r3, [pc, #148]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d20c      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b22      	ldr	r3, [pc, #136]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e032      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4916      	ldr	r1, [pc, #88]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	490e      	ldr	r1, [pc, #56]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004be2:	f000 f821 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004be6:	4602      	mov	r2, r0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	490a      	ldr	r1, [pc, #40]	; (8004c1c <HAL_RCC_ClockConfig+0x1c0>)
 8004bf4:	5ccb      	ldrb	r3, [r1, r3]
 8004bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fd f938 	bl	8001e78 <HAL_InitTick>

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023c00 	.word	0x40023c00
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	0801fcc0 	.word	0x0801fcc0
 8004c20:	20000000 	.word	0x20000000
 8004c24:	20000004 	.word	0x20000004

08004c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b5b0      	push	{r4, r5, r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c2e:	2100      	movs	r1, #0
 8004c30:	6079      	str	r1, [r7, #4]
 8004c32:	2100      	movs	r1, #0
 8004c34:	60f9      	str	r1, [r7, #12]
 8004c36:	2100      	movs	r1, #0
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c3e:	4952      	ldr	r1, [pc, #328]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c40:	6889      	ldr	r1, [r1, #8]
 8004c42:	f001 010c 	and.w	r1, r1, #12
 8004c46:	2908      	cmp	r1, #8
 8004c48:	d00d      	beq.n	8004c66 <HAL_RCC_GetSysClockFreq+0x3e>
 8004c4a:	2908      	cmp	r1, #8
 8004c4c:	f200 8094 	bhi.w	8004d78 <HAL_RCC_GetSysClockFreq+0x150>
 8004c50:	2900      	cmp	r1, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x32>
 8004c54:	2904      	cmp	r1, #4
 8004c56:	d003      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x38>
 8004c58:	e08e      	b.n	8004d78 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c5a:	4b4c      	ldr	r3, [pc, #304]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x164>)
 8004c5c:	60bb      	str	r3, [r7, #8]
       break;
 8004c5e:	e08e      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c60:	4b4b      	ldr	r3, [pc, #300]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c62:	60bb      	str	r3, [r7, #8]
      break;
 8004c64:	e08b      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c66:	4948      	ldr	r1, [pc, #288]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c68:	6849      	ldr	r1, [r1, #4]
 8004c6a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004c6e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c70:	4945      	ldr	r1, [pc, #276]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c72:	6849      	ldr	r1, [r1, #4]
 8004c74:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	d024      	beq.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c7c:	4942      	ldr	r1, [pc, #264]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c7e:	6849      	ldr	r1, [r1, #4]
 8004c80:	0989      	lsrs	r1, r1, #6
 8004c82:	4608      	mov	r0, r1
 8004c84:	f04f 0100 	mov.w	r1, #0
 8004c88:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004c8c:	f04f 0500 	mov.w	r5, #0
 8004c90:	ea00 0204 	and.w	r2, r0, r4
 8004c94:	ea01 0305 	and.w	r3, r1, r5
 8004c98:	493d      	ldr	r1, [pc, #244]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c9a:	fb01 f003 	mul.w	r0, r1, r3
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	fb01 f102 	mul.w	r1, r1, r2
 8004ca4:	1844      	adds	r4, r0, r1
 8004ca6:	493a      	ldr	r1, [pc, #232]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ca8:	fba2 0101 	umull	r0, r1, r2, r1
 8004cac:	1863      	adds	r3, r4, r1
 8004cae:	4619      	mov	r1, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	f7fb ffb8 	bl	8000c2c <__aeabi_uldivmod>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e04a      	b.n	8004d5c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc6:	4b30      	ldr	r3, [pc, #192]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	099b      	lsrs	r3, r3, #6
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f04f 0300 	mov.w	r3, #0
 8004cd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cd6:	f04f 0100 	mov.w	r1, #0
 8004cda:	ea02 0400 	and.w	r4, r2, r0
 8004cde:	ea03 0501 	and.w	r5, r3, r1
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	014b      	lsls	r3, r1, #5
 8004cf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cf4:	0142      	lsls	r2, r0, #5
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	1b00      	subs	r0, r0, r4
 8004cfc:	eb61 0105 	sbc.w	r1, r1, r5
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	018b      	lsls	r3, r1, #6
 8004d0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d0e:	0182      	lsls	r2, r0, #6
 8004d10:	1a12      	subs	r2, r2, r0
 8004d12:	eb63 0301 	sbc.w	r3, r3, r1
 8004d16:	f04f 0000 	mov.w	r0, #0
 8004d1a:	f04f 0100 	mov.w	r1, #0
 8004d1e:	00d9      	lsls	r1, r3, #3
 8004d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d24:	00d0      	lsls	r0, r2, #3
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	1912      	adds	r2, r2, r4
 8004d2c:	eb45 0303 	adc.w	r3, r5, r3
 8004d30:	f04f 0000 	mov.w	r0, #0
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	0299      	lsls	r1, r3, #10
 8004d3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d3e:	0290      	lsls	r0, r2, #10
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	f7fb ff6c 	bl	8000c2c <__aeabi_uldivmod>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4613      	mov	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	0c1b      	lsrs	r3, r3, #16
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	3301      	adds	r3, #1
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d74:	60bb      	str	r3, [r7, #8]
      break;
 8004d76:	e002      	b.n	8004d7e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d78:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x164>)
 8004d7a:	60bb      	str	r3, [r7, #8]
      break;
 8004d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bdb0      	pop	{r4, r5, r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	01312d00 	.word	0x01312d00

08004d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000000 	.word	0x20000000

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004db0:	f7ff fff0 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0a9b      	lsrs	r3, r3, #10
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4903      	ldr	r1, [pc, #12]	; (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	0801fcd0 	.word	0x0801fcd0

08004dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dd8:	f7ff ffdc 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	0b5b      	lsrs	r3, r3, #13
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	4903      	ldr	r1, [pc, #12]	; (8004df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40023800 	.word	0x40023800
 8004df8:	0801fcd0 	.word	0x0801fcd0

08004dfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	220f      	movs	r2, #15
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e0c:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <HAL_RCC_GetClockConfig+0x5c>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0203 	and.w	r2, r3, #3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e18:	4b0f      	ldr	r3, [pc, #60]	; (8004e58 <HAL_RCC_GetClockConfig+0x5c>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e24:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <HAL_RCC_GetClockConfig+0x5c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e30:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <HAL_RCC_GetClockConfig+0x5c>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	08db      	lsrs	r3, r3, #3
 8004e36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <HAL_RCC_GetClockConfig+0x60>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 020f 	and.w	r2, r3, #15
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	601a      	str	r2, [r3, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40023c00 	.word	0x40023c00

08004e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10b      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d075      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e94:	4bad      	ldr	r3, [pc, #692]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e9a:	f7fd fa5b 	bl	8002354 <HAL_GetTick>
 8004e9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ea2:	f7fd fa57 	bl	8002354 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e18b      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb4:	4ba6      	ldr	r3, [pc, #664]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	019a      	lsls	r2, r3, #6
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	071b      	lsls	r3, r3, #28
 8004ed8:	499d      	ldr	r1, [pc, #628]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01f      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004eec:	4b98      	ldr	r3, [pc, #608]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef2:	0f1b      	lsrs	r3, r3, #28
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	019a      	lsls	r2, r3, #6
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	061b      	lsls	r3, r3, #24
 8004f06:	431a      	orrs	r2, r3
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	071b      	lsls	r3, r3, #28
 8004f0c:	4990      	ldr	r1, [pc, #576]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f14:	4b8e      	ldr	r3, [pc, #568]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f1a:	f023 021f 	bic.w	r2, r3, #31
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	498a      	ldr	r1, [pc, #552]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00d      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	019a      	lsls	r2, r3, #6
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	061b      	lsls	r3, r3, #24
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	071b      	lsls	r3, r3, #28
 8004f4c:	4980      	ldr	r1, [pc, #512]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f54:	4b7d      	ldr	r3, [pc, #500]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f56:	2201      	movs	r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f5a:	f7fd f9fb 	bl	8002354 <HAL_GetTick>
 8004f5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f60:	e008      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f62:	f7fd f9f7 	bl	8002354 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e12b      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f74:	4b76      	ldr	r3, [pc, #472]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d079      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f98:	4b6e      	ldr	r3, [pc, #440]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f9e:	f7fd f9d9 	bl	8002354 <HAL_GetTick>
 8004fa2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fa4:	e008      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fa6:	f7fd f9d5 	bl	8002354 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d901      	bls.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e109      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fb8:	4b65      	ldr	r3, [pc, #404]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc4:	d0ef      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d020      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fd2:	4b5f      	ldr	r3, [pc, #380]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd8:	0f1b      	lsrs	r3, r3, #28
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	019a      	lsls	r2, r3, #6
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	061b      	lsls	r3, r3, #24
 8004fec:	431a      	orrs	r2, r3
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	071b      	lsls	r3, r3, #28
 8004ff2:	4957      	ldr	r1, [pc, #348]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ffa:	4b55      	ldr	r3, [pc, #340]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005000:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	3b01      	subs	r3, #1
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	4950      	ldr	r1, [pc, #320]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01e      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005020:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	0e1b      	lsrs	r3, r3, #24
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	019a      	lsls	r2, r3, #6
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	061b      	lsls	r3, r3, #24
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	071b      	lsls	r3, r3, #28
 8005040:	4943      	ldr	r1, [pc, #268]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005048:	4b41      	ldr	r3, [pc, #260]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800504a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800504e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	493e      	ldr	r1, [pc, #248]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800505e:	4b3d      	ldr	r3, [pc, #244]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005060:	2201      	movs	r2, #1
 8005062:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005064:	f7fd f976 	bl	8002354 <HAL_GetTick>
 8005068:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800506c:	f7fd f972 	bl	8002354 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e0a6      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800507e:	4b34      	ldr	r3, [pc, #208]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800508a:	d1ef      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 808d 	beq.w	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	4a2b      	ldr	r2, [pc, #172]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a8:	6413      	str	r3, [r2, #64]	; 0x40
 80050aa:	4b29      	ldr	r3, [pc, #164]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050b6:	4b28      	ldr	r3, [pc, #160]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a27      	ldr	r2, [pc, #156]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050c2:	f7fd f947 	bl	8002354 <HAL_GetTick>
 80050c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050c8:	e008      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050ca:	f7fd f943 	bl	8002354 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e077      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050dc:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050e8:	4b19      	ldr	r3, [pc, #100]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d039      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d032      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800510e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005110:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005112:	2201      	movs	r2, #1
 8005114:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800511c:	4a0c      	ldr	r2, [pc, #48]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d11e      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800512e:	f7fd f911 	bl	8002354 <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	e014      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005136:	f7fd f90d 	bl	8002354 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	f241 3288 	movw	r2, #5000	; 0x1388
 8005144:	4293      	cmp	r3, r2
 8005146:	d90b      	bls.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e03f      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800514c:	42470068 	.word	0x42470068
 8005150:	40023800 	.word	0x40023800
 8005154:	42470070 	.word	0x42470070
 8005158:	40007000 	.word	0x40007000
 800515c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005160:	4b1c      	ldr	r3, [pc, #112]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0e4      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005178:	d10d      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800517a:	4b16      	ldr	r3, [pc, #88]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800518a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518e:	4911      	ldr	r1, [pc, #68]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005190:	4313      	orrs	r3, r2
 8005192:	608b      	str	r3, [r1, #8]
 8005194:	e005      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005196:	4b0f      	ldr	r3, [pc, #60]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	4a0e      	ldr	r2, [pc, #56]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800519c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051a0:	6093      	str	r3, [r2, #8]
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051ae:	4909      	ldr	r1, [pc, #36]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d004      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80051c6:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051c8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	40023800 	.word	0x40023800
 80051d8:	424711e0 	.word	0x424711e0

080051dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e083      	b.n	80052f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	7f5b      	ldrb	r3, [r3, #29]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fc fd0c 	bl	8001c1c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	22ca      	movs	r2, #202	; 0xca
 8005210:	625a      	str	r2, [r3, #36]	; 0x24
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2253      	movs	r2, #83	; 0x53
 8005218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 faa8 	bl	8005770 <RTC_EnterInitMode>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d008      	beq.n	8005238 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	22ff      	movs	r2, #255	; 0xff
 800522c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2204      	movs	r2, #4
 8005232:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e05e      	b.n	80052f6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6899      	ldr	r1, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	68d2      	ldr	r2, [r2, #12]
 8005272:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6919      	ldr	r1, [r3, #16]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	041a      	lsls	r2, r3, #16
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68da      	ldr	r2, [r3, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005296:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10e      	bne.n	80052c4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa3a 	bl	8005720 <HAL_RTC_WaitForSynchro>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	22ff      	movs	r2, #255	; 0xff
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2204      	movs	r2, #4
 80052be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e018      	b.n	80052f6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052d2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699a      	ldr	r2, [r3, #24]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	22ff      	movs	r2, #255	; 0xff
 80052ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80052f4:	2300      	movs	r3, #0
  }
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052fe:	b590      	push	{r4, r7, lr}
 8005300:	b087      	sub	sp, #28
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	7f1b      	ldrb	r3, [r3, #28]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_RTC_SetTime+0x1c>
 8005316:	2302      	movs	r3, #2
 8005318:	e0aa      	b.n	8005470 <HAL_RTC_SetTime+0x172>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2202      	movs	r2, #2
 8005324:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d126      	bne.n	800537a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2200      	movs	r2, #0
 800533e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 fa3f 	bl	80057c8 <RTC_ByteToBcd2>
 800534a:	4603      	mov	r3, r0
 800534c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fa38 	bl	80057c8 <RTC_ByteToBcd2>
 8005358:	4603      	mov	r3, r0
 800535a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800535c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	789b      	ldrb	r3, [r3, #2]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fa30 	bl	80057c8 <RTC_ByteToBcd2>
 8005368:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800536a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	78db      	ldrb	r3, [r3, #3]
 8005372:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e018      	b.n	80053ac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	785b      	ldrb	r3, [r3, #1]
 8005398:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800539a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80053a0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	78db      	ldrb	r3, [r3, #3]
 80053a6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	22ca      	movs	r2, #202	; 0xca
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2253      	movs	r2, #83	; 0x53
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f9d7 	bl	8005770 <RTC_EnterInitMode>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	22ff      	movs	r2, #255	; 0xff
 80053ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2204      	movs	r2, #4
 80053d4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e047      	b.n	8005470 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80053ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80053ee:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80053fe:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6899      	ldr	r1, [r3, #8]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	431a      	orrs	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005426:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d111      	bne.n	800545a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f972 	bl	8005720 <HAL_RTC_WaitForSynchro>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	22ff      	movs	r2, #255	; 0xff
 8005448:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2204      	movs	r2, #4
 800544e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e00a      	b.n	8005470 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	22ff      	movs	r2, #255	; 0xff
 8005460:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800546e:	2300      	movs	r3, #0
  }
}
 8005470:	4618      	mov	r0, r3
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	bd90      	pop	{r4, r7, pc}

08005478 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80054aa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80054ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	0c1b      	lsrs	r3, r3, #16
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11a      	bne.n	800552a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f983 	bl	8005804 <RTC_Bcd2ToByte>
 80054fe:	4603      	mov	r3, r0
 8005500:	461a      	mov	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	785b      	ldrb	r3, [r3, #1]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 f97a 	bl	8005804 <RTC_Bcd2ToByte>
 8005510:	4603      	mov	r3, r0
 8005512:	461a      	mov	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	789b      	ldrb	r3, [r3, #2]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 f971 	bl	8005804 <RTC_Bcd2ToByte>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	7f1b      	ldrb	r3, [r3, #28]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_RTC_SetDate+0x1c>
 800554c:	2302      	movs	r3, #2
 800554e:	e094      	b.n	800567a <HAL_RTC_SetDate+0x146>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2202      	movs	r2, #2
 800555a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10e      	bne.n	8005580 <HAL_RTC_SetDate+0x4c>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	785b      	ldrb	r3, [r3, #1]
 8005566:	f003 0310 	and.w	r3, r3, #16
 800556a:	2b00      	cmp	r3, #0
 800556c:	d008      	beq.n	8005580 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	785b      	ldrb	r3, [r3, #1]
 8005572:	f023 0310 	bic.w	r3, r3, #16
 8005576:	b2db      	uxtb	r3, r3
 8005578:	330a      	adds	r3, #10
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d11c      	bne.n	80055c0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	78db      	ldrb	r3, [r3, #3]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f91c 	bl	80057c8 <RTC_ByteToBcd2>
 8005590:	4603      	mov	r3, r0
 8005592:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	4618      	mov	r0, r3
 800559a:	f000 f915 	bl	80057c8 <RTC_ByteToBcd2>
 800559e:	4603      	mov	r3, r0
 80055a0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80055a2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	789b      	ldrb	r3, [r3, #2]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 f90d 	bl	80057c8 <RTC_ByteToBcd2>
 80055ae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80055b0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	e00e      	b.n	80055de <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	78db      	ldrb	r3, [r3, #3]
 80055c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	785b      	ldrb	r3, [r3, #1]
 80055ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80055cc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80055ce:	68ba      	ldr	r2, [r7, #8]
 80055d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80055d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	22ca      	movs	r2, #202	; 0xca
 80055e4:	625a      	str	r2, [r3, #36]	; 0x24
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2253      	movs	r2, #83	; 0x53
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f8be 	bl	8005770 <RTC_EnterInitMode>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	22ff      	movs	r2, #255	; 0xff
 8005600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2204      	movs	r2, #4
 8005606:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e033      	b.n	800567a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800561c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005620:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005630:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d111      	bne.n	8005664 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f86d 	bl	8005720 <HAL_RTC_WaitForSynchro>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	22ff      	movs	r2, #255	; 0xff
 8005652:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2204      	movs	r2, #4
 8005658:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e00a      	b.n	800567a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	22ff      	movs	r2, #255	; 0xff
 800566a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005678:	2300      	movs	r3, #0
  }
}
 800567a:	4618      	mov	r0, r3
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	bd90      	pop	{r4, r7, pc}

08005682 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b086      	sub	sp, #24
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800569c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	0b5b      	lsrs	r3, r3, #13
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d11a      	bne.n	8005716 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	78db      	ldrb	r3, [r3, #3]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 f88d 	bl	8005804 <RTC_Bcd2ToByte>
 80056ea:	4603      	mov	r3, r0
 80056ec:	461a      	mov	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f884 	bl	8005804 <RTC_Bcd2ToByte>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	789b      	ldrb	r3, [r3, #2]
 8005708:	4618      	mov	r0, r3
 800570a:	f000 f87b 	bl	8005804 <RTC_Bcd2ToByte>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800573a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800573c:	f7fc fe0a 	bl	8002354 <HAL_GetTick>
 8005740:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005742:	e009      	b.n	8005758 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005744:	f7fc fe06 	bl	8002354 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005752:	d901      	bls.n	8005758 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e007      	b.n	8005768 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f003 0320 	and.w	r3, r3, #32
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0ee      	beq.n	8005744 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005786:	2b00      	cmp	r3, #0
 8005788:	d119      	bne.n	80057be <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f04f 32ff 	mov.w	r2, #4294967295
 8005792:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005794:	f7fc fdde 	bl	8002354 <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800579a:	e009      	b.n	80057b0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800579c:	f7fc fdda 	bl	8002354 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057aa:	d901      	bls.n	80057b0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e007      	b.n	80057c0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0ee      	beq.n	800579c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80057d6:	e005      	b.n	80057e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	3b0a      	subs	r3, #10
 80057e2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	2b09      	cmp	r3, #9
 80057e8:	d8f6      	bhi.n	80057d8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	b2db      	uxtb	r3, r3
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	b2db      	uxtb	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	b2da      	uxtb	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	4413      	add	r3, r2
 8005832:	b2db      	uxtb	r3, r3
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e041      	b.n	80058d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fc fa02 	bl	8001c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4610      	mov	r0, r2
 8005880:	f000 f9ce 	bl	8005c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e04e      	b.n	8005996 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a23      	ldr	r2, [pc, #140]	; (80059a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d022      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005922:	d01d      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1f      	ldr	r2, [pc, #124]	; (80059a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d018      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1e      	ldr	r2, [pc, #120]	; (80059ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d013      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00e      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1b      	ldr	r2, [pc, #108]	; (80059b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d009      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a19      	ldr	r2, [pc, #100]	; (80059b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d004      	beq.n	8005960 <HAL_TIM_Base_Start_IT+0x80>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a18      	ldr	r2, [pc, #96]	; (80059bc <HAL_TIM_Base_Start_IT+0xdc>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d111      	bne.n	8005984 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b06      	cmp	r3, #6
 8005970:	d010      	beq.n	8005994 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0201 	orr.w	r2, r2, #1
 8005980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	e007      	b.n	8005994 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40010400 	.word	0x40010400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40001800 	.word	0x40001800

080059c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d122      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d11b      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0202 	mvn.w	r2, #2
 80059ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8ee 	bl	8005be4 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8e0 	bl	8005bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8f1 	bl	8005bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d122      	bne.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d11b      	bne.n	8005a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0204 	mvn.w	r2, #4
 8005a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8c4 	bl	8005be4 <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f8b6 	bl	8005bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f8c7 	bl	8005bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d122      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0208 	mvn.w	r2, #8
 8005a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2204      	movs	r2, #4
 8005a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f89a 	bl	8005be4 <HAL_TIM_IC_CaptureCallback>
 8005ab0:	e005      	b.n	8005abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f88c 	bl	8005bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f89d 	bl	8005bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b10      	cmp	r3, #16
 8005ad0:	d122      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d11b      	bne.n	8005b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f06f 0210 	mvn.w	r2, #16
 8005ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2208      	movs	r2, #8
 8005aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f870 	bl	8005be4 <HAL_TIM_IC_CaptureCallback>
 8005b04:	e005      	b.n	8005b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f862 	bl	8005bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f873 	bl	8005bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d10e      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d107      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0201 	mvn.w	r2, #1
 8005b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc f828 	bl	8001b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b80      	cmp	r3, #128	; 0x80
 8005b50:	d10e      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5c:	2b80      	cmp	r3, #128	; 0x80
 8005b5e:	d107      	bne.n	8005b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f97e 	bl	8005e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b40      	cmp	r3, #64	; 0x40
 8005b7c:	d10e      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b88:	2b40      	cmp	r3, #64	; 0x40
 8005b8a:	d107      	bne.n	8005b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f838 	bl	8005c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d10e      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b20      	cmp	r3, #32
 8005bb6:	d107      	bne.n	8005bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f06f 0220 	mvn.w	r2, #32
 8005bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f948 	bl	8005e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a40      	ldr	r2, [pc, #256]	; (8005d34 <TIM_Base_SetConfig+0x114>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d013      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3e:	d00f      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a3d      	ldr	r2, [pc, #244]	; (8005d38 <TIM_Base_SetConfig+0x118>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00b      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a3c      	ldr	r2, [pc, #240]	; (8005d3c <TIM_Base_SetConfig+0x11c>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d007      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a3b      	ldr	r2, [pc, #236]	; (8005d40 <TIM_Base_SetConfig+0x120>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_Base_SetConfig+0x40>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a3a      	ldr	r2, [pc, #232]	; (8005d44 <TIM_Base_SetConfig+0x124>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d108      	bne.n	8005c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2f      	ldr	r2, [pc, #188]	; (8005d34 <TIM_Base_SetConfig+0x114>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d02b      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c80:	d027      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2c      	ldr	r2, [pc, #176]	; (8005d38 <TIM_Base_SetConfig+0x118>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d023      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a2b      	ldr	r2, [pc, #172]	; (8005d3c <TIM_Base_SetConfig+0x11c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01f      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2a      	ldr	r2, [pc, #168]	; (8005d40 <TIM_Base_SetConfig+0x120>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d01b      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a29      	ldr	r2, [pc, #164]	; (8005d44 <TIM_Base_SetConfig+0x124>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d017      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a28      	ldr	r2, [pc, #160]	; (8005d48 <TIM_Base_SetConfig+0x128>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a27      	ldr	r2, [pc, #156]	; (8005d4c <TIM_Base_SetConfig+0x12c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00f      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a26      	ldr	r2, [pc, #152]	; (8005d50 <TIM_Base_SetConfig+0x130>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00b      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a25      	ldr	r2, [pc, #148]	; (8005d54 <TIM_Base_SetConfig+0x134>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d007      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a24      	ldr	r2, [pc, #144]	; (8005d58 <TIM_Base_SetConfig+0x138>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a23      	ldr	r2, [pc, #140]	; (8005d5c <TIM_Base_SetConfig+0x13c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d108      	bne.n	8005ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a0a      	ldr	r2, [pc, #40]	; (8005d34 <TIM_Base_SetConfig+0x114>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_Base_SetConfig+0xf8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <TIM_Base_SetConfig+0x124>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d103      	bne.n	8005d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	615a      	str	r2, [r3, #20]
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40010000 	.word	0x40010000
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40000c00 	.word	0x40000c00
 8005d44:	40010400 	.word	0x40010400
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800
 8005d54:	40001800 	.word	0x40001800
 8005d58:	40001c00 	.word	0x40001c00
 8005d5c:	40002000 	.word	0x40002000

08005d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e05a      	b.n	8005e2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a21      	ldr	r2, [pc, #132]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d022      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d01d      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1d      	ldr	r2, [pc, #116]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d018      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1a      	ldr	r2, [pc, #104]	; (8005e48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00e      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d009      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a17      	ldr	r2, [pc, #92]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d004      	beq.n	8005e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d10c      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40010000 	.word	0x40010000
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40000800 	.word	0x40000800
 8005e48:	40000c00 	.word	0x40000c00
 8005e4c:	40010400 	.word	0x40010400
 8005e50:	40014000 	.word	0x40014000
 8005e54:	40001800 	.word	0x40001800

08005e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d101      	bne.n	8005e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e03f      	b.n	8005f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fb ff04 	bl	8001cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2224      	movs	r2, #36	; 0x24
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 ffed 	bl	8006ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	695a      	ldr	r2, [r3, #20]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b08a      	sub	sp, #40	; 0x28
 8005f1e:	af02      	add	r7, sp, #8
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	603b      	str	r3, [r7, #0]
 8005f26:	4613      	mov	r3, r2
 8005f28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d17c      	bne.n	8006034 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_UART_Transmit+0x2c>
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e075      	b.n	8006036 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_UART_Transmit+0x3e>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e06e      	b.n	8006036 <HAL_UART_Transmit+0x11c>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2221      	movs	r2, #33	; 0x21
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f6e:	f7fc f9f1 	bl	8002354 <HAL_GetTick>
 8005f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	88fa      	ldrh	r2, [r7, #6]
 8005f78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	88fa      	ldrh	r2, [r7, #6]
 8005f7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d108      	bne.n	8005f9c <HAL_UART_Transmit+0x82>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d104      	bne.n	8005f9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	61bb      	str	r3, [r7, #24]
 8005f9a:	e003      	b.n	8005fa4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005fac:	e02a      	b.n	8006004 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2180      	movs	r1, #128	; 0x80
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fca9 	bl	8006910 <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e036      	b.n	8006036 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3302      	adds	r3, #2
 8005fe2:	61bb      	str	r3, [r7, #24]
 8005fe4:	e007      	b.n	8005ff6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1cf      	bne.n	8005fae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2140      	movs	r1, #64	; 0x40
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fc79 	bl	8006910 <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e006      	b.n	8006036 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2220      	movs	r2, #32
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e000      	b.n	8006036 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006034:	2302      	movs	r3, #2
  }
}
 8006036:	4618      	mov	r0, r3
 8006038:	3720      	adds	r7, #32
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	4613      	mov	r3, r2
 800604a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b20      	cmp	r3, #32
 8006056:	d11d      	bne.n	8006094 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_UART_Receive_DMA+0x26>
 800605e:	88fb      	ldrh	r3, [r7, #6]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e016      	b.n	8006096 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_UART_Receive_DMA+0x38>
 8006072:	2302      	movs	r3, #2
 8006074:	e00f      	b.n	8006096 <HAL_UART_Receive_DMA+0x58>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	461a      	mov	r2, r3
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fcae 	bl	80069ec <UART_Start_Receive_DMA>
 8006090:	4603      	mov	r3, r0
 8006092:	e000      	b.n	8006096 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006094:	2302      	movs	r3, #2
  }
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b090      	sub	sp, #64	; 0x40
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	2b80      	cmp	r3, #128	; 0x80
 80060b6:	bf0c      	ite	eq
 80060b8:	2301      	moveq	r3, #1
 80060ba:	2300      	movne	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b21      	cmp	r3, #33	; 0x21
 80060ca:	d128      	bne.n	800611e <HAL_UART_DMAStop+0x80>
 80060cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d025      	beq.n	800611e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	623b      	str	r3, [r7, #32]
   return(result);
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3314      	adds	r3, #20
 80060f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060f2:	633a      	str	r2, [r7, #48]	; 0x30
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006112:	4618      	mov	r0, r3
 8006114:	f7fc fb36 	bl	8002784 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fd01 	bl	8006b20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006128:	2b40      	cmp	r3, #64	; 0x40
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b22      	cmp	r3, #34	; 0x22
 800613e:	d128      	bne.n	8006192 <HAL_UART_DMAStop+0xf4>
 8006140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006142:	2b00      	cmp	r3, #0
 8006144:	d025      	beq.n	8006192 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3314      	adds	r3, #20
 800614c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	60fb      	str	r3, [r7, #12]
   return(result);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3314      	adds	r3, #20
 8006164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006166:	61fa      	str	r2, [r7, #28]
 8006168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	69b9      	ldr	r1, [r7, #24]
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	617b      	str	r3, [r7, #20]
   return(result);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e5      	bne.n	8006146 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	4618      	mov	r0, r3
 8006188:	f7fc fafc 	bl	8002784 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fcef 	bl	8006b70 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3740      	adds	r7, #64	; 0x40
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b0ba      	sub	sp, #232	; 0xe8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80061c8:	2300      	movs	r3, #0
 80061ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80061da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10f      	bne.n	8006202 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <HAL_UART_IRQHandler+0x66>
 80061ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fd97 	bl	8006d2e <UART_Receive_IT>
      return;
 8006200:	e256      	b.n	80066b0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006202:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80de 	beq.w	80063c8 <HAL_UART_IRQHandler+0x22c>
 800620c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d106      	bne.n	8006226 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 80d1 	beq.w	80063c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00b      	beq.n	800624a <HAL_UART_IRQHandler+0xae>
 8006232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	f043 0201 	orr.w	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800624a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00b      	beq.n	800626e <HAL_UART_IRQHandler+0xd2>
 8006256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	f043 0202 	orr.w	r2, r3, #2
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800626e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00b      	beq.n	8006292 <HAL_UART_IRQHandler+0xf6>
 800627a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d005      	beq.n	8006292 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	f043 0204 	orr.w	r2, r3, #4
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d011      	beq.n	80062c2 <HAL_UART_IRQHandler+0x126>
 800629e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d105      	bne.n	80062b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80062aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f043 0208 	orr.w	r2, r3, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 81ed 	beq.w	80066a6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_UART_IRQHandler+0x14e>
 80062d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fd22 	bl	8006d2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	bf0c      	ite	eq
 80062f8:	2301      	moveq	r3, #1
 80062fa:	2300      	movne	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <HAL_UART_IRQHandler+0x17a>
 800630e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d04f      	beq.n	80063b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fc2a 	bl	8006b70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	d141      	bne.n	80063ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3314      	adds	r3, #20
 8006330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800635a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800636e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1d9      	bne.n	800632a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	2b00      	cmp	r3, #0
 800637c:	d013      	beq.n	80063a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	4a7d      	ldr	r2, [pc, #500]	; (8006578 <HAL_UART_IRQHandler+0x3dc>)
 8006384:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	4618      	mov	r0, r3
 800638c:	f7fc fa6a 	bl	8002864 <HAL_DMA_Abort_IT>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d016      	beq.n	80063c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063a0:	4610      	mov	r0, r2
 80063a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a4:	e00e      	b.n	80063c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f9a4 	bl	80066f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ac:	e00a      	b.n	80063c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 f9a0 	bl	80066f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b4:	e006      	b.n	80063c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f99c 	bl	80066f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063c2:	e170      	b.n	80066a6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c4:	bf00      	nop
    return;
 80063c6:	e16e      	b.n	80066a6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	f040 814a 	bne.w	8006666 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80063d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 8143 	beq.w	8006666 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 813c 	beq.w	8006666 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063ee:	2300      	movs	r3, #0
 80063f0:	60bb      	str	r3, [r7, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60bb      	str	r3, [r7, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	60bb      	str	r3, [r7, #8]
 8006402:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b40      	cmp	r3, #64	; 0x40
 8006410:	f040 80b4 	bne.w	800657c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8140 	beq.w	80066aa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800642e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006432:	429a      	cmp	r2, r3
 8006434:	f080 8139 	bcs.w	80066aa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800643e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800644a:	f000 8088 	beq.w	800655e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	330c      	adds	r3, #12
 8006454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800645c:	e853 3f00 	ldrex	r3, [r3]
 8006460:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800646c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800647a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800647e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006486:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1d9      	bne.n	800644e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3314      	adds	r3, #20
 80064a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3314      	adds	r3, #20
 80064ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e1      	bne.n	800649a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3314      	adds	r3, #20
 80064dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3314      	adds	r3, #20
 80064f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006500:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e3      	bne.n	80064d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800652c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800652e:	f023 0310 	bic.w	r3, r3, #16
 8006532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	330c      	adds	r3, #12
 800653c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006540:	65ba      	str	r2, [r7, #88]	; 0x58
 8006542:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006544:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006546:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006548:	e841 2300 	strex	r3, r2, [r1]
 800654c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800654e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1e3      	bne.n	800651c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	4618      	mov	r0, r3
 800655a:	f7fc f913 	bl	8002784 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006566:	b29b      	uxth	r3, r3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	b29b      	uxth	r3, r3
 800656c:	4619      	mov	r1, r3
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f8ca 	bl	8006708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006574:	e099      	b.n	80066aa <HAL_UART_IRQHandler+0x50e>
 8006576:	bf00      	nop
 8006578:	08006c37 	.word	0x08006c37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006584:	b29b      	uxth	r3, r3
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	f000 808b 	beq.w	80066ae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8086 	beq.w	80066ae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	330c      	adds	r3, #12
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80065c6:	647a      	str	r2, [r7, #68]	; 0x44
 80065c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e3      	bne.n	80065a2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	623b      	str	r3, [r7, #32]
   return(result);
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	3314      	adds	r3, #20
 80065fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e3      	bne.n	80065da <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2220      	movs	r2, #32
 8006616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	330c      	adds	r3, #12
 8006626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	e853 3f00 	ldrex	r3, [r3]
 800662e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0310 	bic.w	r3, r3, #16
 8006636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	330c      	adds	r3, #12
 8006640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006644:	61fa      	str	r2, [r7, #28]
 8006646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	69b9      	ldr	r1, [r7, #24]
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	617b      	str	r3, [r7, #20]
   return(result);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e3      	bne.n	8006620 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f852 	bl	8006708 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006664:	e023      	b.n	80066ae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <HAL_UART_IRQHandler+0x4ea>
 8006672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 faed 	bl	8006c5e <UART_Transmit_IT>
    return;
 8006684:	e014      	b.n	80066b0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00e      	beq.n	80066b0 <HAL_UART_IRQHandler+0x514>
 8006692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d008      	beq.n	80066b0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fb2d 	bl	8006cfe <UART_EndTransmit_IT>
    return;
 80066a4:	e004      	b.n	80066b0 <HAL_UART_IRQHandler+0x514>
    return;
 80066a6:	bf00      	nop
 80066a8:	e002      	b.n	80066b0 <HAL_UART_IRQHandler+0x514>
      return;
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <HAL_UART_IRQHandler+0x514>
      return;
 80066ae:	bf00      	nop
  }
}
 80066b0:	37e8      	adds	r7, #232	; 0xe8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop

080066b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b09c      	sub	sp, #112	; 0x70
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006738:	2b00      	cmp	r3, #0
 800673a:	d172      	bne.n	8006822 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800673c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800673e:	2200      	movs	r2, #0
 8006740:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	330c      	adds	r3, #12
 8006748:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006758:	66bb      	str	r3, [r7, #104]	; 0x68
 800675a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006762:	65ba      	str	r2, [r7, #88]	; 0x58
 8006764:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006768:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3314      	adds	r3, #20
 800677c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	e853 3f00 	ldrex	r3, [r3]
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	667b      	str	r3, [r7, #100]	; 0x64
 800678e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3314      	adds	r3, #20
 8006794:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006796:	647a      	str	r2, [r7, #68]	; 0x44
 8006798:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800679c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e5      	bne.n	8006776 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3314      	adds	r3, #20
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	623b      	str	r3, [r7, #32]
   return(result);
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c0:	663b      	str	r3, [r7, #96]	; 0x60
 80067c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3314      	adds	r3, #20
 80067c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067ca:	633a      	str	r2, [r7, #48]	; 0x30
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e5      	bne.n	80067aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e0:	2220      	movs	r2, #32
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d119      	bne.n	8006822 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f023 0310 	bic.w	r3, r3, #16
 8006804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	330c      	adds	r3, #12
 800680c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800680e:	61fa      	str	r2, [r7, #28]
 8006810:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	69b9      	ldr	r1, [r7, #24]
 8006814:	69fa      	ldr	r2, [r7, #28]
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	617b      	str	r3, [r7, #20]
   return(result);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e5      	bne.n	80067ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	2b01      	cmp	r3, #1
 8006828:	d106      	bne.n	8006838 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800682a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800682c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800682e:	4619      	mov	r1, r3
 8006830:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006832:	f7ff ff69 	bl	8006708 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006836:	e002      	b.n	800683e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006838:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800683a:	f7ff ff47 	bl	80066cc <HAL_UART_RxCpltCallback>
}
 800683e:	bf00      	nop
 8006840:	3770      	adds	r7, #112	; 0x70
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006858:	2b01      	cmp	r3, #1
 800685a:	d108      	bne.n	800686e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	b29b      	uxth	r3, r3
 8006864:	4619      	mov	r1, r3
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff ff4e 	bl	8006708 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800686c:	e002      	b.n	8006874 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff ff36 	bl	80066e0 <HAL_UART_RxHalfCpltCallback>
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	bf0c      	ite	eq
 800689c:	2301      	moveq	r3, #1
 800689e:	2300      	movne	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b21      	cmp	r3, #33	; 0x21
 80068ae:	d108      	bne.n	80068c2 <UART_DMAError+0x46>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d005      	beq.n	80068c2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2200      	movs	r2, #0
 80068ba:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80068bc:	68b8      	ldr	r0, [r7, #8]
 80068be:	f000 f92f 	bl	8006b20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	bf0c      	ite	eq
 80068d0:	2301      	moveq	r3, #1
 80068d2:	2300      	movne	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b22      	cmp	r3, #34	; 0x22
 80068e2:	d108      	bne.n	80068f6 <UART_DMAError+0x7a>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2200      	movs	r2, #0
 80068ee:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80068f0:	68b8      	ldr	r0, [r7, #8]
 80068f2:	f000 f93d 	bl	8006b70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f043 0210 	orr.w	r2, r3, #16
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006902:	68b8      	ldr	r0, [r7, #8]
 8006904:	f7ff fef6 	bl	80066f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006908:	bf00      	nop
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b090      	sub	sp, #64	; 0x40
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	4613      	mov	r3, r2
 800691e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006920:	e050      	b.n	80069c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d04c      	beq.n	80069c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800692a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <UART_WaitOnFlagUntilTimeout+0x30>
 8006930:	f7fb fd10 	bl	8002354 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800693c:	429a      	cmp	r2, r3
 800693e:	d241      	bcs.n	80069c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006956:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	330c      	adds	r3, #12
 800695e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006960:	637a      	str	r2, [r7, #52]	; 0x34
 8006962:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006966:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800696e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e5      	bne.n	8006940 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3314      	adds	r3, #20
 800697a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	613b      	str	r3, [r7, #16]
   return(result);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	63bb      	str	r3, [r7, #56]	; 0x38
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3314      	adds	r3, #20
 8006992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006994:	623a      	str	r2, [r7, #32]
 8006996:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	69f9      	ldr	r1, [r7, #28]
 800699a:	6a3a      	ldr	r2, [r7, #32]
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80069a2:	69bb      	ldr	r3, [r7, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e5      	bne.n	8006974 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e00f      	b.n	80069e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	4013      	ands	r3, r2
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	461a      	mov	r2, r3
 80069dc:	79fb      	ldrb	r3, [r7, #7]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d09f      	beq.n	8006922 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3740      	adds	r7, #64	; 0x40
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b098      	sub	sp, #96	; 0x60
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	4613      	mov	r3, r2
 80069f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	88fa      	ldrh	r2, [r7, #6]
 8006a04:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2222      	movs	r2, #34	; 0x22
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	4a3e      	ldr	r2, [pc, #248]	; (8006b14 <UART_Start_Receive_DMA+0x128>)
 8006a1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	4a3d      	ldr	r2, [pc, #244]	; (8006b18 <UART_Start_Receive_DMA+0x12c>)
 8006a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	4a3c      	ldr	r2, [pc, #240]	; (8006b1c <UART_Start_Receive_DMA+0x130>)
 8006a2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	2200      	movs	r2, #0
 8006a32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a34:	f107 0308 	add.w	r3, r7, #8
 8006a38:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4619      	mov	r1, r3
 8006a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	f7fb fe42 	bl	80026d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a50:	2300      	movs	r3, #0
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a84:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006a90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006a94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e5      	bne.n	8006a6e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	f043 0301 	orr.w	r3, r3, #1
 8006ab8:	657b      	str	r3, [r7, #84]	; 0x54
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3314      	adds	r3, #20
 8006ac0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ac2:	63ba      	str	r2, [r7, #56]	; 0x38
 8006ac4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aec:	653b      	str	r3, [r7, #80]	; 0x50
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3314      	adds	r3, #20
 8006af4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006af6:	627a      	str	r2, [r7, #36]	; 0x24
 8006af8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6a39      	ldr	r1, [r7, #32]
 8006afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e5      	bne.n	8006ad6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3760      	adds	r7, #96	; 0x60
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	08006721 	.word	0x08006721
 8006b18:	08006847 	.word	0x08006847
 8006b1c:	0800687d 	.word	0x0800687d

08006b20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b089      	sub	sp, #36	; 0x24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	330c      	adds	r3, #12
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	61ba      	str	r2, [r7, #24]
 8006b4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6979      	ldr	r1, [r7, #20]
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	613b      	str	r3, [r7, #16]
   return(result);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e5      	bne.n	8006b28 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006b64:	bf00      	nop
 8006b66:	3724      	adds	r7, #36	; 0x24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b095      	sub	sp, #84	; 0x54
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	330c      	adds	r3, #12
 8006b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b98:	643a      	str	r2, [r7, #64]	; 0x40
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e5      	bne.n	8006b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e5      	bne.n	8006bac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d119      	bne.n	8006c1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f023 0310 	bic.w	r3, r3, #16
 8006bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c08:	61ba      	str	r2, [r7, #24]
 8006c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6979      	ldr	r1, [r7, #20]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	613b      	str	r3, [r7, #16]
   return(result);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e5      	bne.n	8006be8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c2a:	bf00      	nop
 8006c2c:	3754      	adds	r7, #84	; 0x54
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff fd4f 	bl	80066f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b21      	cmp	r3, #33	; 0x21
 8006c70:	d13e      	bne.n	8006cf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7a:	d114      	bne.n	8006ca6 <UART_Transmit_IT+0x48>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d110      	bne.n	8006ca6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	1c9a      	adds	r2, r3, #2
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	621a      	str	r2, [r3, #32]
 8006ca4:	e008      	b.n	8006cb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	1c59      	adds	r1, r3, #1
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6211      	str	r1, [r2, #32]
 8006cb0:	781a      	ldrb	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10f      	bne.n	8006cec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	e000      	b.n	8006cf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cf0:	2302      	movs	r3, #2
  }
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff fcca 	bl	80066b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b08c      	sub	sp, #48	; 0x30
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b22      	cmp	r3, #34	; 0x22
 8006d40:	f040 80ab 	bne.w	8006e9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4c:	d117      	bne.n	8006d7e <UART_Receive_IT+0x50>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d113      	bne.n	8006d7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	1c9a      	adds	r2, r3, #2
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d7c:	e026      	b.n	8006dcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d90:	d007      	beq.n	8006da2 <UART_Receive_IT+0x74>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <UART_Receive_IT+0x82>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	e008      	b.n	8006dc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d15a      	bne.n	8006e96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0220 	bic.w	r2, r2, #32
 8006dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
 8006e0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d135      	bne.n	8006e8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	613b      	str	r3, [r7, #16]
   return(result);
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f023 0310 	bic.w	r3, r3, #16
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e46:	623a      	str	r2, [r7, #32]
 8006e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	69f9      	ldr	r1, [r7, #28]
 8006e4c:	6a3a      	ldr	r2, [r7, #32]
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d10a      	bne.n	8006e7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fc3f 	bl	8006708 <HAL_UARTEx_RxEventCallback>
 8006e8a:	e002      	b.n	8006e92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fc1d 	bl	80066cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e002      	b.n	8006e9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3730      	adds	r7, #48	; 0x30
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea8:	b09f      	sub	sp, #124	; 0x7c
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eba:	68d9      	ldr	r1, [r3, #12]
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	ea40 0301 	orr.w	r3, r0, r1
 8006ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ee8:	f021 010c 	bic.w	r1, r1, #12
 8006eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f02:	6999      	ldr	r1, [r3, #24]
 8006f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	ea40 0301 	orr.w	r3, r0, r1
 8006f0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4bc5      	ldr	r3, [pc, #788]	; (8007228 <UART_SetConfig+0x384>)
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d004      	beq.n	8006f22 <UART_SetConfig+0x7e>
 8006f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	4bc3      	ldr	r3, [pc, #780]	; (800722c <UART_SetConfig+0x388>)
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d103      	bne.n	8006f2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f22:	f7fd ff57 	bl	8004dd4 <HAL_RCC_GetPCLK2Freq>
 8006f26:	6778      	str	r0, [r7, #116]	; 0x74
 8006f28:	e002      	b.n	8006f30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f2a:	f7fd ff3f 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8006f2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f32:	69db      	ldr	r3, [r3, #28]
 8006f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f38:	f040 80b6 	bne.w	80070a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f3e:	461c      	mov	r4, r3
 8006f40:	f04f 0500 	mov.w	r5, #0
 8006f44:	4622      	mov	r2, r4
 8006f46:	462b      	mov	r3, r5
 8006f48:	1891      	adds	r1, r2, r2
 8006f4a:	6439      	str	r1, [r7, #64]	; 0x40
 8006f4c:	415b      	adcs	r3, r3
 8006f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006f50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f54:	1912      	adds	r2, r2, r4
 8006f56:	eb45 0303 	adc.w	r3, r5, r3
 8006f5a:	f04f 0000 	mov.w	r0, #0
 8006f5e:	f04f 0100 	mov.w	r1, #0
 8006f62:	00d9      	lsls	r1, r3, #3
 8006f64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f68:	00d0      	lsls	r0, r2, #3
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	1911      	adds	r1, r2, r4
 8006f70:	6639      	str	r1, [r7, #96]	; 0x60
 8006f72:	416b      	adcs	r3, r5
 8006f74:	667b      	str	r3, [r7, #100]	; 0x64
 8006f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	1891      	adds	r1, r2, r2
 8006f82:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f84:	415b      	adcs	r3, r3
 8006f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006f90:	f7f9 fe4c 	bl	8000c2c <__aeabi_uldivmod>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4ba5      	ldr	r3, [pc, #660]	; (8007230 <UART_SetConfig+0x38c>)
 8006f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	011e      	lsls	r6, r3, #4
 8006fa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa4:	461c      	mov	r4, r3
 8006fa6:	f04f 0500 	mov.w	r5, #0
 8006faa:	4622      	mov	r2, r4
 8006fac:	462b      	mov	r3, r5
 8006fae:	1891      	adds	r1, r2, r2
 8006fb0:	6339      	str	r1, [r7, #48]	; 0x30
 8006fb2:	415b      	adcs	r3, r3
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fba:	1912      	adds	r2, r2, r4
 8006fbc:	eb45 0303 	adc.w	r3, r5, r3
 8006fc0:	f04f 0000 	mov.w	r0, #0
 8006fc4:	f04f 0100 	mov.w	r1, #0
 8006fc8:	00d9      	lsls	r1, r3, #3
 8006fca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fce:	00d0      	lsls	r0, r2, #3
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	1911      	adds	r1, r2, r4
 8006fd6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fd8:	416b      	adcs	r3, r5
 8006fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	f04f 0300 	mov.w	r3, #0
 8006fe6:	1891      	adds	r1, r2, r2
 8006fe8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006fea:	415b      	adcs	r3, r3
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ff2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006ff6:	f7f9 fe19 	bl	8000c2c <__aeabi_uldivmod>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4b8c      	ldr	r3, [pc, #560]	; (8007230 <UART_SetConfig+0x38c>)
 8007000:	fba3 1302 	umull	r1, r3, r3, r2
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	2164      	movs	r1, #100	; 0x64
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	3332      	adds	r3, #50	; 0x32
 8007012:	4a87      	ldr	r2, [pc, #540]	; (8007230 <UART_SetConfig+0x38c>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007020:	441e      	add	r6, r3
 8007022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007024:	4618      	mov	r0, r3
 8007026:	f04f 0100 	mov.w	r1, #0
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	1894      	adds	r4, r2, r2
 8007030:	623c      	str	r4, [r7, #32]
 8007032:	415b      	adcs	r3, r3
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
 8007036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800703a:	1812      	adds	r2, r2, r0
 800703c:	eb41 0303 	adc.w	r3, r1, r3
 8007040:	f04f 0400 	mov.w	r4, #0
 8007044:	f04f 0500 	mov.w	r5, #0
 8007048:	00dd      	lsls	r5, r3, #3
 800704a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800704e:	00d4      	lsls	r4, r2, #3
 8007050:	4622      	mov	r2, r4
 8007052:	462b      	mov	r3, r5
 8007054:	1814      	adds	r4, r2, r0
 8007056:	653c      	str	r4, [r7, #80]	; 0x50
 8007058:	414b      	adcs	r3, r1
 800705a:	657b      	str	r3, [r7, #84]	; 0x54
 800705c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	461a      	mov	r2, r3
 8007062:	f04f 0300 	mov.w	r3, #0
 8007066:	1891      	adds	r1, r2, r2
 8007068:	61b9      	str	r1, [r7, #24]
 800706a:	415b      	adcs	r3, r3
 800706c:	61fb      	str	r3, [r7, #28]
 800706e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007072:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007076:	f7f9 fdd9 	bl	8000c2c <__aeabi_uldivmod>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	4b6c      	ldr	r3, [pc, #432]	; (8007230 <UART_SetConfig+0x38c>)
 8007080:	fba3 1302 	umull	r1, r3, r3, r2
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	2164      	movs	r1, #100	; 0x64
 8007088:	fb01 f303 	mul.w	r3, r1, r3
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	00db      	lsls	r3, r3, #3
 8007090:	3332      	adds	r3, #50	; 0x32
 8007092:	4a67      	ldr	r2, [pc, #412]	; (8007230 <UART_SetConfig+0x38c>)
 8007094:	fba2 2303 	umull	r2, r3, r2, r3
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	f003 0207 	and.w	r2, r3, #7
 800709e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4432      	add	r2, r6
 80070a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070a6:	e0b9      	b.n	800721c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070aa:	461c      	mov	r4, r3
 80070ac:	f04f 0500 	mov.w	r5, #0
 80070b0:	4622      	mov	r2, r4
 80070b2:	462b      	mov	r3, r5
 80070b4:	1891      	adds	r1, r2, r2
 80070b6:	6139      	str	r1, [r7, #16]
 80070b8:	415b      	adcs	r3, r3
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070c0:	1912      	adds	r2, r2, r4
 80070c2:	eb45 0303 	adc.w	r3, r5, r3
 80070c6:	f04f 0000 	mov.w	r0, #0
 80070ca:	f04f 0100 	mov.w	r1, #0
 80070ce:	00d9      	lsls	r1, r3, #3
 80070d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070d4:	00d0      	lsls	r0, r2, #3
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	eb12 0804 	adds.w	r8, r2, r4
 80070de:	eb43 0905 	adc.w	r9, r3, r5
 80070e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f04f 0100 	mov.w	r1, #0
 80070ec:	f04f 0200 	mov.w	r2, #0
 80070f0:	f04f 0300 	mov.w	r3, #0
 80070f4:	008b      	lsls	r3, r1, #2
 80070f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070fa:	0082      	lsls	r2, r0, #2
 80070fc:	4640      	mov	r0, r8
 80070fe:	4649      	mov	r1, r9
 8007100:	f7f9 fd94 	bl	8000c2c <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4b49      	ldr	r3, [pc, #292]	; (8007230 <UART_SetConfig+0x38c>)
 800710a:	fba3 2302 	umull	r2, r3, r3, r2
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	011e      	lsls	r6, r3, #4
 8007112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007114:	4618      	mov	r0, r3
 8007116:	f04f 0100 	mov.w	r1, #0
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	1894      	adds	r4, r2, r2
 8007120:	60bc      	str	r4, [r7, #8]
 8007122:	415b      	adcs	r3, r3
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800712a:	1812      	adds	r2, r2, r0
 800712c:	eb41 0303 	adc.w	r3, r1, r3
 8007130:	f04f 0400 	mov.w	r4, #0
 8007134:	f04f 0500 	mov.w	r5, #0
 8007138:	00dd      	lsls	r5, r3, #3
 800713a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800713e:	00d4      	lsls	r4, r2, #3
 8007140:	4622      	mov	r2, r4
 8007142:	462b      	mov	r3, r5
 8007144:	1814      	adds	r4, r2, r0
 8007146:	64bc      	str	r4, [r7, #72]	; 0x48
 8007148:	414b      	adcs	r3, r1
 800714a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800714c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	4618      	mov	r0, r3
 8007152:	f04f 0100 	mov.w	r1, #0
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	008b      	lsls	r3, r1, #2
 8007160:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007164:	0082      	lsls	r2, r0, #2
 8007166:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800716a:	f7f9 fd5f 	bl	8000c2c <__aeabi_uldivmod>
 800716e:	4602      	mov	r2, r0
 8007170:	460b      	mov	r3, r1
 8007172:	4b2f      	ldr	r3, [pc, #188]	; (8007230 <UART_SetConfig+0x38c>)
 8007174:	fba3 1302 	umull	r1, r3, r3, r2
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	2164      	movs	r1, #100	; 0x64
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	3332      	adds	r3, #50	; 0x32
 8007186:	4a2a      	ldr	r2, [pc, #168]	; (8007230 <UART_SetConfig+0x38c>)
 8007188:	fba2 2303 	umull	r2, r3, r2, r3
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007192:	441e      	add	r6, r3
 8007194:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007196:	4618      	mov	r0, r3
 8007198:	f04f 0100 	mov.w	r1, #0
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	1894      	adds	r4, r2, r2
 80071a2:	603c      	str	r4, [r7, #0]
 80071a4:	415b      	adcs	r3, r3
 80071a6:	607b      	str	r3, [r7, #4]
 80071a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ac:	1812      	adds	r2, r2, r0
 80071ae:	eb41 0303 	adc.w	r3, r1, r3
 80071b2:	f04f 0400 	mov.w	r4, #0
 80071b6:	f04f 0500 	mov.w	r5, #0
 80071ba:	00dd      	lsls	r5, r3, #3
 80071bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071c0:	00d4      	lsls	r4, r2, #3
 80071c2:	4622      	mov	r2, r4
 80071c4:	462b      	mov	r3, r5
 80071c6:	eb12 0a00 	adds.w	sl, r2, r0
 80071ca:	eb43 0b01 	adc.w	fp, r3, r1
 80071ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f04f 0100 	mov.w	r1, #0
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	008b      	lsls	r3, r1, #2
 80071e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071e6:	0082      	lsls	r2, r0, #2
 80071e8:	4650      	mov	r0, sl
 80071ea:	4659      	mov	r1, fp
 80071ec:	f7f9 fd1e 	bl	8000c2c <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <UART_SetConfig+0x38c>)
 80071f6:	fba3 1302 	umull	r1, r3, r3, r2
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	2164      	movs	r1, #100	; 0x64
 80071fe:	fb01 f303 	mul.w	r3, r1, r3
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	011b      	lsls	r3, r3, #4
 8007206:	3332      	adds	r3, #50	; 0x32
 8007208:	4a09      	ldr	r2, [pc, #36]	; (8007230 <UART_SetConfig+0x38c>)
 800720a:	fba2 2303 	umull	r2, r3, r2, r3
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	f003 020f 	and.w	r2, r3, #15
 8007214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4432      	add	r2, r6
 800721a:	609a      	str	r2, [r3, #8]
}
 800721c:	bf00      	nop
 800721e:	377c      	adds	r7, #124	; 0x7c
 8007220:	46bd      	mov	sp, r7
 8007222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007226:	bf00      	nop
 8007228:	40011000 	.word	0x40011000
 800722c:	40011400 	.word	0x40011400
 8007230:	51eb851f 	.word	0x51eb851f

08007234 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800723a:	4ba0      	ldr	r3, [pc, #640]	; (80074bc <MX_LWIP_Init+0x288>)
 800723c:	22c0      	movs	r2, #192	; 0xc0
 800723e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007240:	4b9e      	ldr	r3, [pc, #632]	; (80074bc <MX_LWIP_Init+0x288>)
 8007242:	22a8      	movs	r2, #168	; 0xa8
 8007244:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8007246:	4b9d      	ldr	r3, [pc, #628]	; (80074bc <MX_LWIP_Init+0x288>)
 8007248:	2202      	movs	r2, #2
 800724a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 38;
 800724c:	4b9b      	ldr	r3, [pc, #620]	; (80074bc <MX_LWIP_Init+0x288>)
 800724e:	2226      	movs	r2, #38	; 0x26
 8007250:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007252:	4b9b      	ldr	r3, [pc, #620]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007254:	22ff      	movs	r2, #255	; 0xff
 8007256:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007258:	4b99      	ldr	r3, [pc, #612]	; (80074c0 <MX_LWIP_Init+0x28c>)
 800725a:	22ff      	movs	r2, #255	; 0xff
 800725c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800725e:	4b98      	ldr	r3, [pc, #608]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007260:	22ff      	movs	r2, #255	; 0xff
 8007262:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007264:	4b96      	ldr	r3, [pc, #600]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007266:	2200      	movs	r2, #0
 8007268:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800726a:	4b96      	ldr	r3, [pc, #600]	; (80074c4 <MX_LWIP_Init+0x290>)
 800726c:	22c0      	movs	r2, #192	; 0xc0
 800726e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007270:	4b94      	ldr	r3, [pc, #592]	; (80074c4 <MX_LWIP_Init+0x290>)
 8007272:	22a8      	movs	r2, #168	; 0xa8
 8007274:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8007276:	4b93      	ldr	r3, [pc, #588]	; (80074c4 <MX_LWIP_Init+0x290>)
 8007278:	2202      	movs	r2, #2
 800727a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800727c:	4b91      	ldr	r3, [pc, #580]	; (80074c4 <MX_LWIP_Init+0x290>)
 800727e:	2201      	movs	r2, #1
 8007280:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007282:	2100      	movs	r1, #0
 8007284:	2000      	movs	r0, #0
 8007286:	f006 fc07 	bl	800da98 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800728a:	4b8c      	ldr	r3, [pc, #560]	; (80074bc <MX_LWIP_Init+0x288>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	061a      	lsls	r2, r3, #24
 8007290:	4b8a      	ldr	r3, [pc, #552]	; (80074bc <MX_LWIP_Init+0x288>)
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	041b      	lsls	r3, r3, #16
 8007296:	431a      	orrs	r2, r3
 8007298:	4b88      	ldr	r3, [pc, #544]	; (80074bc <MX_LWIP_Init+0x288>)
 800729a:	789b      	ldrb	r3, [r3, #2]
 800729c:	021b      	lsls	r3, r3, #8
 800729e:	4313      	orrs	r3, r2
 80072a0:	4a86      	ldr	r2, [pc, #536]	; (80074bc <MX_LWIP_Init+0x288>)
 80072a2:	78d2      	ldrb	r2, [r2, #3]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	061a      	lsls	r2, r3, #24
 80072a8:	4b84      	ldr	r3, [pc, #528]	; (80074bc <MX_LWIP_Init+0x288>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	0619      	lsls	r1, r3, #24
 80072ae:	4b83      	ldr	r3, [pc, #524]	; (80074bc <MX_LWIP_Init+0x288>)
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	4319      	orrs	r1, r3
 80072b6:	4b81      	ldr	r3, [pc, #516]	; (80074bc <MX_LWIP_Init+0x288>)
 80072b8:	789b      	ldrb	r3, [r3, #2]
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	430b      	orrs	r3, r1
 80072be:	497f      	ldr	r1, [pc, #508]	; (80074bc <MX_LWIP_Init+0x288>)
 80072c0:	78c9      	ldrb	r1, [r1, #3]
 80072c2:	430b      	orrs	r3, r1
 80072c4:	021b      	lsls	r3, r3, #8
 80072c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072ca:	431a      	orrs	r2, r3
 80072cc:	4b7b      	ldr	r3, [pc, #492]	; (80074bc <MX_LWIP_Init+0x288>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	0619      	lsls	r1, r3, #24
 80072d2:	4b7a      	ldr	r3, [pc, #488]	; (80074bc <MX_LWIP_Init+0x288>)
 80072d4:	785b      	ldrb	r3, [r3, #1]
 80072d6:	041b      	lsls	r3, r3, #16
 80072d8:	4319      	orrs	r1, r3
 80072da:	4b78      	ldr	r3, [pc, #480]	; (80074bc <MX_LWIP_Init+0x288>)
 80072dc:	789b      	ldrb	r3, [r3, #2]
 80072de:	021b      	lsls	r3, r3, #8
 80072e0:	430b      	orrs	r3, r1
 80072e2:	4976      	ldr	r1, [pc, #472]	; (80074bc <MX_LWIP_Init+0x288>)
 80072e4:	78c9      	ldrb	r1, [r1, #3]
 80072e6:	430b      	orrs	r3, r1
 80072e8:	0a1b      	lsrs	r3, r3, #8
 80072ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072ee:	431a      	orrs	r2, r3
 80072f0:	4b72      	ldr	r3, [pc, #456]	; (80074bc <MX_LWIP_Init+0x288>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	0619      	lsls	r1, r3, #24
 80072f6:	4b71      	ldr	r3, [pc, #452]	; (80074bc <MX_LWIP_Init+0x288>)
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	4319      	orrs	r1, r3
 80072fe:	4b6f      	ldr	r3, [pc, #444]	; (80074bc <MX_LWIP_Init+0x288>)
 8007300:	789b      	ldrb	r3, [r3, #2]
 8007302:	021b      	lsls	r3, r3, #8
 8007304:	430b      	orrs	r3, r1
 8007306:	496d      	ldr	r1, [pc, #436]	; (80074bc <MX_LWIP_Init+0x288>)
 8007308:	78c9      	ldrb	r1, [r1, #3]
 800730a:	430b      	orrs	r3, r1
 800730c:	0e1b      	lsrs	r3, r3, #24
 800730e:	4313      	orrs	r3, r2
 8007310:	4a6d      	ldr	r2, [pc, #436]	; (80074c8 <MX_LWIP_Init+0x294>)
 8007312:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007314:	4b6a      	ldr	r3, [pc, #424]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	061a      	lsls	r2, r3, #24
 800731a:	4b69      	ldr	r3, [pc, #420]	; (80074c0 <MX_LWIP_Init+0x28c>)
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	431a      	orrs	r2, r3
 8007322:	4b67      	ldr	r3, [pc, #412]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007324:	789b      	ldrb	r3, [r3, #2]
 8007326:	021b      	lsls	r3, r3, #8
 8007328:	4313      	orrs	r3, r2
 800732a:	4a65      	ldr	r2, [pc, #404]	; (80074c0 <MX_LWIP_Init+0x28c>)
 800732c:	78d2      	ldrb	r2, [r2, #3]
 800732e:	4313      	orrs	r3, r2
 8007330:	061a      	lsls	r2, r3, #24
 8007332:	4b63      	ldr	r3, [pc, #396]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	0619      	lsls	r1, r3, #24
 8007338:	4b61      	ldr	r3, [pc, #388]	; (80074c0 <MX_LWIP_Init+0x28c>)
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	041b      	lsls	r3, r3, #16
 800733e:	4319      	orrs	r1, r3
 8007340:	4b5f      	ldr	r3, [pc, #380]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007342:	789b      	ldrb	r3, [r3, #2]
 8007344:	021b      	lsls	r3, r3, #8
 8007346:	430b      	orrs	r3, r1
 8007348:	495d      	ldr	r1, [pc, #372]	; (80074c0 <MX_LWIP_Init+0x28c>)
 800734a:	78c9      	ldrb	r1, [r1, #3]
 800734c:	430b      	orrs	r3, r1
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007354:	431a      	orrs	r2, r3
 8007356:	4b5a      	ldr	r3, [pc, #360]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	0619      	lsls	r1, r3, #24
 800735c:	4b58      	ldr	r3, [pc, #352]	; (80074c0 <MX_LWIP_Init+0x28c>)
 800735e:	785b      	ldrb	r3, [r3, #1]
 8007360:	041b      	lsls	r3, r3, #16
 8007362:	4319      	orrs	r1, r3
 8007364:	4b56      	ldr	r3, [pc, #344]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007366:	789b      	ldrb	r3, [r3, #2]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	430b      	orrs	r3, r1
 800736c:	4954      	ldr	r1, [pc, #336]	; (80074c0 <MX_LWIP_Init+0x28c>)
 800736e:	78c9      	ldrb	r1, [r1, #3]
 8007370:	430b      	orrs	r3, r1
 8007372:	0a1b      	lsrs	r3, r3, #8
 8007374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007378:	431a      	orrs	r2, r3
 800737a:	4b51      	ldr	r3, [pc, #324]	; (80074c0 <MX_LWIP_Init+0x28c>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	0619      	lsls	r1, r3, #24
 8007380:	4b4f      	ldr	r3, [pc, #316]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	041b      	lsls	r3, r3, #16
 8007386:	4319      	orrs	r1, r3
 8007388:	4b4d      	ldr	r3, [pc, #308]	; (80074c0 <MX_LWIP_Init+0x28c>)
 800738a:	789b      	ldrb	r3, [r3, #2]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	430b      	orrs	r3, r1
 8007390:	494b      	ldr	r1, [pc, #300]	; (80074c0 <MX_LWIP_Init+0x28c>)
 8007392:	78c9      	ldrb	r1, [r1, #3]
 8007394:	430b      	orrs	r3, r1
 8007396:	0e1b      	lsrs	r3, r3, #24
 8007398:	4313      	orrs	r3, r2
 800739a:	4a4c      	ldr	r2, [pc, #304]	; (80074cc <MX_LWIP_Init+0x298>)
 800739c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800739e:	4b49      	ldr	r3, [pc, #292]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	061a      	lsls	r2, r3, #24
 80073a4:	4b47      	ldr	r3, [pc, #284]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073a6:	785b      	ldrb	r3, [r3, #1]
 80073a8:	041b      	lsls	r3, r3, #16
 80073aa:	431a      	orrs	r2, r3
 80073ac:	4b45      	ldr	r3, [pc, #276]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073ae:	789b      	ldrb	r3, [r3, #2]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	4313      	orrs	r3, r2
 80073b4:	4a43      	ldr	r2, [pc, #268]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073b6:	78d2      	ldrb	r2, [r2, #3]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	061a      	lsls	r2, r3, #24
 80073bc:	4b41      	ldr	r3, [pc, #260]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	0619      	lsls	r1, r3, #24
 80073c2:	4b40      	ldr	r3, [pc, #256]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	041b      	lsls	r3, r3, #16
 80073c8:	4319      	orrs	r1, r3
 80073ca:	4b3e      	ldr	r3, [pc, #248]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073cc:	789b      	ldrb	r3, [r3, #2]
 80073ce:	021b      	lsls	r3, r3, #8
 80073d0:	430b      	orrs	r3, r1
 80073d2:	493c      	ldr	r1, [pc, #240]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073d4:	78c9      	ldrb	r1, [r1, #3]
 80073d6:	430b      	orrs	r3, r1
 80073d8:	021b      	lsls	r3, r3, #8
 80073da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80073de:	431a      	orrs	r2, r3
 80073e0:	4b38      	ldr	r3, [pc, #224]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	0619      	lsls	r1, r3, #24
 80073e6:	4b37      	ldr	r3, [pc, #220]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073e8:	785b      	ldrb	r3, [r3, #1]
 80073ea:	041b      	lsls	r3, r3, #16
 80073ec:	4319      	orrs	r1, r3
 80073ee:	4b35      	ldr	r3, [pc, #212]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073f0:	789b      	ldrb	r3, [r3, #2]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	430b      	orrs	r3, r1
 80073f6:	4933      	ldr	r1, [pc, #204]	; (80074c4 <MX_LWIP_Init+0x290>)
 80073f8:	78c9      	ldrb	r1, [r1, #3]
 80073fa:	430b      	orrs	r3, r1
 80073fc:	0a1b      	lsrs	r3, r3, #8
 80073fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007402:	431a      	orrs	r2, r3
 8007404:	4b2f      	ldr	r3, [pc, #188]	; (80074c4 <MX_LWIP_Init+0x290>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	0619      	lsls	r1, r3, #24
 800740a:	4b2e      	ldr	r3, [pc, #184]	; (80074c4 <MX_LWIP_Init+0x290>)
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	4319      	orrs	r1, r3
 8007412:	4b2c      	ldr	r3, [pc, #176]	; (80074c4 <MX_LWIP_Init+0x290>)
 8007414:	789b      	ldrb	r3, [r3, #2]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	430b      	orrs	r3, r1
 800741a:	492a      	ldr	r1, [pc, #168]	; (80074c4 <MX_LWIP_Init+0x290>)
 800741c:	78c9      	ldrb	r1, [r1, #3]
 800741e:	430b      	orrs	r3, r1
 8007420:	0e1b      	lsrs	r3, r3, #24
 8007422:	4313      	orrs	r3, r2
 8007424:	4a2a      	ldr	r2, [pc, #168]	; (80074d0 <MX_LWIP_Init+0x29c>)
 8007426:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007428:	4b2a      	ldr	r3, [pc, #168]	; (80074d4 <MX_LWIP_Init+0x2a0>)
 800742a:	9302      	str	r3, [sp, #8]
 800742c:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <MX_LWIP_Init+0x2a4>)
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	2300      	movs	r3, #0
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	4b26      	ldr	r3, [pc, #152]	; (80074d0 <MX_LWIP_Init+0x29c>)
 8007436:	4a25      	ldr	r2, [pc, #148]	; (80074cc <MX_LWIP_Init+0x298>)
 8007438:	4923      	ldr	r1, [pc, #140]	; (80074c8 <MX_LWIP_Init+0x294>)
 800743a:	4828      	ldr	r0, [pc, #160]	; (80074dc <MX_LWIP_Init+0x2a8>)
 800743c:	f007 f8b0 	bl	800e5a0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007440:	4826      	ldr	r0, [pc, #152]	; (80074dc <MX_LWIP_Init+0x2a8>)
 8007442:	f007 fa5f 	bl	800e904 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007446:	4b25      	ldr	r3, [pc, #148]	; (80074dc <MX_LWIP_Init+0x2a8>)
 8007448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800744c:	089b      	lsrs	r3, r3, #2
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007458:	4820      	ldr	r0, [pc, #128]	; (80074dc <MX_LWIP_Init+0x2a8>)
 800745a:	f007 fa63 	bl	800e924 <netif_set_up>
 800745e:	e002      	b.n	8007466 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007460:	481e      	ldr	r0, [pc, #120]	; (80074dc <MX_LWIP_Init+0x2a8>)
 8007462:	f007 facb 	bl	800e9fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007466:	491e      	ldr	r1, [pc, #120]	; (80074e0 <MX_LWIP_Init+0x2ac>)
 8007468:	481c      	ldr	r0, [pc, #112]	; (80074dc <MX_LWIP_Init+0x2a8>)
 800746a:	f007 fb5d 	bl	800eb28 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800746e:	2200      	movs	r2, #0
 8007470:	2101      	movs	r1, #1
 8007472:	2001      	movs	r0, #1
 8007474:	f000 ff48 	bl	8008308 <osSemaphoreNew>
 8007478:	4603      	mov	r3, r0
 800747a:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <MX_LWIP_Init+0x2b0>)
 800747c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800747e:	4b1a      	ldr	r3, [pc, #104]	; (80074e8 <MX_LWIP_Init+0x2b4>)
 8007480:	4a16      	ldr	r2, [pc, #88]	; (80074dc <MX_LWIP_Init+0x2a8>)
 8007482:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8007484:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <MX_LWIP_Init+0x2b0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <MX_LWIP_Init+0x2b4>)
 800748a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800748c:	2224      	movs	r2, #36	; 0x24
 800748e:	2100      	movs	r1, #0
 8007490:	4816      	ldr	r0, [pc, #88]	; (80074ec <MX_LWIP_Init+0x2b8>)
 8007492:	f013 fe31 	bl	801b0f8 <memset>
  attributes.name = "LinkThr";
 8007496:	4b15      	ldr	r3, [pc, #84]	; (80074ec <MX_LWIP_Init+0x2b8>)
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <MX_LWIP_Init+0x2bc>)
 800749a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800749c:	4b13      	ldr	r3, [pc, #76]	; (80074ec <MX_LWIP_Init+0x2b8>)
 800749e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074a2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80074a4:	4b11      	ldr	r3, [pc, #68]	; (80074ec <MX_LWIP_Init+0x2b8>)
 80074a6:	2210      	movs	r2, #16
 80074a8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80074aa:	4a10      	ldr	r2, [pc, #64]	; (80074ec <MX_LWIP_Init+0x2b8>)
 80074ac:	490e      	ldr	r1, [pc, #56]	; (80074e8 <MX_LWIP_Init+0x2b4>)
 80074ae:	4811      	ldr	r0, [pc, #68]	; (80074f4 <MX_LWIP_Init+0x2c0>)
 80074b0:	f000 fcaf 	bl	8007e12 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80074b4:	bf00      	nop
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	2000a804 	.word	0x2000a804
 80074c0:	2000a800 	.word	0x2000a800
 80074c4:	2000a7a0 	.word	0x2000a7a0
 80074c8:	2000a7fc 	.word	0x2000a7fc
 80074cc:	2000a808 	.word	0x2000a808
 80074d0:	2000a80c 	.word	0x2000a80c
 80074d4:	0800d9a9 	.word	0x0800d9a9
 80074d8:	08007add 	.word	0x08007add
 80074dc:	2000a7c8 	.word	0x2000a7c8
 80074e0:	08007bc1 	.word	0x08007bc1
 80074e4:	20000120 	.word	0x20000120
 80074e8:	2000a798 	.word	0x2000a798
 80074ec:	2000a7a4 	.word	0x2000a7a4
 80074f0:	0801c560 	.word	0x0801c560
 80074f4:	08007b49 	.word	0x08007b49

080074f8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08e      	sub	sp, #56	; 0x38
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	609a      	str	r2, [r3, #8]
 800750c:	60da      	str	r2, [r3, #12]
 800750e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a46      	ldr	r2, [pc, #280]	; (8007630 <HAL_ETH_MspInit+0x138>)
 8007516:	4293      	cmp	r3, r2
 8007518:	f040 8085 	bne.w	8007626 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800751c:	2300      	movs	r3, #0
 800751e:	623b      	str	r3, [r7, #32]
 8007520:	4b44      	ldr	r3, [pc, #272]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	4a43      	ldr	r2, [pc, #268]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 8007526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800752a:	6313      	str	r3, [r2, #48]	; 0x30
 800752c:	4b41      	ldr	r3, [pc, #260]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007534:	623b      	str	r3, [r7, #32]
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	2300      	movs	r3, #0
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	4b3d      	ldr	r3, [pc, #244]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	4a3c      	ldr	r2, [pc, #240]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 8007542:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007546:	6313      	str	r3, [r2, #48]	; 0x30
 8007548:	4b3a      	ldr	r3, [pc, #232]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007550:	61fb      	str	r3, [r7, #28]
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	2300      	movs	r3, #0
 8007556:	61bb      	str	r3, [r7, #24]
 8007558:	4b36      	ldr	r3, [pc, #216]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	4a35      	ldr	r2, [pc, #212]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 800755e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007562:	6313      	str	r3, [r2, #48]	; 0x30
 8007564:	4b33      	ldr	r3, [pc, #204]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007570:	2300      	movs	r3, #0
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	4b2f      	ldr	r3, [pc, #188]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	4a2e      	ldr	r2, [pc, #184]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 800757a:	f043 0304 	orr.w	r3, r3, #4
 800757e:	6313      	str	r3, [r2, #48]	; 0x30
 8007580:	4b2c      	ldr	r3, [pc, #176]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	f003 0304 	and.w	r3, r3, #4
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	4b28      	ldr	r3, [pc, #160]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	4a27      	ldr	r2, [pc, #156]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	6313      	str	r3, [r2, #48]	; 0x30
 800759c:	4b25      	ldr	r3, [pc, #148]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	613b      	str	r3, [r7, #16]
 80075a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	4b21      	ldr	r3, [pc, #132]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	4a20      	ldr	r2, [pc, #128]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 80075b2:	f043 0302 	orr.w	r3, r3, #2
 80075b6:	6313      	str	r3, [r2, #48]	; 0x30
 80075b8:	4b1e      	ldr	r3, [pc, #120]	; (8007634 <HAL_ETH_MspInit+0x13c>)
 80075ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80075c4:	2332      	movs	r3, #50	; 0x32
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075c8:	2302      	movs	r3, #2
 80075ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075d0:	2303      	movs	r3, #3
 80075d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075d4:	230b      	movs	r3, #11
 80075d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075dc:	4619      	mov	r1, r3
 80075de:	4816      	ldr	r0, [pc, #88]	; (8007638 <HAL_ETH_MspInit+0x140>)
 80075e0:	f7fc fd72 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80075e4:	2386      	movs	r3, #134	; 0x86
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e8:	2302      	movs	r3, #2
 80075ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075f0:	2303      	movs	r3, #3
 80075f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80075f4:	230b      	movs	r3, #11
 80075f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075fc:	4619      	mov	r1, r3
 80075fe:	480f      	ldr	r0, [pc, #60]	; (800763c <HAL_ETH_MspInit+0x144>)
 8007600:	f7fc fd62 	bl	80040c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007604:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800760a:	2302      	movs	r3, #2
 800760c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800760e:	2300      	movs	r3, #0
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007612:	2303      	movs	r3, #3
 8007614:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007616:	230b      	movs	r3, #11
 8007618:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800761a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800761e:	4619      	mov	r1, r3
 8007620:	4807      	ldr	r0, [pc, #28]	; (8007640 <HAL_ETH_MspInit+0x148>)
 8007622:	f7fc fd51 	bl	80040c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007626:	bf00      	nop
 8007628:	3738      	adds	r7, #56	; 0x38
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40028000 	.word	0x40028000
 8007634:	40023800 	.word	0x40023800
 8007638:	40020800 	.word	0x40020800
 800763c:	40020000 	.word	0x40020000
 8007640:	40020400 	.word	0x40020400

08007644 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800764c:	4b04      	ldr	r3, [pc, #16]	; (8007660 <HAL_ETH_RxCpltCallback+0x1c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 ff35 	bl	80084c0 <osSemaphoreRelease>
}
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000124 	.word	0x20000124

08007664 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08e      	sub	sp, #56	; 0x38
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800766c:	4b51      	ldr	r3, [pc, #324]	; (80077b4 <low_level_init+0x150>)
 800766e:	4a52      	ldr	r2, [pc, #328]	; (80077b8 <low_level_init+0x154>)
 8007670:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007672:	4b50      	ldr	r3, [pc, #320]	; (80077b4 <low_level_init+0x150>)
 8007674:	2201      	movs	r2, #1
 8007676:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007678:	4b4e      	ldr	r3, [pc, #312]	; (80077b4 <low_level_init+0x150>)
 800767a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800767e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007680:	4b4c      	ldr	r3, [pc, #304]	; (80077b4 <low_level_init+0x150>)
 8007682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007686:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8702A_PHY_ADDRESS;
 8007688:	4b4a      	ldr	r3, [pc, #296]	; (80077b4 <low_level_init+0x150>)
 800768a:	2200      	movs	r2, #0
 800768c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800768e:	2300      	movs	r3, #0
 8007690:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007692:	2380      	movs	r3, #128	; 0x80
 8007694:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007696:	23e1      	movs	r3, #225	; 0xe1
 8007698:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800769a:	2300      	movs	r3, #0
 800769c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800769e:	2300      	movs	r3, #0
 80076a0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80076a2:	2300      	movs	r3, #0
 80076a4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80076a6:	4a43      	ldr	r2, [pc, #268]	; (80077b4 <low_level_init+0x150>)
 80076a8:	f107 0308 	add.w	r3, r7, #8
 80076ac:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80076ae:	4b41      	ldr	r3, [pc, #260]	; (80077b4 <low_level_init+0x150>)
 80076b0:	2201      	movs	r2, #1
 80076b2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80076b4:	4b3f      	ldr	r3, [pc, #252]	; (80077b4 <low_level_init+0x150>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80076ba:	4b3e      	ldr	r3, [pc, #248]	; (80077b4 <low_level_init+0x150>)
 80076bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80076c0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80076c2:	483c      	ldr	r0, [pc, #240]	; (80077b4 <low_level_init+0x150>)
 80076c4:	f7fb fb5a 	bl	8002d7c <HAL_ETH_Init>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (hal_eth_init_status == HAL_OK)
 80076ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d108      	bne.n	80076e8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076dc:	f043 0304 	orr.w	r3, r3, #4
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80076e8:	2304      	movs	r3, #4
 80076ea:	4a34      	ldr	r2, [pc, #208]	; (80077bc <low_level_init+0x158>)
 80076ec:	4934      	ldr	r1, [pc, #208]	; (80077c0 <low_level_init+0x15c>)
 80076ee:	4831      	ldr	r0, [pc, #196]	; (80077b4 <low_level_init+0x150>)
 80076f0:	f7fb fce0 	bl	80030b4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80076f4:	2304      	movs	r3, #4
 80076f6:	4a33      	ldr	r2, [pc, #204]	; (80077c4 <low_level_init+0x160>)
 80076f8:	4933      	ldr	r1, [pc, #204]	; (80077c8 <low_level_init+0x164>)
 80076fa:	482e      	ldr	r0, [pc, #184]	; (80077b4 <low_level_init+0x150>)
 80076fc:	f7fb fd43 	bl	8003186 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2206      	movs	r2, #6
 8007704:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007708:	4b2a      	ldr	r3, [pc, #168]	; (80077b4 <low_level_init+0x150>)
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	781a      	ldrb	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007714:	4b27      	ldr	r3, [pc, #156]	; (80077b4 <low_level_init+0x150>)
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	785a      	ldrb	r2, [r3, #1]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007720:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <low_level_init+0x150>)
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	789a      	ldrb	r2, [r3, #2]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800772c:	4b21      	ldr	r3, [pc, #132]	; (80077b4 <low_level_init+0x150>)
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	78da      	ldrb	r2, [r3, #3]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007738:	4b1e      	ldr	r3, [pc, #120]	; (80077b4 <low_level_init+0x150>)
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	791a      	ldrb	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007744:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <low_level_init+0x150>)
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	795a      	ldrb	r2, [r3, #5]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007756:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800775e:	f043 030a 	orr.w	r3, r3, #10
 8007762:	b2da      	uxtb	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800776a:	2200      	movs	r2, #0
 800776c:	2101      	movs	r1, #1
 800776e:	2001      	movs	r0, #1
 8007770:	f000 fdca 	bl	8008308 <osSemaphoreNew>
 8007774:	4603      	mov	r3, r0
 8007776:	4a15      	ldr	r2, [pc, #84]	; (80077cc <low_level_init+0x168>)
 8007778:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800777a:	f107 0310 	add.w	r3, r7, #16
 800777e:	2224      	movs	r2, #36	; 0x24
 8007780:	2100      	movs	r1, #0
 8007782:	4618      	mov	r0, r3
 8007784:	f013 fcb8 	bl	801b0f8 <memset>
  attributes.name = "EthIf";
 8007788:	4b11      	ldr	r3, [pc, #68]	; (80077d0 <low_level_init+0x16c>)
 800778a:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800778c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 8007792:	2330      	movs	r3, #48	; 0x30
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 8007796:	f107 0310 	add.w	r3, r7, #16
 800779a:	461a      	mov	r2, r3
 800779c:	6879      	ldr	r1, [r7, #4]
 800779e:	480d      	ldr	r0, [pc, #52]	; (80077d4 <low_level_init+0x170>)
 80077a0:	f000 fb37 	bl	8007e12 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80077a4:	4803      	ldr	r0, [pc, #12]	; (80077b4 <low_level_init+0x150>)
 80077a6:	f7fc f816 	bl	80037d6 <HAL_ETH_Start>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80077aa:	bf00      	nop
 80077ac:	3738      	adds	r7, #56	; 0x38
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	2000c0e0 	.word	0x2000c0e0
 80077b8:	40028000 	.word	0x40028000
 80077bc:	2000c128 	.word	0x2000c128
 80077c0:	2000a810 	.word	0x2000a810
 80077c4:	2000a890 	.word	0x2000a890
 80077c8:	2000c060 	.word	0x2000c060
 80077cc:	20000124 	.word	0x20000124
 80077d0:	0801c568 	.word	0x0801c568
 80077d4:	08007a7d 	.word	0x08007a7d

080077d8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b08a      	sub	sp, #40	; 0x28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80077e2:	4b4b      	ldr	r3, [pc, #300]	; (8007910 <low_level_output+0x138>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80077fa:	4b45      	ldr	r3, [pc, #276]	; (8007910 <low_level_output+0x138>)
 80077fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fe:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	623b      	str	r3, [r7, #32]
 8007808:	e05a      	b.n	80078c0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	da03      	bge.n	800781a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007812:	23f8      	movs	r3, #248	; 0xf8
 8007814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007818:	e05c      	b.n	80078d4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	895b      	ldrh	r3, [r3, #10]
 800781e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007824:	e02f      	b.n	8007886 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	18d0      	adds	r0, r2, r3
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	18d1      	adds	r1, r2, r3
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800783a:	3304      	adds	r3, #4
 800783c:	461a      	mov	r2, r3
 800783e:	f013 fc4d 	bl	801b0dc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	da03      	bge.n	8007858 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007850:	23f8      	movs	r3, #248	; 0xf8
 8007852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007856:	e03d      	b.n	80078d4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4413      	add	r3, r2
 8007864:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007868:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007874:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007880:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	4413      	add	r3, r2
 800788c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007890:	4293      	cmp	r3, r2
 8007892:	d8c8      	bhi.n	8007826 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	18d0      	adds	r0, r2, r3
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4619      	mov	r1, r3
 80078a6:	f013 fc19 	bl	801b0dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	623b      	str	r3, [r7, #32]
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1a1      	bne.n	800780a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80078c6:	6979      	ldr	r1, [r7, #20]
 80078c8:	4811      	ldr	r0, [pc, #68]	; (8007910 <low_level_output+0x138>)
 80078ca:	f7fb fcc9 	bl	8003260 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80078d4:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <low_level_output+0x138>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078dc:	3314      	adds	r3, #20
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00d      	beq.n	8007904 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80078e8:	4b09      	ldr	r3, [pc, #36]	; (8007910 <low_level_output+0x138>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f0:	3314      	adds	r3, #20
 80078f2:	2220      	movs	r2, #32
 80078f4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <low_level_output+0x138>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fe:	3304      	adds	r3, #4
 8007900:	2200      	movs	r2, #0
 8007902:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007908:	4618      	mov	r0, r3
 800790a:	3728      	adds	r7, #40	; 0x28
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	2000c0e0 	.word	0x2000c0e0

08007914 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b08c      	sub	sp, #48	; 0x30
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800791c:	2300      	movs	r3, #0
 800791e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007920:	2300      	movs	r3, #0
 8007922:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007924:	2300      	movs	r3, #0
 8007926:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007934:	2300      	movs	r3, #0
 8007936:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007938:	484f      	ldr	r0, [pc, #316]	; (8007a78 <low_level_input+0x164>)
 800793a:	f7fb fd7b 	bl	8003434 <HAL_ETH_GetReceivedFrame_IT>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <low_level_input+0x34>

    return NULL;
 8007944:	2300      	movs	r3, #0
 8007946:	e092      	b.n	8007a6e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007948:	4b4b      	ldr	r3, [pc, #300]	; (8007a78 <low_level_input+0x164>)
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800794e:	4b4a      	ldr	r3, [pc, #296]	; (8007a78 <low_level_input+0x164>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007954:	89fb      	ldrh	r3, [r7, #14]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d007      	beq.n	800796a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800795a:	89fb      	ldrh	r3, [r7, #14]
 800795c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007960:	4619      	mov	r1, r3
 8007962:	2000      	movs	r0, #0
 8007964:	f007 f9aa 	bl	800ecbc <pbuf_alloc>
 8007968:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	2b00      	cmp	r3, #0
 800796e:	d04b      	beq.n	8007a08 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007970:	4b41      	ldr	r3, [pc, #260]	; (8007a78 <low_level_input+0x164>)
 8007972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007974:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	62bb      	str	r3, [r7, #40]	; 0x28
 800797e:	e040      	b.n	8007a02 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007982:	895b      	ldrh	r3, [r3, #10]
 8007984:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007986:	2300      	movs	r3, #0
 8007988:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800798a:	e021      	b.n	80079d0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	18d0      	adds	r0, r2, r3
 8007994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	18d1      	adds	r1, r2, r3
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80079a0:	3304      	adds	r3, #4
 80079a2:	461a      	mov	r2, r3
 80079a4:	f013 fb9a 	bl	801b0dc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	4413      	add	r3, r2
 80079ba:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80079be:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80079ca:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	4413      	add	r3, r2
 80079d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80079da:	4293      	cmp	r3, r2
 80079dc:	d8d6      	bhi.n	800798c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	685a      	ldr	r2, [r3, #4]
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	18d0      	adds	r0, r2, r3
 80079e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	4413      	add	r3, r2
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	4619      	mov	r1, r3
 80079f0:	f013 fb74 	bl	801b0dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	4413      	add	r3, r2
 80079fa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1bb      	bne.n	8007980 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007a08:	4b1b      	ldr	r3, [pc, #108]	; (8007a78 <low_level_input+0x164>)
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007a0e:	2300      	movs	r3, #0
 8007a10:	613b      	str	r3, [r7, #16]
 8007a12:	e00b      	b.n	8007a2c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	613b      	str	r3, [r7, #16]
 8007a2c:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <low_level_input+0x164>)
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d3ee      	bcc.n	8007a14 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007a36:	4b10      	ldr	r3, [pc, #64]	; (8007a78 <low_level_input+0x164>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <low_level_input+0x164>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a44:	3314      	adds	r3, #20
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00d      	beq.n	8007a6c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007a50:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <low_level_input+0x164>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a58:	3314      	adds	r3, #20
 8007a5a:	2280      	movs	r2, #128	; 0x80
 8007a5c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007a5e:	4b06      	ldr	r3, [pc, #24]	; (8007a78 <low_level_input+0x164>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a66:	3308      	adds	r3, #8
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3730      	adds	r7, #48	; 0x30
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	2000c0e0 	.word	0x2000c0e0

08007a7c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007a88:	4b12      	ldr	r3, [pc, #72]	; (8007ad4 <ethernetif_input+0x58>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 fcc3 	bl	800841c <osSemaphoreAcquire>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1f5      	bne.n	8007a88 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8007a9c:	480e      	ldr	r0, [pc, #56]	; (8007ad8 <ethernetif_input+0x5c>)
 8007a9e:	f011 f923 	bl	8018ce8 <sys_mutex_lock>
        p = low_level_input( netif );
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff ff36 	bl	8007914 <low_level_input>
 8007aa8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	68f9      	ldr	r1, [r7, #12]
 8007ab6:	68b8      	ldr	r0, [r7, #8]
 8007ab8:	4798      	blx	r3
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007ac0:	68b8      	ldr	r0, [r7, #8]
 8007ac2:	f007 fbdf 	bl	800f284 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007ac6:	4804      	ldr	r0, [pc, #16]	; (8007ad8 <ethernetif_input+0x5c>)
 8007ac8:	f011 f91d 	bl	8018d06 <sys_mutex_unlock>
      } while(p!=NULL);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e4      	bne.n	8007a9c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007ad2:	e7d9      	b.n	8007a88 <ethernetif_input+0xc>
 8007ad4:	20000124 	.word	0x20000124
 8007ad8:	2000d938 	.word	0x2000d938

08007adc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d106      	bne.n	8007af8 <ethernetif_init+0x1c>
 8007aea:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <ethernetif_init+0x48>)
 8007aec:	f240 2223 	movw	r2, #547	; 0x223
 8007af0:	490d      	ldr	r1, [pc, #52]	; (8007b28 <ethernetif_init+0x4c>)
 8007af2:	480e      	ldr	r0, [pc, #56]	; (8007b2c <ethernetif_init+0x50>)
 8007af4:	f013 fbb2 	bl	801b25c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2273      	movs	r2, #115	; 0x73
 8007afc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2274      	movs	r2, #116	; 0x74
 8007b04:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <ethernetif_init+0x54>)
 8007b0c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a08      	ldr	r2, [pc, #32]	; (8007b34 <ethernetif_init+0x58>)
 8007b12:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff fda5 	bl	8007664 <low_level_init>

  return ERR_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	0801c570 	.word	0x0801c570
 8007b28:	0801c58c 	.word	0x0801c58c
 8007b2c:	0801c59c 	.word	0x0801c59c
 8007b30:	08016d49 	.word	0x08016d49
 8007b34:	080077d9 	.word	0x080077d9

08007b38 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007b3c:	f7fa fc0a 	bl	8002354 <HAL_GetTick>
 8007b40:	4603      	mov	r3, r0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	bd80      	pop	{r7, pc}
	...

08007b48 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007b58:	f107 0308 	add.w	r3, r7, #8
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4816      	ldr	r0, [pc, #88]	; (8007bbc <ethernetif_set_link+0x74>)
 8007b62:	f7fb fd6a 	bl	800363a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d108      	bne.n	8007b90 <ethernetif_set_link+0x48>
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d005      	beq.n	8007b90 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f006 ff69 	bl	800ea60 <netif_set_link_up>
 8007b8e:	e011      	b.n	8007bb4 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007b98:	089b      	lsrs	r3, r3, #2
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d007      	beq.n	8007bb4 <ethernetif_set_link+0x6c>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f006 ff8a 	bl	800eac8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8007bb4:	20c8      	movs	r0, #200	; 0xc8
 8007bb6:	f000 f9be 	bl	8007f36 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007bba:	e7cd      	b.n	8007b58 <ethernetif_set_link+0x10>
 8007bbc:	2000c0e0 	.word	0x2000c0e0

08007bc0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007bd6:	089b      	lsrs	r3, r3, #2
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d05d      	beq.n	8007c9e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007be2:	4b34      	ldr	r3, [pc, #208]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d03f      	beq.n	8007c6a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bee:	2100      	movs	r1, #0
 8007bf0:	4830      	ldr	r0, [pc, #192]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007bf2:	f7fb fd8a 	bl	800370a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007bf6:	f7fa fbad 	bl	8002354 <HAL_GetTick>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007bfe:	f107 0308 	add.w	r3, r7, #8
 8007c02:	461a      	mov	r2, r3
 8007c04:	2101      	movs	r1, #1
 8007c06:	482b      	ldr	r0, [pc, #172]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c08:	f7fb fd17 	bl	800363a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007c0c:	f7fa fba2 	bl	8002354 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c1a:	d828      	bhi.n	8007c6e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0eb      	beq.n	8007bfe <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007c26:	f107 0308 	add.w	r3, r7, #8
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	211f      	movs	r1, #31
 8007c2e:	4821      	ldr	r0, [pc, #132]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c30:	f7fb fd03 	bl	800363a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d004      	beq.n	8007c48 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007c3e:	4b1d      	ldr	r3, [pc, #116]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c44:	60da      	str	r2, [r3, #12]
 8007c46:	e002      	b.n	8007c4e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007c48:	4b1a      	ldr	r3, [pc, #104]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007c58:	4b16      	ldr	r3, [pc, #88]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	609a      	str	r2, [r3, #8]
 8007c5e:	e016      	b.n	8007c8e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007c60:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007c66:	609a      	str	r2, [r3, #8]
 8007c68:	e011      	b.n	8007c8e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007c6a:	bf00      	nop
 8007c6c:	e000      	b.n	8007c70 <ethernetif_update_config+0xb0>
          goto error;
 8007c6e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007c70:	4b10      	ldr	r3, [pc, #64]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	08db      	lsrs	r3, r3, #3
 8007c76:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007c78:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007c80:	4313      	orrs	r3, r2
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	2100      	movs	r1, #0
 8007c88:	480a      	ldr	r0, [pc, #40]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c8a:	f7fb fd3e 	bl	800370a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007c8e:	2100      	movs	r1, #0
 8007c90:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c92:	f7fb fdff 	bl	8003894 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007c96:	4807      	ldr	r0, [pc, #28]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007c98:	f7fb fd9d 	bl	80037d6 <HAL_ETH_Start>
 8007c9c:	e002      	b.n	8007ca4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007c9e:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <ethernetif_update_config+0xf4>)
 8007ca0:	f7fb fdc8 	bl	8003834 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f807 	bl	8007cb8 <ethernetif_notify_conn_changed>
}
 8007caa:	bf00      	nop
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	2000c0e0 	.word	0x2000c0e0

08007cb8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <__NVIC_SetPriority>:
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	6039      	str	r1, [r7, #0]
 8007cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	db0a      	blt.n	8007cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	490c      	ldr	r1, [pc, #48]	; (8007d18 <__NVIC_SetPriority+0x4c>)
 8007ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cea:	0112      	lsls	r2, r2, #4
 8007cec:	b2d2      	uxtb	r2, r2
 8007cee:	440b      	add	r3, r1
 8007cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007cf4:	e00a      	b.n	8007d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	4908      	ldr	r1, [pc, #32]	; (8007d1c <__NVIC_SetPriority+0x50>)
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	3b04      	subs	r3, #4
 8007d04:	0112      	lsls	r2, r2, #4
 8007d06:	b2d2      	uxtb	r2, r2
 8007d08:	440b      	add	r3, r1
 8007d0a:	761a      	strb	r2, [r3, #24]
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr
 8007d18:	e000e100 	.word	0xe000e100
 8007d1c:	e000ed00 	.word	0xe000ed00

08007d20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <SysTick_Handler+0x1c>)
 8007d26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d28:	f002 fe10 	bl	800a94c <xTaskGetSchedulerState>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d001      	beq.n	8007d36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d32:	f003 fdb1 	bl	800b898 <xPortSysTickHandler>
  }
}
 8007d36:	bf00      	nop
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	e000e010 	.word	0xe000e010

08007d40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d44:	2100      	movs	r1, #0
 8007d46:	f06f 0004 	mvn.w	r0, #4
 8007d4a:	f7ff ffbf 	bl	8007ccc <__NVIC_SetPriority>
#endif
}
 8007d4e:	bf00      	nop
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d5a:	f3ef 8305 	mrs	r3, IPSR
 8007d5e:	603b      	str	r3, [r7, #0]
  return(result);
 8007d60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007d66:	f06f 0305 	mvn.w	r3, #5
 8007d6a:	607b      	str	r3, [r7, #4]
 8007d6c:	e00c      	b.n	8007d88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <osKernelInitialize+0x44>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d105      	bne.n	8007d82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007d76:	4b08      	ldr	r3, [pc, #32]	; (8007d98 <osKernelInitialize+0x44>)
 8007d78:	2201      	movs	r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	607b      	str	r3, [r7, #4]
 8007d80:	e002      	b.n	8007d88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007d82:	f04f 33ff 	mov.w	r3, #4294967295
 8007d86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d88:	687b      	ldr	r3, [r7, #4]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	20000128 	.word	0x20000128

08007d9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007da2:	f3ef 8305 	mrs	r3, IPSR
 8007da6:	603b      	str	r3, [r7, #0]
  return(result);
 8007da8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007dae:	f06f 0305 	mvn.w	r3, #5
 8007db2:	607b      	str	r3, [r7, #4]
 8007db4:	e010      	b.n	8007dd8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007db6:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <osKernelStart+0x48>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d109      	bne.n	8007dd2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007dbe:	f7ff ffbf 	bl	8007d40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007dc2:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <osKernelStart+0x48>)
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007dc8:	f002 f942 	bl	800a050 <vTaskStartScheduler>
      stat = osOK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	e002      	b.n	8007dd8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007dd8:	687b      	ldr	r3, [r7, #4]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20000128 	.word	0x20000128

08007de8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dee:	f3ef 8305 	mrs	r3, IPSR
 8007df2:	603b      	str	r3, [r7, #0]
  return(result);
 8007df4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007dfa:	f002 fa55 	bl	800a2a8 <xTaskGetTickCountFromISR>
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	e002      	b.n	8007e08 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007e02:	f002 fa41 	bl	800a288 <xTaskGetTickCount>
 8007e06:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007e08:	687b      	ldr	r3, [r7, #4]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b08e      	sub	sp, #56	; 0x38
 8007e16:	af04      	add	r7, sp, #16
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e22:	f3ef 8305 	mrs	r3, IPSR
 8007e26:	617b      	str	r3, [r7, #20]
  return(result);
 8007e28:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d17e      	bne.n	8007f2c <osThreadNew+0x11a>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d07b      	beq.n	8007f2c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e38:	2318      	movs	r3, #24
 8007e3a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295
 8007e44:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d045      	beq.n	8007ed8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <osThreadNew+0x48>
        name = attr->name;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <osThreadNew+0x6e>
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	2b38      	cmp	r3, #56	; 0x38
 8007e72:	d805      	bhi.n	8007e80 <osThreadNew+0x6e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <osThreadNew+0x72>
        return (NULL);
 8007e80:	2300      	movs	r3, #0
 8007e82:	e054      	b.n	8007f2e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d003      	beq.n	8007e94 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	089b      	lsrs	r3, r3, #2
 8007e92:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00e      	beq.n	8007eba <osThreadNew+0xa8>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2bcb      	cmp	r3, #203	; 0xcb
 8007ea2:	d90a      	bls.n	8007eba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d006      	beq.n	8007eba <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <osThreadNew+0xa8>
        mem = 1;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	61bb      	str	r3, [r7, #24]
 8007eb8:	e010      	b.n	8007edc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10c      	bne.n	8007edc <osThreadNew+0xca>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d108      	bne.n	8007edc <osThreadNew+0xca>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d104      	bne.n	8007edc <osThreadNew+0xca>
          mem = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	61bb      	str	r3, [r7, #24]
 8007ed6:	e001      	b.n	8007edc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d110      	bne.n	8007f04 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007eea:	9202      	str	r2, [sp, #8]
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	6a3a      	ldr	r2, [r7, #32]
 8007ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f001 febd 	bl	8009c78 <xTaskCreateStatic>
 8007efe:	4603      	mov	r3, r0
 8007f00:	613b      	str	r3, [r7, #16]
 8007f02:	e013      	b.n	8007f2c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d110      	bne.n	8007f2c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	f107 0310 	add.w	r3, r7, #16
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f001 ff08 	bl	8009d32 <xTaskCreate>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d001      	beq.n	8007f2c <osThreadNew+0x11a>
            hTask = NULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f2c:	693b      	ldr	r3, [r7, #16]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3728      	adds	r7, #40	; 0x28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f3e:	f3ef 8305 	mrs	r3, IPSR
 8007f42:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <osDelay+0x1c>
    stat = osErrorISR;
 8007f4a:	f06f 0305 	mvn.w	r3, #5
 8007f4e:	60fb      	str	r3, [r7, #12]
 8007f50:	e007      	b.n	8007f62 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f002 f843 	bl	8009fe8 <vTaskDelay>
    }
  }

  return (stat);
 8007f62:	68fb      	ldr	r3, [r7, #12]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f003 faaf 	bl	800b4d8 <pvTimerGetTimerID>
 8007f7a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d005      	beq.n	8007f8e <TimerCallback+0x22>
    callb->func (callb->arg);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	6852      	ldr	r2, [r2, #4]
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4798      	blx	r3
  }
}
 8007f8e:	bf00      	nop
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08c      	sub	sp, #48	; 0x30
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fac:	f3ef 8305 	mrs	r3, IPSR
 8007fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8007fb2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d163      	bne.n	8008080 <osTimerNew+0xe8>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d060      	beq.n	8008080 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007fbe:	2008      	movs	r0, #8
 8007fc0:	f003 fcfa 	bl	800b9b8 <pvPortMalloc>
 8007fc4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d059      	beq.n	8008080 <osTimerNew+0xe8>
      callb->func = func;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007fd8:	7afb      	ldrb	r3, [r7, #11]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d102      	bne.n	8007fe4 <osTimerNew+0x4c>
        reload = pdFALSE;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	e001      	b.n	8007fe8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fec:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01c      	beq.n	8008032 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d002      	beq.n	8008006 <osTimerNew+0x6e>
          name = attr->name;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d006      	beq.n	800801c <osTimerNew+0x84>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	2b2b      	cmp	r3, #43	; 0x2b
 8008014:	d902      	bls.n	800801c <osTimerNew+0x84>
          mem = 1;
 8008016:	2301      	movs	r3, #1
 8008018:	61bb      	str	r3, [r7, #24]
 800801a:	e00c      	b.n	8008036 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d108      	bne.n	8008036 <osTimerNew+0x9e>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d104      	bne.n	8008036 <osTimerNew+0x9e>
            mem = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	61bb      	str	r3, [r7, #24]
 8008030:	e001      	b.n	8008036 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d10c      	bne.n	8008056 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	4b12      	ldr	r3, [pc, #72]	; (800808c <osTimerNew+0xf4>)
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	2101      	movs	r1, #1
 800804c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800804e:	f002 fec4 	bl	800adda <xTimerCreateStatic>
 8008052:	6238      	str	r0, [r7, #32]
 8008054:	e00b      	b.n	800806e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d108      	bne.n	800806e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <osTimerNew+0xf4>)
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	2101      	movs	r1, #1
 8008066:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008068:	f002 fe96 	bl	800ad98 <xTimerCreate>
 800806c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <osTimerNew+0xe8>
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <osTimerNew+0xe8>
        vPortFree (callb);
 800807a:	6978      	ldr	r0, [r7, #20]
 800807c:	f003 fd68 	bl	800bb50 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008080:	6a3b      	ldr	r3, [r7, #32]
}
 8008082:	4618      	mov	r0, r3
 8008084:	3728      	adds	r7, #40	; 0x28
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	08007f6d 	.word	0x08007f6d

08008090 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af02      	add	r7, sp, #8
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800809e:	f3ef 8305 	mrs	r3, IPSR
 80080a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80080a4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <osTimerStart+0x22>
    stat = osErrorISR;
 80080aa:	f06f 0305 	mvn.w	r3, #5
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e017      	b.n	80080e2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d103      	bne.n	80080c0 <osTimerStart+0x30>
    stat = osErrorParameter;
 80080b8:	f06f 0303 	mvn.w	r3, #3
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	e010      	b.n	80080e2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80080c0:	2300      	movs	r3, #0
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	2300      	movs	r3, #0
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	2104      	movs	r1, #4
 80080ca:	6938      	ldr	r0, [r7, #16]
 80080cc:	f002 fefe 	bl	800aecc <xTimerGenericCommand>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d102      	bne.n	80080dc <osTimerStart+0x4c>
      stat = osOK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	e002      	b.n	80080e2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80080dc:	f06f 0302 	mvn.w	r3, #2
 80080e0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80080e2:	697b      	ldr	r3, [r7, #20]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f8:	f3ef 8305 	mrs	r3, IPSR
 80080fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80080fe:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008100:	2b00      	cmp	r3, #0
 8008102:	d174      	bne.n	80081ee <osMutexNew+0x102>
    if (attr != NULL) {
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <osMutexNew+0x26>
      type = attr->attr_bits;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	61bb      	str	r3, [r7, #24]
 8008110:	e001      	b.n	8008116 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <osMutexNew+0x3a>
      rmtx = 1U;
 8008120:	2301      	movs	r3, #1
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	e001      	b.n	800812a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d15c      	bne.n	80081ee <osMutexNew+0x102>
      mem = -1;
 8008134:	f04f 33ff 	mov.w	r3, #4294967295
 8008138:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d015      	beq.n	800816c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d006      	beq.n	8008156 <osMutexNew+0x6a>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	2b4f      	cmp	r3, #79	; 0x4f
 800814e:	d902      	bls.n	8008156 <osMutexNew+0x6a>
          mem = 1;
 8008150:	2301      	movs	r3, #1
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	e00c      	b.n	8008170 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d108      	bne.n	8008170 <osMutexNew+0x84>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d104      	bne.n	8008170 <osMutexNew+0x84>
            mem = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	e001      	b.n	8008170 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800816c:	2300      	movs	r3, #0
 800816e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d112      	bne.n	800819c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d007      	beq.n	800818c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	4619      	mov	r1, r3
 8008182:	2004      	movs	r0, #4
 8008184:	f000 fde7 	bl	8008d56 <xQueueCreateMutexStatic>
 8008188:	61f8      	str	r0, [r7, #28]
 800818a:	e016      	b.n	80081ba <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	4619      	mov	r1, r3
 8008192:	2001      	movs	r0, #1
 8008194:	f000 fddf 	bl	8008d56 <xQueueCreateMutexStatic>
 8008198:	61f8      	str	r0, [r7, #28]
 800819a:	e00e      	b.n	80081ba <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10b      	bne.n	80081ba <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d004      	beq.n	80081b2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80081a8:	2004      	movs	r0, #4
 80081aa:	f000 fdbc 	bl	8008d26 <xQueueCreateMutex>
 80081ae:	61f8      	str	r0, [r7, #28]
 80081b0:	e003      	b.n	80081ba <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80081b2:	2001      	movs	r0, #1
 80081b4:	f000 fdb7 	bl	8008d26 <xQueueCreateMutex>
 80081b8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00c      	beq.n	80081da <osMutexNew+0xee>
        if (attr != NULL) {
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <osMutexNew+0xe2>
          name = attr->name;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e001      	b.n	80081d2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80081d2:	68f9      	ldr	r1, [r7, #12]
 80081d4:	69f8      	ldr	r0, [r7, #28]
 80081d6:	f001 fcc7 	bl	8009b68 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d006      	beq.n	80081ee <osMutexNew+0x102>
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	f043 0301 	orr.w	r3, r3, #1
 80081ec:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80081ee:	69fb      	ldr	r3, [r7, #28]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f023 0301 	bic.w	r3, r3, #1
 8008208:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008212:	2300      	movs	r3, #0
 8008214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008216:	f3ef 8305 	mrs	r3, IPSR
 800821a:	60bb      	str	r3, [r7, #8]
  return(result);
 800821c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008222:	f06f 0305 	mvn.w	r3, #5
 8008226:	617b      	str	r3, [r7, #20]
 8008228:	e02c      	b.n	8008284 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008230:	f06f 0303 	mvn.w	r3, #3
 8008234:	617b      	str	r3, [r7, #20]
 8008236:	e025      	b.n	8008284 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d011      	beq.n	8008262 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6938      	ldr	r0, [r7, #16]
 8008242:	f000 fdd7 	bl	8008df4 <xQueueTakeMutexRecursive>
 8008246:	4603      	mov	r3, r0
 8008248:	2b01      	cmp	r3, #1
 800824a:	d01b      	beq.n	8008284 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008252:	f06f 0301 	mvn.w	r3, #1
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	e014      	b.n	8008284 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800825a:	f06f 0302 	mvn.w	r3, #2
 800825e:	617b      	str	r3, [r7, #20]
 8008260:	e010      	b.n	8008284 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6938      	ldr	r0, [r7, #16]
 8008266:	f001 f96b 	bl	8009540 <xQueueSemaphoreTake>
 800826a:	4603      	mov	r3, r0
 800826c:	2b01      	cmp	r3, #1
 800826e:	d009      	beq.n	8008284 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008276:	f06f 0301 	mvn.w	r3, #1
 800827a:	617b      	str	r3, [r7, #20]
 800827c:	e002      	b.n	8008284 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800827e:	f06f 0302 	mvn.w	r3, #2
 8008282:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008284:	697b      	ldr	r3, [r7, #20]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3718      	adds	r7, #24
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800828e:	b580      	push	{r7, lr}
 8008290:	b086      	sub	sp, #24
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f023 0301 	bic.w	r3, r3, #1
 800829c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082aa:	f3ef 8305 	mrs	r3, IPSR
 80082ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80082b0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <osMutexRelease+0x30>
    stat = osErrorISR;
 80082b6:	f06f 0305 	mvn.w	r3, #5
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	e01f      	b.n	80082fe <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d103      	bne.n	80082cc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80082c4:	f06f 0303 	mvn.w	r3, #3
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	e018      	b.n	80082fe <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d009      	beq.n	80082e6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80082d2:	6938      	ldr	r0, [r7, #16]
 80082d4:	f000 fd5a 	bl	8008d8c <xQueueGiveMutexRecursive>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d00f      	beq.n	80082fe <osMutexRelease+0x70>
        stat = osErrorResource;
 80082de:	f06f 0302 	mvn.w	r3, #2
 80082e2:	617b      	str	r3, [r7, #20]
 80082e4:	e00b      	b.n	80082fe <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80082e6:	2300      	movs	r3, #0
 80082e8:	2200      	movs	r2, #0
 80082ea:	2100      	movs	r1, #0
 80082ec:	6938      	ldr	r0, [r7, #16]
 80082ee:	f000 fe21 	bl	8008f34 <xQueueGenericSend>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d002      	beq.n	80082fe <osMutexRelease+0x70>
        stat = osErrorResource;
 80082f8:	f06f 0302 	mvn.w	r3, #2
 80082fc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80082fe:	697b      	ldr	r3, [r7, #20]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	; 0x28
 800830c:	af02      	add	r7, sp, #8
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008314:	2300      	movs	r3, #0
 8008316:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008318:	f3ef 8305 	mrs	r3, IPSR
 800831c:	613b      	str	r3, [r7, #16]
  return(result);
 800831e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008320:	2b00      	cmp	r3, #0
 8008322:	d175      	bne.n	8008410 <osSemaphoreNew+0x108>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d072      	beq.n	8008410 <osSemaphoreNew+0x108>
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	429a      	cmp	r2, r3
 8008330:	d86e      	bhi.n	8008410 <osSemaphoreNew+0x108>
    mem = -1;
 8008332:	f04f 33ff 	mov.w	r3, #4294967295
 8008336:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d015      	beq.n	800836a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d006      	beq.n	8008354 <osSemaphoreNew+0x4c>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	2b4f      	cmp	r3, #79	; 0x4f
 800834c:	d902      	bls.n	8008354 <osSemaphoreNew+0x4c>
        mem = 1;
 800834e:	2301      	movs	r3, #1
 8008350:	61bb      	str	r3, [r7, #24]
 8008352:	e00c      	b.n	800836e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d108      	bne.n	800836e <osSemaphoreNew+0x66>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <osSemaphoreNew+0x66>
          mem = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	61bb      	str	r3, [r7, #24]
 8008368:	e001      	b.n	800836e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800836a:	2300      	movs	r3, #0
 800836c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d04c      	beq.n	8008410 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d128      	bne.n	80083ce <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d10a      	bne.n	8008398 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2203      	movs	r2, #3
 8008388:	9200      	str	r2, [sp, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	2100      	movs	r1, #0
 800838e:	2001      	movs	r0, #1
 8008390:	f000 fbda 	bl	8008b48 <xQueueGenericCreateStatic>
 8008394:	61f8      	str	r0, [r7, #28]
 8008396:	e005      	b.n	80083a4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008398:	2203      	movs	r2, #3
 800839a:	2100      	movs	r1, #0
 800839c:	2001      	movs	r0, #1
 800839e:	f000 fc4b 	bl	8008c38 <xQueueGenericCreate>
 80083a2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d022      	beq.n	80083f0 <osSemaphoreNew+0xe8>
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01f      	beq.n	80083f0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80083b0:	2300      	movs	r3, #0
 80083b2:	2200      	movs	r2, #0
 80083b4:	2100      	movs	r1, #0
 80083b6:	69f8      	ldr	r0, [r7, #28]
 80083b8:	f000 fdbc 	bl	8008f34 <xQueueGenericSend>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d016      	beq.n	80083f0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80083c2:	69f8      	ldr	r0, [r7, #28]
 80083c4:	f001 fa84 	bl	80098d0 <vQueueDelete>
            hSemaphore = NULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	61fb      	str	r3, [r7, #28]
 80083cc:	e010      	b.n	80083f0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d108      	bne.n	80083e6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	461a      	mov	r2, r3
 80083da:	68b9      	ldr	r1, [r7, #8]
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 fd3f 	bl	8008e60 <xQueueCreateCountingSemaphoreStatic>
 80083e2:	61f8      	str	r0, [r7, #28]
 80083e4:	e004      	b.n	80083f0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fd70 	bl	8008ece <xQueueCreateCountingSemaphore>
 80083ee:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00c      	beq.n	8008410 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <osSemaphoreNew+0xfc>
          name = attr->name;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	e001      	b.n	8008408 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008408:	6979      	ldr	r1, [r7, #20]
 800840a:	69f8      	ldr	r0, [r7, #28]
 800840c:	f001 fbac 	bl	8009b68 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008410:	69fb      	ldr	r3, [r7, #28]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3720      	adds	r7, #32
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800842a:	2300      	movs	r3, #0
 800842c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008434:	f06f 0303 	mvn.w	r3, #3
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	e039      	b.n	80084b0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800843c:	f3ef 8305 	mrs	r3, IPSR
 8008440:	60fb      	str	r3, [r7, #12]
  return(result);
 8008442:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008444:	2b00      	cmp	r3, #0
 8008446:	d022      	beq.n	800848e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800844e:	f06f 0303 	mvn.w	r3, #3
 8008452:	617b      	str	r3, [r7, #20]
 8008454:	e02c      	b.n	80084b0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008456:	2300      	movs	r3, #0
 8008458:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800845a:	f107 0308 	add.w	r3, r7, #8
 800845e:	461a      	mov	r2, r3
 8008460:	2100      	movs	r1, #0
 8008462:	6938      	ldr	r0, [r7, #16]
 8008464:	f001 f978 	bl	8009758 <xQueueReceiveFromISR>
 8008468:	4603      	mov	r3, r0
 800846a:	2b01      	cmp	r3, #1
 800846c:	d003      	beq.n	8008476 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800846e:	f06f 0302 	mvn.w	r3, #2
 8008472:	617b      	str	r3, [r7, #20]
 8008474:	e01c      	b.n	80084b0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d019      	beq.n	80084b0 <osSemaphoreAcquire+0x94>
 800847c:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <osSemaphoreAcquire+0xa0>)
 800847e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	e010      	b.n	80084b0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6938      	ldr	r0, [r7, #16]
 8008492:	f001 f855 	bl	8009540 <xQueueSemaphoreTake>
 8008496:	4603      	mov	r3, r0
 8008498:	2b01      	cmp	r3, #1
 800849a:	d009      	beq.n	80084b0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80084a2:	f06f 0301 	mvn.w	r3, #1
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	e002      	b.n	80084b0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80084aa:	f06f 0302 	mvn.w	r3, #2
 80084ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80084b0:	697b      	ldr	r3, [r7, #20]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3718      	adds	r7, #24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	e000ed04 	.word	0xe000ed04

080084c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d103      	bne.n	80084de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80084d6:	f06f 0303 	mvn.w	r3, #3
 80084da:	617b      	str	r3, [r7, #20]
 80084dc:	e02c      	b.n	8008538 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084de:	f3ef 8305 	mrs	r3, IPSR
 80084e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80084e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01a      	beq.n	8008520 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80084ee:	f107 0308 	add.w	r3, r7, #8
 80084f2:	4619      	mov	r1, r3
 80084f4:	6938      	ldr	r0, [r7, #16]
 80084f6:	f000 feb6 	bl	8009266 <xQueueGiveFromISR>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d003      	beq.n	8008508 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008500:	f06f 0302 	mvn.w	r3, #2
 8008504:	617b      	str	r3, [r7, #20]
 8008506:	e017      	b.n	8008538 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d014      	beq.n	8008538 <osSemaphoreRelease+0x78>
 800850e:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <osSemaphoreRelease+0x84>)
 8008510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	e00b      	b.n	8008538 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008520:	2300      	movs	r3, #0
 8008522:	2200      	movs	r2, #0
 8008524:	2100      	movs	r1, #0
 8008526:	6938      	ldr	r0, [r7, #16]
 8008528:	f000 fd04 	bl	8008f34 <xQueueGenericSend>
 800852c:	4603      	mov	r3, r0
 800852e:	2b01      	cmp	r3, #1
 8008530:	d002      	beq.n	8008538 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008532:	f06f 0302 	mvn.w	r3, #2
 8008536:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008538:	697b      	ldr	r3, [r7, #20]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008554:	f3ef 8305 	mrs	r3, IPSR
 8008558:	60fb      	str	r3, [r7, #12]
  return(result);
 800855a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800855c:	2b00      	cmp	r3, #0
 800855e:	d003      	beq.n	8008568 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008560:	f06f 0305 	mvn.w	r3, #5
 8008564:	617b      	str	r3, [r7, #20]
 8008566:	e00e      	b.n	8008586 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800856e:	f06f 0303 	mvn.w	r3, #3
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	e007      	b.n	8008586 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008576:	6938      	ldr	r0, [r7, #16]
 8008578:	f001 fb20 	bl	8009bbc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008580:	6938      	ldr	r0, [r7, #16]
 8008582:	f001 f9a5 	bl	80098d0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008586:	697b      	ldr	r3, [r7, #20]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3718      	adds	r7, #24
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008590:	b580      	push	{r7, lr}
 8008592:	b08a      	sub	sp, #40	; 0x28
 8008594:	af02      	add	r7, sp, #8
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085a0:	f3ef 8305 	mrs	r3, IPSR
 80085a4:	613b      	str	r3, [r7, #16]
  return(result);
 80085a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d15f      	bne.n	800866c <osMessageQueueNew+0xdc>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d05c      	beq.n	800866c <osMessageQueueNew+0xdc>
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d059      	beq.n	800866c <osMessageQueueNew+0xdc>
    mem = -1;
 80085b8:	f04f 33ff 	mov.w	r3, #4294967295
 80085bc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d029      	beq.n	8008618 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d012      	beq.n	80085f2 <osMessageQueueNew+0x62>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	2b4f      	cmp	r3, #79	; 0x4f
 80085d2:	d90e      	bls.n	80085f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00a      	beq.n	80085f2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	695a      	ldr	r2, [r3, #20]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	fb01 f303 	mul.w	r3, r1, r3
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d302      	bcc.n	80085f2 <osMessageQueueNew+0x62>
        mem = 1;
 80085ec:	2301      	movs	r3, #1
 80085ee:	61bb      	str	r3, [r7, #24]
 80085f0:	e014      	b.n	800861c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d110      	bne.n	800861c <osMessageQueueNew+0x8c>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10c      	bne.n	800861c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008606:	2b00      	cmp	r3, #0
 8008608:	d108      	bne.n	800861c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <osMessageQueueNew+0x8c>
          mem = 0;
 8008612:	2300      	movs	r3, #0
 8008614:	61bb      	str	r3, [r7, #24]
 8008616:	e001      	b.n	800861c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	2b01      	cmp	r3, #1
 8008620:	d10b      	bne.n	800863a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691a      	ldr	r2, [r3, #16]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	2100      	movs	r1, #0
 800862c:	9100      	str	r1, [sp, #0]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 fa89 	bl	8008b48 <xQueueGenericCreateStatic>
 8008636:	61f8      	str	r0, [r7, #28]
 8008638:	e008      	b.n	800864c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d105      	bne.n	800864c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008640:	2200      	movs	r2, #0
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 faf7 	bl	8008c38 <xQueueGenericCreate>
 800864a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00c      	beq.n	800866c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	e001      	b.n	8008664 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008664:	6979      	ldr	r1, [r7, #20]
 8008666:	69f8      	ldr	r0, [r7, #28]
 8008668:	f001 fa7e 	bl	8009b68 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800866c:	69fb      	ldr	r3, [r7, #28]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3720      	adds	r7, #32
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	4613      	mov	r3, r2
 8008686:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800868c:	2300      	movs	r3, #0
 800868e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008690:	f3ef 8305 	mrs	r3, IPSR
 8008694:	617b      	str	r3, [r7, #20]
  return(result);
 8008696:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008698:	2b00      	cmp	r3, #0
 800869a:	d028      	beq.n	80086ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d005      	beq.n	80086ae <osMessageQueuePut+0x36>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <osMessageQueuePut+0x36>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80086ae:	f06f 0303 	mvn.w	r3, #3
 80086b2:	61fb      	str	r3, [r7, #28]
 80086b4:	e038      	b.n	8008728 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80086b6:	2300      	movs	r3, #0
 80086b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80086ba:	f107 0210 	add.w	r2, r7, #16
 80086be:	2300      	movs	r3, #0
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	69b8      	ldr	r0, [r7, #24]
 80086c4:	f000 fd34 	bl	8009130 <xQueueGenericSendFromISR>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d003      	beq.n	80086d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80086ce:	f06f 0302 	mvn.w	r3, #2
 80086d2:	61fb      	str	r3, [r7, #28]
 80086d4:	e028      	b.n	8008728 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d025      	beq.n	8008728 <osMessageQueuePut+0xb0>
 80086dc:	4b15      	ldr	r3, [pc, #84]	; (8008734 <osMessageQueuePut+0xbc>)
 80086de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	e01c      	b.n	8008728 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <osMessageQueuePut+0x82>
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d103      	bne.n	8008702 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80086fa:	f06f 0303 	mvn.w	r3, #3
 80086fe:	61fb      	str	r3, [r7, #28]
 8008700:	e012      	b.n	8008728 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008702:	2300      	movs	r3, #0
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	69b8      	ldr	r0, [r7, #24]
 800870a:	f000 fc13 	bl	8008f34 <xQueueGenericSend>
 800870e:	4603      	mov	r3, r0
 8008710:	2b01      	cmp	r3, #1
 8008712:	d009      	beq.n	8008728 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800871a:	f06f 0301 	mvn.w	r3, #1
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	e002      	b.n	8008728 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008722:	f06f 0302 	mvn.w	r3, #2
 8008726:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008728:	69fb      	ldr	r3, [r7, #28]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3720      	adds	r7, #32
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	e000ed04 	.word	0xe000ed04

08008738 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800874a:	2300      	movs	r3, #0
 800874c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800874e:	f3ef 8305 	mrs	r3, IPSR
 8008752:	617b      	str	r3, [r7, #20]
  return(result);
 8008754:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008756:	2b00      	cmp	r3, #0
 8008758:	d028      	beq.n	80087ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d005      	beq.n	800876c <osMessageQueueGet+0x34>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <osMessageQueueGet+0x34>
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d003      	beq.n	8008774 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800876c:	f06f 0303 	mvn.w	r3, #3
 8008770:	61fb      	str	r3, [r7, #28]
 8008772:	e037      	b.n	80087e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008774:	2300      	movs	r3, #0
 8008776:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008778:	f107 0310 	add.w	r3, r7, #16
 800877c:	461a      	mov	r2, r3
 800877e:	68b9      	ldr	r1, [r7, #8]
 8008780:	69b8      	ldr	r0, [r7, #24]
 8008782:	f000 ffe9 	bl	8009758 <xQueueReceiveFromISR>
 8008786:	4603      	mov	r3, r0
 8008788:	2b01      	cmp	r3, #1
 800878a:	d003      	beq.n	8008794 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800878c:	f06f 0302 	mvn.w	r3, #2
 8008790:	61fb      	str	r3, [r7, #28]
 8008792:	e027      	b.n	80087e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d024      	beq.n	80087e4 <osMessageQueueGet+0xac>
 800879a:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <osMessageQueueGet+0xb8>)
 800879c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	e01b      	b.n	80087e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <osMessageQueueGet+0x80>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d103      	bne.n	80087c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80087b8:	f06f 0303 	mvn.w	r3, #3
 80087bc:	61fb      	str	r3, [r7, #28]
 80087be:	e011      	b.n	80087e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80087c0:	683a      	ldr	r2, [r7, #0]
 80087c2:	68b9      	ldr	r1, [r7, #8]
 80087c4:	69b8      	ldr	r0, [r7, #24]
 80087c6:	f000 fddb 	bl	8009380 <xQueueReceive>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d009      	beq.n	80087e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80087d6:	f06f 0301 	mvn.w	r3, #1
 80087da:	61fb      	str	r3, [r7, #28]
 80087dc:	e002      	b.n	80087e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80087de:	f06f 0302 	mvn.w	r3, #2
 80087e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80087e4:	69fb      	ldr	r3, [r7, #28]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	e000ed04 	.word	0xe000ed04

080087f4 <osMessageQueueGetMsgSize>:
  }

  return (capacity);
}

uint32_t osMessageQueueGetMsgSize (osMessageQueueId_t mq_id) {
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	60bb      	str	r3, [r7, #8]
  uint32_t size;

  if (mq == NULL) {
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d102      	bne.n	800880c <osMessageQueueGetMsgSize+0x18>
    size = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	60fb      	str	r3, [r7, #12]
 800880a:	e002      	b.n	8008812 <osMessageQueueGetMsgSize+0x1e>
  } else {
    /* size = pxQueue->uxItemSize */
    size = mq->uxDummy4[2];
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008810:	60fb      	str	r3, [r7, #12]
  }

  return (size);
 8008812:	68fb      	ldr	r3, [r7, #12]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <osMessageQueueGetCount+0x18>
    count = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	e00e      	b.n	8008856 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008838:	f3ef 8305 	mrs	r3, IPSR
 800883c:	60fb      	str	r3, [r7, #12]
  return(result);
 800883e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008840:	2b00      	cmp	r3, #0
 8008842:	d004      	beq.n	800884e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008844:	6938      	ldr	r0, [r7, #16]
 8008846:	f001 f825 	bl	8009894 <uxQueueMessagesWaitingFromISR>
 800884a:	6178      	str	r0, [r7, #20]
 800884c:	e003      	b.n	8008856 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800884e:	6938      	ldr	r0, [r7, #16]
 8008850:	f001 f802 	bl	8009858 <uxQueueMessagesWaiting>
 8008854:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8008856:	697b      	ldr	r3, [r7, #20]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800886c:	f3ef 8305 	mrs	r3, IPSR
 8008870:	60fb      	str	r3, [r7, #12]
  return(result);
 8008872:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8008878:	f06f 0305 	mvn.w	r3, #5
 800887c:	617b      	str	r3, [r7, #20]
 800887e:	e00e      	b.n	800889e <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8008886:	f06f 0303 	mvn.w	r3, #3
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e007      	b.n	800889e <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800888e:	6938      	ldr	r0, [r7, #16]
 8008890:	f001 f994 	bl	8009bbc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008894:	2300      	movs	r3, #0
 8008896:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8008898:	6938      	ldr	r0, [r7, #16]
 800889a:	f001 f819 	bl	80098d0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800889e:	697b      	ldr	r3, [r7, #20]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4a07      	ldr	r2, [pc, #28]	; (80088d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80088b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	4a06      	ldr	r2, [pc, #24]	; (80088d8 <vApplicationGetIdleTaskMemory+0x30>)
 80088be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2280      	movs	r2, #128	; 0x80
 80088c4:	601a      	str	r2, [r3, #0]
}
 80088c6:	bf00      	nop
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	2000012c 	.word	0x2000012c
 80088d8:	200001f8 	.word	0x200001f8

080088dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	4a07      	ldr	r2, [pc, #28]	; (8008908 <vApplicationGetTimerTaskMemory+0x2c>)
 80088ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	4a06      	ldr	r2, [pc, #24]	; (800890c <vApplicationGetTimerTaskMemory+0x30>)
 80088f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088fa:	601a      	str	r2, [r3, #0]
}
 80088fc:	bf00      	nop
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	200003f8 	.word	0x200003f8
 800890c:	200004c4 	.word	0x200004c4

08008910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f103 0208 	add.w	r2, r3, #8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f04f 32ff 	mov.w	r2, #4294967295
 8008928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f103 0208 	add.w	r2, r3, #8
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f103 0208 	add.w	r2, r3, #8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800896a:	b480      	push	{r7}
 800896c:	b085      	sub	sp, #20
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689a      	ldr	r2, [r3, #8]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	601a      	str	r2, [r3, #0]
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr

080089b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80089b2:	b480      	push	{r7}
 80089b4:	b085      	sub	sp, #20
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d103      	bne.n	80089d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	60fb      	str	r3, [r7, #12]
 80089d0:	e00c      	b.n	80089ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3308      	adds	r3, #8
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	e002      	b.n	80089e0 <vListInsert+0x2e>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	60fb      	str	r3, [r7, #12]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d2f6      	bcs.n	80089da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	601a      	str	r2, [r3, #0]
}
 8008a18:	bf00      	nop
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6892      	ldr	r2, [r2, #8]
 8008a3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6852      	ldr	r2, [r2, #4]
 8008a44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d103      	bne.n	8008a58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689a      	ldr	r2, [r3, #8]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	1e5a      	subs	r2, r3, #1
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10a      	bne.n	8008aa2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a9e:	bf00      	nop
 8008aa0:	e7fe      	b.n	8008aa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008aa2:	f002 fe67 	bl	800b774 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aae:	68f9      	ldr	r1, [r7, #12]
 8008ab0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	441a      	add	r2, r3
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	68f9      	ldr	r1, [r7, #12]
 8008ad6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	441a      	add	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	22ff      	movs	r2, #255	; 0xff
 8008ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	22ff      	movs	r2, #255	; 0xff
 8008aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d114      	bne.n	8008b22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d01a      	beq.n	8008b36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3310      	adds	r3, #16
 8008b04:	4618      	mov	r0, r3
 8008b06:	f001 fd4f 	bl	800a5a8 <xTaskRemoveFromEventList>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d012      	beq.n	8008b36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008b10:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <xQueueGenericReset+0xcc>)
 8008b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b16:	601a      	str	r2, [r3, #0]
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	e009      	b.n	8008b36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3310      	adds	r3, #16
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff fef2 	bl	8008910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3324      	adds	r3, #36	; 0x24
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7ff feed 	bl	8008910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008b36:	f002 fe4d 	bl	800b7d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008b3a:	2301      	movs	r3, #1
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	e000ed04 	.word	0xe000ed04

08008b48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08e      	sub	sp, #56	; 0x38
 8008b4c:	af02      	add	r7, sp, #8
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10a      	bne.n	8008b72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008b6e:	bf00      	nop
 8008b70:	e7fe      	b.n	8008b70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b8a:	bf00      	nop
 8008b8c:	e7fe      	b.n	8008b8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <xQueueGenericCreateStatic+0x52>
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <xQueueGenericCreateStatic+0x56>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <xQueueGenericCreateStatic+0x58>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10a      	bne.n	8008bba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	623b      	str	r3, [r7, #32]
}
 8008bb6:	bf00      	nop
 8008bb8:	e7fe      	b.n	8008bb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d102      	bne.n	8008bc6 <xQueueGenericCreateStatic+0x7e>
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <xQueueGenericCreateStatic+0x82>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e000      	b.n	8008bcc <xQueueGenericCreateStatic+0x84>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10a      	bne.n	8008be6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	61fb      	str	r3, [r7, #28]
}
 8008be2:	bf00      	nop
 8008be4:	e7fe      	b.n	8008be4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008be6:	2350      	movs	r3, #80	; 0x50
 8008be8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	2b50      	cmp	r3, #80	; 0x50
 8008bee:	d00a      	beq.n	8008c06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	61bb      	str	r3, [r7, #24]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008c06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00d      	beq.n	8008c2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	4613      	mov	r3, r2
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	68b9      	ldr	r1, [r7, #8]
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f000 f83f 	bl	8008cac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3730      	adds	r7, #48	; 0x30
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b08a      	sub	sp, #40	; 0x28
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	4613      	mov	r3, r2
 8008c44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10a      	bne.n	8008c62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c50:	f383 8811 	msr	BASEPRI, r3
 8008c54:	f3bf 8f6f 	isb	sy
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	613b      	str	r3, [r7, #16]
}
 8008c5e:	bf00      	nop
 8008c60:	e7fe      	b.n	8008c60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	68ba      	ldr	r2, [r7, #8]
 8008c66:	fb02 f303 	mul.w	r3, r2, r3
 8008c6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	3350      	adds	r3, #80	; 0x50
 8008c70:	4618      	mov	r0, r3
 8008c72:	f002 fea1 	bl	800b9b8 <pvPortMalloc>
 8008c76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d011      	beq.n	8008ca2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	3350      	adds	r3, #80	; 0x50
 8008c86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008c90:	79fa      	ldrb	r2, [r7, #7]
 8008c92:	69bb      	ldr	r3, [r7, #24]
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	4613      	mov	r3, r2
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 f805 	bl	8008cac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
	}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3720      	adds	r7, #32
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d103      	bne.n	8008cc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	e002      	b.n	8008cce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008cda:	2101      	movs	r1, #1
 8008cdc:	69b8      	ldr	r0, [r7, #24]
 8008cde:	f7ff fecb 	bl	8008a78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	78fa      	ldrb	r2, [r7, #3]
 8008ce6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}

08008cf2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00e      	beq.n	8008d1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d12:	2300      	movs	r3, #0
 8008d14:	2200      	movs	r2, #0
 8008d16:	2100      	movs	r1, #0
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 f90b 	bl	8008f34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d30:	2301      	movs	r3, #1
 8008d32:	617b      	str	r3, [r7, #20]
 8008d34:	2300      	movs	r3, #0
 8008d36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	6939      	ldr	r1, [r7, #16]
 8008d3e:	6978      	ldr	r0, [r7, #20]
 8008d40:	f7ff ff7a 	bl	8008c38 <xQueueGenericCreate>
 8008d44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff ffd3 	bl	8008cf2 <prvInitialiseMutex>

		return xNewQueue;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
	}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b088      	sub	sp, #32
 8008d5a:	af02      	add	r7, sp, #8
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	6039      	str	r1, [r7, #0]
 8008d60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008d62:	2301      	movs	r3, #1
 8008d64:	617b      	str	r3, [r7, #20]
 8008d66:	2300      	movs	r3, #0
 8008d68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008d6a:	79fb      	ldrb	r3, [r7, #7]
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2200      	movs	r2, #0
 8008d72:	6939      	ldr	r1, [r7, #16]
 8008d74:	6978      	ldr	r0, [r7, #20]
 8008d76:	f7ff fee7 	bl	8008b48 <xQueueGenericCreateStatic>
 8008d7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f7ff ffb8 	bl	8008cf2 <prvInitialiseMutex>

		return xNewQueue;
 8008d82:	68fb      	ldr	r3, [r7, #12]
	}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008d8c:	b590      	push	{r4, r7, lr}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	60fb      	str	r3, [r7, #12]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	689c      	ldr	r4, [r3, #8]
 8008db8:	f001 fdb8 	bl	800a92c <xTaskGetCurrentTaskHandle>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	429c      	cmp	r4, r3
 8008dc0:	d111      	bne.n	8008de6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	1e5a      	subs	r2, r3, #1
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d105      	bne.n	8008de0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6938      	ldr	r0, [r7, #16]
 8008ddc:	f000 f8aa 	bl	8008f34 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008de0:	2301      	movs	r3, #1
 8008de2:	617b      	str	r3, [r7, #20]
 8008de4:	e001      	b.n	8008dea <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008dea:	697b      	ldr	r3, [r7, #20]
	}
 8008dec:	4618      	mov	r0, r3
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd90      	pop	{r4, r7, pc}

08008df4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008df4:	b590      	push	{r4, r7, lr}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60fb      	str	r3, [r7, #12]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	689c      	ldr	r4, [r3, #8]
 8008e22:	f001 fd83 	bl	800a92c <xTaskGetCurrentTaskHandle>
 8008e26:	4603      	mov	r3, r0
 8008e28:	429c      	cmp	r4, r3
 8008e2a:	d107      	bne.n	8008e3c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	1c5a      	adds	r2, r3, #1
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008e36:	2301      	movs	r3, #1
 8008e38:	617b      	str	r3, [r7, #20]
 8008e3a:	e00c      	b.n	8008e56 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6938      	ldr	r0, [r7, #16]
 8008e40:	f000 fb7e 	bl	8009540 <xQueueSemaphoreTake>
 8008e44:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	1c5a      	adds	r2, r3, #1
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008e56:	697b      	ldr	r3, [r7, #20]
	}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	371c      	adds	r7, #28
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd90      	pop	{r4, r7, pc}

08008e60 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	; 0x28
 8008e64:	af02      	add	r7, sp, #8
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	61bb      	str	r3, [r7, #24]
}
 8008e84:	bf00      	nop
 8008e86:	e7fe      	b.n	8008e86 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d90a      	bls.n	8008ea6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	617b      	str	r3, [r7, #20]
}
 8008ea2:	bf00      	nop
 8008ea4:	e7fe      	b.n	8008ea4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	2100      	movs	r1, #0
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f7ff fe49 	bl	8008b48 <xQueueGenericCreateStatic>
 8008eb6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d002      	beq.n	8008ec4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
	}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b086      	sub	sp, #24
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	613b      	str	r3, [r7, #16]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d90a      	bls.n	8008f12 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	60fb      	str	r3, [r7, #12]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008f12:	2202      	movs	r2, #2
 8008f14:	2100      	movs	r1, #0
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff fe8e 	bl	8008c38 <xQueueGenericCreate>
 8008f1c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008f2a:	697b      	ldr	r3, [r7, #20]
	}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08e      	sub	sp, #56	; 0x38
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f42:	2300      	movs	r3, #0
 8008f44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10a      	bne.n	8008f66 <xQueueGenericSend+0x32>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f62:	bf00      	nop
 8008f64:	e7fe      	b.n	8008f64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <xQueueGenericSend+0x40>
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <xQueueGenericSend+0x44>
 8008f74:	2301      	movs	r3, #1
 8008f76:	e000      	b.n	8008f7a <xQueueGenericSend+0x46>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <xQueueGenericSend+0x60>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f90:	bf00      	nop
 8008f92:	e7fe      	b.n	8008f92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d103      	bne.n	8008fa2 <xQueueGenericSend+0x6e>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d101      	bne.n	8008fa6 <xQueueGenericSend+0x72>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e000      	b.n	8008fa8 <xQueueGenericSend+0x74>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	623b      	str	r3, [r7, #32]
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008fc2:	f001 fcc3 	bl	800a94c <xTaskGetSchedulerState>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <xQueueGenericSend+0x9e>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <xQueueGenericSend+0xa2>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <xQueueGenericSend+0xa4>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10a      	bne.n	8008ff2 <xQueueGenericSend+0xbe>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	61fb      	str	r3, [r7, #28]
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ff2:	f002 fbbf 	bl	800b774 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d302      	bcc.n	8009008 <xQueueGenericSend+0xd4>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b02      	cmp	r3, #2
 8009006:	d129      	bne.n	800905c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	68b9      	ldr	r1, [r7, #8]
 800900c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800900e:	f000 fc9a 	bl	8009946 <prvCopyDataToQueue>
 8009012:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d010      	beq.n	800903e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	3324      	adds	r3, #36	; 0x24
 8009020:	4618      	mov	r0, r3
 8009022:	f001 fac1 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d013      	beq.n	8009054 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800902c:	4b3f      	ldr	r3, [pc, #252]	; (800912c <xQueueGenericSend+0x1f8>)
 800902e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	f3bf 8f6f 	isb	sy
 800903c:	e00a      	b.n	8009054 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009044:	4b39      	ldr	r3, [pc, #228]	; (800912c <xQueueGenericSend+0x1f8>)
 8009046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009054:	f002 fbbe 	bl	800b7d4 <vPortExitCritical>
				return pdPASS;
 8009058:	2301      	movs	r3, #1
 800905a:	e063      	b.n	8009124 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d103      	bne.n	800906a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009062:	f002 fbb7 	bl	800b7d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009066:	2300      	movs	r3, #0
 8009068:	e05c      	b.n	8009124 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800906a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906c:	2b00      	cmp	r3, #0
 800906e:	d106      	bne.n	800907e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009070:	f107 0314 	add.w	r3, r7, #20
 8009074:	4618      	mov	r0, r3
 8009076:	f001 fafb 	bl	800a670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800907a:	2301      	movs	r3, #1
 800907c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800907e:	f002 fba9 	bl	800b7d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009082:	f001 f855 	bl	800a130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009086:	f002 fb75 	bl	800b774 <vPortEnterCritical>
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009090:	b25b      	sxtb	r3, r3
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009096:	d103      	bne.n	80090a0 <xQueueGenericSend+0x16c>
 8009098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090a6:	b25b      	sxtb	r3, r3
 80090a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ac:	d103      	bne.n	80090b6 <xQueueGenericSend+0x182>
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090b6:	f002 fb8d 	bl	800b7d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090ba:	1d3a      	adds	r2, r7, #4
 80090bc:	f107 0314 	add.w	r3, r7, #20
 80090c0:	4611      	mov	r1, r2
 80090c2:	4618      	mov	r0, r3
 80090c4:	f001 faea 	bl	800a69c <xTaskCheckForTimeOut>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d124      	bne.n	8009118 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090d0:	f000 fd31 	bl	8009b36 <prvIsQueueFull>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d018      	beq.n	800910c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	3310      	adds	r3, #16
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f001 fa10 	bl	800a508 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ea:	f000 fcbc 	bl	8009a66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090ee:	f001 f82d 	bl	800a14c <xTaskResumeAll>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f47f af7c 	bne.w	8008ff2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090fa:	4b0c      	ldr	r3, [pc, #48]	; (800912c <xQueueGenericSend+0x1f8>)
 80090fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	e772      	b.n	8008ff2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800910c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800910e:	f000 fcaa 	bl	8009a66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009112:	f001 f81b 	bl	800a14c <xTaskResumeAll>
 8009116:	e76c      	b.n	8008ff2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800911a:	f000 fca4 	bl	8009a66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800911e:	f001 f815 	bl	800a14c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009122:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009124:	4618      	mov	r0, r3
 8009126:	3738      	adds	r7, #56	; 0x38
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	e000ed04 	.word	0xe000ed04

08009130 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b090      	sub	sp, #64	; 0x40
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
 800913c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d103      	bne.n	800916c <xQueueGenericSendFromISR+0x3c>
 8009164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009168:	2b00      	cmp	r3, #0
 800916a:	d101      	bne.n	8009170 <xQueueGenericSendFromISR+0x40>
 800916c:	2301      	movs	r3, #1
 800916e:	e000      	b.n	8009172 <xQueueGenericSendFromISR+0x42>
 8009170:	2300      	movs	r3, #0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10a      	bne.n	800918c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917a:	f383 8811 	msr	BASEPRI, r3
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f3bf 8f4f 	dsb	sy
 8009186:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009188:	bf00      	nop
 800918a:	e7fe      	b.n	800918a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d103      	bne.n	800919a <xQueueGenericSendFromISR+0x6a>
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009196:	2b01      	cmp	r3, #1
 8009198:	d101      	bne.n	800919e <xQueueGenericSendFromISR+0x6e>
 800919a:	2301      	movs	r3, #1
 800919c:	e000      	b.n	80091a0 <xQueueGenericSendFromISR+0x70>
 800919e:	2300      	movs	r3, #0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	623b      	str	r3, [r7, #32]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091ba:	f002 fbbd 	bl	800b938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80091be:	f3ef 8211 	mrs	r2, BASEPRI
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	61fa      	str	r2, [r7, #28]
 80091d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d302      	bcc.n	80091ec <xQueueGenericSendFromISR+0xbc>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d12f      	bne.n	800924c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091fc:	683a      	ldr	r2, [r7, #0]
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009202:	f000 fba0 	bl	8009946 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009206:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800920a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920e:	d112      	bne.n	8009236 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	d016      	beq.n	8009246 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	3324      	adds	r3, #36	; 0x24
 800921c:	4618      	mov	r0, r3
 800921e:	f001 f9c3 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00e      	beq.n	8009246 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	e007      	b.n	8009246 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800923a:	3301      	adds	r3, #1
 800923c:	b2db      	uxtb	r3, r3
 800923e:	b25a      	sxtb	r2, r3
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009246:	2301      	movs	r3, #1
 8009248:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800924a:	e001      	b.n	8009250 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800924c:	2300      	movs	r3, #0
 800924e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009252:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800925a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800925c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800925e:	4618      	mov	r0, r3
 8009260:	3740      	adds	r7, #64	; 0x40
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b08e      	sub	sp, #56	; 0x38
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10a      	bne.n	8009290 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	623b      	str	r3, [r7, #32]
}
 800928c:	bf00      	nop
 800928e:	e7fe      	b.n	800928e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00a      	beq.n	80092ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	61fb      	str	r3, [r7, #28]
}
 80092aa:	bf00      	nop
 80092ac:	e7fe      	b.n	80092ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d103      	bne.n	80092be <xQueueGiveFromISR+0x58>
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	689b      	ldr	r3, [r3, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <xQueueGiveFromISR+0x5c>
 80092be:	2301      	movs	r3, #1
 80092c0:	e000      	b.n	80092c4 <xQueueGiveFromISR+0x5e>
 80092c2:	2300      	movs	r3, #0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <xQueueGiveFromISR+0x78>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	61bb      	str	r3, [r7, #24]
}
 80092da:	bf00      	nop
 80092dc:	e7fe      	b.n	80092dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80092de:	f002 fb2b 	bl	800b938 <vPortValidateInterruptPriority>
	__asm volatile
 80092e2:	f3ef 8211 	mrs	r2, BASEPRI
 80092e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ea:	f383 8811 	msr	BASEPRI, r3
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	617a      	str	r2, [r7, #20]
 80092f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80092fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800930a:	429a      	cmp	r2, r3
 800930c:	d22b      	bcs.n	8009366 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009328:	d112      	bne.n	8009350 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	2b00      	cmp	r3, #0
 8009330:	d016      	beq.n	8009360 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	3324      	adds	r3, #36	; 0x24
 8009336:	4618      	mov	r0, r3
 8009338:	f001 f936 	bl	800a5a8 <xTaskRemoveFromEventList>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00e      	beq.n	8009360 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2201      	movs	r2, #1
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	e007      	b.n	8009360 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009354:	3301      	adds	r3, #1
 8009356:	b2db      	uxtb	r3, r3
 8009358:	b25a      	sxtb	r2, r3
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009360:	2301      	movs	r3, #1
 8009362:	637b      	str	r3, [r7, #52]	; 0x34
 8009364:	e001      	b.n	800936a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009366:	2300      	movs	r3, #0
 8009368:	637b      	str	r3, [r7, #52]	; 0x34
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f383 8811 	msr	BASEPRI, r3
}
 8009374:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009378:	4618      	mov	r0, r3
 800937a:	3738      	adds	r7, #56	; 0x38
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08c      	sub	sp, #48	; 0x30
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800938c:	2300      	movs	r3, #0
 800938e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10a      	bne.n	80093b0 <xQueueReceive+0x30>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	623b      	str	r3, [r7, #32]
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d103      	bne.n	80093be <xQueueReceive+0x3e>
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <xQueueReceive+0x42>
 80093be:	2301      	movs	r3, #1
 80093c0:	e000      	b.n	80093c4 <xQueueReceive+0x44>
 80093c2:	2300      	movs	r3, #0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xQueueReceive+0x5e>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	61fb      	str	r3, [r7, #28]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093de:	f001 fab5 	bl	800a94c <xTaskGetSchedulerState>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <xQueueReceive+0x6e>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <xQueueReceive+0x72>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <xQueueReceive+0x74>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xQueueReceive+0x8e>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	61bb      	str	r3, [r7, #24]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800940e:	f002 f9b1 	bl	800b774 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009416:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	2b00      	cmp	r3, #0
 800941c:	d01f      	beq.n	800945e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009422:	f000 fafa 	bl	8009a1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	1e5a      	subs	r2, r3, #1
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00f      	beq.n	8009456 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009438:	3310      	adds	r3, #16
 800943a:	4618      	mov	r0, r3
 800943c:	f001 f8b4 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d007      	beq.n	8009456 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009446:	4b3d      	ldr	r3, [pc, #244]	; (800953c <xQueueReceive+0x1bc>)
 8009448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800944c:	601a      	str	r2, [r3, #0]
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009456:	f002 f9bd 	bl	800b7d4 <vPortExitCritical>
				return pdPASS;
 800945a:	2301      	movs	r3, #1
 800945c:	e069      	b.n	8009532 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d103      	bne.n	800946c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009464:	f002 f9b6 	bl	800b7d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009468:	2300      	movs	r3, #0
 800946a:	e062      	b.n	8009532 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d106      	bne.n	8009480 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009472:	f107 0310 	add.w	r3, r7, #16
 8009476:	4618      	mov	r0, r3
 8009478:	f001 f8fa 	bl	800a670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800947c:	2301      	movs	r3, #1
 800947e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009480:	f002 f9a8 	bl	800b7d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009484:	f000 fe54 	bl	800a130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009488:	f002 f974 	bl	800b774 <vPortEnterCritical>
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009492:	b25b      	sxtb	r3, r3
 8009494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009498:	d103      	bne.n	80094a2 <xQueueReceive+0x122>
 800949a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094a8:	b25b      	sxtb	r3, r3
 80094aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ae:	d103      	bne.n	80094b8 <xQueueReceive+0x138>
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094b8:	f002 f98c 	bl	800b7d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094bc:	1d3a      	adds	r2, r7, #4
 80094be:	f107 0310 	add.w	r3, r7, #16
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f001 f8e9 	bl	800a69c <xTaskCheckForTimeOut>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d123      	bne.n	8009518 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094d2:	f000 fb1a 	bl	8009b0a <prvIsQueueEmpty>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d017      	beq.n	800950c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	3324      	adds	r3, #36	; 0x24
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 f80f 	bl	800a508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ec:	f000 fabb 	bl	8009a66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094f0:	f000 fe2c 	bl	800a14c <xTaskResumeAll>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d189      	bne.n	800940e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80094fa:	4b10      	ldr	r3, [pc, #64]	; (800953c <xQueueReceive+0x1bc>)
 80094fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	e780      	b.n	800940e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800950c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800950e:	f000 faaa 	bl	8009a66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009512:	f000 fe1b 	bl	800a14c <xTaskResumeAll>
 8009516:	e77a      	b.n	800940e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800951a:	f000 faa4 	bl	8009a66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800951e:	f000 fe15 	bl	800a14c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009522:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009524:	f000 faf1 	bl	8009b0a <prvIsQueueEmpty>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	f43f af6f 	beq.w	800940e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009530:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009532:	4618      	mov	r0, r3
 8009534:	3730      	adds	r7, #48	; 0x30
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b08e      	sub	sp, #56	; 0x38
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800954a:	2300      	movs	r3, #0
 800954c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009552:	2300      	movs	r3, #0
 8009554:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10a      	bne.n	8009572 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	623b      	str	r3, [r7, #32]
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00a      	beq.n	8009590 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800957a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	61fb      	str	r3, [r7, #28]
}
 800958c:	bf00      	nop
 800958e:	e7fe      	b.n	800958e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009590:	f001 f9dc 	bl	800a94c <xTaskGetSchedulerState>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <xQueueSemaphoreTake+0x60>
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <xQueueSemaphoreTake+0x64>
 80095a0:	2301      	movs	r3, #1
 80095a2:	e000      	b.n	80095a6 <xQueueSemaphoreTake+0x66>
 80095a4:	2300      	movs	r3, #0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10a      	bne.n	80095c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	61bb      	str	r3, [r7, #24]
}
 80095bc:	bf00      	nop
 80095be:	e7fe      	b.n	80095be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095c0:	f002 f8d8 	bl	800b774 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d024      	beq.n	800961a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	1e5a      	subs	r2, r3, #1
 80095d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d104      	bne.n	80095ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80095e0:	f001 fb2a 	bl	800ac38 <pvTaskIncrementMutexHeldCount>
 80095e4:	4602      	mov	r2, r0
 80095e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00f      	beq.n	8009612 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f4:	3310      	adds	r3, #16
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 ffd6 	bl	800a5a8 <xTaskRemoveFromEventList>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d007      	beq.n	8009612 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009602:	4b54      	ldr	r3, [pc, #336]	; (8009754 <xQueueSemaphoreTake+0x214>)
 8009604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009608:	601a      	str	r2, [r3, #0]
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009612:	f002 f8df 	bl	800b7d4 <vPortExitCritical>
				return pdPASS;
 8009616:	2301      	movs	r3, #1
 8009618:	e097      	b.n	800974a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d111      	bne.n	8009644 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00a      	beq.n	800963c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	617b      	str	r3, [r7, #20]
}
 8009638:	bf00      	nop
 800963a:	e7fe      	b.n	800963a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800963c:	f002 f8ca 	bl	800b7d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009640:	2300      	movs	r3, #0
 8009642:	e082      	b.n	800974a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800964a:	f107 030c 	add.w	r3, r7, #12
 800964e:	4618      	mov	r0, r3
 8009650:	f001 f80e 	bl	800a670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009654:	2301      	movs	r3, #1
 8009656:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009658:	f002 f8bc 	bl	800b7d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800965c:	f000 fd68 	bl	800a130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009660:	f002 f888 	bl	800b774 <vPortEnterCritical>
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800966a:	b25b      	sxtb	r3, r3
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009670:	d103      	bne.n	800967a <xQueueSemaphoreTake+0x13a>
 8009672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009680:	b25b      	sxtb	r3, r3
 8009682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009686:	d103      	bne.n	8009690 <xQueueSemaphoreTake+0x150>
 8009688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009690:	f002 f8a0 	bl	800b7d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009694:	463a      	mov	r2, r7
 8009696:	f107 030c 	add.w	r3, r7, #12
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f000 fffd 	bl	800a69c <xTaskCheckForTimeOut>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d132      	bne.n	800970e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096aa:	f000 fa2e 	bl	8009b0a <prvIsQueueEmpty>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d026      	beq.n	8009702 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d109      	bne.n	80096d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80096bc:	f002 f85a 	bl	800b774 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f001 f95f 	bl	800a988 <xTaskPriorityInherit>
 80096ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80096cc:	f002 f882 	bl	800b7d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80096d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d2:	3324      	adds	r3, #36	; 0x24
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f000 ff15 	bl	800a508 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80096de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096e0:	f000 f9c1 	bl	8009a66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096e4:	f000 fd32 	bl	800a14c <xTaskResumeAll>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f47f af68 	bne.w	80095c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80096f0:	4b18      	ldr	r3, [pc, #96]	; (8009754 <xQueueSemaphoreTake+0x214>)
 80096f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	e75e      	b.n	80095c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009702:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009704:	f000 f9af 	bl	8009a66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009708:	f000 fd20 	bl	800a14c <xTaskResumeAll>
 800970c:	e758      	b.n	80095c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800970e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009710:	f000 f9a9 	bl	8009a66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009714:	f000 fd1a 	bl	800a14c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009718:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800971a:	f000 f9f6 	bl	8009b0a <prvIsQueueEmpty>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	f43f af4d 	beq.w	80095c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00d      	beq.n	8009748 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800972c:	f002 f822 	bl	800b774 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009732:	f000 f8f0 	bl	8009916 <prvGetDisinheritPriorityAfterTimeout>
 8009736:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800973e:	4618      	mov	r0, r3
 8009740:	f001 f9f8 	bl	800ab34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009744:	f002 f846 	bl	800b7d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800974a:	4618      	mov	r0, r3
 800974c:	3738      	adds	r7, #56	; 0x38
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	e000ed04 	.word	0xe000ed04

08009758 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b08e      	sub	sp, #56	; 0x38
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10a      	bne.n	8009784 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	623b      	str	r3, [r7, #32]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d103      	bne.n	8009792 <xQueueReceiveFromISR+0x3a>
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <xQueueReceiveFromISR+0x3e>
 8009792:	2301      	movs	r3, #1
 8009794:	e000      	b.n	8009798 <xQueueReceiveFromISR+0x40>
 8009796:	2300      	movs	r3, #0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	61fb      	str	r3, [r7, #28]
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80097b2:	f002 f8c1 	bl	800b938 <vPortValidateInterruptPriority>
	__asm volatile
 80097b6:	f3ef 8211 	mrs	r2, BASEPRI
 80097ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	61ba      	str	r2, [r7, #24]
 80097cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80097ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80097d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d02f      	beq.n	800983e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097e8:	68b9      	ldr	r1, [r7, #8]
 80097ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ec:	f000 f915 	bl	8009a1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	1e5a      	subs	r2, r3, #1
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009800:	d112      	bne.n	8009828 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009804:	691b      	ldr	r3, [r3, #16]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d016      	beq.n	8009838 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	3310      	adds	r3, #16
 800980e:	4618      	mov	r0, r3
 8009810:	f000 feca 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00e      	beq.n	8009838 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00b      	beq.n	8009838 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	e007      	b.n	8009838 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800982c:	3301      	adds	r3, #1
 800982e:	b2db      	uxtb	r3, r3
 8009830:	b25a      	sxtb	r2, r3
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009838:	2301      	movs	r3, #1
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
 800983c:	e001      	b.n	8009842 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800983e:	2300      	movs	r3, #0
 8009840:	637b      	str	r3, [r7, #52]	; 0x34
 8009842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009844:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f383 8811 	msr	BASEPRI, r3
}
 800984c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800984e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009850:	4618      	mov	r0, r3
 8009852:	3738      	adds	r7, #56	; 0x38
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d10a      	bne.n	800987c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60bb      	str	r3, [r7, #8]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800987c:	f001 ff7a 	bl	800b774 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009886:	f001 ffa5 	bl	800b7d4 <vPortExitCritical>

	return uxReturn;
 800988a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10a      	bne.n	80098bc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60fb      	str	r3, [r7, #12]
}
 80098b8:	bf00      	nop
 80098ba:	e7fe      	b.n	80098ba <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80098c2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80098c4:	4618      	mov	r0, r3
 80098c6:	371c      	adds	r7, #28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10a      	bne.n	80098f8 <vQueueDelete+0x28>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	60bb      	str	r3, [r7, #8]
}
 80098f4:	bf00      	nop
 80098f6:	e7fe      	b.n	80098f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 f95f 	bl	8009bbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009904:	2b00      	cmp	r3, #0
 8009906:	d102      	bne.n	800990e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f002 f921 	bl	800bb50 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009916:	b480      	push	{r7}
 8009918:	b085      	sub	sp, #20
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	2b00      	cmp	r3, #0
 8009924:	d006      	beq.n	8009934 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009930:	60fb      	str	r3, [r7, #12]
 8009932:	e001      	b.n	8009938 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009938:	68fb      	ldr	r3, [r7, #12]
	}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b086      	sub	sp, #24
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	60b9      	str	r1, [r7, #8]
 8009950:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009952:	2300      	movs	r3, #0
 8009954:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10d      	bne.n	8009980 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d14d      	bne.n	8009a08 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	4618      	mov	r0, r3
 8009972:	f001 f871 	bl	800aa58 <xTaskPriorityDisinherit>
 8009976:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	609a      	str	r2, [r3, #8]
 800997e:	e043      	b.n	8009a08 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d119      	bne.n	80099ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6858      	ldr	r0, [r3, #4]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	461a      	mov	r2, r3
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	f011 fba3 	bl	801b0dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	441a      	add	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d32b      	bcc.n	8009a08 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	605a      	str	r2, [r3, #4]
 80099b8:	e026      	b.n	8009a08 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	68d8      	ldr	r0, [r3, #12]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c2:	461a      	mov	r2, r3
 80099c4:	68b9      	ldr	r1, [r7, #8]
 80099c6:	f011 fb89 	bl	801b0dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	425b      	negs	r3, r3
 80099d4:	441a      	add	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	68da      	ldr	r2, [r3, #12]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d207      	bcs.n	80099f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ee:	425b      	negs	r3, r3
 80099f0:	441a      	add	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d105      	bne.n	8009a08 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	3b01      	subs	r3, #1
 8009a06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	1c5a      	adds	r2, r3, #1
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a10:	697b      	ldr	r3, [r7, #20]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d018      	beq.n	8009a5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68da      	ldr	r2, [r3, #12]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	441a      	add	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d303      	bcc.n	8009a4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68d9      	ldr	r1, [r3, #12]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a56:	461a      	mov	r2, r3
 8009a58:	6838      	ldr	r0, [r7, #0]
 8009a5a:	f011 fb3f 	bl	801b0dc <memcpy>
	}
}
 8009a5e:	bf00      	nop
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a6e:	f001 fe81 	bl	800b774 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a7a:	e011      	b.n	8009aa0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d012      	beq.n	8009aaa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3324      	adds	r3, #36	; 0x24
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f000 fd8d 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a94:	f000 fe64 	bl	800a760 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dce9      	bgt.n	8009a7c <prvUnlockQueue+0x16>
 8009aa8:	e000      	b.n	8009aac <prvUnlockQueue+0x46>
					break;
 8009aaa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	22ff      	movs	r2, #255	; 0xff
 8009ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009ab4:	f001 fe8e 	bl	800b7d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ab8:	f001 fe5c 	bl	800b774 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ac2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ac4:	e011      	b.n	8009aea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d012      	beq.n	8009af4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3310      	adds	r3, #16
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 fd68 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ade:	f000 fe3f 	bl	800a760 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009ae2:	7bbb      	ldrb	r3, [r7, #14]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	dce9      	bgt.n	8009ac6 <prvUnlockQueue+0x60>
 8009af2:	e000      	b.n	8009af6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009af4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	22ff      	movs	r2, #255	; 0xff
 8009afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009afe:	f001 fe69 	bl	800b7d4 <vPortExitCritical>
}
 8009b02:	bf00      	nop
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b12:	f001 fe2f 	bl	800b774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d102      	bne.n	8009b24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	e001      	b.n	8009b28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b28:	f001 fe54 	bl	800b7d4 <vPortExitCritical>

	return xReturn;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b3e:	f001 fe19 	bl	800b774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d102      	bne.n	8009b54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	e001      	b.n	8009b58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b58:	f001 fe3c 	bl	800b7d4 <vPortExitCritical>

	return xReturn;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
 8009b76:	e014      	b.n	8009ba2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b78:	4a0f      	ldr	r2, [pc, #60]	; (8009bb8 <vQueueAddToRegistry+0x50>)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10b      	bne.n	8009b9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b84:	490c      	ldr	r1, [pc, #48]	; (8009bb8 <vQueueAddToRegistry+0x50>)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b8e:	4a0a      	ldr	r2, [pc, #40]	; (8009bb8 <vQueueAddToRegistry+0x50>)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	4413      	add	r3, r2
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b9a:	e006      	b.n	8009baa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	60fb      	str	r3, [r7, #12]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2b07      	cmp	r3, #7
 8009ba6:	d9e7      	bls.n	8009b78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	3714      	adds	r7, #20
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	2000d8f8 	.word	0x2000d8f8

08009bbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]
 8009bc8:	e016      	b.n	8009bf8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009bca:	4a10      	ldr	r2, [pc, #64]	; (8009c0c <vQueueUnregisterQueue+0x50>)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d10b      	bne.n	8009bf2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009bda:	4a0c      	ldr	r2, [pc, #48]	; (8009c0c <vQueueUnregisterQueue+0x50>)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2100      	movs	r1, #0
 8009be0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009be4:	4a09      	ldr	r2, [pc, #36]	; (8009c0c <vQueueUnregisterQueue+0x50>)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	00db      	lsls	r3, r3, #3
 8009bea:	4413      	add	r3, r2
 8009bec:	2200      	movs	r2, #0
 8009bee:	605a      	str	r2, [r3, #4]
				break;
 8009bf0:	e006      	b.n	8009c00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	60fb      	str	r3, [r7, #12]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b07      	cmp	r3, #7
 8009bfc:	d9e5      	bls.n	8009bca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009bfe:	bf00      	nop
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	2000d8f8 	.word	0x2000d8f8

08009c10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c20:	f001 fda8 	bl	800b774 <vPortEnterCritical>
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c2a:	b25b      	sxtb	r3, r3
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c30:	d103      	bne.n	8009c3a <vQueueWaitForMessageRestricted+0x2a>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c40:	b25b      	sxtb	r3, r3
 8009c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c46:	d103      	bne.n	8009c50 <vQueueWaitForMessageRestricted+0x40>
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c50:	f001 fdc0 	bl	800b7d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d106      	bne.n	8009c6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	3324      	adds	r3, #36	; 0x24
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	68b9      	ldr	r1, [r7, #8]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 fc73 	bl	800a550 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c6a:	6978      	ldr	r0, [r7, #20]
 8009c6c:	f7ff fefb 	bl	8009a66 <prvUnlockQueue>
	}
 8009c70:	bf00      	nop
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08e      	sub	sp, #56	; 0x38
 8009c7c:	af04      	add	r7, sp, #16
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d10a      	bne.n	8009ca2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	623b      	str	r3, [r7, #32]
}
 8009c9e:	bf00      	nop
 8009ca0:	e7fe      	b.n	8009ca0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <xTaskCreateStatic+0x46>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	61fb      	str	r3, [r7, #28]
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cbe:	23cc      	movs	r3, #204	; 0xcc
 8009cc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	2bcc      	cmp	r3, #204	; 0xcc
 8009cc6:	d00a      	beq.n	8009cde <xTaskCreateStatic+0x66>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	61bb      	str	r3, [r7, #24]
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d01e      	beq.n	8009d24 <xTaskCreateStatic+0xac>
 8009ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d01b      	beq.n	8009d24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009cfe:	2300      	movs	r3, #0
 8009d00:	9303      	str	r3, [sp, #12]
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	9302      	str	r3, [sp, #8]
 8009d06:	f107 0314 	add.w	r3, r7, #20
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f850 	bl	8009dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d1e:	f000 f8f3 	bl	8009f08 <prvAddNewTaskToReadyList>
 8009d22:	e001      	b.n	8009d28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d24:	2300      	movs	r3, #0
 8009d26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d28:	697b      	ldr	r3, [r7, #20]
	}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3728      	adds	r7, #40	; 0x28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b08c      	sub	sp, #48	; 0x30
 8009d36:	af04      	add	r7, sp, #16
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	603b      	str	r3, [r7, #0]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d42:	88fb      	ldrh	r3, [r7, #6]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 fe36 	bl	800b9b8 <pvPortMalloc>
 8009d4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d00e      	beq.n	8009d72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d54:	20cc      	movs	r0, #204	; 0xcc
 8009d56:	f001 fe2f 	bl	800b9b8 <pvPortMalloc>
 8009d5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d003      	beq.n	8009d6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	631a      	str	r2, [r3, #48]	; 0x30
 8009d68:	e005      	b.n	8009d76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d6a:	6978      	ldr	r0, [r7, #20]
 8009d6c:	f001 fef0 	bl	800bb50 <vPortFree>
 8009d70:	e001      	b.n	8009d76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d72:	2300      	movs	r3, #0
 8009d74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d017      	beq.n	8009dac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d84:	88fa      	ldrh	r2, [r7, #6]
 8009d86:	2300      	movs	r3, #0
 8009d88:	9303      	str	r3, [sp, #12]
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	9302      	str	r3, [sp, #8]
 8009d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 f80e 	bl	8009dbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009da0:	69f8      	ldr	r0, [r7, #28]
 8009da2:	f000 f8b1 	bl	8009f08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009da6:	2301      	movs	r3, #1
 8009da8:	61bb      	str	r3, [r7, #24]
 8009daa:	e002      	b.n	8009db2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dac:	f04f 33ff 	mov.w	r3, #4294967295
 8009db0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009db2:	69bb      	ldr	r3, [r7, #24]
	}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3720      	adds	r7, #32
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	21a5      	movs	r1, #165	; 0xa5
 8009dd6:	f011 f98f 	bl	801b0f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009de4:	3b01      	subs	r3, #1
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4413      	add	r3, r2
 8009dea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009dec:	69bb      	ldr	r3, [r7, #24]
 8009dee:	f023 0307 	bic.w	r3, r3, #7
 8009df2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d00a      	beq.n	8009e14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	617b      	str	r3, [r7, #20]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d01f      	beq.n	8009e5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	61fb      	str	r3, [r7, #28]
 8009e1e:	e012      	b.n	8009e46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	4413      	add	r3, r2
 8009e26:	7819      	ldrb	r1, [r3, #0]
 8009e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	4413      	add	r3, r2
 8009e2e:	3334      	adds	r3, #52	; 0x34
 8009e30:	460a      	mov	r2, r1
 8009e32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	4413      	add	r3, r2
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d006      	beq.n	8009e4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	3301      	adds	r3, #1
 8009e44:	61fb      	str	r3, [r7, #28]
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	2b1f      	cmp	r3, #31
 8009e4a:	d9e9      	bls.n	8009e20 <prvInitialiseNewTask+0x64>
 8009e4c:	e000      	b.n	8009e50 <prvInitialiseNewTask+0x94>
			{
				break;
 8009e4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009e58:	e003      	b.n	8009e62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e64:	2b37      	cmp	r3, #55	; 0x37
 8009e66:	d901      	bls.n	8009e6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e68:	2337      	movs	r3, #55	; 0x37
 8009e6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e76:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8009e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	3304      	adds	r3, #4
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fd64 	bl	8008950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	3318      	adds	r3, #24
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7fe fd5f 	bl	8008950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eba:	3364      	adds	r3, #100	; 0x64
 8009ebc:	2260      	movs	r2, #96	; 0x60
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f011 f919 	bl	801b0f8 <memset>
 8009ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec8:	4a0c      	ldr	r2, [pc, #48]	; (8009efc <prvInitialiseNewTask+0x140>)
 8009eca:	669a      	str	r2, [r3, #104]	; 0x68
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	4a0c      	ldr	r2, [pc, #48]	; (8009f00 <prvInitialiseNewTask+0x144>)
 8009ed0:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed4:	4a0b      	ldr	r2, [pc, #44]	; (8009f04 <prvInitialiseNewTask+0x148>)
 8009ed6:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	68f9      	ldr	r1, [r7, #12]
 8009edc:	69b8      	ldr	r0, [r7, #24]
 8009ede:	f001 fb1b 	bl	800b518 <pxPortInitialiseStack>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ef2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ef4:	bf00      	nop
 8009ef6:	3720      	adds	r7, #32
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	0801fe28 	.word	0x0801fe28
 8009f00:	0801fe48 	.word	0x0801fe48
 8009f04:	0801fe08 	.word	0x0801fe08

08009f08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f10:	f001 fc30 	bl	800b774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f14:	4b2d      	ldr	r3, [pc, #180]	; (8009fcc <prvAddNewTaskToReadyList+0xc4>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	4a2c      	ldr	r2, [pc, #176]	; (8009fcc <prvAddNewTaskToReadyList+0xc4>)
 8009f1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f1e:	4b2c      	ldr	r3, [pc, #176]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d109      	bne.n	8009f3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f26:	4a2a      	ldr	r2, [pc, #168]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f2c:	4b27      	ldr	r3, [pc, #156]	; (8009fcc <prvAddNewTaskToReadyList+0xc4>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d110      	bne.n	8009f56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f34:	f000 fc38 	bl	800a7a8 <prvInitialiseTaskLists>
 8009f38:	e00d      	b.n	8009f56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f3a:	4b26      	ldr	r3, [pc, #152]	; (8009fd4 <prvAddNewTaskToReadyList+0xcc>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d109      	bne.n	8009f56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f42:	4b23      	ldr	r3, [pc, #140]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d802      	bhi.n	8009f56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f50:	4a1f      	ldr	r2, [pc, #124]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f56:	4b20      	ldr	r3, [pc, #128]	; (8009fd8 <prvAddNewTaskToReadyList+0xd0>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	4a1e      	ldr	r2, [pc, #120]	; (8009fd8 <prvAddNewTaskToReadyList+0xd0>)
 8009f5e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f60:	4b1d      	ldr	r3, [pc, #116]	; (8009fd8 <prvAddNewTaskToReadyList+0xd0>)
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f6c:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <prvAddNewTaskToReadyList+0xd4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d903      	bls.n	8009f7c <prvAddNewTaskToReadyList+0x74>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	4a18      	ldr	r2, [pc, #96]	; (8009fdc <prvAddNewTaskToReadyList+0xd4>)
 8009f7a:	6013      	str	r3, [r2, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	4613      	mov	r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	4413      	add	r3, r2
 8009f86:	009b      	lsls	r3, r3, #2
 8009f88:	4a15      	ldr	r2, [pc, #84]	; (8009fe0 <prvAddNewTaskToReadyList+0xd8>)
 8009f8a:	441a      	add	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	4619      	mov	r1, r3
 8009f92:	4610      	mov	r0, r2
 8009f94:	f7fe fce9 	bl	800896a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f98:	f001 fc1c 	bl	800b7d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f9c:	4b0d      	ldr	r3, [pc, #52]	; (8009fd4 <prvAddNewTaskToReadyList+0xcc>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00e      	beq.n	8009fc2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fa4:	4b0a      	ldr	r3, [pc, #40]	; (8009fd0 <prvAddNewTaskToReadyList+0xc8>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d207      	bcs.n	8009fc2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fb2:	4b0c      	ldr	r3, [pc, #48]	; (8009fe4 <prvAddNewTaskToReadyList+0xdc>)
 8009fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb8:	601a      	str	r2, [r3, #0]
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fc2:	bf00      	nop
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20000d98 	.word	0x20000d98
 8009fd0:	200008c4 	.word	0x200008c4
 8009fd4:	20000da4 	.word	0x20000da4
 8009fd8:	20000db4 	.word	0x20000db4
 8009fdc:	20000da0 	.word	0x20000da0
 8009fe0:	200008c8 	.word	0x200008c8
 8009fe4:	e000ed04 	.word	0xe000ed04

08009fe8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d017      	beq.n	800a02a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ffa:	4b13      	ldr	r3, [pc, #76]	; (800a048 <vTaskDelay+0x60>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <vTaskDelay+0x30>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	60bb      	str	r3, [r7, #8]
}
 800a014:	bf00      	nop
 800a016:	e7fe      	b.n	800a016 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a018:	f000 f88a 	bl	800a130 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a01c:	2100      	movs	r1, #0
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fe1e 	bl	800ac60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a024:	f000 f892 	bl	800a14c <xTaskResumeAll>
 800a028:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d107      	bne.n	800a040 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a030:	4b06      	ldr	r3, [pc, #24]	; (800a04c <vTaskDelay+0x64>)
 800a032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	20000dc0 	.word	0x20000dc0
 800a04c:	e000ed04 	.word	0xe000ed04

0800a050 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b08a      	sub	sp, #40	; 0x28
 800a054:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a056:	2300      	movs	r3, #0
 800a058:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a05a:	2300      	movs	r3, #0
 800a05c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a05e:	463a      	mov	r2, r7
 800a060:	1d39      	adds	r1, r7, #4
 800a062:	f107 0308 	add.w	r3, r7, #8
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe fc1e 	bl	80088a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a06c:	6839      	ldr	r1, [r7, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	9202      	str	r2, [sp, #8]
 800a074:	9301      	str	r3, [sp, #4]
 800a076:	2300      	movs	r3, #0
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	2300      	movs	r3, #0
 800a07c:	460a      	mov	r2, r1
 800a07e:	4924      	ldr	r1, [pc, #144]	; (800a110 <vTaskStartScheduler+0xc0>)
 800a080:	4824      	ldr	r0, [pc, #144]	; (800a114 <vTaskStartScheduler+0xc4>)
 800a082:	f7ff fdf9 	bl	8009c78 <xTaskCreateStatic>
 800a086:	4603      	mov	r3, r0
 800a088:	4a23      	ldr	r2, [pc, #140]	; (800a118 <vTaskStartScheduler+0xc8>)
 800a08a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a08c:	4b22      	ldr	r3, [pc, #136]	; (800a118 <vTaskStartScheduler+0xc8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d002      	beq.n	800a09a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
 800a098:	e001      	b.n	800a09e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d102      	bne.n	800a0aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0a4:	f000 fe30 	bl	800ad08 <xTimerCreateTimerTask>
 800a0a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d11b      	bne.n	800a0e8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	613b      	str	r3, [r7, #16]
}
 800a0c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0c4:	4b15      	ldr	r3, [pc, #84]	; (800a11c <vTaskStartScheduler+0xcc>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3364      	adds	r3, #100	; 0x64
 800a0ca:	4a15      	ldr	r2, [pc, #84]	; (800a120 <vTaskStartScheduler+0xd0>)
 800a0cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0ce:	4b15      	ldr	r3, [pc, #84]	; (800a124 <vTaskStartScheduler+0xd4>)
 800a0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0d6:	4b14      	ldr	r3, [pc, #80]	; (800a128 <vTaskStartScheduler+0xd8>)
 800a0d8:	2201      	movs	r2, #1
 800a0da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0dc:	4b13      	ldr	r3, [pc, #76]	; (800a12c <vTaskStartScheduler+0xdc>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0e2:	f001 faa5 	bl	800b630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a0e6:	e00e      	b.n	800a106 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ee:	d10a      	bne.n	800a106 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	60fb      	str	r3, [r7, #12]
}
 800a102:	bf00      	nop
 800a104:	e7fe      	b.n	800a104 <vTaskStartScheduler+0xb4>
}
 800a106:	bf00      	nop
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	0801c5c4 	.word	0x0801c5c4
 800a114:	0800a779 	.word	0x0800a779
 800a118:	20000dbc 	.word	0x20000dbc
 800a11c:	200008c4 	.word	0x200008c4
 800a120:	2000002c 	.word	0x2000002c
 800a124:	20000db8 	.word	0x20000db8
 800a128:	20000da4 	.word	0x20000da4
 800a12c:	20000d9c 	.word	0x20000d9c

0800a130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a130:	b480      	push	{r7}
 800a132:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a134:	4b04      	ldr	r3, [pc, #16]	; (800a148 <vTaskSuspendAll+0x18>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3301      	adds	r3, #1
 800a13a:	4a03      	ldr	r2, [pc, #12]	; (800a148 <vTaskSuspendAll+0x18>)
 800a13c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a13e:	bf00      	nop
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	20000dc0 	.word	0x20000dc0

0800a14c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a156:	2300      	movs	r3, #0
 800a158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a15a:	4b42      	ldr	r3, [pc, #264]	; (800a264 <xTaskResumeAll+0x118>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10a      	bne.n	800a178 <xTaskResumeAll+0x2c>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	603b      	str	r3, [r7, #0]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a178:	f001 fafc 	bl	800b774 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a17c:	4b39      	ldr	r3, [pc, #228]	; (800a264 <xTaskResumeAll+0x118>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3b01      	subs	r3, #1
 800a182:	4a38      	ldr	r2, [pc, #224]	; (800a264 <xTaskResumeAll+0x118>)
 800a184:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a186:	4b37      	ldr	r3, [pc, #220]	; (800a264 <xTaskResumeAll+0x118>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d162      	bne.n	800a254 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a18e:	4b36      	ldr	r3, [pc, #216]	; (800a268 <xTaskResumeAll+0x11c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d05e      	beq.n	800a254 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a196:	e02f      	b.n	800a1f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a198:	4b34      	ldr	r3, [pc, #208]	; (800a26c <xTaskResumeAll+0x120>)
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3318      	adds	r3, #24
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe fc3d 	bl	8008a24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fc38 	bl	8008a24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b8:	4b2d      	ldr	r3, [pc, #180]	; (800a270 <xTaskResumeAll+0x124>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d903      	bls.n	800a1c8 <xTaskResumeAll+0x7c>
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c4:	4a2a      	ldr	r2, [pc, #168]	; (800a270 <xTaskResumeAll+0x124>)
 800a1c6:	6013      	str	r3, [r2, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4a27      	ldr	r2, [pc, #156]	; (800a274 <xTaskResumeAll+0x128>)
 800a1d6:	441a      	add	r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4619      	mov	r1, r3
 800a1de:	4610      	mov	r0, r2
 800a1e0:	f7fe fbc3 	bl	800896a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e8:	4b23      	ldr	r3, [pc, #140]	; (800a278 <xTaskResumeAll+0x12c>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d302      	bcc.n	800a1f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a1f2:	4b22      	ldr	r3, [pc, #136]	; (800a27c <xTaskResumeAll+0x130>)
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1f8:	4b1c      	ldr	r3, [pc, #112]	; (800a26c <xTaskResumeAll+0x120>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1cb      	bne.n	800a198 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a206:	f000 fb71 	bl	800a8ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a20a:	4b1d      	ldr	r3, [pc, #116]	; (800a280 <xTaskResumeAll+0x134>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d010      	beq.n	800a238 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a216:	f000 f859 	bl	800a2cc <xTaskIncrementTick>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d002      	beq.n	800a226 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a220:	4b16      	ldr	r3, [pc, #88]	; (800a27c <xTaskResumeAll+0x130>)
 800a222:	2201      	movs	r2, #1
 800a224:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3b01      	subs	r3, #1
 800a22a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1f1      	bne.n	800a216 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a232:	4b13      	ldr	r3, [pc, #76]	; (800a280 <xTaskResumeAll+0x134>)
 800a234:	2200      	movs	r2, #0
 800a236:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a238:	4b10      	ldr	r3, [pc, #64]	; (800a27c <xTaskResumeAll+0x130>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d009      	beq.n	800a254 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a240:	2301      	movs	r3, #1
 800a242:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a244:	4b0f      	ldr	r3, [pc, #60]	; (800a284 <xTaskResumeAll+0x138>)
 800a246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a254:	f001 fabe 	bl	800b7d4 <vPortExitCritical>

	return xAlreadyYielded;
 800a258:	68bb      	ldr	r3, [r7, #8]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20000dc0 	.word	0x20000dc0
 800a268:	20000d98 	.word	0x20000d98
 800a26c:	20000d58 	.word	0x20000d58
 800a270:	20000da0 	.word	0x20000da0
 800a274:	200008c8 	.word	0x200008c8
 800a278:	200008c4 	.word	0x200008c4
 800a27c:	20000dac 	.word	0x20000dac
 800a280:	20000da8 	.word	0x20000da8
 800a284:	e000ed04 	.word	0xe000ed04

0800a288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a28e:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <xTaskGetTickCount+0x1c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a294:	687b      	ldr	r3, [r7, #4]
}
 800a296:	4618      	mov	r0, r3
 800a298:	370c      	adds	r7, #12
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20000d9c 	.word	0x20000d9c

0800a2a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a2ae:	f001 fb43 	bl	800b938 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a2b6:	4b04      	ldr	r3, [pc, #16]	; (800a2c8 <xTaskGetTickCountFromISR+0x20>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2bc:	683b      	ldr	r3, [r7, #0]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20000d9c 	.word	0x20000d9c

0800a2cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2d6:	4b4f      	ldr	r3, [pc, #316]	; (800a414 <xTaskIncrementTick+0x148>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f040 808f 	bne.w	800a3fe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2e0:	4b4d      	ldr	r3, [pc, #308]	; (800a418 <xTaskIncrementTick+0x14c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2e8:	4a4b      	ldr	r2, [pc, #300]	; (800a418 <xTaskIncrementTick+0x14c>)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d120      	bne.n	800a336 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2f4:	4b49      	ldr	r3, [pc, #292]	; (800a41c <xTaskIncrementTick+0x150>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <xTaskIncrementTick+0x48>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	603b      	str	r3, [r7, #0]
}
 800a310:	bf00      	nop
 800a312:	e7fe      	b.n	800a312 <xTaskIncrementTick+0x46>
 800a314:	4b41      	ldr	r3, [pc, #260]	; (800a41c <xTaskIncrementTick+0x150>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	4b41      	ldr	r3, [pc, #260]	; (800a420 <xTaskIncrementTick+0x154>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a3f      	ldr	r2, [pc, #252]	; (800a41c <xTaskIncrementTick+0x150>)
 800a320:	6013      	str	r3, [r2, #0]
 800a322:	4a3f      	ldr	r2, [pc, #252]	; (800a420 <xTaskIncrementTick+0x154>)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	4b3e      	ldr	r3, [pc, #248]	; (800a424 <xTaskIncrementTick+0x158>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3301      	adds	r3, #1
 800a32e:	4a3d      	ldr	r2, [pc, #244]	; (800a424 <xTaskIncrementTick+0x158>)
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	f000 fadb 	bl	800a8ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a336:	4b3c      	ldr	r3, [pc, #240]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d349      	bcc.n	800a3d4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a340:	4b36      	ldr	r3, [pc, #216]	; (800a41c <xTaskIncrementTick+0x150>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a34a:	4b37      	ldr	r3, [pc, #220]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a34c:	f04f 32ff 	mov.w	r2, #4294967295
 800a350:	601a      	str	r2, [r3, #0]
					break;
 800a352:	e03f      	b.n	800a3d4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a354:	4b31      	ldr	r3, [pc, #196]	; (800a41c <xTaskIncrementTick+0x150>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d203      	bcs.n	800a374 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a36c:	4a2e      	ldr	r2, [pc, #184]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a372:	e02f      	b.n	800a3d4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	3304      	adds	r3, #4
 800a378:	4618      	mov	r0, r3
 800a37a:	f7fe fb53 	bl	8008a24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a382:	2b00      	cmp	r3, #0
 800a384:	d004      	beq.n	800a390 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	3318      	adds	r3, #24
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fb4a 	bl	8008a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a394:	4b25      	ldr	r3, [pc, #148]	; (800a42c <xTaskIncrementTick+0x160>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d903      	bls.n	800a3a4 <xTaskIncrementTick+0xd8>
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a0:	4a22      	ldr	r2, [pc, #136]	; (800a42c <xTaskIncrementTick+0x160>)
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4a1f      	ldr	r2, [pc, #124]	; (800a430 <xTaskIncrementTick+0x164>)
 800a3b2:	441a      	add	r2, r3
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	f7fe fad5 	bl	800896a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c4:	4b1b      	ldr	r3, [pc, #108]	; (800a434 <xTaskIncrementTick+0x168>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d3b8      	bcc.n	800a340 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d2:	e7b5      	b.n	800a340 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3d4:	4b17      	ldr	r3, [pc, #92]	; (800a434 <xTaskIncrementTick+0x168>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3da:	4915      	ldr	r1, [pc, #84]	; (800a430 <xTaskIncrementTick+0x164>)
 800a3dc:	4613      	mov	r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	440b      	add	r3, r1
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d901      	bls.n	800a3f0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a3f0:	4b11      	ldr	r3, [pc, #68]	; (800a438 <xTaskIncrementTick+0x16c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d007      	beq.n	800a408 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	e004      	b.n	800a408 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a3fe:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <xTaskIncrementTick+0x170>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	4a0d      	ldr	r2, [pc, #52]	; (800a43c <xTaskIncrementTick+0x170>)
 800a406:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a408:	697b      	ldr	r3, [r7, #20]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20000dc0 	.word	0x20000dc0
 800a418:	20000d9c 	.word	0x20000d9c
 800a41c:	20000d50 	.word	0x20000d50
 800a420:	20000d54 	.word	0x20000d54
 800a424:	20000db0 	.word	0x20000db0
 800a428:	20000db8 	.word	0x20000db8
 800a42c:	20000da0 	.word	0x20000da0
 800a430:	200008c8 	.word	0x200008c8
 800a434:	200008c4 	.word	0x200008c4
 800a438:	20000dac 	.word	0x20000dac
 800a43c:	20000da8 	.word	0x20000da8

0800a440 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a446:	4b2a      	ldr	r3, [pc, #168]	; (800a4f0 <vTaskSwitchContext+0xb0>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a44e:	4b29      	ldr	r3, [pc, #164]	; (800a4f4 <vTaskSwitchContext+0xb4>)
 800a450:	2201      	movs	r2, #1
 800a452:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a454:	e046      	b.n	800a4e4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a456:	4b27      	ldr	r3, [pc, #156]	; (800a4f4 <vTaskSwitchContext+0xb4>)
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a45c:	4b26      	ldr	r3, [pc, #152]	; (800a4f8 <vTaskSwitchContext+0xb8>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	60fb      	str	r3, [r7, #12]
 800a462:	e010      	b.n	800a486 <vTaskSwitchContext+0x46>
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10a      	bne.n	800a480 <vTaskSwitchContext+0x40>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	607b      	str	r3, [r7, #4]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <vTaskSwitchContext+0x3e>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3b01      	subs	r3, #1
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	491d      	ldr	r1, [pc, #116]	; (800a4fc <vTaskSwitchContext+0xbc>)
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	4613      	mov	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4413      	add	r3, r2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	440b      	add	r3, r1
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d0e4      	beq.n	800a464 <vTaskSwitchContext+0x24>
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	4613      	mov	r3, r2
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	4413      	add	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4a15      	ldr	r2, [pc, #84]	; (800a4fc <vTaskSwitchContext+0xbc>)
 800a4a6:	4413      	add	r3, r2
 800a4a8:	60bb      	str	r3, [r7, #8]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	685a      	ldr	r2, [r3, #4]
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	605a      	str	r2, [r3, #4]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d104      	bne.n	800a4ca <vTaskSwitchContext+0x8a>
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	4a0b      	ldr	r2, [pc, #44]	; (800a500 <vTaskSwitchContext+0xc0>)
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	4a08      	ldr	r2, [pc, #32]	; (800a4f8 <vTaskSwitchContext+0xb8>)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4da:	4b09      	ldr	r3, [pc, #36]	; (800a500 <vTaskSwitchContext+0xc0>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3364      	adds	r3, #100	; 0x64
 800a4e0:	4a08      	ldr	r2, [pc, #32]	; (800a504 <vTaskSwitchContext+0xc4>)
 800a4e2:	6013      	str	r3, [r2, #0]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	20000dc0 	.word	0x20000dc0
 800a4f4:	20000dac 	.word	0x20000dac
 800a4f8:	20000da0 	.word	0x20000da0
 800a4fc:	200008c8 	.word	0x200008c8
 800a500:	200008c4 	.word	0x200008c4
 800a504:	2000002c 	.word	0x2000002c

0800a508 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10a      	bne.n	800a52e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51c:	f383 8811 	msr	BASEPRI, r3
 800a520:	f3bf 8f6f 	isb	sy
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	60fb      	str	r3, [r7, #12]
}
 800a52a:	bf00      	nop
 800a52c:	e7fe      	b.n	800a52c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a52e:	4b07      	ldr	r3, [pc, #28]	; (800a54c <vTaskPlaceOnEventList+0x44>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	3318      	adds	r3, #24
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7fe fa3b 	bl	80089b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a53c:	2101      	movs	r1, #1
 800a53e:	6838      	ldr	r0, [r7, #0]
 800a540:	f000 fb8e 	bl	800ac60 <prvAddCurrentTaskToDelayedList>
}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	200008c4 	.word	0x200008c4

0800a550 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10a      	bne.n	800a578 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	617b      	str	r3, [r7, #20]
}
 800a574:	bf00      	nop
 800a576:	e7fe      	b.n	800a576 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a578:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3318      	adds	r3, #24
 800a57e:	4619      	mov	r1, r3
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f7fe f9f2 	bl	800896a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a58c:	f04f 33ff 	mov.w	r3, #4294967295
 800a590:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	68b8      	ldr	r0, [r7, #8]
 800a596:	f000 fb63 	bl	800ac60 <prvAddCurrentTaskToDelayedList>
	}
 800a59a:	bf00      	nop
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	200008c4 	.word	0x200008c4

0800a5a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10a      	bne.n	800a5d4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60fb      	str	r3, [r7, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	e7fe      	b.n	800a5d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	3318      	adds	r3, #24
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fe fa23 	bl	8008a24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5de:	4b1e      	ldr	r3, [pc, #120]	; (800a658 <xTaskRemoveFromEventList+0xb0>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d11d      	bne.n	800a622 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe fa1a 	bl	8008a24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f4:	4b19      	ldr	r3, [pc, #100]	; (800a65c <xTaskRemoveFromEventList+0xb4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d903      	bls.n	800a604 <xTaskRemoveFromEventList+0x5c>
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a600:	4a16      	ldr	r2, [pc, #88]	; (800a65c <xTaskRemoveFromEventList+0xb4>)
 800a602:	6013      	str	r3, [r2, #0]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a608:	4613      	mov	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	4413      	add	r3, r2
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4a13      	ldr	r2, [pc, #76]	; (800a660 <xTaskRemoveFromEventList+0xb8>)
 800a612:	441a      	add	r2, r3
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	3304      	adds	r3, #4
 800a618:	4619      	mov	r1, r3
 800a61a:	4610      	mov	r0, r2
 800a61c:	f7fe f9a5 	bl	800896a <vListInsertEnd>
 800a620:	e005      	b.n	800a62e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	3318      	adds	r3, #24
 800a626:	4619      	mov	r1, r3
 800a628:	480e      	ldr	r0, [pc, #56]	; (800a664 <xTaskRemoveFromEventList+0xbc>)
 800a62a:	f7fe f99e 	bl	800896a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a632:	4b0d      	ldr	r3, [pc, #52]	; (800a668 <xTaskRemoveFromEventList+0xc0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a638:	429a      	cmp	r2, r3
 800a63a:	d905      	bls.n	800a648 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a63c:	2301      	movs	r3, #1
 800a63e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <xTaskRemoveFromEventList+0xc4>)
 800a642:	2201      	movs	r2, #1
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	e001      	b.n	800a64c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a648:	2300      	movs	r3, #0
 800a64a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a64c:	697b      	ldr	r3, [r7, #20]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3718      	adds	r7, #24
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20000dc0 	.word	0x20000dc0
 800a65c:	20000da0 	.word	0x20000da0
 800a660:	200008c8 	.word	0x200008c8
 800a664:	20000d58 	.word	0x20000d58
 800a668:	200008c4 	.word	0x200008c4
 800a66c:	20000dac 	.word	0x20000dac

0800a670 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a678:	4b06      	ldr	r3, [pc, #24]	; (800a694 <vTaskInternalSetTimeOutState+0x24>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a680:	4b05      	ldr	r3, [pc, #20]	; (800a698 <vTaskInternalSetTimeOutState+0x28>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	605a      	str	r2, [r3, #4]
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	20000db0 	.word	0x20000db0
 800a698:	20000d9c 	.word	0x20000d9c

0800a69c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	613b      	str	r3, [r7, #16]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10a      	bne.n	800a6de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	60fb      	str	r3, [r7, #12]
}
 800a6da:	bf00      	nop
 800a6dc:	e7fe      	b.n	800a6dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a6de:	f001 f849 	bl	800b774 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6e2:	4b1d      	ldr	r3, [pc, #116]	; (800a758 <xTaskCheckForTimeOut+0xbc>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	69ba      	ldr	r2, [r7, #24]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fa:	d102      	bne.n	800a702 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	61fb      	str	r3, [r7, #28]
 800a700:	e023      	b.n	800a74a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	4b15      	ldr	r3, [pc, #84]	; (800a75c <xTaskCheckForTimeOut+0xc0>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d007      	beq.n	800a71e <xTaskCheckForTimeOut+0x82>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	429a      	cmp	r2, r3
 800a716:	d302      	bcc.n	800a71e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a718:	2301      	movs	r3, #1
 800a71a:	61fb      	str	r3, [r7, #28]
 800a71c:	e015      	b.n	800a74a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	697a      	ldr	r2, [r7, #20]
 800a724:	429a      	cmp	r2, r3
 800a726:	d20b      	bcs.n	800a740 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7ff ff9b 	bl	800a670 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a73a:	2300      	movs	r3, #0
 800a73c:	61fb      	str	r3, [r7, #28]
 800a73e:	e004      	b.n	800a74a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a746:	2301      	movs	r3, #1
 800a748:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a74a:	f001 f843 	bl	800b7d4 <vPortExitCritical>

	return xReturn;
 800a74e:	69fb      	ldr	r3, [r7, #28]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3720      	adds	r7, #32
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000d9c 	.word	0x20000d9c
 800a75c:	20000db0 	.word	0x20000db0

0800a760 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a760:	b480      	push	{r7}
 800a762:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a764:	4b03      	ldr	r3, [pc, #12]	; (800a774 <vTaskMissedYield+0x14>)
 800a766:	2201      	movs	r2, #1
 800a768:	601a      	str	r2, [r3, #0]
}
 800a76a:	bf00      	nop
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	20000dac 	.word	0x20000dac

0800a778 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a780:	f000 f852 	bl	800a828 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a784:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <prvIdleTask+0x28>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d9f9      	bls.n	800a780 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a78c:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <prvIdleTask+0x2c>)
 800a78e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a792:	601a      	str	r2, [r3, #0]
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a79c:	e7f0      	b.n	800a780 <prvIdleTask+0x8>
 800a79e:	bf00      	nop
 800a7a0:	200008c8 	.word	0x200008c8
 800a7a4:	e000ed04 	.word	0xe000ed04

0800a7a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	607b      	str	r3, [r7, #4]
 800a7b2:	e00c      	b.n	800a7ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4a12      	ldr	r2, [pc, #72]	; (800a808 <prvInitialiseTaskLists+0x60>)
 800a7c0:	4413      	add	r3, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe f8a4 	bl	8008910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	607b      	str	r3, [r7, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b37      	cmp	r3, #55	; 0x37
 800a7d2:	d9ef      	bls.n	800a7b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7d4:	480d      	ldr	r0, [pc, #52]	; (800a80c <prvInitialiseTaskLists+0x64>)
 800a7d6:	f7fe f89b 	bl	8008910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7da:	480d      	ldr	r0, [pc, #52]	; (800a810 <prvInitialiseTaskLists+0x68>)
 800a7dc:	f7fe f898 	bl	8008910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7e0:	480c      	ldr	r0, [pc, #48]	; (800a814 <prvInitialiseTaskLists+0x6c>)
 800a7e2:	f7fe f895 	bl	8008910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7e6:	480c      	ldr	r0, [pc, #48]	; (800a818 <prvInitialiseTaskLists+0x70>)
 800a7e8:	f7fe f892 	bl	8008910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7ec:	480b      	ldr	r0, [pc, #44]	; (800a81c <prvInitialiseTaskLists+0x74>)
 800a7ee:	f7fe f88f 	bl	8008910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	; (800a820 <prvInitialiseTaskLists+0x78>)
 800a7f4:	4a05      	ldr	r2, [pc, #20]	; (800a80c <prvInitialiseTaskLists+0x64>)
 800a7f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <prvInitialiseTaskLists+0x7c>)
 800a7fa:	4a05      	ldr	r2, [pc, #20]	; (800a810 <prvInitialiseTaskLists+0x68>)
 800a7fc:	601a      	str	r2, [r3, #0]
}
 800a7fe:	bf00      	nop
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	200008c8 	.word	0x200008c8
 800a80c:	20000d28 	.word	0x20000d28
 800a810:	20000d3c 	.word	0x20000d3c
 800a814:	20000d58 	.word	0x20000d58
 800a818:	20000d6c 	.word	0x20000d6c
 800a81c:	20000d84 	.word	0x20000d84
 800a820:	20000d50 	.word	0x20000d50
 800a824:	20000d54 	.word	0x20000d54

0800a828 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a82e:	e019      	b.n	800a864 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a830:	f000 ffa0 	bl	800b774 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a834:	4b10      	ldr	r3, [pc, #64]	; (800a878 <prvCheckTasksWaitingTermination+0x50>)
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3304      	adds	r3, #4
 800a840:	4618      	mov	r0, r3
 800a842:	f7fe f8ef 	bl	8008a24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a846:	4b0d      	ldr	r3, [pc, #52]	; (800a87c <prvCheckTasksWaitingTermination+0x54>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	4a0b      	ldr	r2, [pc, #44]	; (800a87c <prvCheckTasksWaitingTermination+0x54>)
 800a84e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a850:	4b0b      	ldr	r3, [pc, #44]	; (800a880 <prvCheckTasksWaitingTermination+0x58>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3b01      	subs	r3, #1
 800a856:	4a0a      	ldr	r2, [pc, #40]	; (800a880 <prvCheckTasksWaitingTermination+0x58>)
 800a858:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a85a:	f000 ffbb 	bl	800b7d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f810 	bl	800a884 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a864:	4b06      	ldr	r3, [pc, #24]	; (800a880 <prvCheckTasksWaitingTermination+0x58>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e1      	bne.n	800a830 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a86c:	bf00      	nop
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	20000d6c 	.word	0x20000d6c
 800a87c:	20000d98 	.word	0x20000d98
 800a880:	20000d80 	.word	0x20000d80

0800a884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	3364      	adds	r3, #100	; 0x64
 800a890:	4618      	mov	r0, r3
 800a892:	f010 fd49 	bl	801b328 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d108      	bne.n	800a8b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f001 f953 	bl	800bb50 <vPortFree>
				vPortFree( pxTCB );
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 f950 	bl	800bb50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8b0:	e018      	b.n	800a8e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d103      	bne.n	800a8c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f001 f947 	bl	800bb50 <vPortFree>
	}
 800a8c2:	e00f      	b.n	800a8e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d00a      	beq.n	800a8e4 <prvDeleteTCB+0x60>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	60fb      	str	r3, [r7, #12]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <prvDeleteTCB+0x5e>
	}
 800a8e4:	bf00      	nop
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8f2:	4b0c      	ldr	r3, [pc, #48]	; (800a924 <prvResetNextTaskUnblockTime+0x38>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d104      	bne.n	800a906 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8fc:	4b0a      	ldr	r3, [pc, #40]	; (800a928 <prvResetNextTaskUnblockTime+0x3c>)
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a904:	e008      	b.n	800a918 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a906:	4b07      	ldr	r3, [pc, #28]	; (800a924 <prvResetNextTaskUnblockTime+0x38>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	68db      	ldr	r3, [r3, #12]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	4a04      	ldr	r2, [pc, #16]	; (800a928 <prvResetNextTaskUnblockTime+0x3c>)
 800a916:	6013      	str	r3, [r2, #0]
}
 800a918:	bf00      	nop
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	20000d50 	.word	0x20000d50
 800a928:	20000db8 	.word	0x20000db8

0800a92c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a932:	4b05      	ldr	r3, [pc, #20]	; (800a948 <xTaskGetCurrentTaskHandle+0x1c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a938:	687b      	ldr	r3, [r7, #4]
	}
 800a93a:	4618      	mov	r0, r3
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
 800a946:	bf00      	nop
 800a948:	200008c4 	.word	0x200008c4

0800a94c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a952:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <xTaskGetSchedulerState+0x34>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d102      	bne.n	800a960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a95a:	2301      	movs	r3, #1
 800a95c:	607b      	str	r3, [r7, #4]
 800a95e:	e008      	b.n	800a972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a960:	4b08      	ldr	r3, [pc, #32]	; (800a984 <xTaskGetSchedulerState+0x38>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d102      	bne.n	800a96e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a968:	2302      	movs	r3, #2
 800a96a:	607b      	str	r3, [r7, #4]
 800a96c:	e001      	b.n	800a972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a96e:	2300      	movs	r3, #0
 800a970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a972:	687b      	ldr	r3, [r7, #4]
	}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	20000da4 	.word	0x20000da4
 800a984:	20000dc0 	.word	0x20000dc0

0800a988 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a994:	2300      	movs	r3, #0
 800a996:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d051      	beq.n	800aa42 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a2:	4b2a      	ldr	r3, [pc, #168]	; (800aa4c <xTaskPriorityInherit+0xc4>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d241      	bcs.n	800aa30 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	db06      	blt.n	800a9c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b4:	4b25      	ldr	r3, [pc, #148]	; (800aa4c <xTaskPriorityInherit+0xc4>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	6959      	ldr	r1, [r3, #20]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	4413      	add	r3, r2
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4a1f      	ldr	r2, [pc, #124]	; (800aa50 <xTaskPriorityInherit+0xc8>)
 800a9d4:	4413      	add	r3, r2
 800a9d6:	4299      	cmp	r1, r3
 800a9d8:	d122      	bne.n	800aa20 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe f820 	bl	8008a24 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a9e4:	4b19      	ldr	r3, [pc, #100]	; (800aa4c <xTaskPriorityInherit+0xc4>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f2:	4b18      	ldr	r3, [pc, #96]	; (800aa54 <xTaskPriorityInherit+0xcc>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d903      	bls.n	800aa02 <xTaskPriorityInherit+0x7a>
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fe:	4a15      	ldr	r2, [pc, #84]	; (800aa54 <xTaskPriorityInherit+0xcc>)
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa06:	4613      	mov	r3, r2
 800aa08:	009b      	lsls	r3, r3, #2
 800aa0a:	4413      	add	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	4a10      	ldr	r2, [pc, #64]	; (800aa50 <xTaskPriorityInherit+0xc8>)
 800aa10:	441a      	add	r2, r3
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	3304      	adds	r3, #4
 800aa16:	4619      	mov	r1, r3
 800aa18:	4610      	mov	r0, r2
 800aa1a:	f7fd ffa6 	bl	800896a <vListInsertEnd>
 800aa1e:	e004      	b.n	800aa2a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa20:	4b0a      	ldr	r3, [pc, #40]	; (800aa4c <xTaskPriorityInherit+0xc4>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	e008      	b.n	800aa42 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa34:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <xTaskPriorityInherit+0xc4>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d201      	bcs.n	800aa42 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa42:	68fb      	ldr	r3, [r7, #12]
	}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	200008c4 	.word	0x200008c4
 800aa50:	200008c8 	.word	0x200008c8
 800aa54:	20000da0 	.word	0x20000da0

0800aa58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa64:	2300      	movs	r3, #0
 800aa66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d056      	beq.n	800ab1c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa6e:	4b2e      	ldr	r3, [pc, #184]	; (800ab28 <xTaskPriorityDisinherit+0xd0>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d00a      	beq.n	800aa8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	60fb      	str	r3, [r7, #12]
}
 800aa8a:	bf00      	nop
 800aa8c:	e7fe      	b.n	800aa8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10a      	bne.n	800aaac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	60bb      	str	r3, [r7, #8]
}
 800aaa8:	bf00      	nop
 800aaaa:	e7fe      	b.n	800aaaa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aab0:	1e5a      	subs	r2, r3, #1
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d02c      	beq.n	800ab1c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d128      	bne.n	800ab1c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	3304      	adds	r3, #4
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fd ffa8 	bl	8008a24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaec:	4b0f      	ldr	r3, [pc, #60]	; (800ab2c <xTaskPriorityDisinherit+0xd4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d903      	bls.n	800aafc <xTaskPriorityDisinherit+0xa4>
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf8:	4a0c      	ldr	r2, [pc, #48]	; (800ab2c <xTaskPriorityDisinherit+0xd4>)
 800aafa:	6013      	str	r3, [r2, #0]
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab00:	4613      	mov	r3, r2
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4a09      	ldr	r2, [pc, #36]	; (800ab30 <xTaskPriorityDisinherit+0xd8>)
 800ab0a:	441a      	add	r2, r3
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	3304      	adds	r3, #4
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	f7fd ff29 	bl	800896a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab1c:	697b      	ldr	r3, [r7, #20]
	}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3718      	adds	r7, #24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	200008c4 	.word	0x200008c4
 800ab2c:	20000da0 	.word	0x20000da0
 800ab30:	200008c8 	.word	0x200008c8

0800ab34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ab42:	2301      	movs	r3, #1
 800ab44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d06a      	beq.n	800ac22 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10a      	bne.n	800ab6a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	60fb      	str	r3, [r7, #12]
}
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d902      	bls.n	800ab7a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	61fb      	str	r3, [r7, #28]
 800ab78:	e002      	b.n	800ab80 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	69fa      	ldr	r2, [r7, #28]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d04b      	beq.n	800ac22 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab8e:	697a      	ldr	r2, [r7, #20]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d146      	bne.n	800ac22 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ab94:	4b25      	ldr	r3, [pc, #148]	; (800ac2c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	69ba      	ldr	r2, [r7, #24]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d10a      	bne.n	800abb4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60bb      	str	r3, [r7, #8]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	69fa      	ldr	r2, [r7, #28]
 800abbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	db04      	blt.n	800abd2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	6959      	ldr	r1, [r3, #20]
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	4613      	mov	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4a13      	ldr	r2, [pc, #76]	; (800ac30 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800abe2:	4413      	add	r3, r2
 800abe4:	4299      	cmp	r1, r3
 800abe6:	d11c      	bne.n	800ac22 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	3304      	adds	r3, #4
 800abec:	4618      	mov	r0, r3
 800abee:	f7fd ff19 	bl	8008a24 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abf6:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d903      	bls.n	800ac06 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac02:	4a0c      	ldr	r2, [pc, #48]	; (800ac34 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4a07      	ldr	r2, [pc, #28]	; (800ac30 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ac14:	441a      	add	r2, r3
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f7fd fea4 	bl	800896a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac22:	bf00      	nop
 800ac24:	3720      	adds	r7, #32
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	200008c4 	.word	0x200008c4
 800ac30:	200008c8 	.word	0x200008c8
 800ac34:	20000da0 	.word	0x20000da0

0800ac38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ac3c:	4b07      	ldr	r3, [pc, #28]	; (800ac5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d004      	beq.n	800ac4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ac44:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ac4a:	3201      	adds	r2, #1
 800ac4c:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800ac4e:	4b03      	ldr	r3, [pc, #12]	; (800ac5c <pvTaskIncrementMutexHeldCount+0x24>)
 800ac50:	681b      	ldr	r3, [r3, #0]
	}
 800ac52:	4618      	mov	r0, r3
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	200008c4 	.word	0x200008c4

0800ac60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac6a:	4b21      	ldr	r3, [pc, #132]	; (800acf0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac70:	4b20      	ldr	r3, [pc, #128]	; (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	3304      	adds	r3, #4
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7fd fed4 	bl	8008a24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac82:	d10a      	bne.n	800ac9a <prvAddCurrentTaskToDelayedList+0x3a>
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d007      	beq.n	800ac9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ac8a:	4b1a      	ldr	r3, [pc, #104]	; (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	4619      	mov	r1, r3
 800ac92:	4819      	ldr	r0, [pc, #100]	; (800acf8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ac94:	f7fd fe69 	bl	800896a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ac98:	e026      	b.n	800ace8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4413      	add	r3, r2
 800aca0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aca2:	4b14      	ldr	r3, [pc, #80]	; (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68ba      	ldr	r2, [r7, #8]
 800aca8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d209      	bcs.n	800acc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acb2:	4b12      	ldr	r3, [pc, #72]	; (800acfc <prvAddCurrentTaskToDelayedList+0x9c>)
 800acb4:	681a      	ldr	r2, [r3, #0]
 800acb6:	4b0f      	ldr	r3, [pc, #60]	; (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3304      	adds	r3, #4
 800acbc:	4619      	mov	r1, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	f7fd fe77 	bl	80089b2 <vListInsert>
}
 800acc4:	e010      	b.n	800ace8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acc6:	4b0e      	ldr	r3, [pc, #56]	; (800ad00 <prvAddCurrentTaskToDelayedList+0xa0>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	4b0a      	ldr	r3, [pc, #40]	; (800acf4 <prvAddCurrentTaskToDelayedList+0x94>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	3304      	adds	r3, #4
 800acd0:	4619      	mov	r1, r3
 800acd2:	4610      	mov	r0, r2
 800acd4:	f7fd fe6d 	bl	80089b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800acd8:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d202      	bcs.n	800ace8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ace2:	4a08      	ldr	r2, [pc, #32]	; (800ad04 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	6013      	str	r3, [r2, #0]
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20000d9c 	.word	0x20000d9c
 800acf4:	200008c4 	.word	0x200008c4
 800acf8:	20000d84 	.word	0x20000d84
 800acfc:	20000d54 	.word	0x20000d54
 800ad00:	20000d50 	.word	0x20000d50
 800ad04:	20000db8 	.word	0x20000db8

0800ad08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	; 0x28
 800ad0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad12:	f000 fba1 	bl	800b458 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad16:	4b1c      	ldr	r3, [pc, #112]	; (800ad88 <xTimerCreateTimerTask+0x80>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d021      	beq.n	800ad62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad26:	1d3a      	adds	r2, r7, #4
 800ad28:	f107 0108 	add.w	r1, r7, #8
 800ad2c:	f107 030c 	add.w	r3, r7, #12
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fd fdd3 	bl	80088dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	9202      	str	r2, [sp, #8]
 800ad3e:	9301      	str	r3, [sp, #4]
 800ad40:	2302      	movs	r3, #2
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	2300      	movs	r3, #0
 800ad46:	460a      	mov	r2, r1
 800ad48:	4910      	ldr	r1, [pc, #64]	; (800ad8c <xTimerCreateTimerTask+0x84>)
 800ad4a:	4811      	ldr	r0, [pc, #68]	; (800ad90 <xTimerCreateTimerTask+0x88>)
 800ad4c:	f7fe ff94 	bl	8009c78 <xTaskCreateStatic>
 800ad50:	4603      	mov	r3, r0
 800ad52:	4a10      	ldr	r2, [pc, #64]	; (800ad94 <xTimerCreateTimerTask+0x8c>)
 800ad54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad56:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <xTimerCreateTimerTask+0x8c>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	613b      	str	r3, [r7, #16]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ad7e:	697b      	ldr	r3, [r7, #20]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3718      	adds	r7, #24
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20000df4 	.word	0x20000df4
 800ad8c:	0801c5cc 	.word	0x0801c5cc
 800ad90:	0800b001 	.word	0x0800b001
 800ad94:	20000df8 	.word	0x20000df8

0800ad98 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af02      	add	r7, sp, #8
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
 800ada4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ada6:	202c      	movs	r0, #44	; 0x2c
 800ada8:	f000 fe06 	bl	800b9b8 <pvPortMalloc>
 800adac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00d      	beq.n	800add0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	68b9      	ldr	r1, [r7, #8]
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f000 f843 	bl	800ae56 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800add0:	697b      	ldr	r3, [r7, #20]
	}
 800add2:	4618      	mov	r0, r3
 800add4:	3718      	adds	r7, #24
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800adda:	b580      	push	{r7, lr}
 800addc:	b08a      	sub	sp, #40	; 0x28
 800adde:	af02      	add	r7, sp, #8
 800ade0:	60f8      	str	r0, [r7, #12]
 800ade2:	60b9      	str	r1, [r7, #8]
 800ade4:	607a      	str	r2, [r7, #4]
 800ade6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ade8:	232c      	movs	r3, #44	; 0x2c
 800adea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	2b2c      	cmp	r3, #44	; 0x2c
 800adf0:	d00a      	beq.n	800ae08 <xTimerCreateStatic+0x2e>
	__asm volatile
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	61bb      	str	r3, [r7, #24]
}
 800ae04:	bf00      	nop
 800ae06:	e7fe      	b.n	800ae06 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ae08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800ae0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10a      	bne.n	800ae26 <xTimerCreateStatic+0x4c>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	617b      	str	r3, [r7, #20]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800ae26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae28:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00d      	beq.n	800ae4c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	2202      	movs	r2, #2
 800ae34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	68b9      	ldr	r1, [r7, #8]
 800ae46:	68f8      	ldr	r0, [r7, #12]
 800ae48:	f000 f805 	bl	800ae56 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ae4c:	69fb      	ldr	r3, [r7, #28]
	}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b086      	sub	sp, #24
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	60f8      	str	r0, [r7, #12]
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	607a      	str	r2, [r7, #4]
 800ae62:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d10a      	bne.n	800ae80 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800ae6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae6e:	f383 8811 	msr	BASEPRI, r3
 800ae72:	f3bf 8f6f 	isb	sy
 800ae76:	f3bf 8f4f 	dsb	sy
 800ae7a:	617b      	str	r3, [r7, #20]
}
 800ae7c:	bf00      	nop
 800ae7e:	e7fe      	b.n	800ae7e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d01e      	beq.n	800aec4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800ae86:	f000 fae7 	bl	800b458 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8c:	68fa      	ldr	r2, [r7, #12]
 800ae8e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	6a3a      	ldr	r2, [r7, #32]
 800aea0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800aea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea4:	3304      	adds	r3, #4
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fd fd52 	bl	8008950 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d008      	beq.n	800aec4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeb8:	f043 0304 	orr.w	r3, r3, #4
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800aec4:	bf00      	nop
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08a      	sub	sp, #40	; 0x28
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d10a      	bne.n	800aefa <xTimerGenericCommand+0x2e>
	__asm volatile
 800aee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee8:	f383 8811 	msr	BASEPRI, r3
 800aeec:	f3bf 8f6f 	isb	sy
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	623b      	str	r3, [r7, #32]
}
 800aef6:	bf00      	nop
 800aef8:	e7fe      	b.n	800aef8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aefa:	4b1a      	ldr	r3, [pc, #104]	; (800af64 <xTimerGenericCommand+0x98>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d02a      	beq.n	800af58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b05      	cmp	r3, #5
 800af12:	dc18      	bgt.n	800af46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af14:	f7ff fd1a 	bl	800a94c <xTaskGetSchedulerState>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d109      	bne.n	800af32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af1e:	4b11      	ldr	r3, [pc, #68]	; (800af64 <xTimerGenericCommand+0x98>)
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	f107 0110 	add.w	r1, r7, #16
 800af26:	2300      	movs	r3, #0
 800af28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af2a:	f7fe f803 	bl	8008f34 <xQueueGenericSend>
 800af2e:	6278      	str	r0, [r7, #36]	; 0x24
 800af30:	e012      	b.n	800af58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af32:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <xTimerGenericCommand+0x98>)
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	f107 0110 	add.w	r1, r7, #16
 800af3a:	2300      	movs	r3, #0
 800af3c:	2200      	movs	r2, #0
 800af3e:	f7fd fff9 	bl	8008f34 <xQueueGenericSend>
 800af42:	6278      	str	r0, [r7, #36]	; 0x24
 800af44:	e008      	b.n	800af58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af46:	4b07      	ldr	r3, [pc, #28]	; (800af64 <xTimerGenericCommand+0x98>)
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	f107 0110 	add.w	r1, r7, #16
 800af4e:	2300      	movs	r3, #0
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	f7fe f8ed 	bl	8009130 <xQueueGenericSendFromISR>
 800af56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3728      	adds	r7, #40	; 0x28
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20000df4 	.word	0x20000df4

0800af68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af72:	4b22      	ldr	r3, [pc, #136]	; (800affc <prvProcessExpiredTimer+0x94>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	3304      	adds	r3, #4
 800af80:	4618      	mov	r0, r3
 800af82:	f7fd fd4f 	bl	8008a24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af8c:	f003 0304 	and.w	r3, r3, #4
 800af90:	2b00      	cmp	r3, #0
 800af92:	d022      	beq.n	800afda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	699a      	ldr	r2, [r3, #24]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	18d1      	adds	r1, r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	6978      	ldr	r0, [r7, #20]
 800afa2:	f000 f8d1 	bl	800b148 <prvInsertTimerInActiveList>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d01f      	beq.n	800afec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afac:	2300      	movs	r3, #0
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	2300      	movs	r3, #0
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	2100      	movs	r1, #0
 800afb6:	6978      	ldr	r0, [r7, #20]
 800afb8:	f7ff ff88 	bl	800aecc <xTimerGenericCommand>
 800afbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d113      	bne.n	800afec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800afc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc8:	f383 8811 	msr	BASEPRI, r3
 800afcc:	f3bf 8f6f 	isb	sy
 800afd0:	f3bf 8f4f 	dsb	sy
 800afd4:	60fb      	str	r3, [r7, #12]
}
 800afd6:	bf00      	nop
 800afd8:	e7fe      	b.n	800afd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afe0:	f023 0301 	bic.w	r3, r3, #1
 800afe4:	b2da      	uxtb	r2, r3
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	6a1b      	ldr	r3, [r3, #32]
 800aff0:	6978      	ldr	r0, [r7, #20]
 800aff2:	4798      	blx	r3
}
 800aff4:	bf00      	nop
 800aff6:	3718      	adds	r7, #24
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000dec 	.word	0x20000dec

0800b000 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b008:	f107 0308 	add.w	r3, r7, #8
 800b00c:	4618      	mov	r0, r3
 800b00e:	f000 f857 	bl	800b0c0 <prvGetNextExpireTime>
 800b012:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	4619      	mov	r1, r3
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f000 f803 	bl	800b024 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b01e:	f000 f8d5 	bl	800b1cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b022:	e7f1      	b.n	800b008 <prvTimerTask+0x8>

0800b024 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b02e:	f7ff f87f 	bl	800a130 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b032:	f107 0308 	add.w	r3, r7, #8
 800b036:	4618      	mov	r0, r3
 800b038:	f000 f866 	bl	800b108 <prvSampleTimeNow>
 800b03c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d130      	bne.n	800b0a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <prvProcessTimerOrBlockTask+0x3c>
 800b04a:	687a      	ldr	r2, [r7, #4]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d806      	bhi.n	800b060 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b052:	f7ff f87b 	bl	800a14c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b056:	68f9      	ldr	r1, [r7, #12]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f7ff ff85 	bl	800af68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b05e:	e024      	b.n	800b0aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d008      	beq.n	800b078 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b066:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <prvProcessTimerOrBlockTask+0x90>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <prvProcessTimerOrBlockTask+0x50>
 800b070:	2301      	movs	r3, #1
 800b072:	e000      	b.n	800b076 <prvProcessTimerOrBlockTask+0x52>
 800b074:	2300      	movs	r3, #0
 800b076:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b078:	4b0f      	ldr	r3, [pc, #60]	; (800b0b8 <prvProcessTimerOrBlockTask+0x94>)
 800b07a:	6818      	ldr	r0, [r3, #0]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	4619      	mov	r1, r3
 800b086:	f7fe fdc3 	bl	8009c10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b08a:	f7ff f85f 	bl	800a14c <xTaskResumeAll>
 800b08e:	4603      	mov	r3, r0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b094:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <prvProcessTimerOrBlockTask+0x98>)
 800b096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	f3bf 8f6f 	isb	sy
}
 800b0a4:	e001      	b.n	800b0aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b0a6:	f7ff f851 	bl	800a14c <xTaskResumeAll>
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000df0 	.word	0x20000df0
 800b0b8:	20000df4 	.word	0x20000df4
 800b0bc:	e000ed04 	.word	0xe000ed04

0800b0c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0c8:	4b0e      	ldr	r3, [pc, #56]	; (800b104 <prvGetNextExpireTime+0x44>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <prvGetNextExpireTime+0x16>
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	e000      	b.n	800b0d8 <prvGetNextExpireTime+0x18>
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d105      	bne.n	800b0f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0e4:	4b07      	ldr	r3, [pc, #28]	; (800b104 <prvGetNextExpireTime+0x44>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	e001      	b.n	800b0f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3714      	adds	r7, #20
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b100:	4770      	bx	lr
 800b102:	bf00      	nop
 800b104:	20000dec 	.word	0x20000dec

0800b108 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b110:	f7ff f8ba 	bl	800a288 <xTaskGetTickCount>
 800b114:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b116:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <prvSampleTimeNow+0x3c>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d205      	bcs.n	800b12c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b120:	f000 f936 	bl	800b390 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	e002      	b.n	800b132 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b132:	4a04      	ldr	r2, [pc, #16]	; (800b144 <prvSampleTimeNow+0x3c>)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b138:	68fb      	ldr	r3, [r7, #12]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20000dfc 	.word	0x20000dfc

0800b148 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b156:	2300      	movs	r3, #0
 800b158:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d812      	bhi.n	800b194 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	1ad2      	subs	r2, r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d302      	bcc.n	800b182 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b17c:	2301      	movs	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
 800b180:	e01b      	b.n	800b1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b182:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <prvInsertTimerInActiveList+0x7c>)
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3304      	adds	r3, #4
 800b18a:	4619      	mov	r1, r3
 800b18c:	4610      	mov	r0, r2
 800b18e:	f7fd fc10 	bl	80089b2 <vListInsert>
 800b192:	e012      	b.n	800b1ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d206      	bcs.n	800b1aa <prvInsertTimerInActiveList+0x62>
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d302      	bcc.n	800b1aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	e007      	b.n	800b1ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1aa:	4b07      	ldr	r3, [pc, #28]	; (800b1c8 <prvInsertTimerInActiveList+0x80>)
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f7fd fbfc 	bl	80089b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b1ba:	697b      	ldr	r3, [r7, #20]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3718      	adds	r7, #24
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	20000df0 	.word	0x20000df0
 800b1c8:	20000dec 	.word	0x20000dec

0800b1cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b08e      	sub	sp, #56	; 0x38
 800b1d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1d2:	e0ca      	b.n	800b36a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da18      	bge.n	800b20c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1da:	1d3b      	adds	r3, r7, #4
 800b1dc:	3304      	adds	r3, #4
 800b1de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10a      	bne.n	800b1fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	61fb      	str	r3, [r7, #28]
}
 800b1f8:	bf00      	nop
 800b1fa:	e7fe      	b.n	800b1fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b202:	6850      	ldr	r0, [r2, #4]
 800b204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b206:	6892      	ldr	r2, [r2, #8]
 800b208:	4611      	mov	r1, r2
 800b20a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	f2c0 80aa 	blt.w	800b368 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d004      	beq.n	800b22a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	3304      	adds	r3, #4
 800b224:	4618      	mov	r0, r3
 800b226:	f7fd fbfd 	bl	8008a24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b22a:	463b      	mov	r3, r7
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff ff6b 	bl	800b108 <prvSampleTimeNow>
 800b232:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b09      	cmp	r3, #9
 800b238:	f200 8097 	bhi.w	800b36a <prvProcessReceivedCommands+0x19e>
 800b23c:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <prvProcessReceivedCommands+0x78>)
 800b23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b242:	bf00      	nop
 800b244:	0800b26d 	.word	0x0800b26d
 800b248:	0800b26d 	.word	0x0800b26d
 800b24c:	0800b26d 	.word	0x0800b26d
 800b250:	0800b2e1 	.word	0x0800b2e1
 800b254:	0800b2f5 	.word	0x0800b2f5
 800b258:	0800b33f 	.word	0x0800b33f
 800b25c:	0800b26d 	.word	0x0800b26d
 800b260:	0800b26d 	.word	0x0800b26d
 800b264:	0800b2e1 	.word	0x0800b2e1
 800b268:	0800b2f5 	.word	0x0800b2f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b272:	f043 0301 	orr.w	r3, r3, #1
 800b276:	b2da      	uxtb	r2, r3
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b27e:	68ba      	ldr	r2, [r7, #8]
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	699b      	ldr	r3, [r3, #24]
 800b284:	18d1      	adds	r1, r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b28a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b28c:	f7ff ff5c 	bl	800b148 <prvInsertTimerInActiveList>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d069      	beq.n	800b36a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b298:	6a1b      	ldr	r3, [r3, #32]
 800b29a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2a4:	f003 0304 	and.w	r3, r3, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d05e      	beq.n	800b36a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	699b      	ldr	r3, [r3, #24]
 800b2b2:	441a      	add	r2, r3
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2be:	f7ff fe05 	bl	800aecc <xTimerGenericCommand>
 800b2c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d14f      	bne.n	800b36a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ce:	f383 8811 	msr	BASEPRI, r3
 800b2d2:	f3bf 8f6f 	isb	sy
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	61bb      	str	r3, [r7, #24]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2e6:	f023 0301 	bic.w	r3, r3, #1
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b2f2:	e03a      	b.n	800b36a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	699b      	ldr	r3, [r3, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	617b      	str	r3, [r7, #20]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32c:	699a      	ldr	r2, [r3, #24]
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	18d1      	adds	r1, r2, r3
 800b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b338:	f7ff ff06 	bl	800b148 <prvInsertTimerInActiveList>
					break;
 800b33c:	e015      	b.n	800b36a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b344:	f003 0302 	and.w	r3, r3, #2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d103      	bne.n	800b354 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b34c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b34e:	f000 fbff 	bl	800bb50 <vPortFree>
 800b352:	e00a      	b.n	800b36a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b35a:	f023 0301 	bic.w	r3, r3, #1
 800b35e:	b2da      	uxtb	r2, r3
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b366:	e000      	b.n	800b36a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b368:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b36a:	4b08      	ldr	r3, [pc, #32]	; (800b38c <prvProcessReceivedCommands+0x1c0>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	1d39      	adds	r1, r7, #4
 800b370:	2200      	movs	r2, #0
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe f804 	bl	8009380 <xQueueReceive>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	f47f af2a 	bne.w	800b1d4 <prvProcessReceivedCommands+0x8>
	}
}
 800b380:	bf00      	nop
 800b382:	bf00      	nop
 800b384:	3730      	adds	r7, #48	; 0x30
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	20000df4 	.word	0x20000df4

0800b390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b088      	sub	sp, #32
 800b394:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b396:	e048      	b.n	800b42a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b398:	4b2d      	ldr	r3, [pc, #180]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3a2:	4b2b      	ldr	r3, [pc, #172]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	68db      	ldr	r3, [r3, #12]
 800b3aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3304      	adds	r3, #4
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fd fb37 	bl	8008a24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3c4:	f003 0304 	and.w	r3, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d02e      	beq.n	800b42a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	699b      	ldr	r3, [r3, #24]
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d90e      	bls.n	800b3fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3ea:	4b19      	ldr	r3, [pc, #100]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	f7fd fadc 	bl	80089b2 <vListInsert>
 800b3fa:	e016      	b.n	800b42a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	2300      	movs	r3, #0
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	2100      	movs	r1, #0
 800b406:	68f8      	ldr	r0, [r7, #12]
 800b408:	f7ff fd60 	bl	800aecc <xTimerGenericCommand>
 800b40c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d10a      	bne.n	800b42a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	603b      	str	r3, [r7, #0]
}
 800b426:	bf00      	nop
 800b428:	e7fe      	b.n	800b428 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b42a:	4b09      	ldr	r3, [pc, #36]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1b1      	bne.n	800b398 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b434:	4b06      	ldr	r3, [pc, #24]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b43a:	4b06      	ldr	r3, [pc, #24]	; (800b454 <prvSwitchTimerLists+0xc4>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a04      	ldr	r2, [pc, #16]	; (800b450 <prvSwitchTimerLists+0xc0>)
 800b440:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b442:	4a04      	ldr	r2, [pc, #16]	; (800b454 <prvSwitchTimerLists+0xc4>)
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	6013      	str	r3, [r2, #0]
}
 800b448:	bf00      	nop
 800b44a:	3718      	adds	r7, #24
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	20000dec 	.word	0x20000dec
 800b454:	20000df0 	.word	0x20000df0

0800b458 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b45e:	f000 f989 	bl	800b774 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b462:	4b15      	ldr	r3, [pc, #84]	; (800b4b8 <prvCheckForValidListAndQueue+0x60>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d120      	bne.n	800b4ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b46a:	4814      	ldr	r0, [pc, #80]	; (800b4bc <prvCheckForValidListAndQueue+0x64>)
 800b46c:	f7fd fa50 	bl	8008910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b470:	4813      	ldr	r0, [pc, #76]	; (800b4c0 <prvCheckForValidListAndQueue+0x68>)
 800b472:	f7fd fa4d 	bl	8008910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b476:	4b13      	ldr	r3, [pc, #76]	; (800b4c4 <prvCheckForValidListAndQueue+0x6c>)
 800b478:	4a10      	ldr	r2, [pc, #64]	; (800b4bc <prvCheckForValidListAndQueue+0x64>)
 800b47a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b47c:	4b12      	ldr	r3, [pc, #72]	; (800b4c8 <prvCheckForValidListAndQueue+0x70>)
 800b47e:	4a10      	ldr	r2, [pc, #64]	; (800b4c0 <prvCheckForValidListAndQueue+0x68>)
 800b480:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b482:	2300      	movs	r3, #0
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	4b11      	ldr	r3, [pc, #68]	; (800b4cc <prvCheckForValidListAndQueue+0x74>)
 800b488:	4a11      	ldr	r2, [pc, #68]	; (800b4d0 <prvCheckForValidListAndQueue+0x78>)
 800b48a:	2110      	movs	r1, #16
 800b48c:	200a      	movs	r0, #10
 800b48e:	f7fd fb5b 	bl	8008b48 <xQueueGenericCreateStatic>
 800b492:	4603      	mov	r3, r0
 800b494:	4a08      	ldr	r2, [pc, #32]	; (800b4b8 <prvCheckForValidListAndQueue+0x60>)
 800b496:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b498:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <prvCheckForValidListAndQueue+0x60>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b4a0:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <prvCheckForValidListAndQueue+0x60>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	490b      	ldr	r1, [pc, #44]	; (800b4d4 <prvCheckForValidListAndQueue+0x7c>)
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe fb5e 	bl	8009b68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4ac:	f000 f992 	bl	800b7d4 <vPortExitCritical>
}
 800b4b0:	bf00      	nop
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20000df4 	.word	0x20000df4
 800b4bc:	20000dc4 	.word	0x20000dc4
 800b4c0:	20000dd8 	.word	0x20000dd8
 800b4c4:	20000dec 	.word	0x20000dec
 800b4c8:	20000df0 	.word	0x20000df0
 800b4cc:	20000ea0 	.word	0x20000ea0
 800b4d0:	20000e00 	.word	0x20000e00
 800b4d4:	0801c5d4 	.word	0x0801c5d4

0800b4d8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10a      	bne.n	800b500 <pvTimerGetTimerID+0x28>
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	60fb      	str	r3, [r7, #12]
}
 800b4fc:	bf00      	nop
 800b4fe:	e7fe      	b.n	800b4fe <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b500:	f000 f938 	bl	800b774 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	69db      	ldr	r3, [r3, #28]
 800b508:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b50a:	f000 f963 	bl	800b7d4 <vPortExitCritical>

	return pvReturn;
 800b50e:	693b      	ldr	r3, [r7, #16]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3b04      	subs	r3, #4
 800b528:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	3b04      	subs	r3, #4
 800b536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f023 0201 	bic.w	r2, r3, #1
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3b04      	subs	r3, #4
 800b546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b548:	4a0c      	ldr	r2, [pc, #48]	; (800b57c <pxPortInitialiseStack+0x64>)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	3b14      	subs	r3, #20
 800b552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	3b04      	subs	r3, #4
 800b55e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f06f 0202 	mvn.w	r2, #2
 800b566:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	3b20      	subs	r3, #32
 800b56c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b56e:	68fb      	ldr	r3, [r7, #12]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	0800b581 	.word	0x0800b581

0800b580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b586:	2300      	movs	r3, #0
 800b588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b58a:	4b12      	ldr	r3, [pc, #72]	; (800b5d4 <prvTaskExitError+0x54>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b592:	d00a      	beq.n	800b5aa <prvTaskExitError+0x2a>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	f383 8811 	msr	BASEPRI, r3
 800b59c:	f3bf 8f6f 	isb	sy
 800b5a0:	f3bf 8f4f 	dsb	sy
 800b5a4:	60fb      	str	r3, [r7, #12]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <prvTaskExitError+0x28>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	60bb      	str	r3, [r7, #8]
}
 800b5bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b5be:	bf00      	nop
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0fc      	beq.n	800b5c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b5c6:	bf00      	nop
 800b5c8:	bf00      	nop
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	2000000c 	.word	0x2000000c
	...

0800b5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5e0:	4b07      	ldr	r3, [pc, #28]	; (800b600 <pxCurrentTCBConst2>)
 800b5e2:	6819      	ldr	r1, [r3, #0]
 800b5e4:	6808      	ldr	r0, [r1, #0]
 800b5e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ea:	f380 8809 	msr	PSP, r0
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f04f 0000 	mov.w	r0, #0
 800b5f6:	f380 8811 	msr	BASEPRI, r0
 800b5fa:	4770      	bx	lr
 800b5fc:	f3af 8000 	nop.w

0800b600 <pxCurrentTCBConst2>:
 800b600:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop

0800b608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b608:	4808      	ldr	r0, [pc, #32]	; (800b62c <prvPortStartFirstTask+0x24>)
 800b60a:	6800      	ldr	r0, [r0, #0]
 800b60c:	6800      	ldr	r0, [r0, #0]
 800b60e:	f380 8808 	msr	MSP, r0
 800b612:	f04f 0000 	mov.w	r0, #0
 800b616:	f380 8814 	msr	CONTROL, r0
 800b61a:	b662      	cpsie	i
 800b61c:	b661      	cpsie	f
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	df00      	svc	0
 800b628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b62a:	bf00      	nop
 800b62c:	e000ed08 	.word	0xe000ed08

0800b630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b636:	4b46      	ldr	r3, [pc, #280]	; (800b750 <xPortStartScheduler+0x120>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a46      	ldr	r2, [pc, #280]	; (800b754 <xPortStartScheduler+0x124>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d10a      	bne.n	800b656 <xPortStartScheduler+0x26>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	613b      	str	r3, [r7, #16]
}
 800b652:	bf00      	nop
 800b654:	e7fe      	b.n	800b654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b656:	4b3e      	ldr	r3, [pc, #248]	; (800b750 <xPortStartScheduler+0x120>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a3f      	ldr	r2, [pc, #252]	; (800b758 <xPortStartScheduler+0x128>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d10a      	bne.n	800b676 <xPortStartScheduler+0x46>
	__asm volatile
 800b660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b664:	f383 8811 	msr	BASEPRI, r3
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	60fb      	str	r3, [r7, #12]
}
 800b672:	bf00      	nop
 800b674:	e7fe      	b.n	800b674 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b676:	4b39      	ldr	r3, [pc, #228]	; (800b75c <xPortStartScheduler+0x12c>)
 800b678:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	22ff      	movs	r2, #255	; 0xff
 800b686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b690:	78fb      	ldrb	r3, [r7, #3]
 800b692:	b2db      	uxtb	r3, r3
 800b694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	4b31      	ldr	r3, [pc, #196]	; (800b760 <xPortStartScheduler+0x130>)
 800b69c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b69e:	4b31      	ldr	r3, [pc, #196]	; (800b764 <xPortStartScheduler+0x134>)
 800b6a0:	2207      	movs	r2, #7
 800b6a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6a4:	e009      	b.n	800b6ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b6a6:	4b2f      	ldr	r3, [pc, #188]	; (800b764 <xPortStartScheduler+0x134>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	4a2d      	ldr	r2, [pc, #180]	; (800b764 <xPortStartScheduler+0x134>)
 800b6ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b6b0:	78fb      	ldrb	r3, [r7, #3]
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	005b      	lsls	r3, r3, #1
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6ba:	78fb      	ldrb	r3, [r7, #3]
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6c2:	2b80      	cmp	r3, #128	; 0x80
 800b6c4:	d0ef      	beq.n	800b6a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b6c6:	4b27      	ldr	r3, [pc, #156]	; (800b764 <xPortStartScheduler+0x134>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f1c3 0307 	rsb	r3, r3, #7
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	d00a      	beq.n	800b6e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	60bb      	str	r3, [r7, #8]
}
 800b6e4:	bf00      	nop
 800b6e6:	e7fe      	b.n	800b6e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6e8:	4b1e      	ldr	r3, [pc, #120]	; (800b764 <xPortStartScheduler+0x134>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	021b      	lsls	r3, r3, #8
 800b6ee:	4a1d      	ldr	r2, [pc, #116]	; (800b764 <xPortStartScheduler+0x134>)
 800b6f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6f2:	4b1c      	ldr	r3, [pc, #112]	; (800b764 <xPortStartScheduler+0x134>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6fa:	4a1a      	ldr	r2, [pc, #104]	; (800b764 <xPortStartScheduler+0x134>)
 800b6fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	b2da      	uxtb	r2, r3
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b706:	4b18      	ldr	r3, [pc, #96]	; (800b768 <xPortStartScheduler+0x138>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a17      	ldr	r2, [pc, #92]	; (800b768 <xPortStartScheduler+0x138>)
 800b70c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b712:	4b15      	ldr	r3, [pc, #84]	; (800b768 <xPortStartScheduler+0x138>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a14      	ldr	r2, [pc, #80]	; (800b768 <xPortStartScheduler+0x138>)
 800b718:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b71c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b71e:	f000 f8dd 	bl	800b8dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b722:	4b12      	ldr	r3, [pc, #72]	; (800b76c <xPortStartScheduler+0x13c>)
 800b724:	2200      	movs	r2, #0
 800b726:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b728:	f000 f8fc 	bl	800b924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b72c:	4b10      	ldr	r3, [pc, #64]	; (800b770 <xPortStartScheduler+0x140>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a0f      	ldr	r2, [pc, #60]	; (800b770 <xPortStartScheduler+0x140>)
 800b732:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b736:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b738:	f7ff ff66 	bl	800b608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b73c:	f7fe fe80 	bl	800a440 <vTaskSwitchContext>
	prvTaskExitError();
 800b740:	f7ff ff1e 	bl	800b580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	e000ed00 	.word	0xe000ed00
 800b754:	410fc271 	.word	0x410fc271
 800b758:	410fc270 	.word	0x410fc270
 800b75c:	e000e400 	.word	0xe000e400
 800b760:	20000ef0 	.word	0x20000ef0
 800b764:	20000ef4 	.word	0x20000ef4
 800b768:	e000ed20 	.word	0xe000ed20
 800b76c:	2000000c 	.word	0x2000000c
 800b770:	e000ef34 	.word	0xe000ef34

0800b774 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b774:	b480      	push	{r7}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	607b      	str	r3, [r7, #4]
}
 800b78c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b78e:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <vPortEnterCritical+0x58>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	3301      	adds	r3, #1
 800b794:	4a0d      	ldr	r2, [pc, #52]	; (800b7cc <vPortEnterCritical+0x58>)
 800b796:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b798:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <vPortEnterCritical+0x58>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d10f      	bne.n	800b7c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b7a0:	4b0b      	ldr	r3, [pc, #44]	; (800b7d0 <vPortEnterCritical+0x5c>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00a      	beq.n	800b7c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	603b      	str	r3, [r7, #0]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <vPortEnterCritical+0x4a>
	}
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	2000000c 	.word	0x2000000c
 800b7d0:	e000ed04 	.word	0xe000ed04

0800b7d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b7da:	4b12      	ldr	r3, [pc, #72]	; (800b824 <vPortExitCritical+0x50>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d10a      	bne.n	800b7f8 <vPortExitCritical+0x24>
	__asm volatile
 800b7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e6:	f383 8811 	msr	BASEPRI, r3
 800b7ea:	f3bf 8f6f 	isb	sy
 800b7ee:	f3bf 8f4f 	dsb	sy
 800b7f2:	607b      	str	r3, [r7, #4]
}
 800b7f4:	bf00      	nop
 800b7f6:	e7fe      	b.n	800b7f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b7f8:	4b0a      	ldr	r3, [pc, #40]	; (800b824 <vPortExitCritical+0x50>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	4a09      	ldr	r2, [pc, #36]	; (800b824 <vPortExitCritical+0x50>)
 800b800:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b802:	4b08      	ldr	r3, [pc, #32]	; (800b824 <vPortExitCritical+0x50>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d105      	bne.n	800b816 <vPortExitCritical+0x42>
 800b80a:	2300      	movs	r3, #0
 800b80c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	f383 8811 	msr	BASEPRI, r3
}
 800b814:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b816:	bf00      	nop
 800b818:	370c      	adds	r7, #12
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr
 800b822:	bf00      	nop
 800b824:	2000000c 	.word	0x2000000c
	...

0800b830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b830:	f3ef 8009 	mrs	r0, PSP
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	4b15      	ldr	r3, [pc, #84]	; (800b890 <pxCurrentTCBConst>)
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	f01e 0f10 	tst.w	lr, #16
 800b840:	bf08      	it	eq
 800b842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84a:	6010      	str	r0, [r2, #0]
 800b84c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b850:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b854:	f380 8811 	msr	BASEPRI, r0
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f7fe fdee 	bl	800a440 <vTaskSwitchContext>
 800b864:	f04f 0000 	mov.w	r0, #0
 800b868:	f380 8811 	msr	BASEPRI, r0
 800b86c:	bc09      	pop	{r0, r3}
 800b86e:	6819      	ldr	r1, [r3, #0]
 800b870:	6808      	ldr	r0, [r1, #0]
 800b872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b876:	f01e 0f10 	tst.w	lr, #16
 800b87a:	bf08      	it	eq
 800b87c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b880:	f380 8809 	msr	PSP, r0
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	f3af 8000 	nop.w

0800b890 <pxCurrentTCBConst>:
 800b890:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b894:	bf00      	nop
 800b896:	bf00      	nop

0800b898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
	__asm volatile
 800b89e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a2:	f383 8811 	msr	BASEPRI, r3
 800b8a6:	f3bf 8f6f 	isb	sy
 800b8aa:	f3bf 8f4f 	dsb	sy
 800b8ae:	607b      	str	r3, [r7, #4]
}
 800b8b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b8b2:	f7fe fd0b 	bl	800a2cc <xTaskIncrementTick>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d003      	beq.n	800b8c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b8bc:	4b06      	ldr	r3, [pc, #24]	; (800b8d8 <xPortSysTickHandler+0x40>)
 800b8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	f383 8811 	msr	BASEPRI, r3
}
 800b8ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b8d0:	bf00      	nop
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	e000ed04 	.word	0xe000ed04

0800b8dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8dc:	b480      	push	{r7}
 800b8de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8e0:	4b0b      	ldr	r3, [pc, #44]	; (800b910 <vPortSetupTimerInterrupt+0x34>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8e6:	4b0b      	ldr	r3, [pc, #44]	; (800b914 <vPortSetupTimerInterrupt+0x38>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8ec:	4b0a      	ldr	r3, [pc, #40]	; (800b918 <vPortSetupTimerInterrupt+0x3c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a0a      	ldr	r2, [pc, #40]	; (800b91c <vPortSetupTimerInterrupt+0x40>)
 800b8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f6:	099b      	lsrs	r3, r3, #6
 800b8f8:	4a09      	ldr	r2, [pc, #36]	; (800b920 <vPortSetupTimerInterrupt+0x44>)
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8fe:	4b04      	ldr	r3, [pc, #16]	; (800b910 <vPortSetupTimerInterrupt+0x34>)
 800b900:	2207      	movs	r2, #7
 800b902:	601a      	str	r2, [r3, #0]
}
 800b904:	bf00      	nop
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop
 800b910:	e000e010 	.word	0xe000e010
 800b914:	e000e018 	.word	0xe000e018
 800b918:	20000000 	.word	0x20000000
 800b91c:	10624dd3 	.word	0x10624dd3
 800b920:	e000e014 	.word	0xe000e014

0800b924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b934 <vPortEnableVFP+0x10>
 800b928:	6801      	ldr	r1, [r0, #0]
 800b92a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b92e:	6001      	str	r1, [r0, #0]
 800b930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b932:	bf00      	nop
 800b934:	e000ed88 	.word	0xe000ed88

0800b938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b93e:	f3ef 8305 	mrs	r3, IPSR
 800b942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b0f      	cmp	r3, #15
 800b948:	d914      	bls.n	800b974 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b94a:	4a17      	ldr	r2, [pc, #92]	; (800b9a8 <vPortValidateInterruptPriority+0x70>)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b954:	4b15      	ldr	r3, [pc, #84]	; (800b9ac <vPortValidateInterruptPriority+0x74>)
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	7afa      	ldrb	r2, [r7, #11]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d20a      	bcs.n	800b974 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b962:	f383 8811 	msr	BASEPRI, r3
 800b966:	f3bf 8f6f 	isb	sy
 800b96a:	f3bf 8f4f 	dsb	sy
 800b96e:	607b      	str	r3, [r7, #4]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b974:	4b0e      	ldr	r3, [pc, #56]	; (800b9b0 <vPortValidateInterruptPriority+0x78>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b97c:	4b0d      	ldr	r3, [pc, #52]	; (800b9b4 <vPortValidateInterruptPriority+0x7c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d90a      	bls.n	800b99a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b988:	f383 8811 	msr	BASEPRI, r3
 800b98c:	f3bf 8f6f 	isb	sy
 800b990:	f3bf 8f4f 	dsb	sy
 800b994:	603b      	str	r3, [r7, #0]
}
 800b996:	bf00      	nop
 800b998:	e7fe      	b.n	800b998 <vPortValidateInterruptPriority+0x60>
	}
 800b99a:	bf00      	nop
 800b99c:	3714      	adds	r7, #20
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	e000e3f0 	.word	0xe000e3f0
 800b9ac:	20000ef0 	.word	0x20000ef0
 800b9b0:	e000ed0c 	.word	0xe000ed0c
 800b9b4:	20000ef4 	.word	0x20000ef4

0800b9b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08a      	sub	sp, #40	; 0x28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9c4:	f7fe fbb4 	bl	800a130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9c8:	4b5b      	ldr	r3, [pc, #364]	; (800bb38 <pvPortMalloc+0x180>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9d0:	f000 f920 	bl	800bc14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9d4:	4b59      	ldr	r3, [pc, #356]	; (800bb3c <pvPortMalloc+0x184>)
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4013      	ands	r3, r2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f040 8093 	bne.w	800bb08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d01d      	beq.n	800ba24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b9e8:	2208      	movs	r2, #8
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f003 0307 	and.w	r3, r3, #7
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d014      	beq.n	800ba24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f023 0307 	bic.w	r3, r3, #7
 800ba00:	3308      	adds	r3, #8
 800ba02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f003 0307 	and.w	r3, r3, #7
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00a      	beq.n	800ba24 <pvPortMalloc+0x6c>
	__asm volatile
 800ba0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba12:	f383 8811 	msr	BASEPRI, r3
 800ba16:	f3bf 8f6f 	isb	sy
 800ba1a:	f3bf 8f4f 	dsb	sy
 800ba1e:	617b      	str	r3, [r7, #20]
}
 800ba20:	bf00      	nop
 800ba22:	e7fe      	b.n	800ba22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d06e      	beq.n	800bb08 <pvPortMalloc+0x150>
 800ba2a:	4b45      	ldr	r3, [pc, #276]	; (800bb40 <pvPortMalloc+0x188>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d869      	bhi.n	800bb08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba34:	4b43      	ldr	r3, [pc, #268]	; (800bb44 <pvPortMalloc+0x18c>)
 800ba36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba38:	4b42      	ldr	r3, [pc, #264]	; (800bb44 <pvPortMalloc+0x18c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba3e:	e004      	b.n	800ba4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d903      	bls.n	800ba5c <pvPortMalloc+0xa4>
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1f1      	bne.n	800ba40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba5c:	4b36      	ldr	r3, [pc, #216]	; (800bb38 <pvPortMalloc+0x180>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d050      	beq.n	800bb08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba66:	6a3b      	ldr	r3, [r7, #32]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2208      	movs	r2, #8
 800ba6c:	4413      	add	r3, r2
 800ba6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	681a      	ldr	r2, [r3, #0]
 800ba74:	6a3b      	ldr	r3, [r7, #32]
 800ba76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	2308      	movs	r3, #8
 800ba82:	005b      	lsls	r3, r3, #1
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d91f      	bls.n	800bac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	f003 0307 	and.w	r3, r3, #7
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00a      	beq.n	800bab0 <pvPortMalloc+0xf8>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	613b      	str	r3, [r7, #16]
}
 800baac:	bf00      	nop
 800baae:	e7fe      	b.n	800baae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	685a      	ldr	r2, [r3, #4]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	1ad2      	subs	r2, r2, r3
 800bab8:	69bb      	ldr	r3, [r7, #24]
 800baba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bac2:	69b8      	ldr	r0, [r7, #24]
 800bac4:	f000 f908 	bl	800bcd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bac8:	4b1d      	ldr	r3, [pc, #116]	; (800bb40 <pvPortMalloc+0x188>)
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	4a1b      	ldr	r2, [pc, #108]	; (800bb40 <pvPortMalloc+0x188>)
 800bad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bad6:	4b1a      	ldr	r3, [pc, #104]	; (800bb40 <pvPortMalloc+0x188>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <pvPortMalloc+0x190>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d203      	bcs.n	800baea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bae2:	4b17      	ldr	r3, [pc, #92]	; (800bb40 <pvPortMalloc+0x188>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a18      	ldr	r2, [pc, #96]	; (800bb48 <pvPortMalloc+0x190>)
 800bae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800baea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	4b13      	ldr	r3, [pc, #76]	; (800bb3c <pvPortMalloc+0x184>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	431a      	orrs	r2, r3
 800baf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bafe:	4b13      	ldr	r3, [pc, #76]	; (800bb4c <pvPortMalloc+0x194>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	3301      	adds	r3, #1
 800bb04:	4a11      	ldr	r2, [pc, #68]	; (800bb4c <pvPortMalloc+0x194>)
 800bb06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb08:	f7fe fb20 	bl	800a14c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	f003 0307 	and.w	r3, r3, #7
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00a      	beq.n	800bb2c <pvPortMalloc+0x174>
	__asm volatile
 800bb16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1a:	f383 8811 	msr	BASEPRI, r3
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	f3bf 8f4f 	dsb	sy
 800bb26:	60fb      	str	r3, [r7, #12]
}
 800bb28:	bf00      	nop
 800bb2a:	e7fe      	b.n	800bb2a <pvPortMalloc+0x172>
	return pvReturn;
 800bb2c:	69fb      	ldr	r3, [r7, #28]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3728      	adds	r7, #40	; 0x28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	20004b00 	.word	0x20004b00
 800bb3c:	20004b14 	.word	0x20004b14
 800bb40:	20004b04 	.word	0x20004b04
 800bb44:	20004af8 	.word	0x20004af8
 800bb48:	20004b08 	.word	0x20004b08
 800bb4c:	20004b0c 	.word	0x20004b0c

0800bb50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d04d      	beq.n	800bbfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb62:	2308      	movs	r3, #8
 800bb64:	425b      	negs	r3, r3
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	4413      	add	r3, r2
 800bb6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	4b24      	ldr	r3, [pc, #144]	; (800bc08 <vPortFree+0xb8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4013      	ands	r3, r2
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10a      	bne.n	800bb94 <vPortFree+0x44>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	60fb      	str	r3, [r7, #12]
}
 800bb90:	bf00      	nop
 800bb92:	e7fe      	b.n	800bb92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00a      	beq.n	800bbb2 <vPortFree+0x62>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	60bb      	str	r3, [r7, #8]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <vPortFree+0xb8>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4013      	ands	r3, r2
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d01e      	beq.n	800bbfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d11a      	bne.n	800bbfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	4b0e      	ldr	r3, [pc, #56]	; (800bc08 <vPortFree+0xb8>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	43db      	mvns	r3, r3
 800bbd2:	401a      	ands	r2, r3
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bbd8:	f7fe faaa 	bl	800a130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <vPortFree+0xbc>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	4a09      	ldr	r2, [pc, #36]	; (800bc0c <vPortFree+0xbc>)
 800bbe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbea:	6938      	ldr	r0, [r7, #16]
 800bbec:	f000 f874 	bl	800bcd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bbf0:	4b07      	ldr	r3, [pc, #28]	; (800bc10 <vPortFree+0xc0>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	3301      	adds	r3, #1
 800bbf6:	4a06      	ldr	r2, [pc, #24]	; (800bc10 <vPortFree+0xc0>)
 800bbf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bbfa:	f7fe faa7 	bl	800a14c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbfe:	bf00      	nop
 800bc00:	3718      	adds	r7, #24
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20004b14 	.word	0x20004b14
 800bc0c:	20004b04 	.word	0x20004b04
 800bc10:	20004b10 	.word	0x20004b10

0800bc14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bc1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc20:	4b27      	ldr	r3, [pc, #156]	; (800bcc0 <prvHeapInit+0xac>)
 800bc22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f003 0307 	and.w	r3, r3, #7
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d00c      	beq.n	800bc48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3307      	adds	r3, #7
 800bc32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f023 0307 	bic.w	r3, r3, #7
 800bc3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	4a1f      	ldr	r2, [pc, #124]	; (800bcc0 <prvHeapInit+0xac>)
 800bc44:	4413      	add	r3, r2
 800bc46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc4c:	4a1d      	ldr	r2, [pc, #116]	; (800bcc4 <prvHeapInit+0xb0>)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc52:	4b1c      	ldr	r3, [pc, #112]	; (800bcc4 <prvHeapInit+0xb0>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68ba      	ldr	r2, [r7, #8]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc60:	2208      	movs	r2, #8
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	1a9b      	subs	r3, r3, r2
 800bc66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f023 0307 	bic.w	r3, r3, #7
 800bc6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4a15      	ldr	r2, [pc, #84]	; (800bcc8 <prvHeapInit+0xb4>)
 800bc74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc76:	4b14      	ldr	r3, [pc, #80]	; (800bcc8 <prvHeapInit+0xb4>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc7e:	4b12      	ldr	r3, [pc, #72]	; (800bcc8 <prvHeapInit+0xb4>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2200      	movs	r2, #0
 800bc84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	1ad2      	subs	r2, r2, r3
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc94:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <prvHeapInit+0xb4>)
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	4a0a      	ldr	r2, [pc, #40]	; (800bccc <prvHeapInit+0xb8>)
 800bca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	4a09      	ldr	r2, [pc, #36]	; (800bcd0 <prvHeapInit+0xbc>)
 800bcaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bcac:	4b09      	ldr	r3, [pc, #36]	; (800bcd4 <prvHeapInit+0xc0>)
 800bcae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bcb2:	601a      	str	r2, [r3, #0]
}
 800bcb4:	bf00      	nop
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr
 800bcc0:	20000ef8 	.word	0x20000ef8
 800bcc4:	20004af8 	.word	0x20004af8
 800bcc8:	20004b00 	.word	0x20004b00
 800bccc:	20004b08 	.word	0x20004b08
 800bcd0:	20004b04 	.word	0x20004b04
 800bcd4:	20004b14 	.word	0x20004b14

0800bcd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bce0:	4b28      	ldr	r3, [pc, #160]	; (800bd84 <prvInsertBlockIntoFreeList+0xac>)
 800bce2:	60fb      	str	r3, [r7, #12]
 800bce4:	e002      	b.n	800bcec <prvInsertBlockIntoFreeList+0x14>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	60fb      	str	r3, [r7, #12]
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d8f7      	bhi.n	800bce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	4413      	add	r3, r2
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d108      	bne.n	800bd1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	441a      	add	r2, r3
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	68ba      	ldr	r2, [r7, #8]
 800bd24:	441a      	add	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d118      	bne.n	800bd60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	4b15      	ldr	r3, [pc, #84]	; (800bd88 <prvInsertBlockIntoFreeList+0xb0>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d00d      	beq.n	800bd56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685a      	ldr	r2, [r3, #4]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	441a      	add	r2, r3
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	601a      	str	r2, [r3, #0]
 800bd54:	e008      	b.n	800bd68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd56:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <prvInsertBlockIntoFreeList+0xb0>)
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	601a      	str	r2, [r3, #0]
 800bd5e:	e003      	b.n	800bd68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d002      	beq.n	800bd76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd76:	bf00      	nop
 800bd78:	3714      	adds	r7, #20
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	20004af8 	.word	0x20004af8
 800bd88:	20004b00 	.word	0x20004b00

0800bd8c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	330c      	adds	r3, #12
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f001 fe63 	bl	800da6c <tcpip_send_msg_wait_sem>
 800bda6:	4603      	mov	r3, r0
 800bda8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800bdaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d103      	bne.n	800bdba <netconn_apimsg+0x2e>
    return apimsg->err;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bdb8:	e001      	b.n	800bdbe <netconn_apimsg+0x32>
  }
  return err;
 800bdba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
	...

0800bdc8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b08c      	sub	sp, #48	; 0x30
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	4603      	mov	r3, r0
 800bdd0:	603a      	str	r2, [r7, #0]
 800bdd2:	71fb      	strb	r3, [r7, #7]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800bdd8:	79fb      	ldrb	r3, [r7, #7]
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 febf 	bl	800cb60 <netconn_alloc>
 800bde2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d054      	beq.n	800be94 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800bdea:	79bb      	ldrb	r3, [r7, #6]
 800bdec:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800bdf2:	f107 0308 	add.w	r3, r7, #8
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	4829      	ldr	r0, [pc, #164]	; (800bea0 <netconn_new_with_proto_and_callback+0xd8>)
 800bdfa:	f7ff ffc7 	bl	800bd8c <netconn_apimsg>
 800bdfe:	4603      	mov	r3, r0
 800be00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800be04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d043      	beq.n	800be94 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d005      	beq.n	800be20 <netconn_new_with_proto_and_callback+0x58>
 800be14:	4b23      	ldr	r3, [pc, #140]	; (800bea4 <netconn_new_with_proto_and_callback+0xdc>)
 800be16:	22a3      	movs	r2, #163	; 0xa3
 800be18:	4923      	ldr	r1, [pc, #140]	; (800bea8 <netconn_new_with_proto_and_callback+0xe0>)
 800be1a:	4824      	ldr	r0, [pc, #144]	; (800beac <netconn_new_with_proto_and_callback+0xe4>)
 800be1c:	f00f fa1e 	bl	801b25c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800be20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be22:	3310      	adds	r3, #16
 800be24:	4618      	mov	r0, r3
 800be26:	f00c fe91 	bl	8018b4c <sys_mbox_valid>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d105      	bne.n	800be3c <netconn_new_with_proto_and_callback+0x74>
 800be30:	4b1c      	ldr	r3, [pc, #112]	; (800bea4 <netconn_new_with_proto_and_callback+0xdc>)
 800be32:	22a4      	movs	r2, #164	; 0xa4
 800be34:	491e      	ldr	r1, [pc, #120]	; (800beb0 <netconn_new_with_proto_and_callback+0xe8>)
 800be36:	481d      	ldr	r0, [pc, #116]	; (800beac <netconn_new_with_proto_and_callback+0xe4>)
 800be38:	f00f fa10 	bl	801b25c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800be3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3e:	3314      	adds	r3, #20
 800be40:	4618      	mov	r0, r3
 800be42:	f00c fe83 	bl	8018b4c <sys_mbox_valid>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d005      	beq.n	800be58 <netconn_new_with_proto_and_callback+0x90>
 800be4c:	4b15      	ldr	r3, [pc, #84]	; (800bea4 <netconn_new_with_proto_and_callback+0xdc>)
 800be4e:	22a6      	movs	r2, #166	; 0xa6
 800be50:	4918      	ldr	r1, [pc, #96]	; (800beb4 <netconn_new_with_proto_and_callback+0xec>)
 800be52:	4816      	ldr	r0, [pc, #88]	; (800beac <netconn_new_with_proto_and_callback+0xe4>)
 800be54:	f00f fa02 	bl	801b25c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be5a:	330c      	adds	r3, #12
 800be5c:	4618      	mov	r0, r3
 800be5e:	f00c ff03 	bl	8018c68 <sys_sem_valid>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d105      	bne.n	800be74 <netconn_new_with_proto_and_callback+0xac>
 800be68:	4b0e      	ldr	r3, [pc, #56]	; (800bea4 <netconn_new_with_proto_and_callback+0xdc>)
 800be6a:	22a9      	movs	r2, #169	; 0xa9
 800be6c:	4912      	ldr	r1, [pc, #72]	; (800beb8 <netconn_new_with_proto_and_callback+0xf0>)
 800be6e:	480f      	ldr	r0, [pc, #60]	; (800beac <netconn_new_with_proto_and_callback+0xe4>)
 800be70:	f00f f9f4 	bl	801b25c <iprintf>
      sys_sem_free(&conn->op_completed);
 800be74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be76:	330c      	adds	r3, #12
 800be78:	4618      	mov	r0, r3
 800be7a:	f00c fee8 	bl	8018c4e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800be7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be80:	3310      	adds	r3, #16
 800be82:	4618      	mov	r0, r3
 800be84:	f00c fdee 	bl	8018a64 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800be88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be8a:	2007      	movs	r0, #7
 800be8c:	f002 fb56 	bl	800e53c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800be90:	2300      	movs	r3, #0
 800be92:	e000      	b.n	800be96 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800be96:	4618      	mov	r0, r3
 800be98:	3730      	adds	r7, #48	; 0x30
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	0800cb35 	.word	0x0800cb35
 800bea4:	0801c5dc 	.word	0x0801c5dc
 800bea8:	0801c610 	.word	0x0801c610
 800beac:	0801c634 	.word	0x0801c634
 800beb0:	0801c65c 	.word	0x0801c65c
 800beb4:	0801c674 	.word	0x0801c674
 800beb8:	0801c698 	.word	0x0801c698

0800bebc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b08e      	sub	sp, #56	; 0x38
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	4613      	mov	r3, r2
 800bec8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d109      	bne.n	800bee4 <netconn_bind+0x28>
 800bed0:	4b11      	ldr	r3, [pc, #68]	; (800bf18 <netconn_bind+0x5c>)
 800bed2:	f44f 729c 	mov.w	r2, #312	; 0x138
 800bed6:	4911      	ldr	r1, [pc, #68]	; (800bf1c <netconn_bind+0x60>)
 800bed8:	4811      	ldr	r0, [pc, #68]	; (800bf20 <netconn_bind+0x64>)
 800beda:	f00f f9bf 	bl	801b25c <iprintf>
 800bede:	f06f 030f 	mvn.w	r3, #15
 800bee2:	e015      	b.n	800bf10 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d101      	bne.n	800beee <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800beea:	4b0e      	ldr	r3, [pc, #56]	; (800bf24 <netconn_bind+0x68>)
 800beec:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800bef6:	88fb      	ldrh	r3, [r7, #6]
 800bef8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800befa:	f107 0314 	add.w	r3, r7, #20
 800befe:	4619      	mov	r1, r3
 800bf00:	4809      	ldr	r0, [pc, #36]	; (800bf28 <netconn_bind+0x6c>)
 800bf02:	f7ff ff43 	bl	800bd8c <netconn_apimsg>
 800bf06:	4603      	mov	r3, r0
 800bf08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800bf0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3738      	adds	r7, #56	; 0x38
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	0801c5dc 	.word	0x0801c5dc
 800bf1c:	0801c714 	.word	0x0801c714
 800bf20:	0801c634 	.word	0x0801c634
 800bf24:	0801fdf4 	.word	0x0801fdf4
 800bf28:	0800d099 	.word	0x0800d099

0800bf2c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b088      	sub	sp, #32
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	4613      	mov	r3, r2
 800bf38:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d109      	bne.n	800bf58 <netconn_recv_data+0x2c>
 800bf44:	4b58      	ldr	r3, [pc, #352]	; (800c0a8 <netconn_recv_data+0x17c>)
 800bf46:	f44f 7212 	mov.w	r2, #584	; 0x248
 800bf4a:	4958      	ldr	r1, [pc, #352]	; (800c0ac <netconn_recv_data+0x180>)
 800bf4c:	4858      	ldr	r0, [pc, #352]	; (800c0b0 <netconn_recv_data+0x184>)
 800bf4e:	f00f f985 	bl	801b25c <iprintf>
 800bf52:	f06f 030f 	mvn.w	r3, #15
 800bf56:	e0a2      	b.n	800c09e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d109      	bne.n	800bf78 <netconn_recv_data+0x4c>
 800bf64:	4b50      	ldr	r3, [pc, #320]	; (800c0a8 <netconn_recv_data+0x17c>)
 800bf66:	f240 224a 	movw	r2, #586	; 0x24a
 800bf6a:	4952      	ldr	r1, [pc, #328]	; (800c0b4 <netconn_recv_data+0x188>)
 800bf6c:	4850      	ldr	r0, [pc, #320]	; (800c0b0 <netconn_recv_data+0x184>)
 800bf6e:	f00f f975 	bl	801b25c <iprintf>
 800bf72:	f06f 030f 	mvn.w	r3, #15
 800bf76:	e092      	b.n	800c09e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	3310      	adds	r3, #16
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f00c fde5 	bl	8018b4c <sys_mbox_valid>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10e      	bne.n	800bfa6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f000 fa23 	bl	800c3d4 <netconn_err>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800bf92:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d002      	beq.n	800bfa0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800bf9a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bf9e:	e07e      	b.n	800c09e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800bfa0:	f06f 030a 	mvn.w	r3, #10
 800bfa4:	e07b      	b.n	800c09e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	7f1b      	ldrb	r3, [r3, #28]
 800bfaa:	f003 0302 	and.w	r3, r3, #2
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10f      	bne.n	800bfd2 <netconn_recv_data+0xa6>
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	f003 0304 	and.w	r3, r3, #4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10a      	bne.n	800bfd2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	7f1b      	ldrb	r3, [r3, #28]
 800bfc0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d104      	bne.n	800bfd2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d023      	beq.n	800c01a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3310      	adds	r3, #16
 800bfd6:	f107 0218 	add.w	r2, r7, #24
 800bfda:	4611      	mov	r1, r2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f00c fd9e 	bl	8018b1e <sys_arch_mbox_tryfetch>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe8:	d11f      	bne.n	800c02a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f9f2 	bl	800c3d4 <netconn_err>
 800bff0:	4603      	mov	r3, r0
 800bff2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800bff4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d002      	beq.n	800c002 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800bffc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c000:	e04d      	b.n	800c09e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	7f1b      	ldrb	r3, [r3, #28]
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d002      	beq.n	800c014 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800c00e:	f06f 030a 	mvn.w	r3, #10
 800c012:	e044      	b.n	800c09e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800c014:	f06f 0306 	mvn.w	r3, #6
 800c018:	e041      	b.n	800c09e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	3310      	adds	r3, #16
 800c01e:	f107 0118 	add.w	r1, r7, #24
 800c022:	2200      	movs	r2, #0
 800c024:	4618      	mov	r0, r3
 800c026:	f00c fd49 	bl	8018abc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c032:	2b10      	cmp	r3, #16
 800c034:	d117      	bne.n	800c066 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	f107 0217 	add.w	r2, r7, #23
 800c03c:	4611      	mov	r1, r2
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 fa1a 	bl	800c478 <lwip_netconn_is_err_msg>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d009      	beq.n	800c05e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800c04a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c04e:	f113 0f0f 	cmn.w	r3, #15
 800c052:	d101      	bne.n	800c058 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	e022      	b.n	800c09e <netconn_recv_data+0x172>
      }
      return err;
 800c058:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c05c:	e01f      	b.n	800c09e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	891b      	ldrh	r3, [r3, #8]
 800c062:	83fb      	strh	r3, [r7, #30]
 800c064:	e00d      	b.n	800c082 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c066:	69bb      	ldr	r3, [r7, #24]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d106      	bne.n	800c07a <netconn_recv_data+0x14e>
 800c06c:	4b0e      	ldr	r3, [pc, #56]	; (800c0a8 <netconn_recv_data+0x17c>)
 800c06e:	f240 2291 	movw	r2, #657	; 0x291
 800c072:	4911      	ldr	r1, [pc, #68]	; (800c0b8 <netconn_recv_data+0x18c>)
 800c074:	480e      	ldr	r0, [pc, #56]	; (800c0b0 <netconn_recv_data+0x184>)
 800c076:	f00f f8f1 	bl	801b25c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	891b      	ldrh	r3, [r3, #8]
 800c080:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c086:	2b00      	cmp	r3, #0
 800c088:	d005      	beq.n	800c096 <netconn_recv_data+0x16a>
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08e:	8bfa      	ldrh	r2, [r7, #30]
 800c090:	2101      	movs	r1, #1
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c096:	69ba      	ldr	r2, [r7, #24]
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3720      	adds	r7, #32
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	0801c5dc 	.word	0x0801c5dc
 800c0ac:	0801c7f4 	.word	0x0801c7f4
 800c0b0:	0801c634 	.word	0x0801c634
 800c0b4:	0801c814 	.word	0x0801c814
 800c0b8:	0801c830 	.word	0x0801c830

0800c0bc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d005      	beq.n	800c0da <netconn_tcp_recvd_msg+0x1e>
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0d6:	2b10      	cmp	r3, #16
 800c0d8:	d009      	beq.n	800c0ee <netconn_tcp_recvd_msg+0x32>
 800c0da:	4b0c      	ldr	r3, [pc, #48]	; (800c10c <netconn_tcp_recvd_msg+0x50>)
 800c0dc:	f240 22a7 	movw	r2, #679	; 0x2a7
 800c0e0:	490b      	ldr	r1, [pc, #44]	; (800c110 <netconn_tcp_recvd_msg+0x54>)
 800c0e2:	480c      	ldr	r0, [pc, #48]	; (800c114 <netconn_tcp_recvd_msg+0x58>)
 800c0e4:	f00f f8ba 	bl	801b25c <iprintf>
 800c0e8:	f06f 030f 	mvn.w	r3, #15
 800c0ec:	e00a      	b.n	800c104 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800c0fa:	6879      	ldr	r1, [r7, #4]
 800c0fc:	4806      	ldr	r0, [pc, #24]	; (800c118 <netconn_tcp_recvd_msg+0x5c>)
 800c0fe:	f7ff fe45 	bl	800bd8c <netconn_apimsg>
 800c102:	4603      	mov	r3, r0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	0801c5dc 	.word	0x0801c5dc
 800c110:	0801c83c 	.word	0x0801c83c
 800c114:	0801c634 	.word	0x0801c634
 800c118:	0800d1a7 	.word	0x0800d1a7

0800c11c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b090      	sub	sp, #64	; 0x40
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	4613      	mov	r3, r2
 800c128:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3310      	adds	r3, #16
 800c12e:	4618      	mov	r0, r3
 800c130:	f00c fd0c 	bl	8018b4c <sys_mbox_valid>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d102      	bne.n	800c140 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c13a:	f06f 030a 	mvn.w	r3, #10
 800c13e:	e06d      	b.n	800c21c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	7f1b      	ldrb	r3, [r3, #28]
 800c144:	b25b      	sxtb	r3, r3
 800c146:	2b00      	cmp	r3, #0
 800c148:	da07      	bge.n	800c15a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	7f1b      	ldrb	r3, [r3, #28]
 800c14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c152:	b2da      	uxtb	r2, r3
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800c158:	e039      	b.n	800c1ce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c15a:	79fb      	ldrb	r3, [r7, #7]
 800c15c:	461a      	mov	r2, r3
 800c15e:	68b9      	ldr	r1, [r7, #8]
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f7ff fee3 	bl	800bf2c <netconn_recv_data>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800c16c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c170:	2b00      	cmp	r3, #0
 800c172:	d002      	beq.n	800c17a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c174:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c178:	e050      	b.n	800c21c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c180:	79fb      	ldrb	r3, [r7, #7]
 800c182:	f003 0308 	and.w	r3, r3, #8
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10e      	bne.n	800c1a8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d002      	beq.n	800c196 <netconn_recv_data_tcp+0x7a>
 800c190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c192:	891b      	ldrh	r3, [r3, #8]
 800c194:	e000      	b.n	800c198 <netconn_recv_data_tcp+0x7c>
 800c196:	2301      	movs	r3, #1
 800c198:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c19a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c19c:	f107 0214 	add.w	r2, r7, #20
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f7ff ff8a 	bl	800c0bc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d134      	bne.n	800c218 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	f003 0310 	and.w	r3, r3, #16
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d009      	beq.n	800c1cc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	7f1b      	ldrb	r3, [r3, #28]
 800c1bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800c1c6:	f06f 0306 	mvn.w	r3, #6
 800c1ca:	e027      	b.n	800c21c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800c1cc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d005      	beq.n	800c1e2 <netconn_recv_data_tcp+0xc6>
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1da:	2200      	movs	r2, #0
 800c1dc:	2101      	movs	r1, #1
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10f      	bne.n	800c20a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c1ea:	68f8      	ldr	r0, [r7, #12]
 800c1ec:	f000 f8f2 	bl	800c3d4 <netconn_err>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800c1f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <netconn_recv_data_tcp+0xe8>
          return err;
 800c1fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c202:	e00b      	b.n	800c21c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c204:	f06f 030d 	mvn.w	r3, #13
 800c208:	e008      	b.n	800c21c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c20a:	2101      	movs	r1, #1
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f000 f8b1 	bl	800c374 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c212:	f06f 030e 	mvn.w	r3, #14
 800c216:	e001      	b.n	800c21c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c218:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3740      	adds	r7, #64	; 0x40
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800c22e:	2300      	movs	r3, #0
 800c230:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d109      	bne.n	800c24c <netconn_recv+0x28>
 800c238:	4b32      	ldr	r3, [pc, #200]	; (800c304 <netconn_recv+0xe0>)
 800c23a:	f240 3263 	movw	r2, #867	; 0x363
 800c23e:	4932      	ldr	r1, [pc, #200]	; (800c308 <netconn_recv+0xe4>)
 800c240:	4832      	ldr	r0, [pc, #200]	; (800c30c <netconn_recv+0xe8>)
 800c242:	f00f f80b 	bl	801b25c <iprintf>
 800c246:	f06f 030f 	mvn.w	r3, #15
 800c24a:	e056      	b.n	800c2fa <netconn_recv+0xd6>
  *new_buf = NULL;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	2200      	movs	r2, #0
 800c250:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d109      	bne.n	800c26c <netconn_recv+0x48>
 800c258:	4b2a      	ldr	r3, [pc, #168]	; (800c304 <netconn_recv+0xe0>)
 800c25a:	f240 3265 	movw	r2, #869	; 0x365
 800c25e:	492c      	ldr	r1, [pc, #176]	; (800c310 <netconn_recv+0xec>)
 800c260:	482a      	ldr	r0, [pc, #168]	; (800c30c <netconn_recv+0xe8>)
 800c262:	f00e fffb 	bl	801b25c <iprintf>
 800c266:	f06f 030f 	mvn.w	r3, #15
 800c26a:	e046      	b.n	800c2fa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c274:	2b10      	cmp	r3, #16
 800c276:	d13a      	bne.n	800c2ee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800c278:	2300      	movs	r3, #0
 800c27a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c27c:	2006      	movs	r0, #6
 800c27e:	f002 f90b 	bl	800e498 <memp_malloc>
 800c282:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d102      	bne.n	800c290 <netconn_recv+0x6c>
      return ERR_MEM;
 800c28a:	f04f 33ff 	mov.w	r3, #4294967295
 800c28e:	e034      	b.n	800c2fa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800c290:	f107 030c 	add.w	r3, r7, #12
 800c294:	2200      	movs	r2, #0
 800c296:	4619      	mov	r1, r3
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f7ff ff3f 	bl	800c11c <netconn_recv_data_tcp>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c2a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d006      	beq.n	800c2b8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800c2aa:	6979      	ldr	r1, [r7, #20]
 800c2ac:	2006      	movs	r0, #6
 800c2ae:	f002 f945 	bl	800e53c <memp_free>
      return err;
 800c2b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c2b6:	e020      	b.n	800c2fa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d106      	bne.n	800c2cc <netconn_recv+0xa8>
 800c2be:	4b11      	ldr	r3, [pc, #68]	; (800c304 <netconn_recv+0xe0>)
 800c2c0:	f240 3279 	movw	r2, #889	; 0x379
 800c2c4:	4913      	ldr	r1, [pc, #76]	; (800c314 <netconn_recv+0xf0>)
 800c2c6:	4811      	ldr	r0, [pc, #68]	; (800c30c <netconn_recv+0xe8>)
 800c2c8:	f00e ffc8 	bl	801b25c <iprintf>

    buf->p = p;
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e005      	b.n	800c2fa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff fe1a 	bl	800bf2c <netconn_recv_data>
 800c2f8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	0801c5dc 	.word	0x0801c5dc
 800c308:	0801c7f4 	.word	0x0801c7f4
 800c30c:	0801c634 	.word	0x0801c634
 800c310:	0801c814 	.word	0x0801c814
 800c314:	0801c88c 	.word	0x0801c88c

0800c318 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08c      	sub	sp, #48	; 0x30
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d109      	bne.n	800c33c <netconn_send+0x24>
 800c328:	4b0e      	ldr	r3, [pc, #56]	; (800c364 <netconn_send+0x4c>)
 800c32a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800c32e:	490e      	ldr	r1, [pc, #56]	; (800c368 <netconn_send+0x50>)
 800c330:	480e      	ldr	r0, [pc, #56]	; (800c36c <netconn_send+0x54>)
 800c332:	f00e ff93 	bl	801b25c <iprintf>
 800c336:	f06f 030f 	mvn.w	r3, #15
 800c33a:	e00e      	b.n	800c35a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800c344:	f107 030c 	add.w	r3, r7, #12
 800c348:	4619      	mov	r1, r3
 800c34a:	4809      	ldr	r0, [pc, #36]	; (800c370 <netconn_send+0x58>)
 800c34c:	f7ff fd1e 	bl	800bd8c <netconn_apimsg>
 800c350:	4603      	mov	r3, r0
 800c352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c356:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3730      	adds	r7, #48	; 0x30
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	0801c5dc 	.word	0x0801c5dc
 800c368:	0801c898 	.word	0x0801c898
 800c36c:	0801c634 	.word	0x0801c634
 800c370:	0800d10d 	.word	0x0800d10d

0800c374 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b08c      	sub	sp, #48	; 0x30
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d109      	bne.n	800c39a <netconn_close_shutdown+0x26>
 800c386:	4b0f      	ldr	r3, [pc, #60]	; (800c3c4 <netconn_close_shutdown+0x50>)
 800c388:	f240 4247 	movw	r2, #1095	; 0x447
 800c38c:	490e      	ldr	r1, [pc, #56]	; (800c3c8 <netconn_close_shutdown+0x54>)
 800c38e:	480f      	ldr	r0, [pc, #60]	; (800c3cc <netconn_close_shutdown+0x58>)
 800c390:	f00e ff64 	bl	801b25c <iprintf>
 800c394:	f06f 030f 	mvn.w	r3, #15
 800c398:	e010      	b.n	800c3bc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c39e:	78fb      	ldrb	r3, [r7, #3]
 800c3a0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c3a2:	2329      	movs	r3, #41	; 0x29
 800c3a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c3a6:	f107 030c 	add.w	r3, r7, #12
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	4808      	ldr	r0, [pc, #32]	; (800c3d0 <netconn_close_shutdown+0x5c>)
 800c3ae:	f7ff fced 	bl	800bd8c <netconn_apimsg>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c3b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3730      	adds	r7, #48	; 0x30
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	0801c5dc 	.word	0x0801c5dc
 800c3c8:	0801c918 	.word	0x0801c918
 800c3cc:	0801c634 	.word	0x0801c634
 800c3d0:	0800d5a9 	.word	0x0800d5a9

0800c3d4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <netconn_err+0x12>
    return ERR_OK;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e00d      	b.n	800c402 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c3e6:	f00c fcbb 	bl	8018d60 <sys_arch_protect>
 800c3ea:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	7a1b      	ldrb	r3, [r3, #8]
 800c3f0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800c3f8:	68f8      	ldr	r0, [r7, #12]
 800c3fa:	f00c fcbf 	bl	8018d7c <sys_arch_unprotect>
  return err;
 800c3fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}
	...

0800c40c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b082      	sub	sp, #8
 800c410:	af00      	add	r7, sp, #0
 800c412:	4603      	mov	r3, r0
 800c414:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800c416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c41a:	f113 0f0d 	cmn.w	r3, #13
 800c41e:	d009      	beq.n	800c434 <lwip_netconn_err_to_msg+0x28>
 800c420:	f113 0f0d 	cmn.w	r3, #13
 800c424:	dc0c      	bgt.n	800c440 <lwip_netconn_err_to_msg+0x34>
 800c426:	f113 0f0f 	cmn.w	r3, #15
 800c42a:	d007      	beq.n	800c43c <lwip_netconn_err_to_msg+0x30>
 800c42c:	f113 0f0e 	cmn.w	r3, #14
 800c430:	d002      	beq.n	800c438 <lwip_netconn_err_to_msg+0x2c>
 800c432:	e005      	b.n	800c440 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800c434:	4b0a      	ldr	r3, [pc, #40]	; (800c460 <lwip_netconn_err_to_msg+0x54>)
 800c436:	e00e      	b.n	800c456 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800c438:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <lwip_netconn_err_to_msg+0x58>)
 800c43a:	e00c      	b.n	800c456 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800c43c:	4b0a      	ldr	r3, [pc, #40]	; (800c468 <lwip_netconn_err_to_msg+0x5c>)
 800c43e:	e00a      	b.n	800c456 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d005      	beq.n	800c454 <lwip_netconn_err_to_msg+0x48>
 800c448:	4b08      	ldr	r3, [pc, #32]	; (800c46c <lwip_netconn_err_to_msg+0x60>)
 800c44a:	227d      	movs	r2, #125	; 0x7d
 800c44c:	4908      	ldr	r1, [pc, #32]	; (800c470 <lwip_netconn_err_to_msg+0x64>)
 800c44e:	4809      	ldr	r0, [pc, #36]	; (800c474 <lwip_netconn_err_to_msg+0x68>)
 800c450:	f00e ff04 	bl	801b25c <iprintf>
      return NULL;
 800c454:	2300      	movs	r3, #0
  }
}
 800c456:	4618      	mov	r0, r3
 800c458:	3708      	adds	r7, #8
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	0801fce0 	.word	0x0801fce0
 800c464:	0801fce1 	.word	0x0801fce1
 800c468:	0801fce2 	.word	0x0801fce2
 800c46c:	0801c934 	.word	0x0801c934
 800c470:	0801c968 	.word	0x0801c968
 800c474:	0801c978 	.word	0x0801c978

0800c478 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d105      	bne.n	800c494 <lwip_netconn_is_err_msg+0x1c>
 800c488:	4b12      	ldr	r3, [pc, #72]	; (800c4d4 <lwip_netconn_is_err_msg+0x5c>)
 800c48a:	2285      	movs	r2, #133	; 0x85
 800c48c:	4912      	ldr	r1, [pc, #72]	; (800c4d8 <lwip_netconn_is_err_msg+0x60>)
 800c48e:	4813      	ldr	r0, [pc, #76]	; (800c4dc <lwip_netconn_is_err_msg+0x64>)
 800c490:	f00e fee4 	bl	801b25c <iprintf>

  if (msg == &netconn_aborted) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a12      	ldr	r2, [pc, #72]	; (800c4e0 <lwip_netconn_is_err_msg+0x68>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d104      	bne.n	800c4a6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	22f3      	movs	r2, #243	; 0xf3
 800c4a0:	701a      	strb	r2, [r3, #0]
    return 1;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e012      	b.n	800c4cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a0e      	ldr	r2, [pc, #56]	; (800c4e4 <lwip_netconn_is_err_msg+0x6c>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d104      	bne.n	800c4b8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	22f2      	movs	r2, #242	; 0xf2
 800c4b2:	701a      	strb	r2, [r3, #0]
    return 1;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e009      	b.n	800c4cc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a0b      	ldr	r2, [pc, #44]	; (800c4e8 <lwip_netconn_is_err_msg+0x70>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d104      	bne.n	800c4ca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	22f1      	movs	r2, #241	; 0xf1
 800c4c4:	701a      	strb	r2, [r3, #0]
    return 1;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e000      	b.n	800c4cc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3708      	adds	r7, #8
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	0801c934 	.word	0x0801c934
 800c4d8:	0801c9a0 	.word	0x0801c9a0
 800c4dc:	0801c978 	.word	0x0801c978
 800c4e0:	0801fce0 	.word	0x0801fce0
 800c4e4:	0801fce1 	.word	0x0801fce1
 800c4e8:	0801fce2 	.word	0x0801fce2

0800c4ec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
 800c4f8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d105      	bne.n	800c50c <recv_udp+0x20>
 800c500:	4b34      	ldr	r3, [pc, #208]	; (800c5d4 <recv_udp+0xe8>)
 800c502:	22e5      	movs	r2, #229	; 0xe5
 800c504:	4934      	ldr	r1, [pc, #208]	; (800c5d8 <recv_udp+0xec>)
 800c506:	4835      	ldr	r0, [pc, #212]	; (800c5dc <recv_udp+0xf0>)
 800c508:	f00e fea8 	bl	801b25c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d105      	bne.n	800c51e <recv_udp+0x32>
 800c512:	4b30      	ldr	r3, [pc, #192]	; (800c5d4 <recv_udp+0xe8>)
 800c514:	22e6      	movs	r2, #230	; 0xe6
 800c516:	4932      	ldr	r1, [pc, #200]	; (800c5e0 <recv_udp+0xf4>)
 800c518:	4830      	ldr	r0, [pc, #192]	; (800c5dc <recv_udp+0xf0>)
 800c51a:	f00e fe9f 	bl	801b25c <iprintf>
  conn = (struct netconn *)arg;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d103      	bne.n	800c530 <recv_udp+0x44>
    pbuf_free(p);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f002 feab 	bl	800f284 <pbuf_free>
    return;
 800c52e:	e04d      	b.n	800c5cc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	429a      	cmp	r2, r3
 800c538:	d005      	beq.n	800c546 <recv_udp+0x5a>
 800c53a:	4b26      	ldr	r3, [pc, #152]	; (800c5d4 <recv_udp+0xe8>)
 800c53c:	22ee      	movs	r2, #238	; 0xee
 800c53e:	4929      	ldr	r1, [pc, #164]	; (800c5e4 <recv_udp+0xf8>)
 800c540:	4826      	ldr	r0, [pc, #152]	; (800c5dc <recv_udp+0xf0>)
 800c542:	f00e fe8b 	bl	801b25c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	3310      	adds	r3, #16
 800c54a:	4618      	mov	r0, r3
 800c54c:	f00c fafe 	bl	8018b4c <sys_mbox_valid>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f002 fe94 	bl	800f284 <pbuf_free>
    return;
 800c55c:	e036      	b.n	800c5cc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c55e:	2006      	movs	r0, #6
 800c560:	f001 ff9a 	bl	800e498 <memp_malloc>
 800c564:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d103      	bne.n	800c574 <recv_udp+0x88>
    pbuf_free(p);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f002 fe89 	bl	800f284 <pbuf_free>
    return;
 800c572:	e02b      	b.n	800c5cc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <recv_udp+0xa0>
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	e000      	b.n	800c58e <recv_udp+0xa2>
 800c58c:	2300      	movs	r3, #0
 800c58e:	69ba      	ldr	r2, [r7, #24]
 800c590:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c596:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	891b      	ldrh	r3, [r3, #8]
 800c59c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	3310      	adds	r3, #16
 800c5a2:	69b9      	ldr	r1, [r7, #24]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f00c fa6f 	bl	8018a88 <sys_mbox_trypost>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d003      	beq.n	800c5b8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800c5b0:	69b8      	ldr	r0, [r7, #24]
 800c5b2:	f001 f899 	bl	800d6e8 <netbuf_delete>
    return;
 800c5b6:	e009      	b.n	800c5cc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d005      	beq.n	800c5cc <recv_udp+0xe0>
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c4:	8afa      	ldrh	r2, [r7, #22]
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	69f8      	ldr	r0, [r7, #28]
 800c5ca:	4798      	blx	r3
  }
}
 800c5cc:	3720      	adds	r7, #32
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	0801c934 	.word	0x0801c934
 800c5d8:	0801c9ac 	.word	0x0801c9ac
 800c5dc:	0801c978 	.word	0x0801c978
 800c5e0:	0801c9d0 	.word	0x0801c9d0
 800c5e4:	0801c9f0 	.word	0x0801c9f0

0800c5e8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
 800c5f4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d106      	bne.n	800c60a <recv_tcp+0x22>
 800c5fc:	4b36      	ldr	r3, [pc, #216]	; (800c6d8 <recv_tcp+0xf0>)
 800c5fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c602:	4936      	ldr	r1, [pc, #216]	; (800c6dc <recv_tcp+0xf4>)
 800c604:	4836      	ldr	r0, [pc, #216]	; (800c6e0 <recv_tcp+0xf8>)
 800c606:	f00e fe29 	bl	801b25c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d106      	bne.n	800c61e <recv_tcp+0x36>
 800c610:	4b31      	ldr	r3, [pc, #196]	; (800c6d8 <recv_tcp+0xf0>)
 800c612:	f240 122d 	movw	r2, #301	; 0x12d
 800c616:	4933      	ldr	r1, [pc, #204]	; (800c6e4 <recv_tcp+0xfc>)
 800c618:	4831      	ldr	r0, [pc, #196]	; (800c6e0 <recv_tcp+0xf8>)
 800c61a:	f00e fe1f 	bl	801b25c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800c61e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d006      	beq.n	800c634 <recv_tcp+0x4c>
 800c626:	4b2c      	ldr	r3, [pc, #176]	; (800c6d8 <recv_tcp+0xf0>)
 800c628:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800c62c:	492e      	ldr	r1, [pc, #184]	; (800c6e8 <recv_tcp+0x100>)
 800c62e:	482c      	ldr	r0, [pc, #176]	; (800c6e0 <recv_tcp+0xf8>)
 800c630:	f00e fe14 	bl	801b25c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800c638:	697b      	ldr	r3, [r7, #20]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d102      	bne.n	800c644 <recv_tcp+0x5c>
    return ERR_VAL;
 800c63e:	f06f 0305 	mvn.w	r3, #5
 800c642:	e045      	b.n	800c6d0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	68ba      	ldr	r2, [r7, #8]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d006      	beq.n	800c65c <recv_tcp+0x74>
 800c64e:	4b22      	ldr	r3, [pc, #136]	; (800c6d8 <recv_tcp+0xf0>)
 800c650:	f240 1235 	movw	r2, #309	; 0x135
 800c654:	4925      	ldr	r1, [pc, #148]	; (800c6ec <recv_tcp+0x104>)
 800c656:	4822      	ldr	r0, [pc, #136]	; (800c6e0 <recv_tcp+0xf8>)
 800c658:	f00e fe00 	bl	801b25c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	3310      	adds	r3, #16
 800c660:	4618      	mov	r0, r3
 800c662:	f00c fa73 	bl	8018b4c <sys_mbox_valid>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10d      	bne.n	800c688 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d008      	beq.n	800c684 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	891b      	ldrh	r3, [r3, #8]
 800c676:	4619      	mov	r1, r3
 800c678:	68b8      	ldr	r0, [r7, #8]
 800c67a:	f003 fd93 	bl	80101a4 <tcp_recved>
      pbuf_free(p);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f002 fe00 	bl	800f284 <pbuf_free>
    }
    return ERR_OK;
 800c684:	2300      	movs	r3, #0
 800c686:	e023      	b.n	800c6d0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d005      	beq.n	800c69a <recv_tcp+0xb2>
    msg = p;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	891b      	ldrh	r3, [r3, #8]
 800c696:	83fb      	strh	r3, [r7, #30]
 800c698:	e003      	b.n	800c6a2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800c69a:	4b15      	ldr	r3, [pc, #84]	; (800c6f0 <recv_tcp+0x108>)
 800c69c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	3310      	adds	r3, #16
 800c6a6:	69b9      	ldr	r1, [r7, #24]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f00c f9ed 	bl	8018a88 <sys_mbox_trypost>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d002      	beq.n	800c6ba <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800c6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b8:	e00a      	b.n	800c6d0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d005      	beq.n	800c6ce <recv_tcp+0xe6>
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c6:	8bfa      	ldrh	r2, [r7, #30]
 800c6c8:	2100      	movs	r1, #0
 800c6ca:	6978      	ldr	r0, [r7, #20]
 800c6cc:	4798      	blx	r3
  }

  return ERR_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3720      	adds	r7, #32
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	0801c934 	.word	0x0801c934
 800c6dc:	0801ca10 	.word	0x0801ca10
 800c6e0:	0801c978 	.word	0x0801c978
 800c6e4:	0801ca34 	.word	0x0801ca34
 800c6e8:	0801ca54 	.word	0x0801ca54
 800c6ec:	0801ca6c 	.word	0x0801ca6c
 800c6f0:	0801fce2 	.word	0x0801fce2

0800c6f4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d106      	bne.n	800c716 <poll_tcp+0x22>
 800c708:	4b29      	ldr	r3, [pc, #164]	; (800c7b0 <poll_tcp+0xbc>)
 800c70a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800c70e:	4929      	ldr	r1, [pc, #164]	; (800c7b4 <poll_tcp+0xc0>)
 800c710:	4829      	ldr	r0, [pc, #164]	; (800c7b8 <poll_tcp+0xc4>)
 800c712:	f00e fda3 	bl	801b25c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	785b      	ldrb	r3, [r3, #1]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d104      	bne.n	800c728 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c71e:	2101      	movs	r1, #1
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f000 fd75 	bl	800d210 <lwip_netconn_do_writemore>
 800c726:	e016      	b.n	800c756 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	785b      	ldrb	r3, [r3, #1]
 800c72c:	2b04      	cmp	r3, #4
 800c72e:	d112      	bne.n	800c756 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	6a1b      	ldr	r3, [r3, #32]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00a      	beq.n	800c74e <poll_tcp+0x5a>
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6a1b      	ldr	r3, [r3, #32]
 800c73c:	7a5b      	ldrb	r3, [r3, #9]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d005      	beq.n	800c74e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	7a5a      	ldrb	r2, [r3, #9]
 800c748:	3a01      	subs	r2, #1
 800c74a:	b2d2      	uxtb	r2, r2
 800c74c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c74e:	2101      	movs	r1, #1
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f000 fb3b 	bl	800cdcc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	7f1b      	ldrb	r3, [r3, #28]
 800c75a:	f003 0310 	and.w	r3, r3, #16
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d021      	beq.n	800c7a6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d01d      	beq.n	800c7a6 <poll_tcp+0xb2>
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c772:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c776:	d316      	bcc.n	800c7a6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c780:	2b04      	cmp	r3, #4
 800c782:	d810      	bhi.n	800c7a6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	7f1b      	ldrb	r3, [r3, #28]
 800c788:	f023 0310 	bic.w	r3, r3, #16
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c796:	2b00      	cmp	r3, #0
 800c798:	d005      	beq.n	800c7a6 <poll_tcp+0xb2>
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2102      	movs	r1, #2
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	0801c934 	.word	0x0801c934
 800c7b4:	0801ca8c 	.word	0x0801ca8c
 800c7b8:	0801c978 	.word	0x0801c978

0800c7bc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b086      	sub	sp, #24
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d106      	bne.n	800c7e2 <sent_tcp+0x26>
 800c7d4:	4b20      	ldr	r3, [pc, #128]	; (800c858 <sent_tcp+0x9c>)
 800c7d6:	f240 1293 	movw	r2, #403	; 0x193
 800c7da:	4920      	ldr	r1, [pc, #128]	; (800c85c <sent_tcp+0xa0>)
 800c7dc:	4820      	ldr	r0, [pc, #128]	; (800c860 <sent_tcp+0xa4>)
 800c7de:	f00e fd3d 	bl	801b25c <iprintf>

  if (conn) {
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d032      	beq.n	800c84e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	785b      	ldrb	r3, [r3, #1]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d104      	bne.n	800c7fa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	6978      	ldr	r0, [r7, #20]
 800c7f4:	f000 fd0c 	bl	800d210 <lwip_netconn_do_writemore>
 800c7f8:	e007      	b.n	800c80a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	785b      	ldrb	r3, [r3, #1]
 800c7fe:	2b04      	cmp	r3, #4
 800c800:	d103      	bne.n	800c80a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c802:	2101      	movs	r1, #1
 800c804:	6978      	ldr	r0, [r7, #20]
 800c806:	f000 fae1 	bl	800cdcc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d01d      	beq.n	800c84e <sent_tcp+0x92>
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c81a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800c81e:	d316      	bcc.n	800c84e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c828:	2b04      	cmp	r3, #4
 800c82a:	d810      	bhi.n	800c84e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	7f1b      	ldrb	r3, [r3, #28]
 800c830:	f023 0310 	bic.w	r3, r3, #16
 800c834:	b2da      	uxtb	r2, r3
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d005      	beq.n	800c84e <sent_tcp+0x92>
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c846:	88fa      	ldrh	r2, [r7, #6]
 800c848:	2102      	movs	r1, #2
 800c84a:	6978      	ldr	r0, [r7, #20]
 800c84c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	3718      	adds	r7, #24
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	0801c934 	.word	0x0801c934
 800c85c:	0801ca8c 	.word	0x0801ca8c
 800c860:	0801c978 	.word	0x0801c978

0800c864 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	460b      	mov	r3, r1
 800c86e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d106      	bne.n	800c888 <err_tcp+0x24>
 800c87a:	4b5f      	ldr	r3, [pc, #380]	; (800c9f8 <err_tcp+0x194>)
 800c87c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800c880:	495e      	ldr	r1, [pc, #376]	; (800c9fc <err_tcp+0x198>)
 800c882:	485f      	ldr	r0, [pc, #380]	; (800ca00 <err_tcp+0x19c>)
 800c884:	f00e fcea 	bl	801b25c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800c888:	f00c fa6a 	bl	8018d60 <sys_arch_protect>
 800c88c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	2200      	movs	r2, #0
 800c892:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	78fa      	ldrb	r2, [r7, #3]
 800c898:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	7f1b      	ldrb	r3, [r3, #28]
 800c89e:	f043 0301 	orr.w	r3, r3, #1
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c8b4:	69b8      	ldr	r0, [r7, #24]
 800c8b6:	f00c fa61 	bl	8018d7c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d005      	beq.n	800c8ce <err_tcp+0x6a>
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	2104      	movs	r1, #4
 800c8ca:	69f8      	ldr	r0, [r7, #28]
 800c8cc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d005      	beq.n	800c8e2 <err_tcp+0x7e>
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8da:	2200      	movs	r2, #0
 800c8dc:	2100      	movs	r1, #0
 800c8de:	69f8      	ldr	r0, [r7, #28]
 800c8e0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d005      	beq.n	800c8f6 <err_tcp+0x92>
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	2102      	movs	r1, #2
 800c8f2:	69f8      	ldr	r0, [r7, #28]
 800c8f4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c8f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7ff fd86 	bl	800c40c <lwip_netconn_err_to_msg>
 800c900:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c902:	69fb      	ldr	r3, [r7, #28]
 800c904:	3310      	adds	r3, #16
 800c906:	4618      	mov	r0, r3
 800c908:	f00c f920 	bl	8018b4c <sys_mbox_valid>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d005      	beq.n	800c91e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	3310      	adds	r3, #16
 800c916:	6939      	ldr	r1, [r7, #16]
 800c918:	4618      	mov	r0, r3
 800c91a:	f00c f8b5 	bl	8018a88 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	3314      	adds	r3, #20
 800c922:	4618      	mov	r0, r3
 800c924:	f00c f912 	bl	8018b4c <sys_mbox_valid>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d005      	beq.n	800c93a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	3314      	adds	r3, #20
 800c932:	6939      	ldr	r1, [r7, #16]
 800c934:	4618      	mov	r0, r3
 800c936:	f00c f8a7 	bl	8018a88 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d005      	beq.n	800c94c <err_tcp+0xe8>
 800c940:	7dfb      	ldrb	r3, [r7, #23]
 800c942:	2b04      	cmp	r3, #4
 800c944:	d002      	beq.n	800c94c <err_tcp+0xe8>
 800c946:	7dfb      	ldrb	r3, [r7, #23]
 800c948:	2b03      	cmp	r3, #3
 800c94a:	d143      	bne.n	800c9d4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	7f1b      	ldrb	r3, [r3, #28]
 800c950:	f003 0304 	and.w	r3, r3, #4
 800c954:	2b00      	cmp	r3, #0
 800c956:	bf14      	ite	ne
 800c958:	2301      	movne	r3, #1
 800c95a:	2300      	moveq	r3, #0
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	7f1b      	ldrb	r3, [r3, #28]
 800c964:	f023 0304 	bic.w	r3, r3, #4
 800c968:	b2da      	uxtb	r2, r3
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d13b      	bne.n	800c9ec <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	6a1b      	ldr	r3, [r3, #32]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d106      	bne.n	800c98a <err_tcp+0x126>
 800c97c:	4b1e      	ldr	r3, [pc, #120]	; (800c9f8 <err_tcp+0x194>)
 800c97e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800c982:	4920      	ldr	r1, [pc, #128]	; (800ca04 <err_tcp+0x1a0>)
 800c984:	481e      	ldr	r0, [pc, #120]	; (800ca00 <err_tcp+0x19c>)
 800c986:	f00e fc69 	bl	801b25c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	d104      	bne.n	800c99a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	6a1b      	ldr	r3, [r3, #32]
 800c994:	2200      	movs	r2, #0
 800c996:	711a      	strb	r2, [r3, #4]
 800c998:	e003      	b.n	800c9a2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	6a1b      	ldr	r3, [r3, #32]
 800c99e:	78fa      	ldrb	r2, [r7, #3]
 800c9a0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c9a2:	69fb      	ldr	r3, [r7, #28]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	330c      	adds	r3, #12
 800c9aa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c9ac:	68b8      	ldr	r0, [r7, #8]
 800c9ae:	f00c f95b 	bl	8018c68 <sys_sem_valid>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d106      	bne.n	800c9c6 <err_tcp+0x162>
 800c9b8:	4b0f      	ldr	r3, [pc, #60]	; (800c9f8 <err_tcp+0x194>)
 800c9ba:	f240 12ef 	movw	r2, #495	; 0x1ef
 800c9be:	4912      	ldr	r1, [pc, #72]	; (800ca08 <err_tcp+0x1a4>)
 800c9c0:	480f      	ldr	r0, [pc, #60]	; (800ca00 <err_tcp+0x19c>)
 800c9c2:	f00e fc4b 	bl	801b25c <iprintf>
      conn->current_msg = NULL;
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800c9cc:	68b8      	ldr	r0, [r7, #8]
 800c9ce:	f00c f931 	bl	8018c34 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800c9d2:	e00b      	b.n	800c9ec <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c9d4:	69fb      	ldr	r3, [r7, #28]
 800c9d6:	6a1b      	ldr	r3, [r3, #32]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d008      	beq.n	800c9ee <err_tcp+0x18a>
 800c9dc:	4b06      	ldr	r3, [pc, #24]	; (800c9f8 <err_tcp+0x194>)
 800c9de:	f240 12f7 	movw	r2, #503	; 0x1f7
 800c9e2:	490a      	ldr	r1, [pc, #40]	; (800ca0c <err_tcp+0x1a8>)
 800c9e4:	4806      	ldr	r0, [pc, #24]	; (800ca00 <err_tcp+0x19c>)
 800c9e6:	f00e fc39 	bl	801b25c <iprintf>
  }
}
 800c9ea:	e000      	b.n	800c9ee <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800c9ec:	bf00      	nop
}
 800c9ee:	bf00      	nop
 800c9f0:	3720      	adds	r7, #32
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	0801c934 	.word	0x0801c934
 800c9fc:	0801ca8c 	.word	0x0801ca8c
 800ca00:	0801c978 	.word	0x0801c978
 800ca04:	0801ca9c 	.word	0x0801ca9c
 800ca08:	0801cab8 	.word	0x0801cab8
 800ca0c:	0801cad4 	.word	0x0801cad4

0800ca10 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f004 fa85 	bl	8010f30 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ca26:	490a      	ldr	r1, [pc, #40]	; (800ca50 <setup_tcp+0x40>)
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f004 fa93 	bl	8010f54 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ca2e:	4909      	ldr	r1, [pc, #36]	; (800ca54 <setup_tcp+0x44>)
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f004 fab1 	bl	8010f98 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800ca36:	2202      	movs	r2, #2
 800ca38:	4907      	ldr	r1, [pc, #28]	; (800ca58 <setup_tcp+0x48>)
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f004 fb08 	bl	8011050 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800ca40:	4906      	ldr	r1, [pc, #24]	; (800ca5c <setup_tcp+0x4c>)
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f004 faca 	bl	8010fdc <tcp_err>
}
 800ca48:	bf00      	nop
 800ca4a:	3710      	adds	r7, #16
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	0800c5e9 	.word	0x0800c5e9
 800ca54:	0800c7bd 	.word	0x0800c7bd
 800ca58:	0800c6f5 	.word	0x0800c6f5
 800ca5c:	0800c865 	.word	0x0800c865

0800ca60 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800ca60:	b590      	push	{r4, r7, lr}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d006      	beq.n	800ca84 <pcb_new+0x24>
 800ca76:	4b2b      	ldr	r3, [pc, #172]	; (800cb24 <pcb_new+0xc4>)
 800ca78:	f240 2265 	movw	r2, #613	; 0x265
 800ca7c:	492a      	ldr	r1, [pc, #168]	; (800cb28 <pcb_new+0xc8>)
 800ca7e:	482b      	ldr	r0, [pc, #172]	; (800cb2c <pcb_new+0xcc>)
 800ca80:	f00e fbec 	bl	801b25c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca8e:	2b10      	cmp	r3, #16
 800ca90:	d022      	beq.n	800cad8 <pcb_new+0x78>
 800ca92:	2b20      	cmp	r3, #32
 800ca94:	d133      	bne.n	800cafe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681c      	ldr	r4, [r3, #0]
 800ca9a:	7bfb      	ldrb	r3, [r7, #15]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f009 fcca 	bl	8016436 <udp_new_ip_type>
 800caa2:	4603      	mov	r3, r0
 800caa4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	685b      	ldr	r3, [r3, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d02a      	beq.n	800cb06 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	2b22      	cmp	r3, #34	; 0x22
 800cab8:	d104      	bne.n	800cac4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	2201      	movs	r2, #1
 800cac2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	6858      	ldr	r0, [r3, #4]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	461a      	mov	r2, r3
 800cad0:	4917      	ldr	r1, [pc, #92]	; (800cb30 <pcb_new+0xd0>)
 800cad2:	f009 fc79 	bl	80163c8 <udp_recv>
      }
      break;
 800cad6:	e016      	b.n	800cb06 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681c      	ldr	r4, [r3, #0]
 800cadc:	7bfb      	ldrb	r3, [r7, #15]
 800cade:	4618      	mov	r0, r3
 800cae0:	f004 fa18 	bl	8010f14 <tcp_new_ip_type>
 800cae4:	4603      	mov	r3, r0
 800cae6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00b      	beq.n	800cb0a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff ff8a 	bl	800ca10 <setup_tcp>
      }
      break;
 800cafc:	e005      	b.n	800cb0a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	22fa      	movs	r2, #250	; 0xfa
 800cb02:	711a      	strb	r2, [r3, #4]
      return;
 800cb04:	e00a      	b.n	800cb1c <pcb_new+0xbc>
      break;
 800cb06:	bf00      	nop
 800cb08:	e000      	b.n	800cb0c <pcb_new+0xac>
      break;
 800cb0a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	22ff      	movs	r2, #255	; 0xff
 800cb1a:	711a      	strb	r2, [r3, #4]
  }
}
 800cb1c:	3714      	adds	r7, #20
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd90      	pop	{r4, r7, pc}
 800cb22:	bf00      	nop
 800cb24:	0801c934 	.word	0x0801c934
 800cb28:	0801cb18 	.word	0x0801cb18
 800cb2c:	0801c978 	.word	0x0801c978
 800cb30:	0800c4ed 	.word	0x0800c4ed

0800cb34 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	685b      	ldr	r3, [r3, #4]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d102      	bne.n	800cb56 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f7ff ff85 	bl	800ca60 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
	...

0800cb60 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4603      	mov	r3, r0
 800cb68:	6039      	str	r1, [r7, #0]
 800cb6a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800cb70:	2007      	movs	r0, #7
 800cb72:	f001 fc91 	bl	800e498 <memp_malloc>
 800cb76:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <netconn_alloc+0x22>
    return NULL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	e052      	b.n	800cc28 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	79fa      	ldrb	r2, [r7, #7]
 800cb8c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800cb94:	79fb      	ldrb	r3, [r7, #7]
 800cb96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb9a:	2b10      	cmp	r3, #16
 800cb9c:	d004      	beq.n	800cba8 <netconn_alloc+0x48>
 800cb9e:	2b20      	cmp	r3, #32
 800cba0:	d105      	bne.n	800cbae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800cba2:	2306      	movs	r3, #6
 800cba4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800cba6:	e00a      	b.n	800cbbe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800cba8:	2306      	movs	r3, #6
 800cbaa:	617b      	str	r3, [r7, #20]
      break;
 800cbac:	e007      	b.n	800cbbe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800cbae:	4b20      	ldr	r3, [pc, #128]	; (800cc30 <netconn_alloc+0xd0>)
 800cbb0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800cbb4:	491f      	ldr	r1, [pc, #124]	; (800cc34 <netconn_alloc+0xd4>)
 800cbb6:	4820      	ldr	r0, [pc, #128]	; (800cc38 <netconn_alloc+0xd8>)
 800cbb8:	f00e fb50 	bl	801b25c <iprintf>
      goto free_and_return;
 800cbbc:	e02f      	b.n	800cc1e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3310      	adds	r3, #16
 800cbc2:	6979      	ldr	r1, [r7, #20]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f00b ff33 	bl	8018a30 <sys_mbox_new>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d125      	bne.n	800cc1c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	330c      	adds	r3, #12
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f00b ffd6 	bl	8018b88 <sys_sem_new>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d005      	beq.n	800cbee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	3310      	adds	r3, #16
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f00b ff3c 	bl	8018a64 <sys_mbox_free>
    goto free_and_return;
 800cbec:	e017      	b.n	800cc1e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	3314      	adds	r3, #20
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f00b ffbb 	bl	8018b6e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f04f 32ff 	mov.w	r2, #4294967295
 800cc04:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	7cfa      	ldrb	r2, [r7, #19]
 800cc16:	771a      	strb	r2, [r3, #28]
  return conn;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	e005      	b.n	800cc28 <netconn_alloc+0xc8>
    goto free_and_return;
 800cc1c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800cc1e:	68f9      	ldr	r1, [r7, #12]
 800cc20:	2007      	movs	r0, #7
 800cc22:	f001 fc8b 	bl	800e53c <memp_free>
  return NULL;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3718      	adds	r7, #24
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	0801c934 	.word	0x0801c934
 800cc34:	0801cb38 	.word	0x0801cb38
 800cc38:	0801c978 	.word	0x0801c978

0800cc3c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d006      	beq.n	800cc5a <netconn_free+0x1e>
 800cc4c:	4b1b      	ldr	r3, [pc, #108]	; (800ccbc <netconn_free+0x80>)
 800cc4e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800cc52:	491b      	ldr	r1, [pc, #108]	; (800ccc0 <netconn_free+0x84>)
 800cc54:	481b      	ldr	r0, [pc, #108]	; (800ccc4 <netconn_free+0x88>)
 800cc56:	f00e fb01 	bl	801b25c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	3310      	adds	r3, #16
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f00b ff74 	bl	8018b4c <sys_mbox_valid>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d006      	beq.n	800cc78 <netconn_free+0x3c>
 800cc6a:	4b14      	ldr	r3, [pc, #80]	; (800ccbc <netconn_free+0x80>)
 800cc6c:	f240 3223 	movw	r2, #803	; 0x323
 800cc70:	4915      	ldr	r1, [pc, #84]	; (800ccc8 <netconn_free+0x8c>)
 800cc72:	4814      	ldr	r0, [pc, #80]	; (800ccc4 <netconn_free+0x88>)
 800cc74:	f00e faf2 	bl	801b25c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3314      	adds	r3, #20
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f00b ff65 	bl	8018b4c <sys_mbox_valid>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d006      	beq.n	800cc96 <netconn_free+0x5a>
 800cc88:	4b0c      	ldr	r3, [pc, #48]	; (800ccbc <netconn_free+0x80>)
 800cc8a:	f240 3226 	movw	r2, #806	; 0x326
 800cc8e:	490f      	ldr	r1, [pc, #60]	; (800cccc <netconn_free+0x90>)
 800cc90:	480c      	ldr	r0, [pc, #48]	; (800ccc4 <netconn_free+0x88>)
 800cc92:	f00e fae3 	bl	801b25c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	330c      	adds	r3, #12
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f00b ffd7 	bl	8018c4e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	330c      	adds	r3, #12
 800cca4:	4618      	mov	r0, r3
 800cca6:	f00b fff0 	bl	8018c8a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ccaa:	6879      	ldr	r1, [r7, #4]
 800ccac:	2007      	movs	r0, #7
 800ccae:	f001 fc45 	bl	800e53c <memp_free>
}
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	0801c934 	.word	0x0801c934
 800ccc0:	0801cb60 	.word	0x0801cb60
 800ccc4:	0801c978 	.word	0x0801c978
 800ccc8:	0801cb90 	.word	0x0801cb90
 800cccc:	0801cbcc 	.word	0x0801cbcc

0800ccd0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b086      	sub	sp, #24
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	3310      	adds	r3, #16
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f00b ff35 	bl	8018b4c <sys_mbox_valid>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d02f      	beq.n	800cd48 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800cce8:	e018      	b.n	800cd1c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccf2:	2b10      	cmp	r3, #16
 800ccf4:	d10e      	bne.n	800cd14 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	f107 020f 	add.w	r2, r7, #15
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7ff fbba 	bl	800c478 <lwip_netconn_is_err_msg>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d108      	bne.n	800cd1c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f002 fab9 	bl	800f284 <pbuf_free>
 800cd12:	e003      	b.n	800cd1c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f000 fce6 	bl	800d6e8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	3310      	adds	r3, #16
 800cd20:	f107 0210 	add.w	r2, r7, #16
 800cd24:	4611      	mov	r1, r2
 800cd26:	4618      	mov	r0, r3
 800cd28:	f00b fef9 	bl	8018b1e <sys_arch_mbox_tryfetch>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd32:	d1da      	bne.n	800ccea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3310      	adds	r3, #16
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f00b fe93 	bl	8018a64 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	3310      	adds	r3, #16
 800cd42:	4618      	mov	r0, r3
 800cd44:	f00b ff13 	bl	8018b6e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	3314      	adds	r3, #20
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f00b fefd 	bl	8018b4c <sys_mbox_valid>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d034      	beq.n	800cdc2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800cd58:	e01d      	b.n	800cd96 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	f107 020e 	add.w	r2, r7, #14
 800cd60:	4611      	mov	r1, r2
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7ff fb88 	bl	800c478 <lwip_netconn_is_err_msg>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d113      	bne.n	800cd96 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800cd72:	6978      	ldr	r0, [r7, #20]
 800cd74:	f7ff ffac 	bl	800ccd0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d007      	beq.n	800cd90 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	4618      	mov	r0, r3
 800cd86:	f003 f90f 	bl	800ffa8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800cd90:	6978      	ldr	r0, [r7, #20]
 800cd92:	f7ff ff53 	bl	800cc3c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	3314      	adds	r3, #20
 800cd9a:	f107 0210 	add.w	r2, r7, #16
 800cd9e:	4611      	mov	r1, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f00b febc 	bl	8018b1e <sys_arch_mbox_tryfetch>
 800cda6:	4603      	mov	r3, r0
 800cda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdac:	d1d5      	bne.n	800cd5a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	3314      	adds	r3, #20
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f00b fe56 	bl	8018a64 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	3314      	adds	r3, #20
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f00b fed6 	bl	8018b6e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800cdc2:	bf00      	nop
 800cdc4:	3718      	adds	r7, #24
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
	...

0800cdcc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d106      	bne.n	800cdf0 <lwip_netconn_do_close_internal+0x24>
 800cde2:	4ba1      	ldr	r3, [pc, #644]	; (800d068 <lwip_netconn_do_close_internal+0x29c>)
 800cde4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800cde8:	49a0      	ldr	r1, [pc, #640]	; (800d06c <lwip_netconn_do_close_internal+0x2a0>)
 800cdea:	48a1      	ldr	r0, [pc, #644]	; (800d070 <lwip_netconn_do_close_internal+0x2a4>)
 800cdec:	f00e fa36 	bl	801b25c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdf8:	2b10      	cmp	r3, #16
 800cdfa:	d006      	beq.n	800ce0a <lwip_netconn_do_close_internal+0x3e>
 800cdfc:	4b9a      	ldr	r3, [pc, #616]	; (800d068 <lwip_netconn_do_close_internal+0x29c>)
 800cdfe:	f240 32a3 	movw	r2, #931	; 0x3a3
 800ce02:	499c      	ldr	r1, [pc, #624]	; (800d074 <lwip_netconn_do_close_internal+0x2a8>)
 800ce04:	489a      	ldr	r0, [pc, #616]	; (800d070 <lwip_netconn_do_close_internal+0x2a4>)
 800ce06:	f00e fa29 	bl	801b25c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	2b04      	cmp	r3, #4
 800ce10:	d006      	beq.n	800ce20 <lwip_netconn_do_close_internal+0x54>
 800ce12:	4b95      	ldr	r3, [pc, #596]	; (800d068 <lwip_netconn_do_close_internal+0x29c>)
 800ce14:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800ce18:	4997      	ldr	r1, [pc, #604]	; (800d078 <lwip_netconn_do_close_internal+0x2ac>)
 800ce1a:	4895      	ldr	r0, [pc, #596]	; (800d070 <lwip_netconn_do_close_internal+0x2a4>)
 800ce1c:	f00e fa1e 	bl	801b25c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d106      	bne.n	800ce36 <lwip_netconn_do_close_internal+0x6a>
 800ce28:	4b8f      	ldr	r3, [pc, #572]	; (800d068 <lwip_netconn_do_close_internal+0x29c>)
 800ce2a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800ce2e:	4993      	ldr	r1, [pc, #588]	; (800d07c <lwip_netconn_do_close_internal+0x2b0>)
 800ce30:	488f      	ldr	r0, [pc, #572]	; (800d070 <lwip_netconn_do_close_internal+0x2a4>)
 800ce32:	f00e fa13 	bl	801b25c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d106      	bne.n	800ce4c <lwip_netconn_do_close_internal+0x80>
 800ce3e:	4b8a      	ldr	r3, [pc, #552]	; (800d068 <lwip_netconn_do_close_internal+0x29c>)
 800ce40:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ce44:	498e      	ldr	r1, [pc, #568]	; (800d080 <lwip_netconn_do_close_internal+0x2b4>)
 800ce46:	488a      	ldr	r0, [pc, #552]	; (800d070 <lwip_netconn_do_close_internal+0x2a4>)
 800ce48:	f00e fa08 	bl	801b25c <iprintf>

  tpcb = conn->pcb.tcp;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a1b      	ldr	r3, [r3, #32]
 800ce56:	7a1b      	ldrb	r3, [r3, #8]
 800ce58:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800ce5a:	7bfb      	ldrb	r3, [r7, #15]
 800ce5c:	f003 0301 	and.w	r3, r3, #1
 800ce60:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800ce62:	7bfb      	ldrb	r3, [r7, #15]
 800ce64:	f003 0302 	and.w	r3, r3, #2
 800ce68:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ce6a:	7bfb      	ldrb	r3, [r7, #15]
 800ce6c:	2b03      	cmp	r3, #3
 800ce6e:	d102      	bne.n	800ce76 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ce70:	2301      	movs	r3, #1
 800ce72:	75bb      	strb	r3, [r7, #22]
 800ce74:	e01f      	b.n	800ceb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ce76:	7bbb      	ldrb	r3, [r7, #14]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00e      	beq.n	800ce9a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ce80:	2b05      	cmp	r3, #5
 800ce82:	d007      	beq.n	800ce94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ce88:	2b06      	cmp	r3, #6
 800ce8a:	d003      	beq.n	800ce94 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ce90:	2b08      	cmp	r3, #8
 800ce92:	d102      	bne.n	800ce9a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ce94:	2301      	movs	r3, #1
 800ce96:	75bb      	strb	r3, [r7, #22]
 800ce98:	e00d      	b.n	800ceb6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ce9a:	7b7b      	ldrb	r3, [r7, #13]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d008      	beq.n	800ceb2 <lwip_netconn_do_close_internal+0xe6>
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	8b5b      	ldrh	r3, [r3, #26]
 800cea4:	f003 0310 	and.w	r3, r3, #16
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d002      	beq.n	800ceb2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800ceac:	2301      	movs	r3, #1
 800ceae:	75bb      	strb	r3, [r7, #22]
 800ceb0:	e001      	b.n	800ceb6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800ceb6:	7dbb      	ldrb	r3, [r7, #22]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d003      	beq.n	800cec4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800cebc:	2100      	movs	r1, #0
 800cebe:	6938      	ldr	r0, [r7, #16]
 800cec0:	f004 f836 	bl	8010f30 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	7d1b      	ldrb	r3, [r3, #20]
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d104      	bne.n	800ced6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800cecc:	2100      	movs	r1, #0
 800cece:	6938      	ldr	r0, [r7, #16]
 800ced0:	f004 f8a6 	bl	8011020 <tcp_accept>
 800ced4:	e01d      	b.n	800cf12 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ced6:	7bbb      	ldrb	r3, [r7, #14]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d007      	beq.n	800ceec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800cedc:	2100      	movs	r1, #0
 800cede:	6938      	ldr	r0, [r7, #16]
 800cee0:	f004 f838 	bl	8010f54 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800cee4:	2100      	movs	r1, #0
 800cee6:	6938      	ldr	r0, [r7, #16]
 800cee8:	f004 f89a 	bl	8011020 <tcp_accept>
    }
    if (shut_tx) {
 800ceec:	7b7b      	ldrb	r3, [r7, #13]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d003      	beq.n	800cefa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800cef2:	2100      	movs	r1, #0
 800cef4:	6938      	ldr	r0, [r7, #16]
 800cef6:	f004 f84f 	bl	8010f98 <tcp_sent>
    }
    if (shut_close) {
 800cefa:	7dbb      	ldrb	r3, [r7, #22]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d008      	beq.n	800cf12 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800cf00:	2200      	movs	r2, #0
 800cf02:	2100      	movs	r1, #0
 800cf04:	6938      	ldr	r0, [r7, #16]
 800cf06:	f004 f8a3 	bl	8011050 <tcp_poll>
      tcp_err(tpcb, NULL);
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	6938      	ldr	r0, [r7, #16]
 800cf0e:	f004 f865 	bl	8010fdc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800cf12:	7dbb      	ldrb	r3, [r7, #22]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d005      	beq.n	800cf24 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800cf18:	6938      	ldr	r0, [r7, #16]
 800cf1a:	f002 feff 	bl	800fd1c <tcp_close>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	75fb      	strb	r3, [r7, #23]
 800cf22:	e007      	b.n	800cf34 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800cf24:	7bbb      	ldrb	r3, [r7, #14]
 800cf26:	7b7a      	ldrb	r2, [r7, #13]
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6938      	ldr	r0, [r7, #16]
 800cf2c:	f002 ff22 	bl	800fd74 <tcp_shutdown>
 800cf30:	4603      	mov	r3, r0
 800cf32:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800cf34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d102      	bne.n	800cf42 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	757b      	strb	r3, [r7, #21]
 800cf40:	e016      	b.n	800cf70 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800cf42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf4a:	d10f      	bne.n	800cf6c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6a1b      	ldr	r3, [r3, #32]
 800cf50:	7a5b      	ldrb	r3, [r3, #9]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d10c      	bne.n	800cf70 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800cf56:	2301      	movs	r3, #1
 800cf58:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800cf5a:	7dbb      	ldrb	r3, [r7, #22]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d007      	beq.n	800cf70 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800cf60:	6938      	ldr	r0, [r7, #16]
 800cf62:	f003 f821 	bl	800ffa8 <tcp_abort>
          err = ERR_OK;
 800cf66:	2300      	movs	r3, #0
 800cf68:	75fb      	strb	r3, [r7, #23]
 800cf6a:	e001      	b.n	800cf70 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800cf70:	7d7b      	ldrb	r3, [r7, #21]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d044      	beq.n	800d000 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a1b      	ldr	r3, [r3, #32]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	330c      	adds	r3, #12
 800cf7e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a1b      	ldr	r3, [r3, #32]
 800cf84:	7dfa      	ldrb	r2, [r7, #23]
 800cf86:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800cf94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d129      	bne.n	800cff0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800cf9c:	7dbb      	ldrb	r3, [r7, #22]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00c      	beq.n	800cfbc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d005      	beq.n	800cfbc <lwip_netconn_do_close_internal+0x1f0>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2104      	movs	r1, #4
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	4798      	blx	r3
      }
      if (shut_rx) {
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d009      	beq.n	800cfd6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d005      	beq.n	800cfd6 <lwip_netconn_do_close_internal+0x20a>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfce:	2200      	movs	r2, #0
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	4798      	blx	r3
      }
      if (shut_tx) {
 800cfd6:	7b7b      	ldrb	r3, [r7, #13]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d009      	beq.n	800cff0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d005      	beq.n	800cff0 <lwip_netconn_do_close_internal+0x224>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2102      	movs	r1, #2
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cff0:	78fb      	ldrb	r3, [r7, #3]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800cff6:	68b8      	ldr	r0, [r7, #8]
 800cff8:	f00b fe1c 	bl	8018c34 <sys_sem_signal>
    }
    return ERR_OK;
 800cffc:	2300      	movs	r3, #0
 800cffe:	e02e      	b.n	800d05e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800d000:	7d7b      	ldrb	r3, [r7, #21]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d11e      	bne.n	800d044 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	7d1b      	ldrb	r3, [r3, #20]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d106      	bne.n	800d01c <lwip_netconn_do_close_internal+0x250>
 800d00e:	4b16      	ldr	r3, [pc, #88]	; (800d068 <lwip_netconn_do_close_internal+0x29c>)
 800d010:	f240 4241 	movw	r2, #1089	; 0x441
 800d014:	491b      	ldr	r1, [pc, #108]	; (800d084 <lwip_netconn_do_close_internal+0x2b8>)
 800d016:	4816      	ldr	r0, [pc, #88]	; (800d070 <lwip_netconn_do_close_internal+0x2a4>)
 800d018:	f00e f920 	bl	801b25c <iprintf>
    if (shut_tx) {
 800d01c:	7b7b      	ldrb	r3, [r7, #13]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d003      	beq.n	800d02a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800d022:	4919      	ldr	r1, [pc, #100]	; (800d088 <lwip_netconn_do_close_internal+0x2bc>)
 800d024:	6938      	ldr	r0, [r7, #16]
 800d026:	f003 ffb7 	bl	8010f98 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d02a:	2201      	movs	r2, #1
 800d02c:	4917      	ldr	r1, [pc, #92]	; (800d08c <lwip_netconn_do_close_internal+0x2c0>)
 800d02e:	6938      	ldr	r0, [r7, #16]
 800d030:	f004 f80e 	bl	8011050 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d034:	4916      	ldr	r1, [pc, #88]	; (800d090 <lwip_netconn_do_close_internal+0x2c4>)
 800d036:	6938      	ldr	r0, [r7, #16]
 800d038:	f003 ffd0 	bl	8010fdc <tcp_err>
    tcp_arg(tpcb, conn);
 800d03c:	6879      	ldr	r1, [r7, #4]
 800d03e:	6938      	ldr	r0, [r7, #16]
 800d040:	f003 ff76 	bl	8010f30 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d106      	bne.n	800d05a <lwip_netconn_do_close_internal+0x28e>
 800d04c:	4b06      	ldr	r3, [pc, #24]	; (800d068 <lwip_netconn_do_close_internal+0x29c>)
 800d04e:	f240 424d 	movw	r2, #1101	; 0x44d
 800d052:	4910      	ldr	r1, [pc, #64]	; (800d094 <lwip_netconn_do_close_internal+0x2c8>)
 800d054:	4806      	ldr	r0, [pc, #24]	; (800d070 <lwip_netconn_do_close_internal+0x2a4>)
 800d056:	f00e f901 	bl	801b25c <iprintf>
  return err;
 800d05a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3718      	adds	r7, #24
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	0801c934 	.word	0x0801c934
 800d06c:	0801cc08 	.word	0x0801cc08
 800d070:	0801c978 	.word	0x0801c978
 800d074:	0801cc18 	.word	0x0801cc18
 800d078:	0801cc38 	.word	0x0801cc38
 800d07c:	0801cc5c 	.word	0x0801cc5c
 800d080:	0801ca9c 	.word	0x0801ca9c
 800d084:	0801cc70 	.word	0x0801cc70
 800d088:	0800c7bd 	.word	0x0800c7bd
 800d08c:	0800c6f5 	.word	0x0800c6f5
 800d090:	0800c865 	.word	0x0800c865
 800d094:	0801cc94 	.word	0x0801cc94

0800d098 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d025      	beq.n	800d0fa <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0b8:	2b10      	cmp	r3, #16
 800d0ba:	d00e      	beq.n	800d0da <lwip_netconn_do_bind+0x42>
 800d0bc:	2b20      	cmp	r3, #32
 800d0be:	d119      	bne.n	800d0f4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	6858      	ldr	r0, [r3, #4]
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	6899      	ldr	r1, [r3, #8]
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	899b      	ldrh	r3, [r3, #12]
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	f009 f8f2 	bl	80162b8 <udp_bind>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	73fb      	strb	r3, [r7, #15]
        break;
 800d0d8:	e011      	b.n	800d0fe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	6858      	ldr	r0, [r3, #4]
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	6899      	ldr	r1, [r3, #8]
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	899b      	ldrh	r3, [r3, #12]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	f002 ff69 	bl	800ffc0 <tcp_bind>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	73fb      	strb	r3, [r7, #15]
        break;
 800d0f2:	e004      	b.n	800d0fe <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800d0f4:	23fa      	movs	r3, #250	; 0xfa
 800d0f6:	73fb      	strb	r3, [r7, #15]
        break;
 800d0f8:	e001      	b.n	800d0fe <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800d0fa:	23fa      	movs	r3, #250	; 0xfa
 800d0fc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	7bfa      	ldrb	r2, [r7, #15]
 800d102:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d104:	bf00      	nop
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff f959 	bl	800c3d4 <netconn_err>
 800d122:	4603      	mov	r3, r0
 800d124:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d134      	bne.n	800d198 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d02d      	beq.n	800d194 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d142:	2b20      	cmp	r3, #32
 800d144:	d123      	bne.n	800d18e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10c      	bne.n	800d16a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4619      	mov	r1, r3
 800d15e:	4610      	mov	r0, r2
 800d160:	f008 fec0 	bl	8015ee4 <udp_send>
 800d164:	4603      	mov	r3, r0
 800d166:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800d168:	e016      	b.n	800d198 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	6858      	ldr	r0, [r3, #4]
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	6819      	ldr	r1, [r3, #0]
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	f103 0208 	add.w	r2, r3, #8
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	899b      	ldrh	r3, [r3, #12]
 800d184:	f008 fee2 	bl	8015f4c <udp_sendto>
 800d188:	4603      	mov	r3, r0
 800d18a:	73fb      	strb	r3, [r7, #15]
          break;
 800d18c:	e004      	b.n	800d198 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800d18e:	23f5      	movs	r3, #245	; 0xf5
 800d190:	73fb      	strb	r3, [r7, #15]
          break;
 800d192:	e001      	b.n	800d198 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800d194:	23f5      	movs	r3, #245	; 0xf5
 800d196:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	7bfa      	ldrb	r2, [r7, #15]
 800d19c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d19e:	bf00      	nop
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b086      	sub	sp, #24
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d022      	beq.n	800d208 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1cc:	2b10      	cmp	r3, #16
 800d1ce:	d11b      	bne.n	800d208 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1dc:	d202      	bcs.n	800d1e4 <lwip_netconn_do_recv+0x3e>
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	e001      	b.n	800d1e8 <lwip_netconn_do_recv+0x42>
 800d1e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1e8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	89fa      	ldrh	r2, [r7, #14]
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f002 ffd5 	bl	80101a4 <tcp_recved>
        remaining -= recved;
 800d1fa:	89fb      	ldrh	r3, [r7, #14]
 800d1fc:	697a      	ldr	r2, [r7, #20]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d1e6      	bne.n	800d1d6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d208:	bf00      	nop
 800d20a:	3718      	adds	r7, #24
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b088      	sub	sp, #32
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d21c:	2300      	movs	r3, #0
 800d21e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d106      	bne.n	800d234 <lwip_netconn_do_writemore+0x24>
 800d226:	4b96      	ldr	r3, [pc, #600]	; (800d480 <lwip_netconn_do_writemore+0x270>)
 800d228:	f240 6273 	movw	r2, #1651	; 0x673
 800d22c:	4995      	ldr	r1, [pc, #596]	; (800d484 <lwip_netconn_do_writemore+0x274>)
 800d22e:	4896      	ldr	r0, [pc, #600]	; (800d488 <lwip_netconn_do_writemore+0x278>)
 800d230:	f00e f814 	bl	801b25c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	785b      	ldrb	r3, [r3, #1]
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d006      	beq.n	800d24a <lwip_netconn_do_writemore+0x3a>
 800d23c:	4b90      	ldr	r3, [pc, #576]	; (800d480 <lwip_netconn_do_writemore+0x270>)
 800d23e:	f240 6274 	movw	r2, #1652	; 0x674
 800d242:	4992      	ldr	r1, [pc, #584]	; (800d48c <lwip_netconn_do_writemore+0x27c>)
 800d244:	4890      	ldr	r0, [pc, #576]	; (800d488 <lwip_netconn_do_writemore+0x278>)
 800d246:	f00e f809 	bl	801b25c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <lwip_netconn_do_writemore+0x50>
 800d252:	4b8b      	ldr	r3, [pc, #556]	; (800d480 <lwip_netconn_do_writemore+0x270>)
 800d254:	f240 6275 	movw	r2, #1653	; 0x675
 800d258:	498d      	ldr	r1, [pc, #564]	; (800d490 <lwip_netconn_do_writemore+0x280>)
 800d25a:	488b      	ldr	r0, [pc, #556]	; (800d488 <lwip_netconn_do_writemore+0x278>)
 800d25c:	f00d fffe 	bl	801b25c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d106      	bne.n	800d276 <lwip_netconn_do_writemore+0x66>
 800d268:	4b85      	ldr	r3, [pc, #532]	; (800d480 <lwip_netconn_do_writemore+0x270>)
 800d26a:	f240 6276 	movw	r2, #1654	; 0x676
 800d26e:	4989      	ldr	r1, [pc, #548]	; (800d494 <lwip_netconn_do_writemore+0x284>)
 800d270:	4885      	ldr	r0, [pc, #532]	; (800d488 <lwip_netconn_do_writemore+0x278>)
 800d272:	f00d fff3 	bl	801b25c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	699a      	ldr	r2, [r3, #24]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a1b      	ldr	r3, [r3, #32]
 800d280:	695b      	ldr	r3, [r3, #20]
 800d282:	429a      	cmp	r2, r3
 800d284:	d306      	bcc.n	800d294 <lwip_netconn_do_writemore+0x84>
 800d286:	4b7e      	ldr	r3, [pc, #504]	; (800d480 <lwip_netconn_do_writemore+0x270>)
 800d288:	f240 6277 	movw	r2, #1655	; 0x677
 800d28c:	4982      	ldr	r1, [pc, #520]	; (800d498 <lwip_netconn_do_writemore+0x288>)
 800d28e:	487e      	ldr	r0, [pc, #504]	; (800d488 <lwip_netconn_do_writemore+0x278>)
 800d290:	f00d ffe4 	bl	801b25c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6a1b      	ldr	r3, [r3, #32]
 800d298:	899b      	ldrh	r3, [r3, #12]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d106      	bne.n	800d2ac <lwip_netconn_do_writemore+0x9c>
 800d29e:	4b78      	ldr	r3, [pc, #480]	; (800d480 <lwip_netconn_do_writemore+0x270>)
 800d2a0:	f240 6279 	movw	r2, #1657	; 0x679
 800d2a4:	497d      	ldr	r1, [pc, #500]	; (800d49c <lwip_netconn_do_writemore+0x28c>)
 800d2a6:	4878      	ldr	r0, [pc, #480]	; (800d488 <lwip_netconn_do_writemore+0x278>)
 800d2a8:	f00d ffd8 	bl	801b25c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a1b      	ldr	r3, [r3, #32]
 800d2b0:	7f1b      	ldrb	r3, [r3, #28]
 800d2b2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	7f1b      	ldrb	r3, [r3, #28]
 800d2b8:	f003 0302 	and.w	r3, r3, #2
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d104      	bne.n	800d2ca <lwip_netconn_do_writemore+0xba>
 800d2c0:	7ebb      	ldrb	r3, [r7, #26]
 800d2c2:	f003 0304 	and.w	r3, r3, #4
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <lwip_netconn_do_writemore+0xbe>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e000      	b.n	800d2d0 <lwip_netconn_do_writemore+0xc0>
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6a1b      	ldr	r3, [r3, #32]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a1b      	ldr	r3, [r3, #32]
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a1b      	ldr	r3, [r3, #32]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a1b      	ldr	r3, [r3, #32]
 800d2f0:	691b      	ldr	r3, [r3, #16]
 800d2f2:	1ad3      	subs	r3, r2, r3
 800d2f4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2fc:	d307      	bcc.n	800d30e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800d2fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d302:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d304:	7ebb      	ldrb	r3, [r7, #26]
 800d306:	f043 0302 	orr.w	r3, r3, #2
 800d30a:	76bb      	strb	r3, [r7, #26]
 800d30c:	e001      	b.n	800d312 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d31a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800d31c:	89fa      	ldrh	r2, [r7, #14]
 800d31e:	8bbb      	ldrh	r3, [r7, #28]
 800d320:	429a      	cmp	r2, r3
 800d322:	d216      	bcs.n	800d352 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800d324:	89fb      	ldrh	r3, [r7, #14]
 800d326:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800d328:	7e3b      	ldrb	r3, [r7, #24]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00d      	beq.n	800d34a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800d32e:	8bbb      	ldrh	r3, [r7, #28]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d10e      	bne.n	800d352 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6a1b      	ldr	r3, [r3, #32]
 800d338:	699b      	ldr	r3, [r3, #24]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d102      	bne.n	800d344 <lwip_netconn_do_writemore+0x134>
 800d33e:	f06f 0306 	mvn.w	r3, #6
 800d342:	e000      	b.n	800d346 <lwip_netconn_do_writemore+0x136>
 800d344:	2300      	movs	r3, #0
 800d346:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800d348:	e07d      	b.n	800d446 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800d34a:	7ebb      	ldrb	r3, [r7, #26]
 800d34c:	f043 0302 	orr.w	r3, r3, #2
 800d350:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a1b      	ldr	r3, [r3, #32]
 800d356:	691a      	ldr	r2, [r3, #16]
 800d358:	8bbb      	ldrh	r3, [r7, #28]
 800d35a:	441a      	add	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	6a1b      	ldr	r3, [r3, #32]
 800d360:	689b      	ldr	r3, [r3, #8]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d906      	bls.n	800d376 <lwip_netconn_do_writemore+0x166>
 800d368:	4b45      	ldr	r3, [pc, #276]	; (800d480 <lwip_netconn_do_writemore+0x270>)
 800d36a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800d36e:	494c      	ldr	r1, [pc, #304]	; (800d4a0 <lwip_netconn_do_writemore+0x290>)
 800d370:	4845      	ldr	r0, [pc, #276]	; (800d488 <lwip_netconn_do_writemore+0x278>)
 800d372:	f00d ff73 	bl	801b25c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d376:	8bbb      	ldrh	r3, [r7, #28]
 800d378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d103      	bne.n	800d388 <lwip_netconn_do_writemore+0x178>
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d386:	d209      	bcs.n	800d39c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d38c:	8bba      	ldrh	r2, [r7, #28]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d10b      	bne.n	800d3aa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a1b      	ldr	r3, [r3, #32]
 800d396:	899b      	ldrh	r3, [r3, #12]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d906      	bls.n	800d3aa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800d39c:	2301      	movs	r3, #1
 800d39e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d3a0:	7ebb      	ldrb	r3, [r7, #26]
 800d3a2:	f043 0302 	orr.w	r3, r3, #2
 800d3a6:	76bb      	strb	r3, [r7, #26]
 800d3a8:	e001      	b.n	800d3ae <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6858      	ldr	r0, [r3, #4]
 800d3b2:	7ebb      	ldrb	r3, [r7, #26]
 800d3b4:	8bba      	ldrh	r2, [r7, #28]
 800d3b6:	6979      	ldr	r1, [r7, #20]
 800d3b8:	f006 fcf8 	bl	8013dac <tcp_write>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800d3c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d12c      	bne.n	800d422 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6a1b      	ldr	r3, [r3, #32]
 800d3cc:	6999      	ldr	r1, [r3, #24]
 800d3ce:	8bba      	ldrh	r2, [r7, #28]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a1b      	ldr	r3, [r3, #32]
 800d3d4:	440a      	add	r2, r1
 800d3d6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6a1b      	ldr	r3, [r3, #32]
 800d3dc:	6919      	ldr	r1, [r3, #16]
 800d3de:	8bba      	ldrh	r2, [r7, #28]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6a1b      	ldr	r3, [r3, #32]
 800d3e4:	440a      	add	r2, r1
 800d3e6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6a1b      	ldr	r3, [r3, #32]
 800d3ec:	691a      	ldr	r2, [r3, #16]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a1b      	ldr	r3, [r3, #32]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	429a      	cmp	r2, r3
 800d3f8:	d113      	bne.n	800d422 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	899a      	ldrh	r2, [r3, #12]
 800d400:	3a01      	subs	r2, #1
 800d402:	b292      	uxth	r2, r2
 800d404:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	899b      	ldrh	r3, [r3, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d008      	beq.n	800d422 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6a1b      	ldr	r3, [r3, #32]
 800d414:	689a      	ldr	r2, [r3, #8]
 800d416:	3208      	adds	r2, #8
 800d418:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a1b      	ldr	r3, [r3, #32]
 800d41e:	2200      	movs	r2, #0
 800d420:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800d422:	7e7b      	ldrb	r3, [r7, #25]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d004      	beq.n	800d432 <lwip_netconn_do_writemore+0x222>
 800d428:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f43f af50 	beq.w	800d2d2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800d432:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d004      	beq.n	800d444 <lwip_netconn_do_writemore+0x234>
 800d43a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d442:	d146      	bne.n	800d4d2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800d444:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800d446:	7e3b      	ldrb	r3, [r7, #24]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d02b      	beq.n	800d4a4 <lwip_netconn_do_writemore+0x294>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6a1b      	ldr	r3, [r3, #32]
 800d450:	699a      	ldr	r2, [r3, #24]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6a1b      	ldr	r3, [r3, #32]
 800d456:	695b      	ldr	r3, [r3, #20]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d223      	bcs.n	800d4a4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d460:	2b00      	cmp	r3, #0
 800d462:	d005      	beq.n	800d470 <lwip_netconn_do_writemore+0x260>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d468:	2200      	movs	r2, #0
 800d46a:	2103      	movs	r1, #3
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	7f1b      	ldrb	r3, [r3, #28]
 800d474:	f043 0310 	orr.w	r3, r3, #16
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	771a      	strb	r2, [r3, #28]
 800d47e:	e028      	b.n	800d4d2 <lwip_netconn_do_writemore+0x2c2>
 800d480:	0801c934 	.word	0x0801c934
 800d484:	0801ca8c 	.word	0x0801ca8c
 800d488:	0801c978 	.word	0x0801c978
 800d48c:	0801cd94 	.word	0x0801cd94
 800d490:	0801ca9c 	.word	0x0801ca9c
 800d494:	0801cdb4 	.word	0x0801cdb4
 800d498:	0801cdcc 	.word	0x0801cdcc
 800d49c:	0801ce0c 	.word	0x0801ce0c
 800d4a0:	0801ce34 	.word	0x0801ce34
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d4ac:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d4b0:	d305      	bcc.n	800d4be <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	685b      	ldr	r3, [r3, #4]
 800d4b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d4ba:	2b04      	cmp	r3, #4
 800d4bc:	d909      	bls.n	800d4d2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d005      	beq.n	800d4d2 <lwip_netconn_do_writemore+0x2c2>
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	2103      	movs	r1, #3
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d4d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d11d      	bne.n	800d516 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6a1b      	ldr	r3, [r3, #32]
 800d4de:	699a      	ldr	r2, [r3, #24]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a1b      	ldr	r3, [r3, #32]
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d002      	beq.n	800d4f0 <lwip_netconn_do_writemore+0x2e0>
 800d4ea:	7e3b      	ldrb	r3, [r7, #24]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d001      	beq.n	800d4f4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f007 fa41 	bl	8014980 <tcp_output>
 800d4fe:	4603      	mov	r3, r0
 800d500:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d502:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d506:	f113 0f04 	cmn.w	r3, #4
 800d50a:	d12c      	bne.n	800d566 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d50c:	7b3b      	ldrb	r3, [r7, #12]
 800d50e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d510:	2301      	movs	r3, #1
 800d512:	76fb      	strb	r3, [r7, #27]
 800d514:	e027      	b.n	800d566 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800d516:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51e:	d120      	bne.n	800d562 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	4618      	mov	r0, r3
 800d526:	f007 fa2b 	bl	8014980 <tcp_output>
 800d52a:	4603      	mov	r3, r0
 800d52c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d52e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d532:	f113 0f04 	cmn.w	r3, #4
 800d536:	d104      	bne.n	800d542 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d538:	7b7b      	ldrb	r3, [r7, #13]
 800d53a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d53c:	2301      	movs	r3, #1
 800d53e:	76fb      	strb	r3, [r7, #27]
 800d540:	e011      	b.n	800d566 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800d542:	7e3b      	ldrb	r3, [r7, #24]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00e      	beq.n	800d566 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a1b      	ldr	r3, [r3, #32]
 800d54c:	699b      	ldr	r3, [r3, #24]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d102      	bne.n	800d558 <lwip_netconn_do_writemore+0x348>
 800d552:	f06f 0306 	mvn.w	r3, #6
 800d556:	e000      	b.n	800d55a <lwip_netconn_do_writemore+0x34a>
 800d558:	2300      	movs	r3, #0
 800d55a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d55c:	2301      	movs	r3, #1
 800d55e:	76fb      	strb	r3, [r7, #27]
 800d560:	e001      	b.n	800d566 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d562:	2301      	movs	r3, #1
 800d564:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d566:	7efb      	ldrb	r3, [r7, #27]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d015      	beq.n	800d598 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a1b      	ldr	r3, [r3, #32]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	330c      	adds	r3, #12
 800d574:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6a1b      	ldr	r3, [r3, #32]
 800d57a:	7ffa      	ldrb	r2, [r7, #31]
 800d57c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d58a:	78fb      	ldrb	r3, [r7, #3]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d006      	beq.n	800d59e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d590:	68b8      	ldr	r0, [r7, #8]
 800d592:	f00b fb4f 	bl	8018c34 <sys_sem_signal>
 800d596:	e002      	b.n	800d59e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d598:	f04f 33ff 	mov.w	r3, #4294967295
 800d59c:	e000      	b.n	800d5a0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3720      	adds	r7, #32
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	785b      	ldrb	r3, [r3, #1]
 800d5ba:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d069      	beq.n	800d69a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800d5d0:	2b10      	cmp	r3, #16
 800d5d2:	d162      	bne.n	800d69a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800d5d8:	2b03      	cmp	r3, #3
 800d5da:	d002      	beq.n	800d5e2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800d5dc:	7afb      	ldrb	r3, [r7, #11]
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d05b      	beq.n	800d69a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800d5e2:	7afb      	ldrb	r3, [r7, #11]
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d103      	bne.n	800d5f0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	22f5      	movs	r2, #245	; 0xf5
 800d5ec:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d5ee:	e059      	b.n	800d6a4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800d5f0:	7afb      	ldrb	r3, [r7, #11]
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d103      	bne.n	800d5fe <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	22fb      	movs	r2, #251	; 0xfb
 800d5fa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800d5fc:	e052      	b.n	800d6a4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	7a1b      	ldrb	r3, [r3, #8]
 800d602:	f003 0301 	and.w	r3, r3, #1
 800d606:	2b00      	cmp	r3, #0
 800d608:	d004      	beq.n	800d614 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4618      	mov	r0, r3
 800d610:	f7ff fb5e 	bl	800ccd0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6a1b      	ldr	r3, [r3, #32]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d006      	beq.n	800d62c <lwip_netconn_do_close+0x84>
 800d61e:	4b23      	ldr	r3, [pc, #140]	; (800d6ac <lwip_netconn_do_close+0x104>)
 800d620:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800d624:	4922      	ldr	r1, [pc, #136]	; (800d6b0 <lwip_netconn_do_close+0x108>)
 800d626:	4823      	ldr	r0, [pc, #140]	; (800d6b4 <lwip_netconn_do_close+0x10c>)
 800d628:	f00d fe18 	bl	801b25c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2204      	movs	r2, #4
 800d632:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	68fa      	ldr	r2, [r7, #12]
 800d63a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2100      	movs	r1, #0
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff fbc2 	bl	800cdcc <lwip_netconn_do_close_internal>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d029      	beq.n	800d6a2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	785b      	ldrb	r3, [r3, #1]
 800d654:	2b04      	cmp	r3, #4
 800d656:	d006      	beq.n	800d666 <lwip_netconn_do_close+0xbe>
 800d658:	4b14      	ldr	r3, [pc, #80]	; (800d6ac <lwip_netconn_do_close+0x104>)
 800d65a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800d65e:	4916      	ldr	r1, [pc, #88]	; (800d6b8 <lwip_netconn_do_close+0x110>)
 800d660:	4814      	ldr	r0, [pc, #80]	; (800d6b4 <lwip_netconn_do_close+0x10c>)
 800d662:	f00d fdfb 	bl	801b25c <iprintf>
        UNLOCK_TCPIP_CORE();
 800d666:	4815      	ldr	r0, [pc, #84]	; (800d6bc <lwip_netconn_do_close+0x114>)
 800d668:	f00b fb4d 	bl	8018d06 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	330c      	adds	r3, #12
 800d672:	2100      	movs	r1, #0
 800d674:	4618      	mov	r0, r3
 800d676:	f00b faac 	bl	8018bd2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800d67a:	4810      	ldr	r0, [pc, #64]	; (800d6bc <lwip_netconn_do_close+0x114>)
 800d67c:	f00b fb34 	bl	8018ce8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	785b      	ldrb	r3, [r3, #1]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00b      	beq.n	800d6a2 <lwip_netconn_do_close+0xfa>
 800d68a:	4b08      	ldr	r3, [pc, #32]	; (800d6ac <lwip_netconn_do_close+0x104>)
 800d68c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800d690:	4909      	ldr	r1, [pc, #36]	; (800d6b8 <lwip_netconn_do_close+0x110>)
 800d692:	4808      	ldr	r0, [pc, #32]	; (800d6b4 <lwip_netconn_do_close+0x10c>)
 800d694:	f00d fde2 	bl	801b25c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800d698:	e003      	b.n	800d6a2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	22f5      	movs	r2, #245	; 0xf5
 800d69e:	711a      	strb	r2, [r3, #4]
 800d6a0:	e000      	b.n	800d6a4 <lwip_netconn_do_close+0xfc>
      return;
 800d6a2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	0801c934 	.word	0x0801c934
 800d6b0:	0801ccd8 	.word	0x0801ccd8
 800d6b4:	0801c978 	.word	0x0801c978
 800d6b8:	0801ccf4 	.word	0x0801ccf4
 800d6bc:	2000d938 	.word	0x2000d938

0800d6c0 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b082      	sub	sp, #8
 800d6c4:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d6c6:	2006      	movs	r0, #6
 800d6c8:	f000 fee6 	bl	800e498 <memp_malloc>
 800d6cc:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d004      	beq.n	800d6de <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800d6d4:	2210      	movs	r2, #16
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f00d fd0d 	bl	801b0f8 <memset>
  }
  return buf;
 800d6de:	687b      	ldr	r3, [r7, #4]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3708      	adds	r7, #8
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d013      	beq.n	800d71e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d00b      	beq.n	800d716 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4618      	mov	r0, r3
 800d704:	f001 fdbe 	bl	800f284 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	605a      	str	r2, [r3, #4]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	685a      	ldr	r2, [r3, #4]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800d716:	6879      	ldr	r1, [r7, #4]
 800d718:	2006      	movs	r0, #6
 800d71a:	f000 ff0f 	bl	800e53c <memp_free>
  }
}
 800d71e:	bf00      	nop
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b084      	sub	sp, #16
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d108      	bne.n	800d74c <netbuf_data+0x24>
 800d73a:	4b1b      	ldr	r3, [pc, #108]	; (800d7a8 <netbuf_data+0x80>)
 800d73c:	22c6      	movs	r2, #198	; 0xc6
 800d73e:	491b      	ldr	r1, [pc, #108]	; (800d7ac <netbuf_data+0x84>)
 800d740:	481b      	ldr	r0, [pc, #108]	; (800d7b0 <netbuf_data+0x88>)
 800d742:	f00d fd8b 	bl	801b25c <iprintf>
 800d746:	f06f 030f 	mvn.w	r3, #15
 800d74a:	e029      	b.n	800d7a0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d74c:	68bb      	ldr	r3, [r7, #8]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d108      	bne.n	800d764 <netbuf_data+0x3c>
 800d752:	4b15      	ldr	r3, [pc, #84]	; (800d7a8 <netbuf_data+0x80>)
 800d754:	22c7      	movs	r2, #199	; 0xc7
 800d756:	4917      	ldr	r1, [pc, #92]	; (800d7b4 <netbuf_data+0x8c>)
 800d758:	4815      	ldr	r0, [pc, #84]	; (800d7b0 <netbuf_data+0x88>)
 800d75a:	f00d fd7f 	bl	801b25c <iprintf>
 800d75e:	f06f 030f 	mvn.w	r3, #15
 800d762:	e01d      	b.n	800d7a0 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d108      	bne.n	800d77c <netbuf_data+0x54>
 800d76a:	4b0f      	ldr	r3, [pc, #60]	; (800d7a8 <netbuf_data+0x80>)
 800d76c:	22c8      	movs	r2, #200	; 0xc8
 800d76e:	4912      	ldr	r1, [pc, #72]	; (800d7b8 <netbuf_data+0x90>)
 800d770:	480f      	ldr	r0, [pc, #60]	; (800d7b0 <netbuf_data+0x88>)
 800d772:	f00d fd73 	bl	801b25c <iprintf>
 800d776:	f06f 030f 	mvn.w	r3, #15
 800d77a:	e011      	b.n	800d7a0 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d102      	bne.n	800d78a <netbuf_data+0x62>
    return ERR_BUF;
 800d784:	f06f 0301 	mvn.w	r3, #1
 800d788:	e00a      	b.n	800d7a0 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	895a      	ldrh	r2, [r3, #10]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800d79e:	2300      	movs	r3, #0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	0801ce8c 	.word	0x0801ce8c
 800d7ac:	0801cf94 	.word	0x0801cf94
 800d7b0:	0801cedc 	.word	0x0801cedc
 800d7b4:	0801cfb0 	.word	0x0801cfb0
 800d7b8:	0801cfd0 	.word	0x0801cfd0

0800d7bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b084      	sub	sp, #16
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d7c6:	f008 f993 	bl	8015af0 <sys_timeouts_sleeptime>
 800d7ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d2:	d10b      	bne.n	800d7ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d7d4:	4813      	ldr	r0, [pc, #76]	; (800d824 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7d6:	f00b fa96 	bl	8018d06 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d7da:	2200      	movs	r2, #0
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f00b f96c 	bl	8018abc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d7e4:	480f      	ldr	r0, [pc, #60]	; (800d824 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7e6:	f00b fa7f 	bl	8018ce8 <sys_mutex_lock>
    return;
 800d7ea:	e018      	b.n	800d81e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d102      	bne.n	800d7f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d7f2:	f008 f943 	bl	8015a7c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d7f6:	e7e6      	b.n	800d7c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d7f8:	480a      	ldr	r0, [pc, #40]	; (800d824 <tcpip_timeouts_mbox_fetch+0x68>)
 800d7fa:	f00b fa84 	bl	8018d06 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f00b f95a 	bl	8018abc <sys_arch_mbox_fetch>
 800d808:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d80a:	4806      	ldr	r0, [pc, #24]	; (800d824 <tcpip_timeouts_mbox_fetch+0x68>)
 800d80c:	f00b fa6c 	bl	8018ce8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d816:	d102      	bne.n	800d81e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d818:	f008 f930 	bl	8015a7c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d81c:	e7d3      	b.n	800d7c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	2000d938 	.word	0x2000d938

0800d828 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d830:	4810      	ldr	r0, [pc, #64]	; (800d874 <tcpip_thread+0x4c>)
 800d832:	f00b fa59 	bl	8018ce8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d836:	4b10      	ldr	r3, [pc, #64]	; (800d878 <tcpip_thread+0x50>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d005      	beq.n	800d84a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d83e:	4b0e      	ldr	r3, [pc, #56]	; (800d878 <tcpip_thread+0x50>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a0e      	ldr	r2, [pc, #56]	; (800d87c <tcpip_thread+0x54>)
 800d844:	6812      	ldr	r2, [r2, #0]
 800d846:	4610      	mov	r0, r2
 800d848:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d84a:	f107 030c 	add.w	r3, r7, #12
 800d84e:	4619      	mov	r1, r3
 800d850:	480b      	ldr	r0, [pc, #44]	; (800d880 <tcpip_thread+0x58>)
 800d852:	f7ff ffb3 	bl	800d7bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d106      	bne.n	800d86a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d85c:	4b09      	ldr	r3, [pc, #36]	; (800d884 <tcpip_thread+0x5c>)
 800d85e:	2291      	movs	r2, #145	; 0x91
 800d860:	4909      	ldr	r1, [pc, #36]	; (800d888 <tcpip_thread+0x60>)
 800d862:	480a      	ldr	r0, [pc, #40]	; (800d88c <tcpip_thread+0x64>)
 800d864:	f00d fcfa 	bl	801b25c <iprintf>
      continue;
 800d868:	e003      	b.n	800d872 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 f80f 	bl	800d890 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d872:	e7ea      	b.n	800d84a <tcpip_thread+0x22>
 800d874:	2000d938 	.word	0x2000d938
 800d878:	20004b18 	.word	0x20004b18
 800d87c:	20004b1c 	.word	0x20004b1c
 800d880:	20004b20 	.word	0x20004b20
 800d884:	0801d024 	.word	0x0801d024
 800d888:	0801d054 	.word	0x0801d054
 800d88c:	0801d074 	.word	0x0801d074

0800d890 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d026      	beq.n	800d8ee <tcpip_thread_handle_msg+0x5e>
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	dc2b      	bgt.n	800d8fc <tcpip_thread_handle_msg+0x6c>
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <tcpip_thread_handle_msg+0x1e>
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d015      	beq.n	800d8d8 <tcpip_thread_handle_msg+0x48>
 800d8ac:	e026      	b.n	800d8fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	6850      	ldr	r0, [r2, #4]
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	6892      	ldr	r2, [r2, #8]
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	4798      	blx	r3
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d004      	beq.n	800d8ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	685b      	ldr	r3, [r3, #4]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f001 fcdb 	bl	800f284 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d8ce:	6879      	ldr	r1, [r7, #4]
 800d8d0:	2009      	movs	r0, #9
 800d8d2:	f000 fe33 	bl	800e53c <memp_free>
      break;
 800d8d6:	e018      	b.n	800d90a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	6892      	ldr	r2, [r2, #8]
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d8e4:	6879      	ldr	r1, [r7, #4]
 800d8e6:	2008      	movs	r0, #8
 800d8e8:	f000 fe28 	bl	800e53c <memp_free>
      break;
 800d8ec:	e00d      	b.n	800d90a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	6892      	ldr	r2, [r2, #8]
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	4798      	blx	r3
      break;
 800d8fa:	e006      	b.n	800d90a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d8fc:	4b05      	ldr	r3, [pc, #20]	; (800d914 <tcpip_thread_handle_msg+0x84>)
 800d8fe:	22cf      	movs	r2, #207	; 0xcf
 800d900:	4905      	ldr	r1, [pc, #20]	; (800d918 <tcpip_thread_handle_msg+0x88>)
 800d902:	4806      	ldr	r0, [pc, #24]	; (800d91c <tcpip_thread_handle_msg+0x8c>)
 800d904:	f00d fcaa 	bl	801b25c <iprintf>
      break;
 800d908:	bf00      	nop
  }
}
 800d90a:	bf00      	nop
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	0801d024 	.word	0x0801d024
 800d918:	0801d054 	.word	0x0801d054
 800d91c:	0801d074 	.word	0x0801d074

0800d920 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d92c:	481a      	ldr	r0, [pc, #104]	; (800d998 <tcpip_inpkt+0x78>)
 800d92e:	f00b f90d 	bl	8018b4c <sys_mbox_valid>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d105      	bne.n	800d944 <tcpip_inpkt+0x24>
 800d938:	4b18      	ldr	r3, [pc, #96]	; (800d99c <tcpip_inpkt+0x7c>)
 800d93a:	22fc      	movs	r2, #252	; 0xfc
 800d93c:	4918      	ldr	r1, [pc, #96]	; (800d9a0 <tcpip_inpkt+0x80>)
 800d93e:	4819      	ldr	r0, [pc, #100]	; (800d9a4 <tcpip_inpkt+0x84>)
 800d940:	f00d fc8c 	bl	801b25c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d944:	2009      	movs	r0, #9
 800d946:	f000 fda7 	bl	800e498 <memp_malloc>
 800d94a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d102      	bne.n	800d958 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d952:	f04f 33ff 	mov.w	r3, #4294967295
 800d956:	e01a      	b.n	800d98e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	2200      	movs	r2, #0
 800d95c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	68fa      	ldr	r2, [r7, #12]
 800d962:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	68ba      	ldr	r2, [r7, #8]
 800d968:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d970:	6979      	ldr	r1, [r7, #20]
 800d972:	4809      	ldr	r0, [pc, #36]	; (800d998 <tcpip_inpkt+0x78>)
 800d974:	f00b f888 	bl	8018a88 <sys_mbox_trypost>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d006      	beq.n	800d98c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d97e:	6979      	ldr	r1, [r7, #20]
 800d980:	2009      	movs	r0, #9
 800d982:	f000 fddb 	bl	800e53c <memp_free>
    return ERR_MEM;
 800d986:	f04f 33ff 	mov.w	r3, #4294967295
 800d98a:	e000      	b.n	800d98e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d98c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	20004b20 	.word	0x20004b20
 800d99c:	0801d024 	.word	0x0801d024
 800d9a0:	0801d09c 	.word	0x0801d09c
 800d9a4:	0801d074 	.word	0x0801d074

0800d9a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9b8:	f003 0318 	and.w	r3, r3, #24
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d006      	beq.n	800d9ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d9c0:	4a08      	ldr	r2, [pc, #32]	; (800d9e4 <tcpip_input+0x3c>)
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7ff ffab 	bl	800d920 <tcpip_inpkt>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	e005      	b.n	800d9da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d9ce:	4a06      	ldr	r2, [pc, #24]	; (800d9e8 <tcpip_input+0x40>)
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff ffa4 	bl	800d920 <tcpip_inpkt>
 800d9d8:	4603      	mov	r3, r0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	08018885 	.word	0x08018885
 800d9e8:	08017799 	.word	0x08017799

0800d9ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d9f6:	4819      	ldr	r0, [pc, #100]	; (800da5c <tcpip_try_callback+0x70>)
 800d9f8:	f00b f8a8 	bl	8018b4c <sys_mbox_valid>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d106      	bne.n	800da10 <tcpip_try_callback+0x24>
 800da02:	4b17      	ldr	r3, [pc, #92]	; (800da60 <tcpip_try_callback+0x74>)
 800da04:	f240 125d 	movw	r2, #349	; 0x15d
 800da08:	4916      	ldr	r1, [pc, #88]	; (800da64 <tcpip_try_callback+0x78>)
 800da0a:	4817      	ldr	r0, [pc, #92]	; (800da68 <tcpip_try_callback+0x7c>)
 800da0c:	f00d fc26 	bl	801b25c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800da10:	2008      	movs	r0, #8
 800da12:	f000 fd41 	bl	800e498 <memp_malloc>
 800da16:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d102      	bne.n	800da24 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800da1e:	f04f 33ff 	mov.w	r3, #4294967295
 800da22:	e017      	b.n	800da54 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2201      	movs	r2, #1
 800da28:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	683a      	ldr	r2, [r7, #0]
 800da34:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800da36:	68f9      	ldr	r1, [r7, #12]
 800da38:	4808      	ldr	r0, [pc, #32]	; (800da5c <tcpip_try_callback+0x70>)
 800da3a:	f00b f825 	bl	8018a88 <sys_mbox_trypost>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d006      	beq.n	800da52 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800da44:	68f9      	ldr	r1, [r7, #12]
 800da46:	2008      	movs	r0, #8
 800da48:	f000 fd78 	bl	800e53c <memp_free>
    return ERR_MEM;
 800da4c:	f04f 33ff 	mov.w	r3, #4294967295
 800da50:	e000      	b.n	800da54 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	20004b20 	.word	0x20004b20
 800da60:	0801d024 	.word	0x0801d024
 800da64:	0801d09c 	.word	0x0801d09c
 800da68:	0801d074 	.word	0x0801d074

0800da6c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800da78:	4806      	ldr	r0, [pc, #24]	; (800da94 <tcpip_send_msg_wait_sem+0x28>)
 800da7a:	f00b f935 	bl	8018ce8 <sys_mutex_lock>
  fn(apimsg);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	68b8      	ldr	r0, [r7, #8]
 800da82:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800da84:	4803      	ldr	r0, [pc, #12]	; (800da94 <tcpip_send_msg_wait_sem+0x28>)
 800da86:	f00b f93e 	bl	8018d06 <sys_mutex_unlock>
  return ERR_OK;
 800da8a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3710      	adds	r7, #16
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	2000d938 	.word	0x2000d938

0800da98 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af02      	add	r7, sp, #8
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800daa2:	f000 f871 	bl	800db88 <lwip_init>

  tcpip_init_done = initfunc;
 800daa6:	4a17      	ldr	r2, [pc, #92]	; (800db04 <tcpip_init+0x6c>)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800daac:	4a16      	ldr	r2, [pc, #88]	; (800db08 <tcpip_init+0x70>)
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800dab2:	2106      	movs	r1, #6
 800dab4:	4815      	ldr	r0, [pc, #84]	; (800db0c <tcpip_init+0x74>)
 800dab6:	f00a ffbb 	bl	8018a30 <sys_mbox_new>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d006      	beq.n	800dace <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800dac0:	4b13      	ldr	r3, [pc, #76]	; (800db10 <tcpip_init+0x78>)
 800dac2:	f240 2261 	movw	r2, #609	; 0x261
 800dac6:	4913      	ldr	r1, [pc, #76]	; (800db14 <tcpip_init+0x7c>)
 800dac8:	4813      	ldr	r0, [pc, #76]	; (800db18 <tcpip_init+0x80>)
 800daca:	f00d fbc7 	bl	801b25c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800dace:	4813      	ldr	r0, [pc, #76]	; (800db1c <tcpip_init+0x84>)
 800dad0:	f00b f8f4 	bl	8018cbc <sys_mutex_new>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d006      	beq.n	800dae8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800dada:	4b0d      	ldr	r3, [pc, #52]	; (800db10 <tcpip_init+0x78>)
 800dadc:	f240 2265 	movw	r2, #613	; 0x265
 800dae0:	490f      	ldr	r1, [pc, #60]	; (800db20 <tcpip_init+0x88>)
 800dae2:	480d      	ldr	r0, [pc, #52]	; (800db18 <tcpip_init+0x80>)
 800dae4:	f00d fbba 	bl	801b25c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800dae8:	2318      	movs	r3, #24
 800daea:	9300      	str	r3, [sp, #0]
 800daec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800daf0:	2200      	movs	r2, #0
 800daf2:	490c      	ldr	r1, [pc, #48]	; (800db24 <tcpip_init+0x8c>)
 800daf4:	480c      	ldr	r0, [pc, #48]	; (800db28 <tcpip_init+0x90>)
 800daf6:	f00b f913 	bl	8018d20 <sys_thread_new>
}
 800dafa:	bf00      	nop
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	20004b18 	.word	0x20004b18
 800db08:	20004b1c 	.word	0x20004b1c
 800db0c:	20004b20 	.word	0x20004b20
 800db10:	0801d024 	.word	0x0801d024
 800db14:	0801d0ac 	.word	0x0801d0ac
 800db18:	0801d074 	.word	0x0801d074
 800db1c:	2000d938 	.word	0x2000d938
 800db20:	0801d0d0 	.word	0x0801d0d0
 800db24:	0800d829 	.word	0x0800d829
 800db28:	0801d0f4 	.word	0x0801d0f4

0800db2c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	4603      	mov	r3, r0
 800db34:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800db36:	88fb      	ldrh	r3, [r7, #6]
 800db38:	021b      	lsls	r3, r3, #8
 800db3a:	b21a      	sxth	r2, r3
 800db3c:	88fb      	ldrh	r3, [r7, #6]
 800db3e:	0a1b      	lsrs	r3, r3, #8
 800db40:	b29b      	uxth	r3, r3
 800db42:	b21b      	sxth	r3, r3
 800db44:	4313      	orrs	r3, r2
 800db46:	b21b      	sxth	r3, r3
 800db48:	b29b      	uxth	r3, r3
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800db56:	b480      	push	{r7}
 800db58:	b083      	sub	sp, #12
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	061a      	lsls	r2, r3, #24
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	021b      	lsls	r3, r3, #8
 800db66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db6a:	431a      	orrs	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	0a1b      	lsrs	r3, r3, #8
 800db70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800db74:	431a      	orrs	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	0e1b      	lsrs	r3, r3, #24
 800db7a:	4313      	orrs	r3, r2
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800db92:	f00b f887 	bl	8018ca4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800db96:	f000 f8d5 	bl	800dd44 <mem_init>
  memp_init();
 800db9a:	f000 fc31 	bl	800e400 <memp_init>
  pbuf_init();
  netif_init();
 800db9e:	f000 fcf7 	bl	800e590 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800dba2:	f007 ffdd 	bl	8015b60 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800dba6:	f001 fea9 	bl	800f8fc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800dbaa:	f007 ff1f 	bl	80159ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800dbae:	bf00      	nop
 800dbb0:	3708      	adds	r7, #8
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
	...

0800dbb8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800dbc2:	4b05      	ldr	r3, [pc, #20]	; (800dbd8 <ptr_to_mem+0x20>)
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	88fb      	ldrh	r3, [r7, #6]
 800dbc8:	4413      	add	r3, r2
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	370c      	adds	r7, #12
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	20004b24 	.word	0x20004b24

0800dbdc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800dbe4:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <mem_to_ptr+0x20>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	1ad3      	subs	r3, r2, r3
 800dbec:	b29b      	uxth	r3, r3
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	370c      	adds	r7, #12
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	20004b24 	.word	0x20004b24

0800dc00 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dc00:	b590      	push	{r4, r7, lr}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dc08:	4b45      	ldr	r3, [pc, #276]	; (800dd20 <plug_holes+0x120>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	687a      	ldr	r2, [r7, #4]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d206      	bcs.n	800dc20 <plug_holes+0x20>
 800dc12:	4b44      	ldr	r3, [pc, #272]	; (800dd24 <plug_holes+0x124>)
 800dc14:	f240 12df 	movw	r2, #479	; 0x1df
 800dc18:	4943      	ldr	r1, [pc, #268]	; (800dd28 <plug_holes+0x128>)
 800dc1a:	4844      	ldr	r0, [pc, #272]	; (800dd2c <plug_holes+0x12c>)
 800dc1c:	f00d fb1e 	bl	801b25c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800dc20:	4b43      	ldr	r3, [pc, #268]	; (800dd30 <plug_holes+0x130>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d306      	bcc.n	800dc38 <plug_holes+0x38>
 800dc2a:	4b3e      	ldr	r3, [pc, #248]	; (800dd24 <plug_holes+0x124>)
 800dc2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dc30:	4940      	ldr	r1, [pc, #256]	; (800dd34 <plug_holes+0x134>)
 800dc32:	483e      	ldr	r0, [pc, #248]	; (800dd2c <plug_holes+0x12c>)
 800dc34:	f00d fb12 	bl	801b25c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	791b      	ldrb	r3, [r3, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d006      	beq.n	800dc4e <plug_holes+0x4e>
 800dc40:	4b38      	ldr	r3, [pc, #224]	; (800dd24 <plug_holes+0x124>)
 800dc42:	f240 12e1 	movw	r2, #481	; 0x1e1
 800dc46:	493c      	ldr	r1, [pc, #240]	; (800dd38 <plug_holes+0x138>)
 800dc48:	4838      	ldr	r0, [pc, #224]	; (800dd2c <plug_holes+0x12c>)
 800dc4a:	f00d fb07 	bl	801b25c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc56:	d906      	bls.n	800dc66 <plug_holes+0x66>
 800dc58:	4b32      	ldr	r3, [pc, #200]	; (800dd24 <plug_holes+0x124>)
 800dc5a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800dc5e:	4937      	ldr	r1, [pc, #220]	; (800dd3c <plug_holes+0x13c>)
 800dc60:	4832      	ldr	r0, [pc, #200]	; (800dd2c <plug_holes+0x12c>)
 800dc62:	f00d fafb 	bl	801b25c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	881b      	ldrh	r3, [r3, #0]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff ffa4 	bl	800dbb8 <ptr_to_mem>
 800dc70:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d024      	beq.n	800dcc4 <plug_holes+0xc4>
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	791b      	ldrb	r3, [r3, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d120      	bne.n	800dcc4 <plug_holes+0xc4>
 800dc82:	4b2b      	ldr	r3, [pc, #172]	; (800dd30 <plug_holes+0x130>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d01b      	beq.n	800dcc4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800dc8c:	4b2c      	ldr	r3, [pc, #176]	; (800dd40 <plug_holes+0x140>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d102      	bne.n	800dc9c <plug_holes+0x9c>
      lfree = mem;
 800dc96:	4a2a      	ldr	r2, [pc, #168]	; (800dd40 <plug_holes+0x140>)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	881a      	ldrh	r2, [r3, #0]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	881b      	ldrh	r3, [r3, #0]
 800dca8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dcac:	d00a      	beq.n	800dcc4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	881b      	ldrh	r3, [r3, #0]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff ff80 	bl	800dbb8 <ptr_to_mem>
 800dcb8:	4604      	mov	r4, r0
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f7ff ff8e 	bl	800dbdc <mem_to_ptr>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	885b      	ldrh	r3, [r3, #2]
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7ff ff75 	bl	800dbb8 <ptr_to_mem>
 800dcce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d01f      	beq.n	800dd18 <plug_holes+0x118>
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	791b      	ldrb	r3, [r3, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d11b      	bne.n	800dd18 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800dce0:	4b17      	ldr	r3, [pc, #92]	; (800dd40 <plug_holes+0x140>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d102      	bne.n	800dcf0 <plug_holes+0xf0>
      lfree = pmem;
 800dcea:	4a15      	ldr	r2, [pc, #84]	; (800dd40 <plug_holes+0x140>)
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	881a      	ldrh	r2, [r3, #0]
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	881b      	ldrh	r3, [r3, #0]
 800dcfc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dd00:	d00a      	beq.n	800dd18 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7ff ff56 	bl	800dbb8 <ptr_to_mem>
 800dd0c:	4604      	mov	r4, r0
 800dd0e:	68b8      	ldr	r0, [r7, #8]
 800dd10:	f7ff ff64 	bl	800dbdc <mem_to_ptr>
 800dd14:	4603      	mov	r3, r0
 800dd16:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dd18:	bf00      	nop
 800dd1a:	3714      	adds	r7, #20
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd90      	pop	{r4, r7, pc}
 800dd20:	20004b24 	.word	0x20004b24
 800dd24:	0801d104 	.word	0x0801d104
 800dd28:	0801d134 	.word	0x0801d134
 800dd2c:	0801d14c 	.word	0x0801d14c
 800dd30:	20004b28 	.word	0x20004b28
 800dd34:	0801d174 	.word	0x0801d174
 800dd38:	0801d190 	.word	0x0801d190
 800dd3c:	0801d1ac 	.word	0x0801d1ac
 800dd40:	20004b30 	.word	0x20004b30

0800dd44 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800dd4a:	4b1f      	ldr	r3, [pc, #124]	; (800ddc8 <mem_init+0x84>)
 800dd4c:	3303      	adds	r3, #3
 800dd4e:	f023 0303 	bic.w	r3, r3, #3
 800dd52:	461a      	mov	r2, r3
 800dd54:	4b1d      	ldr	r3, [pc, #116]	; (800ddcc <mem_init+0x88>)
 800dd56:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dd58:	4b1c      	ldr	r3, [pc, #112]	; (800ddcc <mem_init+0x88>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dd64:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800dd72:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800dd76:	f7ff ff1f 	bl	800dbb8 <ptr_to_mem>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	4a14      	ldr	r2, [pc, #80]	; (800ddd0 <mem_init+0x8c>)
 800dd7e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dd80:	4b13      	ldr	r3, [pc, #76]	; (800ddd0 <mem_init+0x8c>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2201      	movs	r2, #1
 800dd86:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dd88:	4b11      	ldr	r3, [pc, #68]	; (800ddd0 <mem_init+0x8c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dd90:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dd92:	4b0f      	ldr	r3, [pc, #60]	; (800ddd0 <mem_init+0x8c>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800dd9a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dd9c:	4b0b      	ldr	r3, [pc, #44]	; (800ddcc <mem_init+0x88>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a0c      	ldr	r2, [pc, #48]	; (800ddd4 <mem_init+0x90>)
 800dda2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dda4:	480c      	ldr	r0, [pc, #48]	; (800ddd8 <mem_init+0x94>)
 800dda6:	f00a ff89 	bl	8018cbc <sys_mutex_new>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d006      	beq.n	800ddbe <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ddb0:	4b0a      	ldr	r3, [pc, #40]	; (800dddc <mem_init+0x98>)
 800ddb2:	f240 221f 	movw	r2, #543	; 0x21f
 800ddb6:	490a      	ldr	r1, [pc, #40]	; (800dde0 <mem_init+0x9c>)
 800ddb8:	480a      	ldr	r0, [pc, #40]	; (800dde4 <mem_init+0xa0>)
 800ddba:	f00d fa4f 	bl	801b25c <iprintf>
  }
}
 800ddbe:	bf00      	nop
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
 800ddc6:	bf00      	nop
 800ddc8:	2000d954 	.word	0x2000d954
 800ddcc:	20004b24 	.word	0x20004b24
 800ddd0:	20004b28 	.word	0x20004b28
 800ddd4:	20004b30 	.word	0x20004b30
 800ddd8:	20004b2c 	.word	0x20004b2c
 800dddc:	0801d104 	.word	0x0801d104
 800dde0:	0801d1d8 	.word	0x0801d1d8
 800dde4:	0801d14c 	.word	0x0801d14c

0800dde8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f7ff fef3 	bl	800dbdc <mem_to_ptr>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	881b      	ldrh	r3, [r3, #0]
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7ff feda 	bl	800dbb8 <ptr_to_mem>
 800de04:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	885b      	ldrh	r3, [r3, #2]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7ff fed4 	bl	800dbb8 <ptr_to_mem>
 800de10:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	881b      	ldrh	r3, [r3, #0]
 800de16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800de1a:	d818      	bhi.n	800de4e <mem_link_valid+0x66>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	885b      	ldrh	r3, [r3, #2]
 800de20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800de24:	d813      	bhi.n	800de4e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800de2a:	8afa      	ldrh	r2, [r7, #22]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d004      	beq.n	800de3a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	881b      	ldrh	r3, [r3, #0]
 800de34:	8afa      	ldrh	r2, [r7, #22]
 800de36:	429a      	cmp	r2, r3
 800de38:	d109      	bne.n	800de4e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800de3a:	4b08      	ldr	r3, [pc, #32]	; (800de5c <mem_link_valid+0x74>)
 800de3c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800de3e:	693a      	ldr	r2, [r7, #16]
 800de40:	429a      	cmp	r2, r3
 800de42:	d006      	beq.n	800de52 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	885b      	ldrh	r3, [r3, #2]
 800de48:	8afa      	ldrh	r2, [r7, #22]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d001      	beq.n	800de52 <mem_link_valid+0x6a>
    return 0;
 800de4e:	2300      	movs	r3, #0
 800de50:	e000      	b.n	800de54 <mem_link_valid+0x6c>
  }
  return 1;
 800de52:	2301      	movs	r3, #1
}
 800de54:	4618      	mov	r0, r3
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	20004b28 	.word	0x20004b28

0800de60 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b088      	sub	sp, #32
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d070      	beq.n	800df50 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f003 0303 	and.w	r3, r3, #3
 800de74:	2b00      	cmp	r3, #0
 800de76:	d00d      	beq.n	800de94 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800de78:	4b37      	ldr	r3, [pc, #220]	; (800df58 <mem_free+0xf8>)
 800de7a:	f240 2273 	movw	r2, #627	; 0x273
 800de7e:	4937      	ldr	r1, [pc, #220]	; (800df5c <mem_free+0xfc>)
 800de80:	4837      	ldr	r0, [pc, #220]	; (800df60 <mem_free+0x100>)
 800de82:	f00d f9eb 	bl	801b25c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de86:	f00a ff6b 	bl	8018d60 <sys_arch_protect>
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f00a ff75 	bl	8018d7c <sys_arch_unprotect>
    return;
 800de92:	e05e      	b.n	800df52 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	3b08      	subs	r3, #8
 800de98:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800de9a:	4b32      	ldr	r3, [pc, #200]	; (800df64 <mem_free+0x104>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	69fa      	ldr	r2, [r7, #28]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d306      	bcc.n	800deb2 <mem_free+0x52>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f103 020c 	add.w	r2, r3, #12
 800deaa:	4b2f      	ldr	r3, [pc, #188]	; (800df68 <mem_free+0x108>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d90d      	bls.n	800dece <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800deb2:	4b29      	ldr	r3, [pc, #164]	; (800df58 <mem_free+0xf8>)
 800deb4:	f240 227f 	movw	r2, #639	; 0x27f
 800deb8:	492c      	ldr	r1, [pc, #176]	; (800df6c <mem_free+0x10c>)
 800deba:	4829      	ldr	r0, [pc, #164]	; (800df60 <mem_free+0x100>)
 800debc:	f00d f9ce 	bl	801b25c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dec0:	f00a ff4e 	bl	8018d60 <sys_arch_protect>
 800dec4:	6138      	str	r0, [r7, #16]
 800dec6:	6938      	ldr	r0, [r7, #16]
 800dec8:	f00a ff58 	bl	8018d7c <sys_arch_unprotect>
    return;
 800decc:	e041      	b.n	800df52 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dece:	4828      	ldr	r0, [pc, #160]	; (800df70 <mem_free+0x110>)
 800ded0:	f00a ff0a 	bl	8018ce8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ded4:	69fb      	ldr	r3, [r7, #28]
 800ded6:	791b      	ldrb	r3, [r3, #4]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d110      	bne.n	800defe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dedc:	4b1e      	ldr	r3, [pc, #120]	; (800df58 <mem_free+0xf8>)
 800dede:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800dee2:	4924      	ldr	r1, [pc, #144]	; (800df74 <mem_free+0x114>)
 800dee4:	481e      	ldr	r0, [pc, #120]	; (800df60 <mem_free+0x100>)
 800dee6:	f00d f9b9 	bl	801b25c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800deea:	4821      	ldr	r0, [pc, #132]	; (800df70 <mem_free+0x110>)
 800deec:	f00a ff0b 	bl	8018d06 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800def0:	f00a ff36 	bl	8018d60 <sys_arch_protect>
 800def4:	6178      	str	r0, [r7, #20]
 800def6:	6978      	ldr	r0, [r7, #20]
 800def8:	f00a ff40 	bl	8018d7c <sys_arch_unprotect>
    return;
 800defc:	e029      	b.n	800df52 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800defe:	69f8      	ldr	r0, [r7, #28]
 800df00:	f7ff ff72 	bl	800dde8 <mem_link_valid>
 800df04:	4603      	mov	r3, r0
 800df06:	2b00      	cmp	r3, #0
 800df08:	d110      	bne.n	800df2c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800df0a:	4b13      	ldr	r3, [pc, #76]	; (800df58 <mem_free+0xf8>)
 800df0c:	f240 2295 	movw	r2, #661	; 0x295
 800df10:	4919      	ldr	r1, [pc, #100]	; (800df78 <mem_free+0x118>)
 800df12:	4813      	ldr	r0, [pc, #76]	; (800df60 <mem_free+0x100>)
 800df14:	f00d f9a2 	bl	801b25c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800df18:	4815      	ldr	r0, [pc, #84]	; (800df70 <mem_free+0x110>)
 800df1a:	f00a fef4 	bl	8018d06 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800df1e:	f00a ff1f 	bl	8018d60 <sys_arch_protect>
 800df22:	61b8      	str	r0, [r7, #24]
 800df24:	69b8      	ldr	r0, [r7, #24]
 800df26:	f00a ff29 	bl	8018d7c <sys_arch_unprotect>
    return;
 800df2a:	e012      	b.n	800df52 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	2200      	movs	r2, #0
 800df30:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800df32:	4b12      	ldr	r3, [pc, #72]	; (800df7c <mem_free+0x11c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	69fa      	ldr	r2, [r7, #28]
 800df38:	429a      	cmp	r2, r3
 800df3a:	d202      	bcs.n	800df42 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800df3c:	4a0f      	ldr	r2, [pc, #60]	; (800df7c <mem_free+0x11c>)
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800df42:	69f8      	ldr	r0, [r7, #28]
 800df44:	f7ff fe5c 	bl	800dc00 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800df48:	4809      	ldr	r0, [pc, #36]	; (800df70 <mem_free+0x110>)
 800df4a:	f00a fedc 	bl	8018d06 <sys_mutex_unlock>
 800df4e:	e000      	b.n	800df52 <mem_free+0xf2>
    return;
 800df50:	bf00      	nop
}
 800df52:	3720      	adds	r7, #32
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	0801d104 	.word	0x0801d104
 800df5c:	0801d1f4 	.word	0x0801d1f4
 800df60:	0801d14c 	.word	0x0801d14c
 800df64:	20004b24 	.word	0x20004b24
 800df68:	20004b28 	.word	0x20004b28
 800df6c:	0801d218 	.word	0x0801d218
 800df70:	20004b2c 	.word	0x20004b2c
 800df74:	0801d234 	.word	0x0801d234
 800df78:	0801d25c 	.word	0x0801d25c
 800df7c:	20004b30 	.word	0x20004b30

0800df80 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b088      	sub	sp, #32
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	460b      	mov	r3, r1
 800df8a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800df8c:	887b      	ldrh	r3, [r7, #2]
 800df8e:	3303      	adds	r3, #3
 800df90:	b29b      	uxth	r3, r3
 800df92:	f023 0303 	bic.w	r3, r3, #3
 800df96:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800df98:	8bfb      	ldrh	r3, [r7, #30]
 800df9a:	2b0b      	cmp	r3, #11
 800df9c:	d801      	bhi.n	800dfa2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800df9e:	230c      	movs	r3, #12
 800dfa0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800dfa2:	8bfb      	ldrh	r3, [r7, #30]
 800dfa4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dfa8:	d803      	bhi.n	800dfb2 <mem_trim+0x32>
 800dfaa:	8bfa      	ldrh	r2, [r7, #30]
 800dfac:	887b      	ldrh	r3, [r7, #2]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d201      	bcs.n	800dfb6 <mem_trim+0x36>
    return NULL;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	e0d8      	b.n	800e168 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800dfb6:	4b6e      	ldr	r3, [pc, #440]	; (800e170 <mem_trim+0x1f0>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d304      	bcc.n	800dfca <mem_trim+0x4a>
 800dfc0:	4b6c      	ldr	r3, [pc, #432]	; (800e174 <mem_trim+0x1f4>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d306      	bcc.n	800dfd8 <mem_trim+0x58>
 800dfca:	4b6b      	ldr	r3, [pc, #428]	; (800e178 <mem_trim+0x1f8>)
 800dfcc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dfd0:	496a      	ldr	r1, [pc, #424]	; (800e17c <mem_trim+0x1fc>)
 800dfd2:	486b      	ldr	r0, [pc, #428]	; (800e180 <mem_trim+0x200>)
 800dfd4:	f00d f942 	bl	801b25c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800dfd8:	4b65      	ldr	r3, [pc, #404]	; (800e170 <mem_trim+0x1f0>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d304      	bcc.n	800dfec <mem_trim+0x6c>
 800dfe2:	4b64      	ldr	r3, [pc, #400]	; (800e174 <mem_trim+0x1f4>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d307      	bcc.n	800dffc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dfec:	f00a feb8 	bl	8018d60 <sys_arch_protect>
 800dff0:	60b8      	str	r0, [r7, #8]
 800dff2:	68b8      	ldr	r0, [r7, #8]
 800dff4:	f00a fec2 	bl	8018d7c <sys_arch_unprotect>
    return rmem;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	e0b5      	b.n	800e168 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	3b08      	subs	r3, #8
 800e000:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e002:	69b8      	ldr	r0, [r7, #24]
 800e004:	f7ff fdea 	bl	800dbdc <mem_to_ptr>
 800e008:	4603      	mov	r3, r0
 800e00a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e00c:	69bb      	ldr	r3, [r7, #24]
 800e00e:	881a      	ldrh	r2, [r3, #0]
 800e010:	8afb      	ldrh	r3, [r7, #22]
 800e012:	1ad3      	subs	r3, r2, r3
 800e014:	b29b      	uxth	r3, r3
 800e016:	3b08      	subs	r3, #8
 800e018:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e01a:	8bfa      	ldrh	r2, [r7, #30]
 800e01c:	8abb      	ldrh	r3, [r7, #20]
 800e01e:	429a      	cmp	r2, r3
 800e020:	d906      	bls.n	800e030 <mem_trim+0xb0>
 800e022:	4b55      	ldr	r3, [pc, #340]	; (800e178 <mem_trim+0x1f8>)
 800e024:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e028:	4956      	ldr	r1, [pc, #344]	; (800e184 <mem_trim+0x204>)
 800e02a:	4855      	ldr	r0, [pc, #340]	; (800e180 <mem_trim+0x200>)
 800e02c:	f00d f916 	bl	801b25c <iprintf>
  if (newsize > size) {
 800e030:	8bfa      	ldrh	r2, [r7, #30]
 800e032:	8abb      	ldrh	r3, [r7, #20]
 800e034:	429a      	cmp	r2, r3
 800e036:	d901      	bls.n	800e03c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e038:	2300      	movs	r3, #0
 800e03a:	e095      	b.n	800e168 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e03c:	8bfa      	ldrh	r2, [r7, #30]
 800e03e:	8abb      	ldrh	r3, [r7, #20]
 800e040:	429a      	cmp	r2, r3
 800e042:	d101      	bne.n	800e048 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	e08f      	b.n	800e168 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e048:	484f      	ldr	r0, [pc, #316]	; (800e188 <mem_trim+0x208>)
 800e04a:	f00a fe4d 	bl	8018ce8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e04e:	69bb      	ldr	r3, [r7, #24]
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	4618      	mov	r0, r3
 800e054:	f7ff fdb0 	bl	800dbb8 <ptr_to_mem>
 800e058:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	791b      	ldrb	r3, [r3, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d13f      	bne.n	800e0e2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	881b      	ldrh	r3, [r3, #0]
 800e066:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e06a:	d106      	bne.n	800e07a <mem_trim+0xfa>
 800e06c:	4b42      	ldr	r3, [pc, #264]	; (800e178 <mem_trim+0x1f8>)
 800e06e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e072:	4946      	ldr	r1, [pc, #280]	; (800e18c <mem_trim+0x20c>)
 800e074:	4842      	ldr	r0, [pc, #264]	; (800e180 <mem_trim+0x200>)
 800e076:	f00d f8f1 	bl	801b25c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e080:	8afa      	ldrh	r2, [r7, #22]
 800e082:	8bfb      	ldrh	r3, [r7, #30]
 800e084:	4413      	add	r3, r2
 800e086:	b29b      	uxth	r3, r3
 800e088:	3308      	adds	r3, #8
 800e08a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e08c:	4b40      	ldr	r3, [pc, #256]	; (800e190 <mem_trim+0x210>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	693a      	ldr	r2, [r7, #16]
 800e092:	429a      	cmp	r2, r3
 800e094:	d106      	bne.n	800e0a4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e096:	89fb      	ldrh	r3, [r7, #14]
 800e098:	4618      	mov	r0, r3
 800e09a:	f7ff fd8d 	bl	800dbb8 <ptr_to_mem>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	4a3b      	ldr	r2, [pc, #236]	; (800e190 <mem_trim+0x210>)
 800e0a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e0a4:	89fb      	ldrh	r3, [r7, #14]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7ff fd86 	bl	800dbb8 <ptr_to_mem>
 800e0ac:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	89ba      	ldrh	r2, [r7, #12]
 800e0b8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	8afa      	ldrh	r2, [r7, #22]
 800e0be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	89fa      	ldrh	r2, [r7, #14]
 800e0c4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	881b      	ldrh	r3, [r3, #0]
 800e0ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e0ce:	d047      	beq.n	800e160 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	881b      	ldrh	r3, [r3, #0]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7ff fd6f 	bl	800dbb8 <ptr_to_mem>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	89fb      	ldrh	r3, [r7, #14]
 800e0de:	8053      	strh	r3, [r2, #2]
 800e0e0:	e03e      	b.n	800e160 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e0e2:	8bfb      	ldrh	r3, [r7, #30]
 800e0e4:	f103 0214 	add.w	r2, r3, #20
 800e0e8:	8abb      	ldrh	r3, [r7, #20]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d838      	bhi.n	800e160 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e0ee:	8afa      	ldrh	r2, [r7, #22]
 800e0f0:	8bfb      	ldrh	r3, [r7, #30]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	3308      	adds	r3, #8
 800e0f8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	881b      	ldrh	r3, [r3, #0]
 800e0fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e102:	d106      	bne.n	800e112 <mem_trim+0x192>
 800e104:	4b1c      	ldr	r3, [pc, #112]	; (800e178 <mem_trim+0x1f8>)
 800e106:	f240 3216 	movw	r2, #790	; 0x316
 800e10a:	4920      	ldr	r1, [pc, #128]	; (800e18c <mem_trim+0x20c>)
 800e10c:	481c      	ldr	r0, [pc, #112]	; (800e180 <mem_trim+0x200>)
 800e10e:	f00d f8a5 	bl	801b25c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e112:	89fb      	ldrh	r3, [r7, #14]
 800e114:	4618      	mov	r0, r3
 800e116:	f7ff fd4f 	bl	800dbb8 <ptr_to_mem>
 800e11a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e11c:	4b1c      	ldr	r3, [pc, #112]	; (800e190 <mem_trim+0x210>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	693a      	ldr	r2, [r7, #16]
 800e122:	429a      	cmp	r2, r3
 800e124:	d202      	bcs.n	800e12c <mem_trim+0x1ac>
      lfree = mem2;
 800e126:	4a1a      	ldr	r2, [pc, #104]	; (800e190 <mem_trim+0x210>)
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	2200      	movs	r2, #0
 800e130:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	881a      	ldrh	r2, [r3, #0]
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	8afa      	ldrh	r2, [r7, #22]
 800e13e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	89fa      	ldrh	r2, [r7, #14]
 800e144:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	881b      	ldrh	r3, [r3, #0]
 800e14a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e14e:	d007      	beq.n	800e160 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	881b      	ldrh	r3, [r3, #0]
 800e154:	4618      	mov	r0, r3
 800e156:	f7ff fd2f 	bl	800dbb8 <ptr_to_mem>
 800e15a:	4602      	mov	r2, r0
 800e15c:	89fb      	ldrh	r3, [r7, #14]
 800e15e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e160:	4809      	ldr	r0, [pc, #36]	; (800e188 <mem_trim+0x208>)
 800e162:	f00a fdd0 	bl	8018d06 <sys_mutex_unlock>
  return rmem;
 800e166:	687b      	ldr	r3, [r7, #4]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3720      	adds	r7, #32
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	20004b24 	.word	0x20004b24
 800e174:	20004b28 	.word	0x20004b28
 800e178:	0801d104 	.word	0x0801d104
 800e17c:	0801d290 	.word	0x0801d290
 800e180:	0801d14c 	.word	0x0801d14c
 800e184:	0801d2a8 	.word	0x0801d2a8
 800e188:	20004b2c 	.word	0x20004b2c
 800e18c:	0801d2c8 	.word	0x0801d2c8
 800e190:	20004b30 	.word	0x20004b30

0800e194 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b088      	sub	sp, #32
 800e198:	af00      	add	r7, sp, #0
 800e19a:	4603      	mov	r3, r0
 800e19c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e19e:	88fb      	ldrh	r3, [r7, #6]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d101      	bne.n	800e1a8 <mem_malloc+0x14>
    return NULL;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	e0e2      	b.n	800e36e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e1a8:	88fb      	ldrh	r3, [r7, #6]
 800e1aa:	3303      	adds	r3, #3
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	f023 0303 	bic.w	r3, r3, #3
 800e1b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e1b4:	8bbb      	ldrh	r3, [r7, #28]
 800e1b6:	2b0b      	cmp	r3, #11
 800e1b8:	d801      	bhi.n	800e1be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e1ba:	230c      	movs	r3, #12
 800e1bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e1be:	8bbb      	ldrh	r3, [r7, #28]
 800e1c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e1c4:	d803      	bhi.n	800e1ce <mem_malloc+0x3a>
 800e1c6:	8bba      	ldrh	r2, [r7, #28]
 800e1c8:	88fb      	ldrh	r3, [r7, #6]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d201      	bcs.n	800e1d2 <mem_malloc+0x3e>
    return NULL;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	e0cd      	b.n	800e36e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e1d2:	4869      	ldr	r0, [pc, #420]	; (800e378 <mem_malloc+0x1e4>)
 800e1d4:	f00a fd88 	bl	8018ce8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e1d8:	4b68      	ldr	r3, [pc, #416]	; (800e37c <mem_malloc+0x1e8>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff fcfd 	bl	800dbdc <mem_to_ptr>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	83fb      	strh	r3, [r7, #30]
 800e1e6:	e0b7      	b.n	800e358 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e1e8:	8bfb      	ldrh	r3, [r7, #30]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7ff fce4 	bl	800dbb8 <ptr_to_mem>
 800e1f0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	791b      	ldrb	r3, [r3, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f040 80a7 	bne.w	800e34a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	881b      	ldrh	r3, [r3, #0]
 800e200:	461a      	mov	r2, r3
 800e202:	8bfb      	ldrh	r3, [r7, #30]
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	f1a3 0208 	sub.w	r2, r3, #8
 800e20a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e20c:	429a      	cmp	r2, r3
 800e20e:	f0c0 809c 	bcc.w	800e34a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	881b      	ldrh	r3, [r3, #0]
 800e216:	461a      	mov	r2, r3
 800e218:	8bfb      	ldrh	r3, [r7, #30]
 800e21a:	1ad3      	subs	r3, r2, r3
 800e21c:	f1a3 0208 	sub.w	r2, r3, #8
 800e220:	8bbb      	ldrh	r3, [r7, #28]
 800e222:	3314      	adds	r3, #20
 800e224:	429a      	cmp	r2, r3
 800e226:	d333      	bcc.n	800e290 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e228:	8bfa      	ldrh	r2, [r7, #30]
 800e22a:	8bbb      	ldrh	r3, [r7, #28]
 800e22c:	4413      	add	r3, r2
 800e22e:	b29b      	uxth	r3, r3
 800e230:	3308      	adds	r3, #8
 800e232:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e234:	8a7b      	ldrh	r3, [r7, #18]
 800e236:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e23a:	d106      	bne.n	800e24a <mem_malloc+0xb6>
 800e23c:	4b50      	ldr	r3, [pc, #320]	; (800e380 <mem_malloc+0x1ec>)
 800e23e:	f240 3287 	movw	r2, #903	; 0x387
 800e242:	4950      	ldr	r1, [pc, #320]	; (800e384 <mem_malloc+0x1f0>)
 800e244:	4850      	ldr	r0, [pc, #320]	; (800e388 <mem_malloc+0x1f4>)
 800e246:	f00d f809 	bl	801b25c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e24a:	8a7b      	ldrh	r3, [r7, #18]
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7ff fcb3 	bl	800dbb8 <ptr_to_mem>
 800e252:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2200      	movs	r2, #0
 800e258:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	881a      	ldrh	r2, [r3, #0]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	8bfa      	ldrh	r2, [r7, #30]
 800e266:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	8a7a      	ldrh	r2, [r7, #18]
 800e26c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	2201      	movs	r2, #1
 800e272:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e27c:	d00b      	beq.n	800e296 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	881b      	ldrh	r3, [r3, #0]
 800e282:	4618      	mov	r0, r3
 800e284:	f7ff fc98 	bl	800dbb8 <ptr_to_mem>
 800e288:	4602      	mov	r2, r0
 800e28a:	8a7b      	ldrh	r3, [r7, #18]
 800e28c:	8053      	strh	r3, [r2, #2]
 800e28e:	e002      	b.n	800e296 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	2201      	movs	r2, #1
 800e294:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e296:	4b39      	ldr	r3, [pc, #228]	; (800e37c <mem_malloc+0x1e8>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	697a      	ldr	r2, [r7, #20]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d127      	bne.n	800e2f0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e2a0:	4b36      	ldr	r3, [pc, #216]	; (800e37c <mem_malloc+0x1e8>)
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e2a6:	e005      	b.n	800e2b4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	881b      	ldrh	r3, [r3, #0]
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7ff fc83 	bl	800dbb8 <ptr_to_mem>
 800e2b2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e2b4:	69bb      	ldr	r3, [r7, #24]
 800e2b6:	791b      	ldrb	r3, [r3, #4]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d004      	beq.n	800e2c6 <mem_malloc+0x132>
 800e2bc:	4b33      	ldr	r3, [pc, #204]	; (800e38c <mem_malloc+0x1f8>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	69ba      	ldr	r2, [r7, #24]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d1f0      	bne.n	800e2a8 <mem_malloc+0x114>
          }
          lfree = cur;
 800e2c6:	4a2d      	ldr	r2, [pc, #180]	; (800e37c <mem_malloc+0x1e8>)
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e2cc:	4b2b      	ldr	r3, [pc, #172]	; (800e37c <mem_malloc+0x1e8>)
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	4b2e      	ldr	r3, [pc, #184]	; (800e38c <mem_malloc+0x1f8>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d00b      	beq.n	800e2f0 <mem_malloc+0x15c>
 800e2d8:	4b28      	ldr	r3, [pc, #160]	; (800e37c <mem_malloc+0x1e8>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	791b      	ldrb	r3, [r3, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d006      	beq.n	800e2f0 <mem_malloc+0x15c>
 800e2e2:	4b27      	ldr	r3, [pc, #156]	; (800e380 <mem_malloc+0x1ec>)
 800e2e4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e2e8:	4929      	ldr	r1, [pc, #164]	; (800e390 <mem_malloc+0x1fc>)
 800e2ea:	4827      	ldr	r0, [pc, #156]	; (800e388 <mem_malloc+0x1f4>)
 800e2ec:	f00c ffb6 	bl	801b25c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e2f0:	4821      	ldr	r0, [pc, #132]	; (800e378 <mem_malloc+0x1e4>)
 800e2f2:	f00a fd08 	bl	8018d06 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e2f6:	8bba      	ldrh	r2, [r7, #28]
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	4413      	add	r3, r2
 800e2fc:	3308      	adds	r3, #8
 800e2fe:	4a23      	ldr	r2, [pc, #140]	; (800e38c <mem_malloc+0x1f8>)
 800e300:	6812      	ldr	r2, [r2, #0]
 800e302:	4293      	cmp	r3, r2
 800e304:	d906      	bls.n	800e314 <mem_malloc+0x180>
 800e306:	4b1e      	ldr	r3, [pc, #120]	; (800e380 <mem_malloc+0x1ec>)
 800e308:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e30c:	4921      	ldr	r1, [pc, #132]	; (800e394 <mem_malloc+0x200>)
 800e30e:	481e      	ldr	r0, [pc, #120]	; (800e388 <mem_malloc+0x1f4>)
 800e310:	f00c ffa4 	bl	801b25c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	f003 0303 	and.w	r3, r3, #3
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d006      	beq.n	800e32c <mem_malloc+0x198>
 800e31e:	4b18      	ldr	r3, [pc, #96]	; (800e380 <mem_malloc+0x1ec>)
 800e320:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e324:	491c      	ldr	r1, [pc, #112]	; (800e398 <mem_malloc+0x204>)
 800e326:	4818      	ldr	r0, [pc, #96]	; (800e388 <mem_malloc+0x1f4>)
 800e328:	f00c ff98 	bl	801b25c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	f003 0303 	and.w	r3, r3, #3
 800e332:	2b00      	cmp	r3, #0
 800e334:	d006      	beq.n	800e344 <mem_malloc+0x1b0>
 800e336:	4b12      	ldr	r3, [pc, #72]	; (800e380 <mem_malloc+0x1ec>)
 800e338:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e33c:	4917      	ldr	r1, [pc, #92]	; (800e39c <mem_malloc+0x208>)
 800e33e:	4812      	ldr	r0, [pc, #72]	; (800e388 <mem_malloc+0x1f4>)
 800e340:	f00c ff8c 	bl	801b25c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	3308      	adds	r3, #8
 800e348:	e011      	b.n	800e36e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e34a:	8bfb      	ldrh	r3, [r7, #30]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff fc33 	bl	800dbb8 <ptr_to_mem>
 800e352:	4603      	mov	r3, r0
 800e354:	881b      	ldrh	r3, [r3, #0]
 800e356:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e358:	8bfa      	ldrh	r2, [r7, #30]
 800e35a:	8bbb      	ldrh	r3, [r7, #28]
 800e35c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800e360:	429a      	cmp	r2, r3
 800e362:	f4ff af41 	bcc.w	800e1e8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e366:	4804      	ldr	r0, [pc, #16]	; (800e378 <mem_malloc+0x1e4>)
 800e368:	f00a fccd 	bl	8018d06 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3720      	adds	r7, #32
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	20004b2c 	.word	0x20004b2c
 800e37c:	20004b30 	.word	0x20004b30
 800e380:	0801d104 	.word	0x0801d104
 800e384:	0801d2c8 	.word	0x0801d2c8
 800e388:	0801d14c 	.word	0x0801d14c
 800e38c:	20004b28 	.word	0x20004b28
 800e390:	0801d2dc 	.word	0x0801d2dc
 800e394:	0801d2f8 	.word	0x0801d2f8
 800e398:	0801d328 	.word	0x0801d328
 800e39c:	0801d358 	.word	0x0801d358

0800e3a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b085      	sub	sp, #20
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	689b      	ldr	r3, [r3, #8]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	3303      	adds	r3, #3
 800e3b6:	f023 0303 	bic.w	r3, r3, #3
 800e3ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e3bc:	2300      	movs	r3, #0
 800e3be:	60fb      	str	r3, [r7, #12]
 800e3c0:	e011      	b.n	800e3e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	689b      	ldr	r3, [r3, #8]
 800e3d0:	68ba      	ldr	r2, [r7, #8]
 800e3d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	881b      	ldrh	r3, [r3, #0]
 800e3d8:	461a      	mov	r2, r3
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	4413      	add	r3, r2
 800e3de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	60fb      	str	r3, [r7, #12]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	885b      	ldrh	r3, [r3, #2]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	dbe7      	blt.n	800e3c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e3f2:	bf00      	nop
 800e3f4:	bf00      	nop
 800e3f6:	3714      	adds	r7, #20
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e406:	2300      	movs	r3, #0
 800e408:	80fb      	strh	r3, [r7, #6]
 800e40a:	e009      	b.n	800e420 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e40c:	88fb      	ldrh	r3, [r7, #6]
 800e40e:	4a08      	ldr	r2, [pc, #32]	; (800e430 <memp_init+0x30>)
 800e410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff ffc3 	bl	800e3a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e41a:	88fb      	ldrh	r3, [r7, #6]
 800e41c:	3301      	adds	r3, #1
 800e41e:	80fb      	strh	r3, [r7, #6]
 800e420:	88fb      	ldrh	r3, [r7, #6]
 800e422:	2b0c      	cmp	r3, #12
 800e424:	d9f2      	bls.n	800e40c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e426:	bf00      	nop
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	0801fd80 	.word	0x0801fd80

0800e434 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e43c:	f00a fc90 	bl	8018d60 <sys_arch_protect>
 800e440:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d015      	beq.n	800e47c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	68ba      	ldr	r2, [r7, #8]
 800e456:	6812      	ldr	r2, [r2, #0]
 800e458:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	f003 0303 	and.w	r3, r3, #3
 800e460:	2b00      	cmp	r3, #0
 800e462:	d006      	beq.n	800e472 <do_memp_malloc_pool+0x3e>
 800e464:	4b09      	ldr	r3, [pc, #36]	; (800e48c <do_memp_malloc_pool+0x58>)
 800e466:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e46a:	4909      	ldr	r1, [pc, #36]	; (800e490 <do_memp_malloc_pool+0x5c>)
 800e46c:	4809      	ldr	r0, [pc, #36]	; (800e494 <do_memp_malloc_pool+0x60>)
 800e46e:	f00c fef5 	bl	801b25c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f00a fc82 	bl	8018d7c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	e003      	b.n	800e484 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f00a fc7d 	bl	8018d7c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e482:	2300      	movs	r3, #0
}
 800e484:	4618      	mov	r0, r3
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	0801d37c 	.word	0x0801d37c
 800e490:	0801d3ac 	.word	0x0801d3ac
 800e494:	0801d3d0 	.word	0x0801d3d0

0800e498 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	4603      	mov	r3, r0
 800e4a0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e4a2:	79fb      	ldrb	r3, [r7, #7]
 800e4a4:	2b0c      	cmp	r3, #12
 800e4a6:	d908      	bls.n	800e4ba <memp_malloc+0x22>
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <memp_malloc+0x3c>)
 800e4aa:	f240 1257 	movw	r2, #343	; 0x157
 800e4ae:	490a      	ldr	r1, [pc, #40]	; (800e4d8 <memp_malloc+0x40>)
 800e4b0:	480a      	ldr	r0, [pc, #40]	; (800e4dc <memp_malloc+0x44>)
 800e4b2:	f00c fed3 	bl	801b25c <iprintf>
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	e008      	b.n	800e4cc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e4ba:	79fb      	ldrb	r3, [r7, #7]
 800e4bc:	4a08      	ldr	r2, [pc, #32]	; (800e4e0 <memp_malloc+0x48>)
 800e4be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7ff ffb6 	bl	800e434 <do_memp_malloc_pool>
 800e4c8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	0801d37c 	.word	0x0801d37c
 800e4d8:	0801d40c 	.word	0x0801d40c
 800e4dc:	0801d3d0 	.word	0x0801d3d0
 800e4e0:	0801fd80 	.word	0x0801fd80

0800e4e4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b084      	sub	sp, #16
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	f003 0303 	and.w	r3, r3, #3
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d006      	beq.n	800e506 <do_memp_free_pool+0x22>
 800e4f8:	4b0d      	ldr	r3, [pc, #52]	; (800e530 <do_memp_free_pool+0x4c>)
 800e4fa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e4fe:	490d      	ldr	r1, [pc, #52]	; (800e534 <do_memp_free_pool+0x50>)
 800e500:	480d      	ldr	r0, [pc, #52]	; (800e538 <do_memp_free_pool+0x54>)
 800e502:	f00c feab 	bl	801b25c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e50a:	f00a fc29 	bl	8018d60 <sys_arch_protect>
 800e50e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	689b      	ldr	r3, [r3, #8]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e522:	68b8      	ldr	r0, [r7, #8]
 800e524:	f00a fc2a 	bl	8018d7c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e528:	bf00      	nop
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	0801d37c 	.word	0x0801d37c
 800e534:	0801d42c 	.word	0x0801d42c
 800e538:	0801d3d0 	.word	0x0801d3d0

0800e53c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	4603      	mov	r3, r0
 800e544:	6039      	str	r1, [r7, #0]
 800e546:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e548:	79fb      	ldrb	r3, [r7, #7]
 800e54a:	2b0c      	cmp	r3, #12
 800e54c:	d907      	bls.n	800e55e <memp_free+0x22>
 800e54e:	4b0c      	ldr	r3, [pc, #48]	; (800e580 <memp_free+0x44>)
 800e550:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e554:	490b      	ldr	r1, [pc, #44]	; (800e584 <memp_free+0x48>)
 800e556:	480c      	ldr	r0, [pc, #48]	; (800e588 <memp_free+0x4c>)
 800e558:	f00c fe80 	bl	801b25c <iprintf>
 800e55c:	e00c      	b.n	800e578 <memp_free+0x3c>

  if (mem == NULL) {
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d008      	beq.n	800e576 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e564:	79fb      	ldrb	r3, [r7, #7]
 800e566:	4a09      	ldr	r2, [pc, #36]	; (800e58c <memp_free+0x50>)
 800e568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e56c:	6839      	ldr	r1, [r7, #0]
 800e56e:	4618      	mov	r0, r3
 800e570:	f7ff ffb8 	bl	800e4e4 <do_memp_free_pool>
 800e574:	e000      	b.n	800e578 <memp_free+0x3c>
    return;
 800e576:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	0801d37c 	.word	0x0801d37c
 800e584:	0801d44c 	.word	0x0801d44c
 800e588:	0801d3d0 	.word	0x0801d3d0
 800e58c:	0801fd80 	.word	0x0801fd80

0800e590 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e590:	b480      	push	{r7}
 800e592:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e594:	bf00      	nop
 800e596:	46bd      	mov	sp, r7
 800e598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59c:	4770      	bx	lr
	...

0800e5a0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
 800e5ac:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d108      	bne.n	800e5c6 <netif_add+0x26>
 800e5b4:	4b57      	ldr	r3, [pc, #348]	; (800e714 <netif_add+0x174>)
 800e5b6:	f240 1227 	movw	r2, #295	; 0x127
 800e5ba:	4957      	ldr	r1, [pc, #348]	; (800e718 <netif_add+0x178>)
 800e5bc:	4857      	ldr	r0, [pc, #348]	; (800e71c <netif_add+0x17c>)
 800e5be:	f00c fe4d 	bl	801b25c <iprintf>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	e0a2      	b.n	800e70c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d108      	bne.n	800e5de <netif_add+0x3e>
 800e5cc:	4b51      	ldr	r3, [pc, #324]	; (800e714 <netif_add+0x174>)
 800e5ce:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e5d2:	4953      	ldr	r1, [pc, #332]	; (800e720 <netif_add+0x180>)
 800e5d4:	4851      	ldr	r0, [pc, #324]	; (800e71c <netif_add+0x17c>)
 800e5d6:	f00c fe41 	bl	801b25c <iprintf>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	e096      	b.n	800e70c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d101      	bne.n	800e5e8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e5e4:	4b4f      	ldr	r3, [pc, #316]	; (800e724 <netif_add+0x184>)
 800e5e6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d101      	bne.n	800e5f2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e5ee:	4b4d      	ldr	r3, [pc, #308]	; (800e724 <netif_add+0x184>)
 800e5f0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d101      	bne.n	800e5fc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e5f8:	4b4a      	ldr	r3, [pc, #296]	; (800e724 <netif_add+0x184>)
 800e5fa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2200      	movs	r2, #0
 800e600:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	2200      	movs	r2, #0
 800e60c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	4a45      	ldr	r2, [pc, #276]	; (800e728 <netif_add+0x188>)
 800e612:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2200      	movs	r2, #0
 800e618:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	2200      	movs	r2, #0
 800e626:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	6a3a      	ldr	r2, [r7, #32]
 800e62c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e62e:	4b3f      	ldr	r3, [pc, #252]	; (800e72c <netif_add+0x18c>)
 800e630:	781a      	ldrb	r2, [r3, #0]
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e63c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	68b9      	ldr	r1, [r7, #8]
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f000 f913 	bl	800e870 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	4798      	blx	r3
 800e650:	4603      	mov	r3, r0
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <netif_add+0xba>
    return NULL;
 800e656:	2300      	movs	r3, #0
 800e658:	e058      	b.n	800e70c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e660:	2bff      	cmp	r3, #255	; 0xff
 800e662:	d103      	bne.n	800e66c <netif_add+0xcc>
        netif->num = 0;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e670:	4b2f      	ldr	r3, [pc, #188]	; (800e730 <netif_add+0x190>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	617b      	str	r3, [r7, #20]
 800e676:	e02b      	b.n	800e6d0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e678:	697a      	ldr	r2, [r7, #20]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d106      	bne.n	800e68e <netif_add+0xee>
 800e680:	4b24      	ldr	r3, [pc, #144]	; (800e714 <netif_add+0x174>)
 800e682:	f240 128b 	movw	r2, #395	; 0x18b
 800e686:	492b      	ldr	r1, [pc, #172]	; (800e734 <netif_add+0x194>)
 800e688:	4824      	ldr	r0, [pc, #144]	; (800e71c <netif_add+0x17c>)
 800e68a:	f00c fde7 	bl	801b25c <iprintf>
        num_netifs++;
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	3301      	adds	r3, #1
 800e692:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	2bff      	cmp	r3, #255	; 0xff
 800e698:	dd06      	ble.n	800e6a8 <netif_add+0x108>
 800e69a:	4b1e      	ldr	r3, [pc, #120]	; (800e714 <netif_add+0x174>)
 800e69c:	f240 128d 	movw	r2, #397	; 0x18d
 800e6a0:	4925      	ldr	r1, [pc, #148]	; (800e738 <netif_add+0x198>)
 800e6a2:	481e      	ldr	r0, [pc, #120]	; (800e71c <netif_add+0x17c>)
 800e6a4:	f00c fdda 	bl	801b25c <iprintf>
        if (netif2->num == netif->num) {
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d108      	bne.n	800e6ca <netif_add+0x12a>
          netif->num++;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6be:	3301      	adds	r3, #1
 800e6c0:	b2da      	uxtb	r2, r3
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800e6c8:	e005      	b.n	800e6d6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	617b      	str	r3, [r7, #20]
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d1d0      	bne.n	800e678 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d1be      	bne.n	800e65a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6e2:	2bfe      	cmp	r3, #254	; 0xfe
 800e6e4:	d103      	bne.n	800e6ee <netif_add+0x14e>
    netif_num = 0;
 800e6e6:	4b11      	ldr	r3, [pc, #68]	; (800e72c <netif_add+0x18c>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	701a      	strb	r2, [r3, #0]
 800e6ec:	e006      	b.n	800e6fc <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	4b0c      	ldr	r3, [pc, #48]	; (800e72c <netif_add+0x18c>)
 800e6fa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e6fc:	4b0c      	ldr	r3, [pc, #48]	; (800e730 <netif_add+0x190>)
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e704:	4a0a      	ldr	r2, [pc, #40]	; (800e730 <netif_add+0x190>)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e70a:	68fb      	ldr	r3, [r7, #12]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3718      	adds	r7, #24
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	0801d468 	.word	0x0801d468
 800e718:	0801d4fc 	.word	0x0801d4fc
 800e71c:	0801d4b8 	.word	0x0801d4b8
 800e720:	0801d518 	.word	0x0801d518
 800e724:	0801fdf4 	.word	0x0801fdf4
 800e728:	0800eb4b 	.word	0x0800eb4b
 800e72c:	20004b68 	.word	0x20004b68
 800e730:	20011040 	.word	0x20011040
 800e734:	0801d53c 	.word	0x0801d53c
 800e738:	0801d550 	.word	0x0801d550

0800e73c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e746:	6839      	ldr	r1, [r7, #0]
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f002 fe27 	bl	801139c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e74e:	6839      	ldr	r1, [r7, #0]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f007 fe7d 	bl	8016450 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e756:	bf00      	nop
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
	...

0800e760 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b086      	sub	sp, #24
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d106      	bne.n	800e780 <netif_do_set_ipaddr+0x20>
 800e772:	4b1d      	ldr	r3, [pc, #116]	; (800e7e8 <netif_do_set_ipaddr+0x88>)
 800e774:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e778:	491c      	ldr	r1, [pc, #112]	; (800e7ec <netif_do_set_ipaddr+0x8c>)
 800e77a:	481d      	ldr	r0, [pc, #116]	; (800e7f0 <netif_do_set_ipaddr+0x90>)
 800e77c:	f00c fd6e 	bl	801b25c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d106      	bne.n	800e794 <netif_do_set_ipaddr+0x34>
 800e786:	4b18      	ldr	r3, [pc, #96]	; (800e7e8 <netif_do_set_ipaddr+0x88>)
 800e788:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e78c:	4917      	ldr	r1, [pc, #92]	; (800e7ec <netif_do_set_ipaddr+0x8c>)
 800e78e:	4818      	ldr	r0, [pc, #96]	; (800e7f0 <netif_do_set_ipaddr+0x90>)
 800e790:	f00c fd64 	bl	801b25c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	3304      	adds	r3, #4
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d01c      	beq.n	800e7dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e7b2:	f107 0314 	add.w	r3, r7, #20
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff ffbf 	bl	800e73c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <netif_do_set_ipaddr+0x6a>
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	e000      	b.n	800e7cc <netif_do_set_ipaddr+0x6c>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e7d0:	2101      	movs	r1, #1
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f000 f8d2 	bl	800e97c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e7d8:	2301      	movs	r3, #1
 800e7da:	e000      	b.n	800e7de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	0801d468 	.word	0x0801d468
 800e7ec:	0801d580 	.word	0x0801d580
 800e7f0:	0801d4b8 	.word	0x0801d4b8

0800e7f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	60f8      	str	r0, [r7, #12]
 800e7fc:	60b9      	str	r1, [r7, #8]
 800e7fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	3308      	adds	r3, #8
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	d00a      	beq.n	800e824 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <netif_do_set_netmask+0x26>
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	e000      	b.n	800e81c <netif_do_set_netmask+0x28>
 800e81a:	2300      	movs	r3, #0
 800e81c:	68fa      	ldr	r2, [r7, #12]
 800e81e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e820:	2301      	movs	r3, #1
 800e822:	e000      	b.n	800e826 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e824:	2300      	movs	r3, #0
}
 800e826:	4618      	mov	r0, r3
 800e828:	3714      	adds	r7, #20
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e832:	b480      	push	{r7}
 800e834:	b085      	sub	sp, #20
 800e836:	af00      	add	r7, sp, #0
 800e838:	60f8      	str	r0, [r7, #12]
 800e83a:	60b9      	str	r1, [r7, #8]
 800e83c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	330c      	adds	r3, #12
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d00a      	beq.n	800e862 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d002      	beq.n	800e858 <netif_do_set_gw+0x26>
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	e000      	b.n	800e85a <netif_do_set_gw+0x28>
 800e858:	2300      	movs	r3, #0
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e85e:	2301      	movs	r3, #1
 800e860:	e000      	b.n	800e864 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b088      	sub	sp, #32
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
 800e87c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e87e:	2300      	movs	r3, #0
 800e880:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e882:	2300      	movs	r3, #0
 800e884:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d101      	bne.n	800e890 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e88c:	4b1c      	ldr	r3, [pc, #112]	; (800e900 <netif_set_addr+0x90>)
 800e88e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d101      	bne.n	800e89a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e896:	4b1a      	ldr	r3, [pc, #104]	; (800e900 <netif_set_addr+0x90>)
 800e898:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e8a0:	4b17      	ldr	r3, [pc, #92]	; (800e900 <netif_set_addr+0x90>)
 800e8a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d003      	beq.n	800e8b2 <netif_set_addr+0x42>
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d101      	bne.n	800e8b6 <netif_set_addr+0x46>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e000      	b.n	800e8b8 <netif_set_addr+0x48>
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d006      	beq.n	800e8ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e8c0:	f107 0310 	add.w	r3, r7, #16
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	68b9      	ldr	r1, [r7, #8]
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f7ff ff49 	bl	800e760 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e8ce:	69fa      	ldr	r2, [r7, #28]
 800e8d0:	6879      	ldr	r1, [r7, #4]
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	f7ff ff8e 	bl	800e7f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e8d8:	69ba      	ldr	r2, [r7, #24]
 800e8da:	6839      	ldr	r1, [r7, #0]
 800e8dc:	68f8      	ldr	r0, [r7, #12]
 800e8de:	f7ff ffa8 	bl	800e832 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d106      	bne.n	800e8f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e8e8:	f107 0310 	add.w	r3, r7, #16
 800e8ec:	461a      	mov	r2, r3
 800e8ee:	68b9      	ldr	r1, [r7, #8]
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f7ff ff35 	bl	800e760 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e8f6:	bf00      	nop
 800e8f8:	3720      	adds	r7, #32
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	0801fdf4 	.word	0x0801fdf4

0800e904 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e90c:	4a04      	ldr	r2, [pc, #16]	; (800e920 <netif_set_default+0x1c>)
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e912:	bf00      	nop
 800e914:	370c      	adds	r7, #12
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr
 800e91e:	bf00      	nop
 800e920:	20011044 	.word	0x20011044

0800e924 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b082      	sub	sp, #8
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d107      	bne.n	800e942 <netif_set_up+0x1e>
 800e932:	4b0f      	ldr	r3, [pc, #60]	; (800e970 <netif_set_up+0x4c>)
 800e934:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e938:	490e      	ldr	r1, [pc, #56]	; (800e974 <netif_set_up+0x50>)
 800e93a:	480f      	ldr	r0, [pc, #60]	; (800e978 <netif_set_up+0x54>)
 800e93c:	f00c fc8e 	bl	801b25c <iprintf>
 800e940:	e013      	b.n	800e96a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e948:	f003 0301 	and.w	r3, r3, #1
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d10c      	bne.n	800e96a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e956:	f043 0301 	orr.w	r3, r3, #1
 800e95a:	b2da      	uxtb	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e962:	2103      	movs	r1, #3
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 f809 	bl	800e97c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	0801d468 	.word	0x0801d468
 800e974:	0801d5f0 	.word	0x0801d5f0
 800e978:	0801d4b8 	.word	0x0801d4b8

0800e97c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d106      	bne.n	800e99c <netif_issue_reports+0x20>
 800e98e:	4b18      	ldr	r3, [pc, #96]	; (800e9f0 <netif_issue_reports+0x74>)
 800e990:	f240 326d 	movw	r2, #877	; 0x36d
 800e994:	4917      	ldr	r1, [pc, #92]	; (800e9f4 <netif_issue_reports+0x78>)
 800e996:	4818      	ldr	r0, [pc, #96]	; (800e9f8 <netif_issue_reports+0x7c>)
 800e998:	f00c fc60 	bl	801b25c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9a2:	f003 0304 	and.w	r3, r3, #4
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d01e      	beq.n	800e9e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d017      	beq.n	800e9e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e9b8:	78fb      	ldrb	r3, [r7, #3]
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d013      	beq.n	800e9ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00e      	beq.n	800e9ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e9d2:	f003 0308 	and.w	r3, r3, #8
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d007      	beq.n	800e9ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	3304      	adds	r3, #4
 800e9de:	4619      	mov	r1, r3
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f008 fc9f 	bl	8017324 <etharp_request>
 800e9e6:	e000      	b.n	800e9ea <netif_issue_reports+0x6e>
    return;
 800e9e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e9ea:	3708      	adds	r7, #8
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	0801d468 	.word	0x0801d468
 800e9f4:	0801d60c 	.word	0x0801d60c
 800e9f8:	0801d4b8 	.word	0x0801d4b8

0800e9fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d107      	bne.n	800ea1a <netif_set_down+0x1e>
 800ea0a:	4b12      	ldr	r3, [pc, #72]	; (800ea54 <netif_set_down+0x58>)
 800ea0c:	f240 329b 	movw	r2, #923	; 0x39b
 800ea10:	4911      	ldr	r1, [pc, #68]	; (800ea58 <netif_set_down+0x5c>)
 800ea12:	4812      	ldr	r0, [pc, #72]	; (800ea5c <netif_set_down+0x60>)
 800ea14:	f00c fc22 	bl	801b25c <iprintf>
 800ea18:	e019      	b.n	800ea4e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea20:	f003 0301 	and.w	r3, r3, #1
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d012      	beq.n	800ea4e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea2e:	f023 0301 	bic.w	r3, r3, #1
 800ea32:	b2da      	uxtb	r2, r3
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea40:	f003 0308 	and.w	r3, r3, #8
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f008 f829 	bl	8016aa0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}
 800ea54:	0801d468 	.word	0x0801d468
 800ea58:	0801d630 	.word	0x0801d630
 800ea5c:	0801d4b8 	.word	0x0801d4b8

0800ea60 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d107      	bne.n	800ea7e <netif_set_link_up+0x1e>
 800ea6e:	4b13      	ldr	r3, [pc, #76]	; (800eabc <netif_set_link_up+0x5c>)
 800ea70:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ea74:	4912      	ldr	r1, [pc, #72]	; (800eac0 <netif_set_link_up+0x60>)
 800ea76:	4813      	ldr	r0, [pc, #76]	; (800eac4 <netif_set_link_up+0x64>)
 800ea78:	f00c fbf0 	bl	801b25c <iprintf>
 800ea7c:	e01b      	b.n	800eab6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea84:	f003 0304 	and.w	r3, r3, #4
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d114      	bne.n	800eab6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea92:	f043 0304 	orr.w	r3, r3, #4
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ea9e:	2103      	movs	r1, #3
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f7ff ff6b 	bl	800e97c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	69db      	ldr	r3, [r3, #28]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d003      	beq.n	800eab6 <netif_set_link_up+0x56>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	69db      	ldr	r3, [r3, #28]
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eab6:	3708      	adds	r7, #8
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	0801d468 	.word	0x0801d468
 800eac0:	0801d650 	.word	0x0801d650
 800eac4:	0801d4b8 	.word	0x0801d4b8

0800eac8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d107      	bne.n	800eae6 <netif_set_link_down+0x1e>
 800ead6:	4b11      	ldr	r3, [pc, #68]	; (800eb1c <netif_set_link_down+0x54>)
 800ead8:	f240 4206 	movw	r2, #1030	; 0x406
 800eadc:	4910      	ldr	r1, [pc, #64]	; (800eb20 <netif_set_link_down+0x58>)
 800eade:	4811      	ldr	r0, [pc, #68]	; (800eb24 <netif_set_link_down+0x5c>)
 800eae0:	f00c fbbc 	bl	801b25c <iprintf>
 800eae4:	e017      	b.n	800eb16 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eaec:	f003 0304 	and.w	r3, r3, #4
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d010      	beq.n	800eb16 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eafa:	f023 0304 	bic.w	r3, r3, #4
 800eafe:	b2da      	uxtb	r2, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	69db      	ldr	r3, [r3, #28]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d003      	beq.n	800eb16 <netif_set_link_down+0x4e>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	69db      	ldr	r3, [r3, #28]
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}
 800eb1c:	0801d468 	.word	0x0801d468
 800eb20:	0801d674 	.word	0x0801d674
 800eb24:	0801d4b8 	.word	0x0801d4b8

0800eb28 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d002      	beq.n	800eb3e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	683a      	ldr	r2, [r7, #0]
 800eb3c:	61da      	str	r2, [r3, #28]
  }
}
 800eb3e:	bf00      	nop
 800eb40:	370c      	adds	r7, #12
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr

0800eb4a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b085      	sub	sp, #20
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	60f8      	str	r0, [r7, #12]
 800eb52:	60b9      	str	r1, [r7, #8]
 800eb54:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800eb56:	f06f 030b 	mvn.w	r3, #11
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3714      	adds	r7, #20
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
	...

0800eb68 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b085      	sub	sp, #20
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800eb72:	79fb      	ldrb	r3, [r7, #7]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d013      	beq.n	800eba0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800eb78:	4b0d      	ldr	r3, [pc, #52]	; (800ebb0 <netif_get_by_index+0x48>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	60fb      	str	r3, [r7, #12]
 800eb7e:	e00c      	b.n	800eb9a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb86:	3301      	adds	r3, #1
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	79fa      	ldrb	r2, [r7, #7]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d101      	bne.n	800eb94 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	e006      	b.n	800eba2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	60fb      	str	r3, [r7, #12]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d1ef      	bne.n	800eb80 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3714      	adds	r7, #20
 800eba6:	46bd      	mov	sp, r7
 800eba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebac:	4770      	bx	lr
 800ebae:	bf00      	nop
 800ebb0:	20011040 	.word	0x20011040

0800ebb4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ebba:	f00a f8d1 	bl	8018d60 <sys_arch_protect>
 800ebbe:	6038      	str	r0, [r7, #0]
 800ebc0:	4b0d      	ldr	r3, [pc, #52]	; (800ebf8 <pbuf_free_ooseq+0x44>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	701a      	strb	r2, [r3, #0]
 800ebc6:	6838      	ldr	r0, [r7, #0]
 800ebc8:	f00a f8d8 	bl	8018d7c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ebcc:	4b0b      	ldr	r3, [pc, #44]	; (800ebfc <pbuf_free_ooseq+0x48>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	607b      	str	r3, [r7, #4]
 800ebd2:	e00a      	b.n	800ebea <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f002 fc1b 	bl	8011418 <tcp_free_ooseq>
      return;
 800ebe2:	e005      	b.n	800ebf0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	68db      	ldr	r3, [r3, #12]
 800ebe8:	607b      	str	r3, [r7, #4]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1f1      	bne.n	800ebd4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	20011048 	.word	0x20011048
 800ebfc:	20011050 	.word	0x20011050

0800ec00 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ec08:	f7ff ffd4 	bl	800ebb4 <pbuf_free_ooseq>
}
 800ec0c:	bf00      	nop
 800ec0e:	3708      	adds	r7, #8
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ec1a:	f00a f8a1 	bl	8018d60 <sys_arch_protect>
 800ec1e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ec20:	4b0f      	ldr	r3, [pc, #60]	; (800ec60 <pbuf_pool_is_empty+0x4c>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ec26:	4b0e      	ldr	r3, [pc, #56]	; (800ec60 <pbuf_pool_is_empty+0x4c>)
 800ec28:	2201      	movs	r2, #1
 800ec2a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f00a f8a5 	bl	8018d7c <sys_arch_unprotect>

  if (!queued) {
 800ec32:	78fb      	ldrb	r3, [r7, #3]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d10f      	bne.n	800ec58 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ec38:	2100      	movs	r1, #0
 800ec3a:	480a      	ldr	r0, [pc, #40]	; (800ec64 <pbuf_pool_is_empty+0x50>)
 800ec3c:	f7fe fed6 	bl	800d9ec <tcpip_try_callback>
 800ec40:	4603      	mov	r3, r0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d008      	beq.n	800ec58 <pbuf_pool_is_empty+0x44>
 800ec46:	f00a f88b 	bl	8018d60 <sys_arch_protect>
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	4b04      	ldr	r3, [pc, #16]	; (800ec60 <pbuf_pool_is_empty+0x4c>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	701a      	strb	r2, [r3, #0]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f00a f892 	bl	8018d7c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ec58:	bf00      	nop
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	20011048 	.word	0x20011048
 800ec64:	0800ec01 	.word	0x0800ec01

0800ec68 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	4611      	mov	r1, r2
 800ec74:	461a      	mov	r2, r3
 800ec76:	460b      	mov	r3, r1
 800ec78:	80fb      	strh	r3, [r7, #6]
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	2200      	movs	r2, #0
 800ec82:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	88fa      	ldrh	r2, [r7, #6]
 800ec8e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	88ba      	ldrh	r2, [r7, #4]
 800ec94:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ec96:	8b3b      	ldrh	r3, [r7, #24]
 800ec98:	b2da      	uxtb	r2, r3
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	7f3a      	ldrb	r2, [r7, #28]
 800eca2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	2201      	movs	r2, #1
 800eca8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	73da      	strb	r2, [r3, #15]
}
 800ecb0:	bf00      	nop
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr

0800ecbc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08c      	sub	sp, #48	; 0x30
 800ecc0:	af02      	add	r7, sp, #8
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	71fb      	strb	r3, [r7, #7]
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	80bb      	strh	r3, [r7, #4]
 800ecca:	4613      	mov	r3, r2
 800eccc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ecce:	79fb      	ldrb	r3, [r7, #7]
 800ecd0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ecd2:	887b      	ldrh	r3, [r7, #2]
 800ecd4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ecd8:	d07f      	beq.n	800edda <pbuf_alloc+0x11e>
 800ecda:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ecde:	f300 80c8 	bgt.w	800ee72 <pbuf_alloc+0x1b6>
 800ece2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ece6:	d010      	beq.n	800ed0a <pbuf_alloc+0x4e>
 800ece8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ecec:	f300 80c1 	bgt.w	800ee72 <pbuf_alloc+0x1b6>
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	d002      	beq.n	800ecfa <pbuf_alloc+0x3e>
 800ecf4:	2b41      	cmp	r3, #65	; 0x41
 800ecf6:	f040 80bc 	bne.w	800ee72 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ecfa:	887a      	ldrh	r2, [r7, #2]
 800ecfc:	88bb      	ldrh	r3, [r7, #4]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	2000      	movs	r0, #0
 800ed02:	f000 f8d1 	bl	800eea8 <pbuf_alloc_reference>
 800ed06:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ed08:	e0bd      	b.n	800ee86 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ed12:	88bb      	ldrh	r3, [r7, #4]
 800ed14:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ed16:	200c      	movs	r0, #12
 800ed18:	f7ff fbbe 	bl	800e498 <memp_malloc>
 800ed1c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d109      	bne.n	800ed38 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ed24:	f7ff ff76 	bl	800ec14 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ed2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed30:	f000 faa8 	bl	800f284 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ed34:	2300      	movs	r3, #0
 800ed36:	e0a7      	b.n	800ee88 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ed38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed3a:	3303      	adds	r3, #3
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	f023 0303 	bic.w	r3, r3, #3
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	8b7a      	ldrh	r2, [r7, #26]
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	bf28      	it	cs
 800ed50:	4613      	movcs	r3, r2
 800ed52:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ed54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed56:	3310      	adds	r3, #16
 800ed58:	693a      	ldr	r2, [r7, #16]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	3303      	adds	r3, #3
 800ed5e:	f023 0303 	bic.w	r3, r3, #3
 800ed62:	4618      	mov	r0, r3
 800ed64:	89f9      	ldrh	r1, [r7, #14]
 800ed66:	8b7a      	ldrh	r2, [r7, #26]
 800ed68:	2300      	movs	r3, #0
 800ed6a:	9301      	str	r3, [sp, #4]
 800ed6c:	887b      	ldrh	r3, [r7, #2]
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	460b      	mov	r3, r1
 800ed72:	4601      	mov	r1, r0
 800ed74:	6938      	ldr	r0, [r7, #16]
 800ed76:	f7ff ff77 	bl	800ec68 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	685b      	ldr	r3, [r3, #4]
 800ed7e:	f003 0303 	and.w	r3, r3, #3
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d006      	beq.n	800ed94 <pbuf_alloc+0xd8>
 800ed86:	4b42      	ldr	r3, [pc, #264]	; (800ee90 <pbuf_alloc+0x1d4>)
 800ed88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed8c:	4941      	ldr	r1, [pc, #260]	; (800ee94 <pbuf_alloc+0x1d8>)
 800ed8e:	4842      	ldr	r0, [pc, #264]	; (800ee98 <pbuf_alloc+0x1dc>)
 800ed90:	f00c fa64 	bl	801b25c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ed94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed96:	3303      	adds	r3, #3
 800ed98:	f023 0303 	bic.w	r3, r3, #3
 800ed9c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800eda0:	d106      	bne.n	800edb0 <pbuf_alloc+0xf4>
 800eda2:	4b3b      	ldr	r3, [pc, #236]	; (800ee90 <pbuf_alloc+0x1d4>)
 800eda4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800eda8:	493c      	ldr	r1, [pc, #240]	; (800ee9c <pbuf_alloc+0x1e0>)
 800edaa:	483b      	ldr	r0, [pc, #236]	; (800ee98 <pbuf_alloc+0x1dc>)
 800edac:	f00c fa56 	bl	801b25c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d102      	bne.n	800edbc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	627b      	str	r3, [r7, #36]	; 0x24
 800edba:	e002      	b.n	800edc2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	693a      	ldr	r2, [r7, #16]
 800edc0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800edc6:	8b7a      	ldrh	r2, [r7, #26]
 800edc8:	89fb      	ldrh	r3, [r7, #14]
 800edca:	1ad3      	subs	r3, r2, r3
 800edcc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800edd2:	8b7b      	ldrh	r3, [r7, #26]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d19e      	bne.n	800ed16 <pbuf_alloc+0x5a>
      break;
 800edd8:	e055      	b.n	800ee86 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800edda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eddc:	3303      	adds	r3, #3
 800edde:	b29b      	uxth	r3, r3
 800ede0:	f023 0303 	bic.w	r3, r3, #3
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	88bb      	ldrh	r3, [r7, #4]
 800ede8:	3303      	adds	r3, #3
 800edea:	b29b      	uxth	r3, r3
 800edec:	f023 0303 	bic.w	r3, r3, #3
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	4413      	add	r3, r2
 800edf4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800edf6:	8b3b      	ldrh	r3, [r7, #24]
 800edf8:	3310      	adds	r3, #16
 800edfa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800edfc:	8b3a      	ldrh	r2, [r7, #24]
 800edfe:	88bb      	ldrh	r3, [r7, #4]
 800ee00:	3303      	adds	r3, #3
 800ee02:	f023 0303 	bic.w	r3, r3, #3
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d306      	bcc.n	800ee18 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ee0a:	8afa      	ldrh	r2, [r7, #22]
 800ee0c:	88bb      	ldrh	r3, [r7, #4]
 800ee0e:	3303      	adds	r3, #3
 800ee10:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d201      	bcs.n	800ee1c <pbuf_alloc+0x160>
        return NULL;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	e035      	b.n	800ee88 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ee1c:	8afb      	ldrh	r3, [r7, #22]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7ff f9b8 	bl	800e194 <mem_malloc>
 800ee24:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ee26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d101      	bne.n	800ee30 <pbuf_alloc+0x174>
        return NULL;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e02b      	b.n	800ee88 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ee30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee32:	3310      	adds	r3, #16
 800ee34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee36:	4413      	add	r3, r2
 800ee38:	3303      	adds	r3, #3
 800ee3a:	f023 0303 	bic.w	r3, r3, #3
 800ee3e:	4618      	mov	r0, r3
 800ee40:	88b9      	ldrh	r1, [r7, #4]
 800ee42:	88ba      	ldrh	r2, [r7, #4]
 800ee44:	2300      	movs	r3, #0
 800ee46:	9301      	str	r3, [sp, #4]
 800ee48:	887b      	ldrh	r3, [r7, #2]
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	4601      	mov	r1, r0
 800ee50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee52:	f7ff ff09 	bl	800ec68 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	f003 0303 	and.w	r3, r3, #3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d010      	beq.n	800ee84 <pbuf_alloc+0x1c8>
 800ee62:	4b0b      	ldr	r3, [pc, #44]	; (800ee90 <pbuf_alloc+0x1d4>)
 800ee64:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ee68:	490d      	ldr	r1, [pc, #52]	; (800eea0 <pbuf_alloc+0x1e4>)
 800ee6a:	480b      	ldr	r0, [pc, #44]	; (800ee98 <pbuf_alloc+0x1dc>)
 800ee6c:	f00c f9f6 	bl	801b25c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ee70:	e008      	b.n	800ee84 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ee72:	4b07      	ldr	r3, [pc, #28]	; (800ee90 <pbuf_alloc+0x1d4>)
 800ee74:	f240 1227 	movw	r2, #295	; 0x127
 800ee78:	490a      	ldr	r1, [pc, #40]	; (800eea4 <pbuf_alloc+0x1e8>)
 800ee7a:	4807      	ldr	r0, [pc, #28]	; (800ee98 <pbuf_alloc+0x1dc>)
 800ee7c:	f00c f9ee 	bl	801b25c <iprintf>
      return NULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	e001      	b.n	800ee88 <pbuf_alloc+0x1cc>
      break;
 800ee84:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ee86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3728      	adds	r7, #40	; 0x28
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	0801d698 	.word	0x0801d698
 800ee94:	0801d6c8 	.word	0x0801d6c8
 800ee98:	0801d6f8 	.word	0x0801d6f8
 800ee9c:	0801d720 	.word	0x0801d720
 800eea0:	0801d754 	.word	0x0801d754
 800eea4:	0801d780 	.word	0x0801d780

0800eea8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af02      	add	r7, sp, #8
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	807b      	strh	r3, [r7, #2]
 800eeb4:	4613      	mov	r3, r2
 800eeb6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800eeb8:	883b      	ldrh	r3, [r7, #0]
 800eeba:	2b41      	cmp	r3, #65	; 0x41
 800eebc:	d009      	beq.n	800eed2 <pbuf_alloc_reference+0x2a>
 800eebe:	883b      	ldrh	r3, [r7, #0]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d006      	beq.n	800eed2 <pbuf_alloc_reference+0x2a>
 800eec4:	4b0f      	ldr	r3, [pc, #60]	; (800ef04 <pbuf_alloc_reference+0x5c>)
 800eec6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800eeca:	490f      	ldr	r1, [pc, #60]	; (800ef08 <pbuf_alloc_reference+0x60>)
 800eecc:	480f      	ldr	r0, [pc, #60]	; (800ef0c <pbuf_alloc_reference+0x64>)
 800eece:	f00c f9c5 	bl	801b25c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800eed2:	200b      	movs	r0, #11
 800eed4:	f7ff fae0 	bl	800e498 <memp_malloc>
 800eed8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d101      	bne.n	800eee4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800eee0:	2300      	movs	r3, #0
 800eee2:	e00b      	b.n	800eefc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800eee4:	8879      	ldrh	r1, [r7, #2]
 800eee6:	887a      	ldrh	r2, [r7, #2]
 800eee8:	2300      	movs	r3, #0
 800eeea:	9301      	str	r3, [sp, #4]
 800eeec:	883b      	ldrh	r3, [r7, #0]
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	460b      	mov	r3, r1
 800eef2:	6879      	ldr	r1, [r7, #4]
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f7ff feb7 	bl	800ec68 <pbuf_init_alloced_pbuf>
  return p;
 800eefa:	68fb      	ldr	r3, [r7, #12]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	0801d698 	.word	0x0801d698
 800ef08:	0801d79c 	.word	0x0801d79c
 800ef0c:	0801d6f8 	.word	0x0801d6f8

0800ef10 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b088      	sub	sp, #32
 800ef14:	af02      	add	r7, sp, #8
 800ef16:	607b      	str	r3, [r7, #4]
 800ef18:	4603      	mov	r3, r0
 800ef1a:	73fb      	strb	r3, [r7, #15]
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	81bb      	strh	r3, [r7, #12]
 800ef20:	4613      	mov	r3, r2
 800ef22:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ef24:	7bfb      	ldrb	r3, [r7, #15]
 800ef26:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ef28:	8a7b      	ldrh	r3, [r7, #18]
 800ef2a:	3303      	adds	r3, #3
 800ef2c:	f023 0203 	bic.w	r2, r3, #3
 800ef30:	89bb      	ldrh	r3, [r7, #12]
 800ef32:	441a      	add	r2, r3
 800ef34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d901      	bls.n	800ef3e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	e018      	b.n	800ef70 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ef3e:	6a3b      	ldr	r3, [r7, #32]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d007      	beq.n	800ef54 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ef44:	8a7b      	ldrh	r3, [r7, #18]
 800ef46:	3303      	adds	r3, #3
 800ef48:	f023 0303 	bic.w	r3, r3, #3
 800ef4c:	6a3a      	ldr	r2, [r7, #32]
 800ef4e:	4413      	add	r3, r2
 800ef50:	617b      	str	r3, [r7, #20]
 800ef52:	e001      	b.n	800ef58 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ef54:	2300      	movs	r3, #0
 800ef56:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	89b9      	ldrh	r1, [r7, #12]
 800ef5c:	89ba      	ldrh	r2, [r7, #12]
 800ef5e:	2302      	movs	r3, #2
 800ef60:	9301      	str	r3, [sp, #4]
 800ef62:	897b      	ldrh	r3, [r7, #10]
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	460b      	mov	r3, r1
 800ef68:	6979      	ldr	r1, [r7, #20]
 800ef6a:	f7ff fe7d 	bl	800ec68 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ef6e:	687b      	ldr	r3, [r7, #4]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3718      	adds	r7, #24
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
 800ef80:	460b      	mov	r3, r1
 800ef82:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d106      	bne.n	800ef98 <pbuf_realloc+0x20>
 800ef8a:	4b3a      	ldr	r3, [pc, #232]	; (800f074 <pbuf_realloc+0xfc>)
 800ef8c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ef90:	4939      	ldr	r1, [pc, #228]	; (800f078 <pbuf_realloc+0x100>)
 800ef92:	483a      	ldr	r0, [pc, #232]	; (800f07c <pbuf_realloc+0x104>)
 800ef94:	f00c f962 	bl	801b25c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	891b      	ldrh	r3, [r3, #8]
 800ef9c:	887a      	ldrh	r2, [r7, #2]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d263      	bcs.n	800f06a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	891a      	ldrh	r2, [r3, #8]
 800efa6:	887b      	ldrh	r3, [r7, #2]
 800efa8:	1ad3      	subs	r3, r2, r3
 800efaa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800efac:	887b      	ldrh	r3, [r7, #2]
 800efae:	817b      	strh	r3, [r7, #10]
  q = p;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800efb4:	e018      	b.n	800efe8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	895b      	ldrh	r3, [r3, #10]
 800efba:	897a      	ldrh	r2, [r7, #10]
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	891a      	ldrh	r2, [r3, #8]
 800efc4:	893b      	ldrh	r3, [r7, #8]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	b29a      	uxth	r2, r3
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <pbuf_realloc+0x70>
 800efda:	4b26      	ldr	r3, [pc, #152]	; (800f074 <pbuf_realloc+0xfc>)
 800efdc:	f240 12af 	movw	r2, #431	; 0x1af
 800efe0:	4927      	ldr	r1, [pc, #156]	; (800f080 <pbuf_realloc+0x108>)
 800efe2:	4826      	ldr	r0, [pc, #152]	; (800f07c <pbuf_realloc+0x104>)
 800efe4:	f00c f93a 	bl	801b25c <iprintf>
  while (rem_len > q->len) {
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	895b      	ldrh	r3, [r3, #10]
 800efec:	897a      	ldrh	r2, [r7, #10]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d8e1      	bhi.n	800efb6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	7b1b      	ldrb	r3, [r3, #12]
 800eff6:	f003 030f 	and.w	r3, r3, #15
 800effa:	2b00      	cmp	r3, #0
 800effc:	d121      	bne.n	800f042 <pbuf_realloc+0xca>
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	895b      	ldrh	r3, [r3, #10]
 800f002:	897a      	ldrh	r2, [r7, #10]
 800f004:	429a      	cmp	r2, r3
 800f006:	d01c      	beq.n	800f042 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	7b5b      	ldrb	r3, [r3, #13]
 800f00c:	f003 0302 	and.w	r3, r3, #2
 800f010:	2b00      	cmp	r3, #0
 800f012:	d116      	bne.n	800f042 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	685a      	ldr	r2, [r3, #4]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	1ad3      	subs	r3, r2, r3
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	897b      	ldrh	r3, [r7, #10]
 800f020:	4413      	add	r3, r2
 800f022:	b29b      	uxth	r3, r3
 800f024:	4619      	mov	r1, r3
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f7fe ffaa 	bl	800df80 <mem_trim>
 800f02c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d106      	bne.n	800f042 <pbuf_realloc+0xca>
 800f034:	4b0f      	ldr	r3, [pc, #60]	; (800f074 <pbuf_realloc+0xfc>)
 800f036:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f03a:	4912      	ldr	r1, [pc, #72]	; (800f084 <pbuf_realloc+0x10c>)
 800f03c:	480f      	ldr	r0, [pc, #60]	; (800f07c <pbuf_realloc+0x104>)
 800f03e:	f00c f90d 	bl	801b25c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	897a      	ldrh	r2, [r7, #10]
 800f046:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	895a      	ldrh	r2, [r3, #10]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d004      	beq.n	800f062 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 f911 	bl	800f284 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	2200      	movs	r2, #0
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	e000      	b.n	800f06c <pbuf_realloc+0xf4>
    return;
 800f06a:	bf00      	nop

}
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	0801d698 	.word	0x0801d698
 800f078:	0801d7b0 	.word	0x0801d7b0
 800f07c:	0801d6f8 	.word	0x0801d6f8
 800f080:	0801d7c8 	.word	0x0801d7c8
 800f084:	0801d7e0 	.word	0x0801d7e0

0800f088 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b086      	sub	sp, #24
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	4613      	mov	r3, r2
 800f094:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d106      	bne.n	800f0aa <pbuf_add_header_impl+0x22>
 800f09c:	4b2b      	ldr	r3, [pc, #172]	; (800f14c <pbuf_add_header_impl+0xc4>)
 800f09e:	f240 12df 	movw	r2, #479	; 0x1df
 800f0a2:	492b      	ldr	r1, [pc, #172]	; (800f150 <pbuf_add_header_impl+0xc8>)
 800f0a4:	482b      	ldr	r0, [pc, #172]	; (800f154 <pbuf_add_header_impl+0xcc>)
 800f0a6:	f00c f8d9 	bl	801b25c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <pbuf_add_header_impl+0x30>
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0b6:	d301      	bcc.n	800f0bc <pbuf_add_header_impl+0x34>
    return 1;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	e043      	b.n	800f144 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <pbuf_add_header_impl+0x3e>
    return 0;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e03e      	b.n	800f144 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	891a      	ldrh	r2, [r3, #8]
 800f0ce:	8a7b      	ldrh	r3, [r7, #18]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	8a7a      	ldrh	r2, [r7, #18]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d901      	bls.n	800f0de <pbuf_add_header_impl+0x56>
    return 1;
 800f0da:	2301      	movs	r3, #1
 800f0dc:	e032      	b.n	800f144 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	7b1b      	ldrb	r3, [r3, #12]
 800f0e2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f0e4:	8a3b      	ldrh	r3, [r7, #16]
 800f0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00c      	beq.n	800f108 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	685a      	ldr	r2, [r3, #4]
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	425b      	negs	r3, r3
 800f0f6:	4413      	add	r3, r2
 800f0f8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	3310      	adds	r3, #16
 800f0fe:	697a      	ldr	r2, [r7, #20]
 800f100:	429a      	cmp	r2, r3
 800f102:	d20d      	bcs.n	800f120 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f104:	2301      	movs	r3, #1
 800f106:	e01d      	b.n	800f144 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f108:	79fb      	ldrb	r3, [r7, #7]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d006      	beq.n	800f11c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	685a      	ldr	r2, [r3, #4]
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	425b      	negs	r3, r3
 800f116:	4413      	add	r3, r2
 800f118:	617b      	str	r3, [r7, #20]
 800f11a:	e001      	b.n	800f120 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f11c:	2301      	movs	r3, #1
 800f11e:	e011      	b.n	800f144 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	697a      	ldr	r2, [r7, #20]
 800f124:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	895a      	ldrh	r2, [r3, #10]
 800f12a:	8a7b      	ldrh	r3, [r7, #18]
 800f12c:	4413      	add	r3, r2
 800f12e:	b29a      	uxth	r2, r3
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	891a      	ldrh	r2, [r3, #8]
 800f138:	8a7b      	ldrh	r3, [r7, #18]
 800f13a:	4413      	add	r3, r2
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	811a      	strh	r2, [r3, #8]


  return 0;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3718      	adds	r7, #24
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	0801d698 	.word	0x0801d698
 800f150:	0801d7fc 	.word	0x0801d7fc
 800f154:	0801d6f8 	.word	0x0801d6f8

0800f158 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f162:	2200      	movs	r2, #0
 800f164:	6839      	ldr	r1, [r7, #0]
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f7ff ff8e 	bl	800f088 <pbuf_add_header_impl>
 800f16c:	4603      	mov	r3, r0
}
 800f16e:	4618      	mov	r0, r3
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
	...

0800f178 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d106      	bne.n	800f196 <pbuf_remove_header+0x1e>
 800f188:	4b20      	ldr	r3, [pc, #128]	; (800f20c <pbuf_remove_header+0x94>)
 800f18a:	f240 224b 	movw	r2, #587	; 0x24b
 800f18e:	4920      	ldr	r1, [pc, #128]	; (800f210 <pbuf_remove_header+0x98>)
 800f190:	4820      	ldr	r0, [pc, #128]	; (800f214 <pbuf_remove_header+0x9c>)
 800f192:	f00c f863 	bl	801b25c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d003      	beq.n	800f1a4 <pbuf_remove_header+0x2c>
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1a2:	d301      	bcc.n	800f1a8 <pbuf_remove_header+0x30>
    return 1;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e02c      	b.n	800f202 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d101      	bne.n	800f1b2 <pbuf_remove_header+0x3a>
    return 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e027      	b.n	800f202 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	895b      	ldrh	r3, [r3, #10]
 800f1ba:	89fa      	ldrh	r2, [r7, #14]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d908      	bls.n	800f1d2 <pbuf_remove_header+0x5a>
 800f1c0:	4b12      	ldr	r3, [pc, #72]	; (800f20c <pbuf_remove_header+0x94>)
 800f1c2:	f240 2255 	movw	r2, #597	; 0x255
 800f1c6:	4914      	ldr	r1, [pc, #80]	; (800f218 <pbuf_remove_header+0xa0>)
 800f1c8:	4812      	ldr	r0, [pc, #72]	; (800f214 <pbuf_remove_header+0x9c>)
 800f1ca:	f00c f847 	bl	801b25c <iprintf>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e017      	b.n	800f202 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685a      	ldr	r2, [r3, #4]
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	441a      	add	r2, r3
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	895a      	ldrh	r2, [r3, #10]
 800f1e8:	89fb      	ldrh	r3, [r7, #14]
 800f1ea:	1ad3      	subs	r3, r2, r3
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	891a      	ldrh	r2, [r3, #8]
 800f1f6:	89fb      	ldrh	r3, [r7, #14]
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	0801d698 	.word	0x0801d698
 800f210:	0801d7fc 	.word	0x0801d7fc
 800f214:	0801d6f8 	.word	0x0801d6f8
 800f218:	0801d808 	.word	0x0801d808

0800f21c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b082      	sub	sp, #8
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	460b      	mov	r3, r1
 800f226:	807b      	strh	r3, [r7, #2]
 800f228:	4613      	mov	r3, r2
 800f22a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f22c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f230:	2b00      	cmp	r3, #0
 800f232:	da08      	bge.n	800f246 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f234:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f238:	425b      	negs	r3, r3
 800f23a:	4619      	mov	r1, r3
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7ff ff9b 	bl	800f178 <pbuf_remove_header>
 800f242:	4603      	mov	r3, r0
 800f244:	e007      	b.n	800f256 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f246:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f24a:	787a      	ldrb	r2, [r7, #1]
 800f24c:	4619      	mov	r1, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7ff ff1a 	bl	800f088 <pbuf_add_header_impl>
 800f254:	4603      	mov	r3, r0
  }
}
 800f256:	4618      	mov	r0, r3
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b082      	sub	sp, #8
 800f262:	af00      	add	r7, sp, #0
 800f264:	6078      	str	r0, [r7, #4]
 800f266:	460b      	mov	r3, r1
 800f268:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f26a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f26e:	2201      	movs	r2, #1
 800f270:	4619      	mov	r1, r3
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7ff ffd2 	bl	800f21c <pbuf_header_impl>
 800f278:	4603      	mov	r3, r0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3708      	adds	r7, #8
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
	...

0800f284 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b088      	sub	sp, #32
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d10b      	bne.n	800f2aa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d106      	bne.n	800f2a6 <pbuf_free+0x22>
 800f298:	4b3b      	ldr	r3, [pc, #236]	; (800f388 <pbuf_free+0x104>)
 800f29a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f29e:	493b      	ldr	r1, [pc, #236]	; (800f38c <pbuf_free+0x108>)
 800f2a0:	483b      	ldr	r0, [pc, #236]	; (800f390 <pbuf_free+0x10c>)
 800f2a2:	f00b ffdb 	bl	801b25c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	e069      	b.n	800f37e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f2ae:	e062      	b.n	800f376 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f2b0:	f009 fd56 	bl	8018d60 <sys_arch_protect>
 800f2b4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	7b9b      	ldrb	r3, [r3, #14]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d106      	bne.n	800f2cc <pbuf_free+0x48>
 800f2be:	4b32      	ldr	r3, [pc, #200]	; (800f388 <pbuf_free+0x104>)
 800f2c0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f2c4:	4933      	ldr	r1, [pc, #204]	; (800f394 <pbuf_free+0x110>)
 800f2c6:	4832      	ldr	r0, [pc, #200]	; (800f390 <pbuf_free+0x10c>)
 800f2c8:	f00b ffc8 	bl	801b25c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	7b9b      	ldrb	r3, [r3, #14]
 800f2d0:	3b01      	subs	r3, #1
 800f2d2:	b2da      	uxtb	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	739a      	strb	r2, [r3, #14]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	7b9b      	ldrb	r3, [r3, #14]
 800f2dc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f2de:	69b8      	ldr	r0, [r7, #24]
 800f2e0:	f009 fd4c 	bl	8018d7c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f2e4:	7dfb      	ldrb	r3, [r7, #23]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d143      	bne.n	800f372 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	7b1b      	ldrb	r3, [r3, #12]
 800f2f4:	f003 030f 	and.w	r3, r3, #15
 800f2f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	7b5b      	ldrb	r3, [r3, #13]
 800f2fe:	f003 0302 	and.w	r3, r3, #2
 800f302:	2b00      	cmp	r3, #0
 800f304:	d011      	beq.n	800f32a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	691b      	ldr	r3, [r3, #16]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d106      	bne.n	800f320 <pbuf_free+0x9c>
 800f312:	4b1d      	ldr	r3, [pc, #116]	; (800f388 <pbuf_free+0x104>)
 800f314:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f318:	491f      	ldr	r1, [pc, #124]	; (800f398 <pbuf_free+0x114>)
 800f31a:	481d      	ldr	r0, [pc, #116]	; (800f390 <pbuf_free+0x10c>)
 800f31c:	f00b ff9e 	bl	801b25c <iprintf>
        pc->custom_free_function(p);
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	691b      	ldr	r3, [r3, #16]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	4798      	blx	r3
 800f328:	e01d      	b.n	800f366 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f32a:	7bfb      	ldrb	r3, [r7, #15]
 800f32c:	2b02      	cmp	r3, #2
 800f32e:	d104      	bne.n	800f33a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f330:	6879      	ldr	r1, [r7, #4]
 800f332:	200c      	movs	r0, #12
 800f334:	f7ff f902 	bl	800e53c <memp_free>
 800f338:	e015      	b.n	800f366 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f33a:	7bfb      	ldrb	r3, [r7, #15]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d104      	bne.n	800f34a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f340:	6879      	ldr	r1, [r7, #4]
 800f342:	200b      	movs	r0, #11
 800f344:	f7ff f8fa 	bl	800e53c <memp_free>
 800f348:	e00d      	b.n	800f366 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f34a:	7bfb      	ldrb	r3, [r7, #15]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d103      	bne.n	800f358 <pbuf_free+0xd4>
          mem_free(p);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7fe fd85 	bl	800de60 <mem_free>
 800f356:	e006      	b.n	800f366 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f358:	4b0b      	ldr	r3, [pc, #44]	; (800f388 <pbuf_free+0x104>)
 800f35a:	f240 320f 	movw	r2, #783	; 0x30f
 800f35e:	490f      	ldr	r1, [pc, #60]	; (800f39c <pbuf_free+0x118>)
 800f360:	480b      	ldr	r0, [pc, #44]	; (800f390 <pbuf_free+0x10c>)
 800f362:	f00b ff7b 	bl	801b25c <iprintf>
        }
      }
      count++;
 800f366:	7ffb      	ldrb	r3, [r7, #31]
 800f368:	3301      	adds	r3, #1
 800f36a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	607b      	str	r3, [r7, #4]
 800f370:	e001      	b.n	800f376 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f372:	2300      	movs	r3, #0
 800f374:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d199      	bne.n	800f2b0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f37c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3720      	adds	r7, #32
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	0801d698 	.word	0x0801d698
 800f38c:	0801d7fc 	.word	0x0801d7fc
 800f390:	0801d6f8 	.word	0x0801d6f8
 800f394:	0801d828 	.word	0x0801d828
 800f398:	0801d840 	.word	0x0801d840
 800f39c:	0801d864 	.word	0x0801d864

0800f3a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b085      	sub	sp, #20
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f3ac:	e005      	b.n	800f3ba <pbuf_clen+0x1a>
    ++len;
 800f3ae:	89fb      	ldrh	r3, [r7, #14]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d1f6      	bne.n	800f3ae <pbuf_clen+0xe>
  }
  return len;
 800f3c0:	89fb      	ldrh	r3, [r7, #14]
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3714      	adds	r7, #20
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b084      	sub	sp, #16
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d016      	beq.n	800f40c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f3de:	f009 fcbf 	bl	8018d60 <sys_arch_protect>
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	7b9b      	ldrb	r3, [r3, #14]
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	739a      	strb	r2, [r3, #14]
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f009 fcc3 	bl	8018d7c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	7b9b      	ldrb	r3, [r3, #14]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d106      	bne.n	800f40c <pbuf_ref+0x3c>
 800f3fe:	4b05      	ldr	r3, [pc, #20]	; (800f414 <pbuf_ref+0x44>)
 800f400:	f240 3242 	movw	r2, #834	; 0x342
 800f404:	4904      	ldr	r1, [pc, #16]	; (800f418 <pbuf_ref+0x48>)
 800f406:	4805      	ldr	r0, [pc, #20]	; (800f41c <pbuf_ref+0x4c>)
 800f408:	f00b ff28 	bl	801b25c <iprintf>
  }
}
 800f40c:	bf00      	nop
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	0801d698 	.word	0x0801d698
 800f418:	0801d878 	.word	0x0801d878
 800f41c:	0801d6f8 	.word	0x0801d6f8

0800f420 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b084      	sub	sp, #16
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d002      	beq.n	800f436 <pbuf_cat+0x16>
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d107      	bne.n	800f446 <pbuf_cat+0x26>
 800f436:	4b20      	ldr	r3, [pc, #128]	; (800f4b8 <pbuf_cat+0x98>)
 800f438:	f240 3259 	movw	r2, #857	; 0x359
 800f43c:	491f      	ldr	r1, [pc, #124]	; (800f4bc <pbuf_cat+0x9c>)
 800f43e:	4820      	ldr	r0, [pc, #128]	; (800f4c0 <pbuf_cat+0xa0>)
 800f440:	f00b ff0c 	bl	801b25c <iprintf>
 800f444:	e034      	b.n	800f4b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	60fb      	str	r3, [r7, #12]
 800f44a:	e00a      	b.n	800f462 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	891a      	ldrh	r2, [r3, #8]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	891b      	ldrh	r3, [r3, #8]
 800f454:	4413      	add	r3, r2
 800f456:	b29a      	uxth	r2, r3
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	60fb      	str	r3, [r7, #12]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1f0      	bne.n	800f44c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	891a      	ldrh	r2, [r3, #8]
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	895b      	ldrh	r3, [r3, #10]
 800f472:	429a      	cmp	r2, r3
 800f474:	d006      	beq.n	800f484 <pbuf_cat+0x64>
 800f476:	4b10      	ldr	r3, [pc, #64]	; (800f4b8 <pbuf_cat+0x98>)
 800f478:	f240 3262 	movw	r2, #866	; 0x362
 800f47c:	4911      	ldr	r1, [pc, #68]	; (800f4c4 <pbuf_cat+0xa4>)
 800f47e:	4810      	ldr	r0, [pc, #64]	; (800f4c0 <pbuf_cat+0xa0>)
 800f480:	f00b feec 	bl	801b25c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d006      	beq.n	800f49a <pbuf_cat+0x7a>
 800f48c:	4b0a      	ldr	r3, [pc, #40]	; (800f4b8 <pbuf_cat+0x98>)
 800f48e:	f240 3263 	movw	r2, #867	; 0x363
 800f492:	490d      	ldr	r1, [pc, #52]	; (800f4c8 <pbuf_cat+0xa8>)
 800f494:	480a      	ldr	r0, [pc, #40]	; (800f4c0 <pbuf_cat+0xa0>)
 800f496:	f00b fee1 	bl	801b25c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	891a      	ldrh	r2, [r3, #8]
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	891b      	ldrh	r3, [r3, #8]
 800f4a2:	4413      	add	r3, r2
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	683a      	ldr	r2, [r7, #0]
 800f4ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f4b0:	3710      	adds	r7, #16
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	0801d698 	.word	0x0801d698
 800f4bc:	0801d88c 	.word	0x0801d88c
 800f4c0:	0801d6f8 	.word	0x0801d6f8
 800f4c4:	0801d8c4 	.word	0x0801d8c4
 800f4c8:	0801d8f4 	.word	0x0801d8f4

0800f4cc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f4d6:	6839      	ldr	r1, [r7, #0]
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f7ff ffa1 	bl	800f420 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f4de:	6838      	ldr	r0, [r7, #0]
 800f4e0:	f7ff ff76 	bl	800f3d0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f4e4:	bf00      	nop
 800f4e6:	3708      	adds	r7, #8
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b086      	sub	sp, #24
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	617b      	str	r3, [r7, #20]
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d008      	beq.n	800f516 <pbuf_copy+0x2a>
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d005      	beq.n	800f516 <pbuf_copy+0x2a>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	891a      	ldrh	r2, [r3, #8]
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	891b      	ldrh	r3, [r3, #8]
 800f512:	429a      	cmp	r2, r3
 800f514:	d209      	bcs.n	800f52a <pbuf_copy+0x3e>
 800f516:	4b57      	ldr	r3, [pc, #348]	; (800f674 <pbuf_copy+0x188>)
 800f518:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f51c:	4956      	ldr	r1, [pc, #344]	; (800f678 <pbuf_copy+0x18c>)
 800f51e:	4857      	ldr	r0, [pc, #348]	; (800f67c <pbuf_copy+0x190>)
 800f520:	f00b fe9c 	bl	801b25c <iprintf>
 800f524:	f06f 030f 	mvn.w	r3, #15
 800f528:	e09f      	b.n	800f66a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	895b      	ldrh	r3, [r3, #10]
 800f52e:	461a      	mov	r2, r3
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	1ad2      	subs	r2, r2, r3
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	895b      	ldrh	r3, [r3, #10]
 800f538:	4619      	mov	r1, r3
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	1acb      	subs	r3, r1, r3
 800f53e:	429a      	cmp	r2, r3
 800f540:	d306      	bcc.n	800f550 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	895b      	ldrh	r3, [r3, #10]
 800f546:	461a      	mov	r2, r3
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	1ad3      	subs	r3, r2, r3
 800f54c:	60fb      	str	r3, [r7, #12]
 800f54e:	e005      	b.n	800f55c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	895b      	ldrh	r3, [r3, #10]
 800f554:	461a      	mov	r2, r3
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	1ad3      	subs	r3, r2, r3
 800f55a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685a      	ldr	r2, [r3, #4]
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	18d0      	adds	r0, r2, r3
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	685a      	ldr	r2, [r3, #4]
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	4413      	add	r3, r2
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	4619      	mov	r1, r3
 800f570:	f00b fdb4 	bl	801b0dc <memcpy>
    offset_to += len;
 800f574:	697a      	ldr	r2, [r7, #20]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	4413      	add	r3, r2
 800f57a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f57c:	693a      	ldr	r2, [r7, #16]
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	4413      	add	r3, r2
 800f582:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	895b      	ldrh	r3, [r3, #10]
 800f588:	461a      	mov	r2, r3
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d906      	bls.n	800f59e <pbuf_copy+0xb2>
 800f590:	4b38      	ldr	r3, [pc, #224]	; (800f674 <pbuf_copy+0x188>)
 800f592:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f596:	493a      	ldr	r1, [pc, #232]	; (800f680 <pbuf_copy+0x194>)
 800f598:	4838      	ldr	r0, [pc, #224]	; (800f67c <pbuf_copy+0x190>)
 800f59a:	f00b fe5f 	bl	801b25c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	895b      	ldrh	r3, [r3, #10]
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	4293      	cmp	r3, r2
 800f5a8:	d906      	bls.n	800f5b8 <pbuf_copy+0xcc>
 800f5aa:	4b32      	ldr	r3, [pc, #200]	; (800f674 <pbuf_copy+0x188>)
 800f5ac:	f240 32da 	movw	r2, #986	; 0x3da
 800f5b0:	4934      	ldr	r1, [pc, #208]	; (800f684 <pbuf_copy+0x198>)
 800f5b2:	4832      	ldr	r0, [pc, #200]	; (800f67c <pbuf_copy+0x190>)
 800f5b4:	f00b fe52 	bl	801b25c <iprintf>
    if (offset_from >= p_from->len) {
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	895b      	ldrh	r3, [r3, #10]
 800f5bc:	461a      	mov	r2, r3
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d304      	bcc.n	800f5ce <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	895b      	ldrh	r3, [r3, #10]
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d114      	bne.n	800f604 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d10c      	bne.n	800f604 <pbuf_copy+0x118>
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d009      	beq.n	800f604 <pbuf_copy+0x118>
 800f5f0:	4b20      	ldr	r3, [pc, #128]	; (800f674 <pbuf_copy+0x188>)
 800f5f2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f5f6:	4924      	ldr	r1, [pc, #144]	; (800f688 <pbuf_copy+0x19c>)
 800f5f8:	4820      	ldr	r0, [pc, #128]	; (800f67c <pbuf_copy+0x190>)
 800f5fa:	f00b fe2f 	bl	801b25c <iprintf>
 800f5fe:	f06f 030f 	mvn.w	r3, #15
 800f602:	e032      	b.n	800f66a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d013      	beq.n	800f632 <pbuf_copy+0x146>
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	895a      	ldrh	r2, [r3, #10]
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	891b      	ldrh	r3, [r3, #8]
 800f612:	429a      	cmp	r2, r3
 800f614:	d10d      	bne.n	800f632 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d009      	beq.n	800f632 <pbuf_copy+0x146>
 800f61e:	4b15      	ldr	r3, [pc, #84]	; (800f674 <pbuf_copy+0x188>)
 800f620:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f624:	4919      	ldr	r1, [pc, #100]	; (800f68c <pbuf_copy+0x1a0>)
 800f626:	4815      	ldr	r0, [pc, #84]	; (800f67c <pbuf_copy+0x190>)
 800f628:	f00b fe18 	bl	801b25c <iprintf>
 800f62c:	f06f 0305 	mvn.w	r3, #5
 800f630:	e01b      	b.n	800f66a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d013      	beq.n	800f660 <pbuf_copy+0x174>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	895a      	ldrh	r2, [r3, #10]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	891b      	ldrh	r3, [r3, #8]
 800f640:	429a      	cmp	r2, r3
 800f642:	d10d      	bne.n	800f660 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d009      	beq.n	800f660 <pbuf_copy+0x174>
 800f64c:	4b09      	ldr	r3, [pc, #36]	; (800f674 <pbuf_copy+0x188>)
 800f64e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f652:	490e      	ldr	r1, [pc, #56]	; (800f68c <pbuf_copy+0x1a0>)
 800f654:	4809      	ldr	r0, [pc, #36]	; (800f67c <pbuf_copy+0x190>)
 800f656:	f00b fe01 	bl	801b25c <iprintf>
 800f65a:	f06f 0305 	mvn.w	r3, #5
 800f65e:	e004      	b.n	800f66a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	f47f af61 	bne.w	800f52a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f668:	2300      	movs	r3, #0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3718      	adds	r7, #24
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	0801d698 	.word	0x0801d698
 800f678:	0801d940 	.word	0x0801d940
 800f67c:	0801d6f8 	.word	0x0801d6f8
 800f680:	0801d970 	.word	0x0801d970
 800f684:	0801d988 	.word	0x0801d988
 800f688:	0801d9a4 	.word	0x0801d9a4
 800f68c:	0801d9b4 	.word	0x0801d9b4

0800f690 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b088      	sub	sp, #32
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	4611      	mov	r1, r2
 800f69c:	461a      	mov	r2, r3
 800f69e:	460b      	mov	r3, r1
 800f6a0:	80fb      	strh	r3, [r7, #6]
 800f6a2:	4613      	mov	r3, r2
 800f6a4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d108      	bne.n	800f6c6 <pbuf_copy_partial+0x36>
 800f6b4:	4b2b      	ldr	r3, [pc, #172]	; (800f764 <pbuf_copy_partial+0xd4>)
 800f6b6:	f240 420a 	movw	r2, #1034	; 0x40a
 800f6ba:	492b      	ldr	r1, [pc, #172]	; (800f768 <pbuf_copy_partial+0xd8>)
 800f6bc:	482b      	ldr	r0, [pc, #172]	; (800f76c <pbuf_copy_partial+0xdc>)
 800f6be:	f00b fdcd 	bl	801b25c <iprintf>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e04a      	b.n	800f75c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d108      	bne.n	800f6de <pbuf_copy_partial+0x4e>
 800f6cc:	4b25      	ldr	r3, [pc, #148]	; (800f764 <pbuf_copy_partial+0xd4>)
 800f6ce:	f240 420b 	movw	r2, #1035	; 0x40b
 800f6d2:	4927      	ldr	r1, [pc, #156]	; (800f770 <pbuf_copy_partial+0xe0>)
 800f6d4:	4825      	ldr	r0, [pc, #148]	; (800f76c <pbuf_copy_partial+0xdc>)
 800f6d6:	f00b fdc1 	bl	801b25c <iprintf>
 800f6da:	2300      	movs	r3, #0
 800f6dc:	e03e      	b.n	800f75c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	61fb      	str	r3, [r7, #28]
 800f6e2:	e034      	b.n	800f74e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f6e4:	88bb      	ldrh	r3, [r7, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00a      	beq.n	800f700 <pbuf_copy_partial+0x70>
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	895b      	ldrh	r3, [r3, #10]
 800f6ee:	88ba      	ldrh	r2, [r7, #4]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d305      	bcc.n	800f700 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	895b      	ldrh	r3, [r3, #10]
 800f6f8:	88ba      	ldrh	r2, [r7, #4]
 800f6fa:	1ad3      	subs	r3, r2, r3
 800f6fc:	80bb      	strh	r3, [r7, #4]
 800f6fe:	e023      	b.n	800f748 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	895a      	ldrh	r2, [r3, #10]
 800f704:	88bb      	ldrh	r3, [r7, #4]
 800f706:	1ad3      	subs	r3, r2, r3
 800f708:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f70a:	8b3a      	ldrh	r2, [r7, #24]
 800f70c:	88fb      	ldrh	r3, [r7, #6]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d901      	bls.n	800f716 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f712:	88fb      	ldrh	r3, [r7, #6]
 800f714:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f716:	8b7b      	ldrh	r3, [r7, #26]
 800f718:	68ba      	ldr	r2, [r7, #8]
 800f71a:	18d0      	adds	r0, r2, r3
 800f71c:	69fb      	ldr	r3, [r7, #28]
 800f71e:	685a      	ldr	r2, [r3, #4]
 800f720:	88bb      	ldrh	r3, [r7, #4]
 800f722:	4413      	add	r3, r2
 800f724:	8b3a      	ldrh	r2, [r7, #24]
 800f726:	4619      	mov	r1, r3
 800f728:	f00b fcd8 	bl	801b0dc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f72c:	8afa      	ldrh	r2, [r7, #22]
 800f72e:	8b3b      	ldrh	r3, [r7, #24]
 800f730:	4413      	add	r3, r2
 800f732:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f734:	8b7a      	ldrh	r2, [r7, #26]
 800f736:	8b3b      	ldrh	r3, [r7, #24]
 800f738:	4413      	add	r3, r2
 800f73a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f73c:	88fa      	ldrh	r2, [r7, #6]
 800f73e:	8b3b      	ldrh	r3, [r7, #24]
 800f740:	1ad3      	subs	r3, r2, r3
 800f742:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f744:	2300      	movs	r3, #0
 800f746:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	61fb      	str	r3, [r7, #28]
 800f74e:	88fb      	ldrh	r3, [r7, #6]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d002      	beq.n	800f75a <pbuf_copy_partial+0xca>
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d1c4      	bne.n	800f6e4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f75a:	8afb      	ldrh	r3, [r7, #22]
}
 800f75c:	4618      	mov	r0, r3
 800f75e:	3720      	adds	r7, #32
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}
 800f764:	0801d698 	.word	0x0801d698
 800f768:	0801d9e0 	.word	0x0801d9e0
 800f76c:	0801d6f8 	.word	0x0801d6f8
 800f770:	0801da00 	.word	0x0801da00

0800f774 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b088      	sub	sp, #32
 800f778:	af00      	add	r7, sp, #0
 800f77a:	60f8      	str	r0, [r7, #12]
 800f77c:	60b9      	str	r1, [r7, #8]
 800f77e:	4613      	mov	r3, r2
 800f780:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800f782:	88fb      	ldrh	r3, [r7, #6]
 800f784:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d109      	bne.n	800f7a4 <pbuf_take+0x30>
 800f790:	4b3a      	ldr	r3, [pc, #232]	; (800f87c <pbuf_take+0x108>)
 800f792:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800f796:	493a      	ldr	r1, [pc, #232]	; (800f880 <pbuf_take+0x10c>)
 800f798:	483a      	ldr	r0, [pc, #232]	; (800f884 <pbuf_take+0x110>)
 800f79a:	f00b fd5f 	bl	801b25c <iprintf>
 800f79e:	f06f 030f 	mvn.w	r3, #15
 800f7a2:	e067      	b.n	800f874 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d109      	bne.n	800f7be <pbuf_take+0x4a>
 800f7aa:	4b34      	ldr	r3, [pc, #208]	; (800f87c <pbuf_take+0x108>)
 800f7ac:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800f7b0:	4935      	ldr	r1, [pc, #212]	; (800f888 <pbuf_take+0x114>)
 800f7b2:	4834      	ldr	r0, [pc, #208]	; (800f884 <pbuf_take+0x110>)
 800f7b4:	f00b fd52 	bl	801b25c <iprintf>
 800f7b8:	f06f 030f 	mvn.w	r3, #15
 800f7bc:	e05a      	b.n	800f874 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	891b      	ldrh	r3, [r3, #8]
 800f7c2:	88fa      	ldrh	r2, [r7, #6]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d909      	bls.n	800f7dc <pbuf_take+0x68>
 800f7c8:	4b2c      	ldr	r3, [pc, #176]	; (800f87c <pbuf_take+0x108>)
 800f7ca:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800f7ce:	492f      	ldr	r1, [pc, #188]	; (800f88c <pbuf_take+0x118>)
 800f7d0:	482c      	ldr	r0, [pc, #176]	; (800f884 <pbuf_take+0x110>)
 800f7d2:	f00b fd43 	bl	801b25c <iprintf>
 800f7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7da:	e04b      	b.n	800f874 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d007      	beq.n	800f7f2 <pbuf_take+0x7e>
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d004      	beq.n	800f7f2 <pbuf_take+0x7e>
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	891b      	ldrh	r3, [r3, #8]
 800f7ec:	88fa      	ldrh	r2, [r7, #6]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d902      	bls.n	800f7f8 <pbuf_take+0x84>
    return ERR_ARG;
 800f7f2:	f06f 030f 	mvn.w	r3, #15
 800f7f6:	e03d      	b.n	800f874 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	61fb      	str	r3, [r7, #28]
 800f7fc:	e028      	b.n	800f850 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d106      	bne.n	800f812 <pbuf_take+0x9e>
 800f804:	4b1d      	ldr	r3, [pc, #116]	; (800f87c <pbuf_take+0x108>)
 800f806:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800f80a:	4921      	ldr	r1, [pc, #132]	; (800f890 <pbuf_take+0x11c>)
 800f80c:	481d      	ldr	r0, [pc, #116]	; (800f884 <pbuf_take+0x110>)
 800f80e:	f00b fd25 	bl	801b25c <iprintf>
    buf_copy_len = total_copy_len;
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800f816:	69fb      	ldr	r3, [r7, #28]
 800f818:	895b      	ldrh	r3, [r3, #10]
 800f81a:	461a      	mov	r2, r3
 800f81c:	69bb      	ldr	r3, [r7, #24]
 800f81e:	4293      	cmp	r3, r2
 800f820:	d902      	bls.n	800f828 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	895b      	ldrh	r3, [r3, #10]
 800f826:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	6858      	ldr	r0, [r3, #4]
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	4413      	add	r3, r2
 800f832:	69ba      	ldr	r2, [r7, #24]
 800f834:	4619      	mov	r1, r3
 800f836:	f00b fc51 	bl	801b0dc <memcpy>
    total_copy_len -= buf_copy_len;
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	69bb      	ldr	r3, [r7, #24]
 800f83e:	1ad3      	subs	r3, r2, r3
 800f840:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800f842:	693a      	ldr	r2, [r7, #16]
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	4413      	add	r3, r2
 800f848:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	61fb      	str	r3, [r7, #28]
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d1d3      	bne.n	800f7fe <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d103      	bne.n	800f864 <pbuf_take+0xf0>
 800f85c:	88fb      	ldrh	r3, [r7, #6]
 800f85e:	693a      	ldr	r2, [r7, #16]
 800f860:	429a      	cmp	r2, r3
 800f862:	d006      	beq.n	800f872 <pbuf_take+0xfe>
 800f864:	4b05      	ldr	r3, [pc, #20]	; (800f87c <pbuf_take+0x108>)
 800f866:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800f86a:	490a      	ldr	r1, [pc, #40]	; (800f894 <pbuf_take+0x120>)
 800f86c:	4805      	ldr	r0, [pc, #20]	; (800f884 <pbuf_take+0x110>)
 800f86e:	f00b fcf5 	bl	801b25c <iprintf>
  return ERR_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3720      	adds	r7, #32
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	0801d698 	.word	0x0801d698
 800f880:	0801da70 	.word	0x0801da70
 800f884:	0801d6f8 	.word	0x0801d6f8
 800f888:	0801da88 	.word	0x0801da88
 800f88c:	0801daa4 	.word	0x0801daa4
 800f890:	0801dac4 	.word	0x0801dac4
 800f894:	0801dadc 	.word	0x0801dadc

0800f898 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	4603      	mov	r3, r0
 800f8a0:	603a      	str	r2, [r7, #0]
 800f8a2:	71fb      	strb	r3, [r7, #7]
 800f8a4:	460b      	mov	r3, r1
 800f8a6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	8919      	ldrh	r1, [r3, #8]
 800f8ac:	88ba      	ldrh	r2, [r7, #4]
 800f8ae:	79fb      	ldrb	r3, [r7, #7]
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7ff fa03 	bl	800ecbc <pbuf_alloc>
 800f8b6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d101      	bne.n	800f8c2 <pbuf_clone+0x2a>
    return NULL;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	e011      	b.n	800f8e6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f7ff fe11 	bl	800f4ec <pbuf_copy>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f8ce:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d006      	beq.n	800f8e4 <pbuf_clone+0x4c>
 800f8d6:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <pbuf_clone+0x58>)
 800f8d8:	f240 5224 	movw	r2, #1316	; 0x524
 800f8dc:	4905      	ldr	r1, [pc, #20]	; (800f8f4 <pbuf_clone+0x5c>)
 800f8de:	4806      	ldr	r0, [pc, #24]	; (800f8f8 <pbuf_clone+0x60>)
 800f8e0:	f00b fcbc 	bl	801b25c <iprintf>
  return q;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	0801d698 	.word	0x0801d698
 800f8f4:	0801db0c 	.word	0x0801db0c
 800f8f8:	0801d6f8 	.word	0x0801d6f8

0800f8fc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f900:	f00b fcc4 	bl	801b28c <rand>
 800f904:	4603      	mov	r3, r0
 800f906:	b29b      	uxth	r3, r3
 800f908:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f912:	b29a      	uxth	r2, r3
 800f914:	4b01      	ldr	r3, [pc, #4]	; (800f91c <tcp_init+0x20>)
 800f916:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f918:	bf00      	nop
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	20000010 	.word	0x20000010

0800f920 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	7d1b      	ldrb	r3, [r3, #20]
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d105      	bne.n	800f93c <tcp_free+0x1c>
 800f930:	4b06      	ldr	r3, [pc, #24]	; (800f94c <tcp_free+0x2c>)
 800f932:	22d4      	movs	r2, #212	; 0xd4
 800f934:	4906      	ldr	r1, [pc, #24]	; (800f950 <tcp_free+0x30>)
 800f936:	4807      	ldr	r0, [pc, #28]	; (800f954 <tcp_free+0x34>)
 800f938:	f00b fc90 	bl	801b25c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f93c:	6879      	ldr	r1, [r7, #4]
 800f93e:	2001      	movs	r0, #1
 800f940:	f7fe fdfc 	bl	800e53c <memp_free>
}
 800f944:	bf00      	nop
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	0801db98 	.word	0x0801db98
 800f950:	0801dbc8 	.word	0x0801dbc8
 800f954:	0801dbdc 	.word	0x0801dbdc

0800f958 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	7d1b      	ldrb	r3, [r3, #20]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d105      	bne.n	800f974 <tcp_free_listen+0x1c>
 800f968:	4b06      	ldr	r3, [pc, #24]	; (800f984 <tcp_free_listen+0x2c>)
 800f96a:	22df      	movs	r2, #223	; 0xdf
 800f96c:	4906      	ldr	r1, [pc, #24]	; (800f988 <tcp_free_listen+0x30>)
 800f96e:	4807      	ldr	r0, [pc, #28]	; (800f98c <tcp_free_listen+0x34>)
 800f970:	f00b fc74 	bl	801b25c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f974:	6879      	ldr	r1, [r7, #4]
 800f976:	2002      	movs	r0, #2
 800f978:	f7fe fde0 	bl	800e53c <memp_free>
}
 800f97c:	bf00      	nop
 800f97e:	3708      	adds	r7, #8
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}
 800f984:	0801db98 	.word	0x0801db98
 800f988:	0801dc04 	.word	0x0801dc04
 800f98c:	0801dbdc 	.word	0x0801dbdc

0800f990 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f994:	f000 ffdc 	bl	8010950 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f998:	4b07      	ldr	r3, [pc, #28]	; (800f9b8 <tcp_tmr+0x28>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	3301      	adds	r3, #1
 800f99e:	b2da      	uxtb	r2, r3
 800f9a0:	4b05      	ldr	r3, [pc, #20]	; (800f9b8 <tcp_tmr+0x28>)
 800f9a2:	701a      	strb	r2, [r3, #0]
 800f9a4:	4b04      	ldr	r3, [pc, #16]	; (800f9b8 <tcp_tmr+0x28>)
 800f9a6:	781b      	ldrb	r3, [r3, #0]
 800f9a8:	f003 0301 	and.w	r3, r3, #1
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d001      	beq.n	800f9b4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f9b0:	f000 fc8e 	bl	80102d0 <tcp_slowtmr>
  }
}
 800f9b4:	bf00      	nop
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	20004b69 	.word	0x20004b69

0800f9bc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d105      	bne.n	800f9d8 <tcp_remove_listener+0x1c>
 800f9cc:	4b0d      	ldr	r3, [pc, #52]	; (800fa04 <tcp_remove_listener+0x48>)
 800f9ce:	22ff      	movs	r2, #255	; 0xff
 800f9d0:	490d      	ldr	r1, [pc, #52]	; (800fa08 <tcp_remove_listener+0x4c>)
 800f9d2:	480e      	ldr	r0, [pc, #56]	; (800fa0c <tcp_remove_listener+0x50>)
 800f9d4:	f00b fc42 	bl	801b25c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	60fb      	str	r3, [r7, #12]
 800f9dc:	e00a      	b.n	800f9f4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9e2:	683a      	ldr	r2, [r7, #0]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d102      	bne.n	800f9ee <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	60fb      	str	r3, [r7, #12]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d1f1      	bne.n	800f9de <tcp_remove_listener+0x22>
    }
  }
}
 800f9fa:	bf00      	nop
 800f9fc:	bf00      	nop
 800f9fe:	3710      	adds	r7, #16
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	0801db98 	.word	0x0801db98
 800fa08:	0801dc20 	.word	0x0801dc20
 800fa0c:	0801dbdc 	.word	0x0801dbdc

0800fa10 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d106      	bne.n	800fa2c <tcp_listen_closed+0x1c>
 800fa1e:	4b14      	ldr	r3, [pc, #80]	; (800fa70 <tcp_listen_closed+0x60>)
 800fa20:	f240 1211 	movw	r2, #273	; 0x111
 800fa24:	4913      	ldr	r1, [pc, #76]	; (800fa74 <tcp_listen_closed+0x64>)
 800fa26:	4814      	ldr	r0, [pc, #80]	; (800fa78 <tcp_listen_closed+0x68>)
 800fa28:	f00b fc18 	bl	801b25c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	7d1b      	ldrb	r3, [r3, #20]
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d006      	beq.n	800fa42 <tcp_listen_closed+0x32>
 800fa34:	4b0e      	ldr	r3, [pc, #56]	; (800fa70 <tcp_listen_closed+0x60>)
 800fa36:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fa3a:	4910      	ldr	r1, [pc, #64]	; (800fa7c <tcp_listen_closed+0x6c>)
 800fa3c:	480e      	ldr	r0, [pc, #56]	; (800fa78 <tcp_listen_closed+0x68>)
 800fa3e:	f00b fc0d 	bl	801b25c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fa42:	2301      	movs	r3, #1
 800fa44:	60fb      	str	r3, [r7, #12]
 800fa46:	e00b      	b.n	800fa60 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fa48:	4a0d      	ldr	r2, [pc, #52]	; (800fa80 <tcp_listen_closed+0x70>)
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	6879      	ldr	r1, [r7, #4]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff ffb1 	bl	800f9bc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	60fb      	str	r3, [r7, #12]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	2b03      	cmp	r3, #3
 800fa64:	d9f0      	bls.n	800fa48 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fa66:	bf00      	nop
 800fa68:	bf00      	nop
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	0801db98 	.word	0x0801db98
 800fa74:	0801dc48 	.word	0x0801dc48
 800fa78:	0801dbdc 	.word	0x0801dbdc
 800fa7c:	0801dc54 	.word	0x0801dc54
 800fa80:	0801fdcc 	.word	0x0801fdcc

0800fa84 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fa84:	b5b0      	push	{r4, r5, r7, lr}
 800fa86:	b088      	sub	sp, #32
 800fa88:	af04      	add	r7, sp, #16
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d106      	bne.n	800faa4 <tcp_close_shutdown+0x20>
 800fa96:	4b63      	ldr	r3, [pc, #396]	; (800fc24 <tcp_close_shutdown+0x1a0>)
 800fa98:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fa9c:	4962      	ldr	r1, [pc, #392]	; (800fc28 <tcp_close_shutdown+0x1a4>)
 800fa9e:	4863      	ldr	r0, [pc, #396]	; (800fc2c <tcp_close_shutdown+0x1a8>)
 800faa0:	f00b fbdc 	bl	801b25c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800faa4:	78fb      	ldrb	r3, [r7, #3]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d066      	beq.n	800fb78 <tcp_close_shutdown+0xf4>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	7d1b      	ldrb	r3, [r3, #20]
 800faae:	2b04      	cmp	r3, #4
 800fab0:	d003      	beq.n	800faba <tcp_close_shutdown+0x36>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	7d1b      	ldrb	r3, [r3, #20]
 800fab6:	2b07      	cmp	r3, #7
 800fab8:	d15e      	bne.n	800fb78 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d104      	bne.n	800facc <tcp_close_shutdown+0x48>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fac6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800faca:	d055      	beq.n	800fb78 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	8b5b      	ldrh	r3, [r3, #26]
 800fad0:	f003 0310 	and.w	r3, r3, #16
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d106      	bne.n	800fae6 <tcp_close_shutdown+0x62>
 800fad8:	4b52      	ldr	r3, [pc, #328]	; (800fc24 <tcp_close_shutdown+0x1a0>)
 800fada:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800fade:	4954      	ldr	r1, [pc, #336]	; (800fc30 <tcp_close_shutdown+0x1ac>)
 800fae0:	4852      	ldr	r0, [pc, #328]	; (800fc2c <tcp_close_shutdown+0x1a8>)
 800fae2:	f00b fbbb 	bl	801b25c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800faee:	687d      	ldr	r5, [r7, #4]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	3304      	adds	r3, #4
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	8ad2      	ldrh	r2, [r2, #22]
 800faf8:	6879      	ldr	r1, [r7, #4]
 800fafa:	8b09      	ldrh	r1, [r1, #24]
 800fafc:	9102      	str	r1, [sp, #8]
 800fafe:	9201      	str	r2, [sp, #4]
 800fb00:	9300      	str	r3, [sp, #0]
 800fb02:	462b      	mov	r3, r5
 800fb04:	4622      	mov	r2, r4
 800fb06:	4601      	mov	r1, r0
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f005 fced 	bl	80154e8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f001 face 	bl	80110b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fb14:	4b47      	ldr	r3, [pc, #284]	; (800fc34 <tcp_close_shutdown+0x1b0>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d105      	bne.n	800fb2a <tcp_close_shutdown+0xa6>
 800fb1e:	4b45      	ldr	r3, [pc, #276]	; (800fc34 <tcp_close_shutdown+0x1b0>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	4a43      	ldr	r2, [pc, #268]	; (800fc34 <tcp_close_shutdown+0x1b0>)
 800fb26:	6013      	str	r3, [r2, #0]
 800fb28:	e013      	b.n	800fb52 <tcp_close_shutdown+0xce>
 800fb2a:	4b42      	ldr	r3, [pc, #264]	; (800fc34 <tcp_close_shutdown+0x1b0>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	60fb      	str	r3, [r7, #12]
 800fb30:	e00c      	b.n	800fb4c <tcp_close_shutdown+0xc8>
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	68db      	ldr	r3, [r3, #12]
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d104      	bne.n	800fb46 <tcp_close_shutdown+0xc2>
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	68da      	ldr	r2, [r3, #12]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	60da      	str	r2, [r3, #12]
 800fb44:	e005      	b.n	800fb52 <tcp_close_shutdown+0xce>
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	68db      	ldr	r3, [r3, #12]
 800fb4a:	60fb      	str	r3, [r7, #12]
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1ef      	bne.n	800fb32 <tcp_close_shutdown+0xae>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2200      	movs	r2, #0
 800fb56:	60da      	str	r2, [r3, #12]
 800fb58:	4b37      	ldr	r3, [pc, #220]	; (800fc38 <tcp_close_shutdown+0x1b4>)
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fb5e:	4b37      	ldr	r3, [pc, #220]	; (800fc3c <tcp_close_shutdown+0x1b8>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	687a      	ldr	r2, [r7, #4]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d102      	bne.n	800fb6e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fb68:	f003 ff62 	bl	8013a30 <tcp_trigger_input_pcb_close>
 800fb6c:	e002      	b.n	800fb74 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f7ff fed6 	bl	800f920 <tcp_free>
      }
      return ERR_OK;
 800fb74:	2300      	movs	r3, #0
 800fb76:	e050      	b.n	800fc1a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	7d1b      	ldrb	r3, [r3, #20]
 800fb7c:	2b02      	cmp	r3, #2
 800fb7e:	d03b      	beq.n	800fbf8 <tcp_close_shutdown+0x174>
 800fb80:	2b02      	cmp	r3, #2
 800fb82:	dc44      	bgt.n	800fc0e <tcp_close_shutdown+0x18a>
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d002      	beq.n	800fb8e <tcp_close_shutdown+0x10a>
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d02a      	beq.n	800fbe2 <tcp_close_shutdown+0x15e>
 800fb8c:	e03f      	b.n	800fc0e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	8adb      	ldrh	r3, [r3, #22]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d021      	beq.n	800fbda <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fb96:	4b2a      	ldr	r3, [pc, #168]	; (800fc40 <tcp_close_shutdown+0x1bc>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d105      	bne.n	800fbac <tcp_close_shutdown+0x128>
 800fba0:	4b27      	ldr	r3, [pc, #156]	; (800fc40 <tcp_close_shutdown+0x1bc>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	4a26      	ldr	r2, [pc, #152]	; (800fc40 <tcp_close_shutdown+0x1bc>)
 800fba8:	6013      	str	r3, [r2, #0]
 800fbaa:	e013      	b.n	800fbd4 <tcp_close_shutdown+0x150>
 800fbac:	4b24      	ldr	r3, [pc, #144]	; (800fc40 <tcp_close_shutdown+0x1bc>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	60bb      	str	r3, [r7, #8]
 800fbb2:	e00c      	b.n	800fbce <tcp_close_shutdown+0x14a>
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d104      	bne.n	800fbc8 <tcp_close_shutdown+0x144>
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	68da      	ldr	r2, [r3, #12]
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	60da      	str	r2, [r3, #12]
 800fbc6:	e005      	b.n	800fbd4 <tcp_close_shutdown+0x150>
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	60bb      	str	r3, [r7, #8]
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d1ef      	bne.n	800fbb4 <tcp_close_shutdown+0x130>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7ff fea0 	bl	800f920 <tcp_free>
      break;
 800fbe0:	e01a      	b.n	800fc18 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fbe2:	6878      	ldr	r0, [r7, #4]
 800fbe4:	f7ff ff14 	bl	800fa10 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fbe8:	6879      	ldr	r1, [r7, #4]
 800fbea:	4816      	ldr	r0, [pc, #88]	; (800fc44 <tcp_close_shutdown+0x1c0>)
 800fbec:	f001 fab0 	bl	8011150 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	f7ff feb1 	bl	800f958 <tcp_free_listen>
      break;
 800fbf6:	e00f      	b.n	800fc18 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fbf8:	6879      	ldr	r1, [r7, #4]
 800fbfa:	480e      	ldr	r0, [pc, #56]	; (800fc34 <tcp_close_shutdown+0x1b0>)
 800fbfc:	f001 faa8 	bl	8011150 <tcp_pcb_remove>
 800fc00:	4b0d      	ldr	r3, [pc, #52]	; (800fc38 <tcp_close_shutdown+0x1b4>)
 800fc02:	2201      	movs	r2, #1
 800fc04:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff fe8a 	bl	800f920 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fc0c:	e004      	b.n	800fc18 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f000 f81a 	bl	800fc48 <tcp_close_shutdown_fin>
 800fc14:	4603      	mov	r3, r0
 800fc16:	e000      	b.n	800fc1a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800fc18:	2300      	movs	r3, #0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bdb0      	pop	{r4, r5, r7, pc}
 800fc22:	bf00      	nop
 800fc24:	0801db98 	.word	0x0801db98
 800fc28:	0801dc6c 	.word	0x0801dc6c
 800fc2c:	0801dbdc 	.word	0x0801dbdc
 800fc30:	0801dc8c 	.word	0x0801dc8c
 800fc34:	20011050 	.word	0x20011050
 800fc38:	2001104c 	.word	0x2001104c
 800fc3c:	20011064 	.word	0x20011064
 800fc40:	2001105c 	.word	0x2001105c
 800fc44:	20011058 	.word	0x20011058

0800fc48 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d106      	bne.n	800fc64 <tcp_close_shutdown_fin+0x1c>
 800fc56:	4b2e      	ldr	r3, [pc, #184]	; (800fd10 <tcp_close_shutdown_fin+0xc8>)
 800fc58:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fc5c:	492d      	ldr	r1, [pc, #180]	; (800fd14 <tcp_close_shutdown_fin+0xcc>)
 800fc5e:	482e      	ldr	r0, [pc, #184]	; (800fd18 <tcp_close_shutdown_fin+0xd0>)
 800fc60:	f00b fafc 	bl	801b25c <iprintf>

  switch (pcb->state) {
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	7d1b      	ldrb	r3, [r3, #20]
 800fc68:	2b07      	cmp	r3, #7
 800fc6a:	d020      	beq.n	800fcae <tcp_close_shutdown_fin+0x66>
 800fc6c:	2b07      	cmp	r3, #7
 800fc6e:	dc2b      	bgt.n	800fcc8 <tcp_close_shutdown_fin+0x80>
 800fc70:	2b03      	cmp	r3, #3
 800fc72:	d002      	beq.n	800fc7a <tcp_close_shutdown_fin+0x32>
 800fc74:	2b04      	cmp	r3, #4
 800fc76:	d00d      	beq.n	800fc94 <tcp_close_shutdown_fin+0x4c>
 800fc78:	e026      	b.n	800fcc8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f004 fd42 	bl	8014704 <tcp_send_fin>
 800fc80:	4603      	mov	r3, r0
 800fc82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fc84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d11f      	bne.n	800fccc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2205      	movs	r2, #5
 800fc90:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fc92:	e01b      	b.n	800fccc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f004 fd35 	bl	8014704 <tcp_send_fin>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fc9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d114      	bne.n	800fcd0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2205      	movs	r2, #5
 800fcaa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fcac:	e010      	b.n	800fcd0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f004 fd28 	bl	8014704 <tcp_send_fin>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fcb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d109      	bne.n	800fcd4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2209      	movs	r2, #9
 800fcc4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fcc6:	e005      	b.n	800fcd4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fcc8:	2300      	movs	r3, #0
 800fcca:	e01c      	b.n	800fd06 <tcp_close_shutdown_fin+0xbe>
      break;
 800fccc:	bf00      	nop
 800fcce:	e002      	b.n	800fcd6 <tcp_close_shutdown_fin+0x8e>
      break;
 800fcd0:	bf00      	nop
 800fcd2:	e000      	b.n	800fcd6 <tcp_close_shutdown_fin+0x8e>
      break;
 800fcd4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fcd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d103      	bne.n	800fce6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f004 fe4e 	bl	8014980 <tcp_output>
 800fce4:	e00d      	b.n	800fd02 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcee:	d108      	bne.n	800fd02 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	8b5b      	ldrh	r3, [r3, #26]
 800fcf4:	f043 0308 	orr.w	r3, r3, #8
 800fcf8:	b29a      	uxth	r2, r3
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	e001      	b.n	800fd06 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fd02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3710      	adds	r7, #16
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	0801db98 	.word	0x0801db98
 800fd14:	0801dc48 	.word	0x0801dc48
 800fd18:	0801dbdc 	.word	0x0801dbdc

0800fd1c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d109      	bne.n	800fd3e <tcp_close+0x22>
 800fd2a:	4b0f      	ldr	r3, [pc, #60]	; (800fd68 <tcp_close+0x4c>)
 800fd2c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800fd30:	490e      	ldr	r1, [pc, #56]	; (800fd6c <tcp_close+0x50>)
 800fd32:	480f      	ldr	r0, [pc, #60]	; (800fd70 <tcp_close+0x54>)
 800fd34:	f00b fa92 	bl	801b25c <iprintf>
 800fd38:	f06f 030f 	mvn.w	r3, #15
 800fd3c:	e00f      	b.n	800fd5e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	7d1b      	ldrb	r3, [r3, #20]
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	d006      	beq.n	800fd54 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	8b5b      	ldrh	r3, [r3, #26]
 800fd4a:	f043 0310 	orr.w	r3, r3, #16
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fd54:	2101      	movs	r1, #1
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f7ff fe94 	bl	800fa84 <tcp_close_shutdown>
 800fd5c:	4603      	mov	r3, r0
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3708      	adds	r7, #8
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	0801db98 	.word	0x0801db98
 800fd6c:	0801dca8 	.word	0x0801dca8
 800fd70:	0801dbdc 	.word	0x0801dbdc

0800fd74 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b084      	sub	sp, #16
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d109      	bne.n	800fd9a <tcp_shutdown+0x26>
 800fd86:	4b26      	ldr	r3, [pc, #152]	; (800fe20 <tcp_shutdown+0xac>)
 800fd88:	f240 2207 	movw	r2, #519	; 0x207
 800fd8c:	4925      	ldr	r1, [pc, #148]	; (800fe24 <tcp_shutdown+0xb0>)
 800fd8e:	4826      	ldr	r0, [pc, #152]	; (800fe28 <tcp_shutdown+0xb4>)
 800fd90:	f00b fa64 	bl	801b25c <iprintf>
 800fd94:	f06f 030f 	mvn.w	r3, #15
 800fd98:	e03d      	b.n	800fe16 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	7d1b      	ldrb	r3, [r3, #20]
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d102      	bne.n	800fda8 <tcp_shutdown+0x34>
    return ERR_CONN;
 800fda2:	f06f 030a 	mvn.w	r3, #10
 800fda6:	e036      	b.n	800fe16 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d01b      	beq.n	800fde6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	8b5b      	ldrh	r3, [r3, #26]
 800fdb2:	f043 0310 	orr.w	r3, r3, #16
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d005      	beq.n	800fdce <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800fdc2:	2101      	movs	r1, #1
 800fdc4:	68f8      	ldr	r0, [r7, #12]
 800fdc6:	f7ff fe5d 	bl	800fa84 <tcp_close_shutdown>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	e023      	b.n	800fe16 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d007      	beq.n	800fde6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7ff fa52 	bl	800f284 <pbuf_free>
      pcb->refused_data = NULL;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	2200      	movs	r2, #0
 800fde4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d013      	beq.n	800fe14 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	7d1b      	ldrb	r3, [r3, #20]
 800fdf0:	2b04      	cmp	r3, #4
 800fdf2:	dc02      	bgt.n	800fdfa <tcp_shutdown+0x86>
 800fdf4:	2b03      	cmp	r3, #3
 800fdf6:	da02      	bge.n	800fdfe <tcp_shutdown+0x8a>
 800fdf8:	e009      	b.n	800fe0e <tcp_shutdown+0x9a>
 800fdfa:	2b07      	cmp	r3, #7
 800fdfc:	d107      	bne.n	800fe0e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	4619      	mov	r1, r3
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f7ff fe3d 	bl	800fa84 <tcp_close_shutdown>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	e003      	b.n	800fe16 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800fe0e:	f06f 030a 	mvn.w	r3, #10
 800fe12:	e000      	b.n	800fe16 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
 800fe1e:	bf00      	nop
 800fe20:	0801db98 	.word	0x0801db98
 800fe24:	0801dcc0 	.word	0x0801dcc0
 800fe28:	0801dbdc 	.word	0x0801dbdc

0800fe2c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b08e      	sub	sp, #56	; 0x38
 800fe30:	af04      	add	r7, sp, #16
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d107      	bne.n	800fe4c <tcp_abandon+0x20>
 800fe3c:	4b52      	ldr	r3, [pc, #328]	; (800ff88 <tcp_abandon+0x15c>)
 800fe3e:	f240 223d 	movw	r2, #573	; 0x23d
 800fe42:	4952      	ldr	r1, [pc, #328]	; (800ff8c <tcp_abandon+0x160>)
 800fe44:	4852      	ldr	r0, [pc, #328]	; (800ff90 <tcp_abandon+0x164>)
 800fe46:	f00b fa09 	bl	801b25c <iprintf>
 800fe4a:	e099      	b.n	800ff80 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	7d1b      	ldrb	r3, [r3, #20]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d106      	bne.n	800fe62 <tcp_abandon+0x36>
 800fe54:	4b4c      	ldr	r3, [pc, #304]	; (800ff88 <tcp_abandon+0x15c>)
 800fe56:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fe5a:	494e      	ldr	r1, [pc, #312]	; (800ff94 <tcp_abandon+0x168>)
 800fe5c:	484c      	ldr	r0, [pc, #304]	; (800ff90 <tcp_abandon+0x164>)
 800fe5e:	f00b f9fd 	bl	801b25c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	7d1b      	ldrb	r3, [r3, #20]
 800fe66:	2b0a      	cmp	r3, #10
 800fe68:	d107      	bne.n	800fe7a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fe6a:	6879      	ldr	r1, [r7, #4]
 800fe6c:	484a      	ldr	r0, [pc, #296]	; (800ff98 <tcp_abandon+0x16c>)
 800fe6e:	f001 f96f 	bl	8011150 <tcp_pcb_remove>
    tcp_free(pcb);
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f7ff fd54 	bl	800f920 <tcp_free>
 800fe78:	e082      	b.n	800ff80 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe86:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe94:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	691b      	ldr	r3, [r3, #16]
 800fe9a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	7d1b      	ldrb	r3, [r3, #20]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d126      	bne.n	800fef2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	8adb      	ldrh	r3, [r3, #22]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d02e      	beq.n	800ff0a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800feac:	4b3b      	ldr	r3, [pc, #236]	; (800ff9c <tcp_abandon+0x170>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d105      	bne.n	800fec2 <tcp_abandon+0x96>
 800feb6:	4b39      	ldr	r3, [pc, #228]	; (800ff9c <tcp_abandon+0x170>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	4a37      	ldr	r2, [pc, #220]	; (800ff9c <tcp_abandon+0x170>)
 800febe:	6013      	str	r3, [r2, #0]
 800fec0:	e013      	b.n	800feea <tcp_abandon+0xbe>
 800fec2:	4b36      	ldr	r3, [pc, #216]	; (800ff9c <tcp_abandon+0x170>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	61fb      	str	r3, [r7, #28]
 800fec8:	e00c      	b.n	800fee4 <tcp_abandon+0xb8>
 800feca:	69fb      	ldr	r3, [r7, #28]
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d104      	bne.n	800fede <tcp_abandon+0xb2>
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	68da      	ldr	r2, [r3, #12]
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	60da      	str	r2, [r3, #12]
 800fedc:	e005      	b.n	800feea <tcp_abandon+0xbe>
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	68db      	ldr	r3, [r3, #12]
 800fee2:	61fb      	str	r3, [r7, #28]
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d1ef      	bne.n	800feca <tcp_abandon+0x9e>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2200      	movs	r2, #0
 800feee:	60da      	str	r2, [r3, #12]
 800fef0:	e00b      	b.n	800ff0a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	8adb      	ldrh	r3, [r3, #22]
 800fefa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fefc:	6879      	ldr	r1, [r7, #4]
 800fefe:	4828      	ldr	r0, [pc, #160]	; (800ffa0 <tcp_abandon+0x174>)
 800ff00:	f001 f926 	bl	8011150 <tcp_pcb_remove>
 800ff04:	4b27      	ldr	r3, [pc, #156]	; (800ffa4 <tcp_abandon+0x178>)
 800ff06:	2201      	movs	r2, #1
 800ff08:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d004      	beq.n	800ff1c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff16:	4618      	mov	r0, r3
 800ff18:	f000 fdfa 	bl	8010b10 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d004      	beq.n	800ff2e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f000 fdf1 	bl	8010b10 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d004      	beq.n	800ff40 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f000 fde8 	bl	8010b10 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ff40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00e      	beq.n	800ff64 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ff46:	6879      	ldr	r1, [r7, #4]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	3304      	adds	r3, #4
 800ff4c:	687a      	ldr	r2, [r7, #4]
 800ff4e:	8b12      	ldrh	r2, [r2, #24]
 800ff50:	9202      	str	r2, [sp, #8]
 800ff52:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ff54:	9201      	str	r2, [sp, #4]
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	697a      	ldr	r2, [r7, #20]
 800ff5c:	69b9      	ldr	r1, [r7, #24]
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f005 fac2 	bl	80154e8 <tcp_rst>
    }
    last_state = pcb->state;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	7d1b      	ldrb	r3, [r3, #20]
 800ff68:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f7ff fcd8 	bl	800f920 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d004      	beq.n	800ff80 <tcp_abandon+0x154>
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	f06f 010c 	mvn.w	r1, #12
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	4798      	blx	r3
  }
}
 800ff80:	3728      	adds	r7, #40	; 0x28
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	0801db98 	.word	0x0801db98
 800ff8c:	0801dcdc 	.word	0x0801dcdc
 800ff90:	0801dbdc 	.word	0x0801dbdc
 800ff94:	0801dcf8 	.word	0x0801dcf8
 800ff98:	20011060 	.word	0x20011060
 800ff9c:	2001105c 	.word	0x2001105c
 800ffa0:	20011050 	.word	0x20011050
 800ffa4:	2001104c 	.word	0x2001104c

0800ffa8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	6878      	ldr	r0, [r7, #4]
 800ffb4:	f7ff ff3a 	bl	800fe2c <tcp_abandon>
}
 800ffb8:	bf00      	nop
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b088      	sub	sp, #32
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ffce:	2304      	movs	r3, #4
 800ffd0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d101      	bne.n	800ffdc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ffd8:	4b3e      	ldr	r3, [pc, #248]	; (80100d4 <tcp_bind+0x114>)
 800ffda:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d109      	bne.n	800fff6 <tcp_bind+0x36>
 800ffe2:	4b3d      	ldr	r3, [pc, #244]	; (80100d8 <tcp_bind+0x118>)
 800ffe4:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ffe8:	493c      	ldr	r1, [pc, #240]	; (80100dc <tcp_bind+0x11c>)
 800ffea:	483d      	ldr	r0, [pc, #244]	; (80100e0 <tcp_bind+0x120>)
 800ffec:	f00b f936 	bl	801b25c <iprintf>
 800fff0:	f06f 030f 	mvn.w	r3, #15
 800fff4:	e06a      	b.n	80100cc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	7d1b      	ldrb	r3, [r3, #20]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d009      	beq.n	8010012 <tcp_bind+0x52>
 800fffe:	4b36      	ldr	r3, [pc, #216]	; (80100d8 <tcp_bind+0x118>)
 8010000:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010004:	4937      	ldr	r1, [pc, #220]	; (80100e4 <tcp_bind+0x124>)
 8010006:	4836      	ldr	r0, [pc, #216]	; (80100e0 <tcp_bind+0x120>)
 8010008:	f00b f928 	bl	801b25c <iprintf>
 801000c:	f06f 0305 	mvn.w	r3, #5
 8010010:	e05c      	b.n	80100cc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8010012:	88fb      	ldrh	r3, [r7, #6]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d109      	bne.n	801002c <tcp_bind+0x6c>
    port = tcp_new_port();
 8010018:	f000 f914 	bl	8010244 <tcp_new_port>
 801001c:	4603      	mov	r3, r0
 801001e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010020:	88fb      	ldrh	r3, [r7, #6]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d135      	bne.n	8010092 <tcp_bind+0xd2>
      return ERR_BUF;
 8010026:	f06f 0301 	mvn.w	r3, #1
 801002a:	e04f      	b.n	80100cc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801002c:	2300      	movs	r3, #0
 801002e:	61fb      	str	r3, [r7, #28]
 8010030:	e02b      	b.n	801008a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010032:	4a2d      	ldr	r2, [pc, #180]	; (80100e8 <tcp_bind+0x128>)
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	61bb      	str	r3, [r7, #24]
 801003e:	e01e      	b.n	801007e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	8adb      	ldrh	r3, [r3, #22]
 8010044:	88fa      	ldrh	r2, [r7, #6]
 8010046:	429a      	cmp	r2, r3
 8010048:	d116      	bne.n	8010078 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801004a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801004c:	2b00      	cmp	r3, #0
 801004e:	d010      	beq.n	8010072 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d00c      	beq.n	8010072 <tcp_bind+0xb2>
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d009      	beq.n	8010072 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d005      	beq.n	8010072 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010066:	69bb      	ldr	r3, [r7, #24]
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801006e:	429a      	cmp	r2, r3
 8010070:	d102      	bne.n	8010078 <tcp_bind+0xb8>
              return ERR_USE;
 8010072:	f06f 0307 	mvn.w	r3, #7
 8010076:	e029      	b.n	80100cc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	61bb      	str	r3, [r7, #24]
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1dd      	bne.n	8010040 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	3301      	adds	r3, #1
 8010088:	61fb      	str	r3, [r7, #28]
 801008a:	69fa      	ldr	r2, [r7, #28]
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	429a      	cmp	r2, r3
 8010090:	dbcf      	blt.n	8010032 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d00c      	beq.n	80100b2 <tcp_bind+0xf2>
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d008      	beq.n	80100b2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d002      	beq.n	80100ac <tcp_bind+0xec>
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	e000      	b.n	80100ae <tcp_bind+0xee>
 80100ac:	2300      	movs	r3, #0
 80100ae:	68fa      	ldr	r2, [r7, #12]
 80100b0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	88fa      	ldrh	r2, [r7, #6]
 80100b6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80100b8:	4b0c      	ldr	r3, [pc, #48]	; (80100ec <tcp_bind+0x12c>)
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	60da      	str	r2, [r3, #12]
 80100c0:	4a0a      	ldr	r2, [pc, #40]	; (80100ec <tcp_bind+0x12c>)
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	6013      	str	r3, [r2, #0]
 80100c6:	f005 fbd1 	bl	801586c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80100ca:	2300      	movs	r3, #0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3720      	adds	r7, #32
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	0801fdf4 	.word	0x0801fdf4
 80100d8:	0801db98 	.word	0x0801db98
 80100dc:	0801dd2c 	.word	0x0801dd2c
 80100e0:	0801dbdc 	.word	0x0801dbdc
 80100e4:	0801dd44 	.word	0x0801dd44
 80100e8:	0801fdcc 	.word	0x0801fdcc
 80100ec:	2001105c 	.word	0x2001105c

080100f0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d106      	bne.n	801010c <tcp_update_rcv_ann_wnd+0x1c>
 80100fe:	4b25      	ldr	r3, [pc, #148]	; (8010194 <tcp_update_rcv_ann_wnd+0xa4>)
 8010100:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010104:	4924      	ldr	r1, [pc, #144]	; (8010198 <tcp_update_rcv_ann_wnd+0xa8>)
 8010106:	4825      	ldr	r0, [pc, #148]	; (801019c <tcp_update_rcv_ann_wnd+0xac>)
 8010108:	f00b f8a8 	bl	801b25c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010114:	4413      	add	r3, r2
 8010116:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010120:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010124:	bf28      	it	cs
 8010126:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801012a:	b292      	uxth	r2, r2
 801012c:	4413      	add	r3, r2
 801012e:	68fa      	ldr	r2, [r7, #12]
 8010130:	1ad3      	subs	r3, r2, r3
 8010132:	2b00      	cmp	r3, #0
 8010134:	db08      	blt.n	8010148 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010142:	68fa      	ldr	r2, [r7, #12]
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	e020      	b.n	801018a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010150:	1ad3      	subs	r3, r2, r3
 8010152:	2b00      	cmp	r3, #0
 8010154:	dd03      	ble.n	801015e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	2200      	movs	r2, #0
 801015a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801015c:	e014      	b.n	8010188 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010170:	d306      	bcc.n	8010180 <tcp_update_rcv_ann_wnd+0x90>
 8010172:	4b08      	ldr	r3, [pc, #32]	; (8010194 <tcp_update_rcv_ann_wnd+0xa4>)
 8010174:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010178:	4909      	ldr	r1, [pc, #36]	; (80101a0 <tcp_update_rcv_ann_wnd+0xb0>)
 801017a:	4808      	ldr	r0, [pc, #32]	; (801019c <tcp_update_rcv_ann_wnd+0xac>)
 801017c:	f00b f86e 	bl	801b25c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	b29a      	uxth	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010188:	2300      	movs	r3, #0
  }
}
 801018a:	4618      	mov	r0, r3
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	0801db98 	.word	0x0801db98
 8010198:	0801ddf4 	.word	0x0801ddf4
 801019c:	0801dbdc 	.word	0x0801dbdc
 80101a0:	0801de18 	.word	0x0801de18

080101a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b084      	sub	sp, #16
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	460b      	mov	r3, r1
 80101ae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d107      	bne.n	80101c6 <tcp_recved+0x22>
 80101b6:	4b1f      	ldr	r3, [pc, #124]	; (8010234 <tcp_recved+0x90>)
 80101b8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80101bc:	491e      	ldr	r1, [pc, #120]	; (8010238 <tcp_recved+0x94>)
 80101be:	481f      	ldr	r0, [pc, #124]	; (801023c <tcp_recved+0x98>)
 80101c0:	f00b f84c 	bl	801b25c <iprintf>
 80101c4:	e032      	b.n	801022c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	7d1b      	ldrb	r3, [r3, #20]
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d106      	bne.n	80101dc <tcp_recved+0x38>
 80101ce:	4b19      	ldr	r3, [pc, #100]	; (8010234 <tcp_recved+0x90>)
 80101d0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80101d4:	491a      	ldr	r1, [pc, #104]	; (8010240 <tcp_recved+0x9c>)
 80101d6:	4819      	ldr	r0, [pc, #100]	; (801023c <tcp_recved+0x98>)
 80101d8:	f00b f840 	bl	801b25c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80101e0:	887b      	ldrh	r3, [r7, #2]
 80101e2:	4413      	add	r3, r2
 80101e4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80101e6:	89fb      	ldrh	r3, [r7, #14]
 80101e8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80101ec:	d804      	bhi.n	80101f8 <tcp_recved+0x54>
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101f2:	89fa      	ldrh	r2, [r7, #14]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d204      	bcs.n	8010202 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80101fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8010200:	e002      	b.n	8010208 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	89fa      	ldrh	r2, [r7, #14]
 8010206:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f7ff ff71 	bl	80100f0 <tcp_update_rcv_ann_wnd>
 801020e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010216:	d309      	bcc.n	801022c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	8b5b      	ldrh	r3, [r3, #26]
 801021c:	f043 0302 	orr.w	r3, r3, #2
 8010220:	b29a      	uxth	r2, r3
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f004 fbaa 	bl	8014980 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	0801db98 	.word	0x0801db98
 8010238:	0801de34 	.word	0x0801de34
 801023c:	0801dbdc 	.word	0x0801dbdc
 8010240:	0801de4c 	.word	0x0801de4c

08010244 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801024a:	2300      	movs	r3, #0
 801024c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801024e:	4b1e      	ldr	r3, [pc, #120]	; (80102c8 <tcp_new_port+0x84>)
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	3301      	adds	r3, #1
 8010254:	b29a      	uxth	r2, r3
 8010256:	4b1c      	ldr	r3, [pc, #112]	; (80102c8 <tcp_new_port+0x84>)
 8010258:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801025a:	4b1b      	ldr	r3, [pc, #108]	; (80102c8 <tcp_new_port+0x84>)
 801025c:	881b      	ldrh	r3, [r3, #0]
 801025e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010262:	4293      	cmp	r3, r2
 8010264:	d103      	bne.n	801026e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010266:	4b18      	ldr	r3, [pc, #96]	; (80102c8 <tcp_new_port+0x84>)
 8010268:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801026c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801026e:	2300      	movs	r3, #0
 8010270:	71fb      	strb	r3, [r7, #7]
 8010272:	e01e      	b.n	80102b2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010274:	79fb      	ldrb	r3, [r7, #7]
 8010276:	4a15      	ldr	r2, [pc, #84]	; (80102cc <tcp_new_port+0x88>)
 8010278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	603b      	str	r3, [r7, #0]
 8010280:	e011      	b.n	80102a6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	8ada      	ldrh	r2, [r3, #22]
 8010286:	4b10      	ldr	r3, [pc, #64]	; (80102c8 <tcp_new_port+0x84>)
 8010288:	881b      	ldrh	r3, [r3, #0]
 801028a:	429a      	cmp	r2, r3
 801028c:	d108      	bne.n	80102a0 <tcp_new_port+0x5c>
        n++;
 801028e:	88bb      	ldrh	r3, [r7, #4]
 8010290:	3301      	adds	r3, #1
 8010292:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010294:	88bb      	ldrh	r3, [r7, #4]
 8010296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801029a:	d3d8      	bcc.n	801024e <tcp_new_port+0xa>
          return 0;
 801029c:	2300      	movs	r3, #0
 801029e:	e00d      	b.n	80102bc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	68db      	ldr	r3, [r3, #12]
 80102a4:	603b      	str	r3, [r7, #0]
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d1ea      	bne.n	8010282 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80102ac:	79fb      	ldrb	r3, [r7, #7]
 80102ae:	3301      	adds	r3, #1
 80102b0:	71fb      	strb	r3, [r7, #7]
 80102b2:	79fb      	ldrb	r3, [r7, #7]
 80102b4:	2b03      	cmp	r3, #3
 80102b6:	d9dd      	bls.n	8010274 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80102b8:	4b03      	ldr	r3, [pc, #12]	; (80102c8 <tcp_new_port+0x84>)
 80102ba:	881b      	ldrh	r3, [r3, #0]
}
 80102bc:	4618      	mov	r0, r3
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr
 80102c8:	20000010 	.word	0x20000010
 80102cc:	0801fdcc 	.word	0x0801fdcc

080102d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80102d0:	b5b0      	push	{r4, r5, r7, lr}
 80102d2:	b090      	sub	sp, #64	; 0x40
 80102d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80102d6:	2300      	movs	r3, #0
 80102d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80102dc:	4b94      	ldr	r3, [pc, #592]	; (8010530 <tcp_slowtmr+0x260>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	3301      	adds	r3, #1
 80102e2:	4a93      	ldr	r2, [pc, #588]	; (8010530 <tcp_slowtmr+0x260>)
 80102e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80102e6:	4b93      	ldr	r3, [pc, #588]	; (8010534 <tcp_slowtmr+0x264>)
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	3301      	adds	r3, #1
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	4b91      	ldr	r3, [pc, #580]	; (8010534 <tcp_slowtmr+0x264>)
 80102f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80102f6:	4b90      	ldr	r3, [pc, #576]	; (8010538 <tcp_slowtmr+0x268>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80102fc:	e29f      	b.n	801083e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80102fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010300:	7d1b      	ldrb	r3, [r3, #20]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d106      	bne.n	8010314 <tcp_slowtmr+0x44>
 8010306:	4b8d      	ldr	r3, [pc, #564]	; (801053c <tcp_slowtmr+0x26c>)
 8010308:	f240 42be 	movw	r2, #1214	; 0x4be
 801030c:	498c      	ldr	r1, [pc, #560]	; (8010540 <tcp_slowtmr+0x270>)
 801030e:	488d      	ldr	r0, [pc, #564]	; (8010544 <tcp_slowtmr+0x274>)
 8010310:	f00a ffa4 	bl	801b25c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010316:	7d1b      	ldrb	r3, [r3, #20]
 8010318:	2b01      	cmp	r3, #1
 801031a:	d106      	bne.n	801032a <tcp_slowtmr+0x5a>
 801031c:	4b87      	ldr	r3, [pc, #540]	; (801053c <tcp_slowtmr+0x26c>)
 801031e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010322:	4989      	ldr	r1, [pc, #548]	; (8010548 <tcp_slowtmr+0x278>)
 8010324:	4887      	ldr	r0, [pc, #540]	; (8010544 <tcp_slowtmr+0x274>)
 8010326:	f00a ff99 	bl	801b25c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801032a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032c:	7d1b      	ldrb	r3, [r3, #20]
 801032e:	2b0a      	cmp	r3, #10
 8010330:	d106      	bne.n	8010340 <tcp_slowtmr+0x70>
 8010332:	4b82      	ldr	r3, [pc, #520]	; (801053c <tcp_slowtmr+0x26c>)
 8010334:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010338:	4984      	ldr	r1, [pc, #528]	; (801054c <tcp_slowtmr+0x27c>)
 801033a:	4882      	ldr	r0, [pc, #520]	; (8010544 <tcp_slowtmr+0x274>)
 801033c:	f00a ff8e 	bl	801b25c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010342:	7f9a      	ldrb	r2, [r3, #30]
 8010344:	4b7b      	ldr	r3, [pc, #492]	; (8010534 <tcp_slowtmr+0x264>)
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	429a      	cmp	r2, r3
 801034a:	d105      	bne.n	8010358 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801034c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010356:	e272      	b.n	801083e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010358:	4b76      	ldr	r3, [pc, #472]	; (8010534 <tcp_slowtmr+0x264>)
 801035a:	781a      	ldrb	r2, [r3, #0]
 801035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010360:	2300      	movs	r3, #0
 8010362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010366:	2300      	movs	r3, #0
 8010368:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801036c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801036e:	7d1b      	ldrb	r3, [r3, #20]
 8010370:	2b02      	cmp	r3, #2
 8010372:	d10a      	bne.n	801038a <tcp_slowtmr+0xba>
 8010374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010376:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801037a:	2b05      	cmp	r3, #5
 801037c:	d905      	bls.n	801038a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801037e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010382:	3301      	adds	r3, #1
 8010384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010388:	e11e      	b.n	80105c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010390:	2b0b      	cmp	r3, #11
 8010392:	d905      	bls.n	80103a0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010398:	3301      	adds	r3, #1
 801039a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801039e:	e113      	b.n	80105c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80103a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d075      	beq.n	8010496 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80103aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d006      	beq.n	80103c0 <tcp_slowtmr+0xf0>
 80103b2:	4b62      	ldr	r3, [pc, #392]	; (801053c <tcp_slowtmr+0x26c>)
 80103b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80103b8:	4965      	ldr	r1, [pc, #404]	; (8010550 <tcp_slowtmr+0x280>)
 80103ba:	4862      	ldr	r0, [pc, #392]	; (8010544 <tcp_slowtmr+0x274>)
 80103bc:	f00a ff4e 	bl	801b25c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80103c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d106      	bne.n	80103d6 <tcp_slowtmr+0x106>
 80103c8:	4b5c      	ldr	r3, [pc, #368]	; (801053c <tcp_slowtmr+0x26c>)
 80103ca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80103ce:	4961      	ldr	r1, [pc, #388]	; (8010554 <tcp_slowtmr+0x284>)
 80103d0:	485c      	ldr	r0, [pc, #368]	; (8010544 <tcp_slowtmr+0x274>)
 80103d2:	f00a ff43 	bl	801b25c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80103d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80103dc:	2b0b      	cmp	r3, #11
 80103de:	d905      	bls.n	80103ec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80103e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103e4:	3301      	adds	r3, #1
 80103e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80103ea:	e0ed      	b.n	80105c8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80103ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80103f2:	3b01      	subs	r3, #1
 80103f4:	4a58      	ldr	r2, [pc, #352]	; (8010558 <tcp_slowtmr+0x288>)
 80103f6:	5cd3      	ldrb	r3, [r2, r3]
 80103f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80103fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010400:	7c7a      	ldrb	r2, [r7, #17]
 8010402:	429a      	cmp	r2, r3
 8010404:	d907      	bls.n	8010416 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010408:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801040c:	3301      	adds	r3, #1
 801040e:	b2da      	uxtb	r2, r3
 8010410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010412:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010418:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801041c:	7c7a      	ldrb	r2, [r7, #17]
 801041e:	429a      	cmp	r2, r3
 8010420:	f200 80d2 	bhi.w	80105c8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010424:	2301      	movs	r3, #1
 8010426:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801042e:	2b00      	cmp	r3, #0
 8010430:	d108      	bne.n	8010444 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010434:	f005 f94c 	bl	80156d0 <tcp_zero_window_probe>
 8010438:	4603      	mov	r3, r0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d014      	beq.n	8010468 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801043e:	2300      	movs	r3, #0
 8010440:	623b      	str	r3, [r7, #32]
 8010442:	e011      	b.n	8010468 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010446:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801044a:	4619      	mov	r1, r3
 801044c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801044e:	f004 f811 	bl	8014474 <tcp_split_unsent_seg>
 8010452:	4603      	mov	r3, r0
 8010454:	2b00      	cmp	r3, #0
 8010456:	d107      	bne.n	8010468 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801045a:	f004 fa91 	bl	8014980 <tcp_output>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d101      	bne.n	8010468 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010464:	2300      	movs	r3, #0
 8010466:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010468:	6a3b      	ldr	r3, [r7, #32]
 801046a:	2b00      	cmp	r3, #0
 801046c:	f000 80ac 	beq.w	80105c8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	2200      	movs	r2, #0
 8010474:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801047e:	2b06      	cmp	r3, #6
 8010480:	f200 80a2 	bhi.w	80105c8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010486:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801048a:	3301      	adds	r3, #1
 801048c:	b2da      	uxtb	r2, r3
 801048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010490:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010494:	e098      	b.n	80105c8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010498:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801049c:	2b00      	cmp	r3, #0
 801049e:	db0f      	blt.n	80104c0 <tcp_slowtmr+0x1f0>
 80104a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80104a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d008      	beq.n	80104c0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80104ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	3301      	adds	r3, #1
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	b21a      	sxth	r2, r3
 80104bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104be:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80104c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80104c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80104cc:	429a      	cmp	r2, r3
 80104ce:	db7b      	blt.n	80105c8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80104d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104d2:	f004 fd47 	bl	8014f64 <tcp_rexmit_rto_prepare>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d007      	beq.n	80104ec <tcp_slowtmr+0x21c>
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d171      	bne.n	80105c8 <tcp_slowtmr+0x2f8>
 80104e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d06d      	beq.n	80105c8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80104ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ee:	7d1b      	ldrb	r3, [r3, #20]
 80104f0:	2b02      	cmp	r3, #2
 80104f2:	d03a      	beq.n	801056a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80104fa:	2b0c      	cmp	r3, #12
 80104fc:	bf28      	it	cs
 80104fe:	230c      	movcs	r3, #12
 8010500:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010504:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010508:	10db      	asrs	r3, r3, #3
 801050a:	b21b      	sxth	r3, r3
 801050c:	461a      	mov	r2, r3
 801050e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010510:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010514:	4413      	add	r3, r2
 8010516:	7efa      	ldrb	r2, [r7, #27]
 8010518:	4910      	ldr	r1, [pc, #64]	; (801055c <tcp_slowtmr+0x28c>)
 801051a:	5c8a      	ldrb	r2, [r1, r2]
 801051c:	4093      	lsls	r3, r2
 801051e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010526:	4293      	cmp	r3, r2
 8010528:	dc1a      	bgt.n	8010560 <tcp_slowtmr+0x290>
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	b21a      	sxth	r2, r3
 801052e:	e019      	b.n	8010564 <tcp_slowtmr+0x294>
 8010530:	20011054 	.word	0x20011054
 8010534:	20004b6a 	.word	0x20004b6a
 8010538:	20011050 	.word	0x20011050
 801053c:	0801db98 	.word	0x0801db98
 8010540:	0801dedc 	.word	0x0801dedc
 8010544:	0801dbdc 	.word	0x0801dbdc
 8010548:	0801df08 	.word	0x0801df08
 801054c:	0801df34 	.word	0x0801df34
 8010550:	0801df64 	.word	0x0801df64
 8010554:	0801df98 	.word	0x0801df98
 8010558:	0801fdc4 	.word	0x0801fdc4
 801055c:	0801fdb4 	.word	0x0801fdb4
 8010560:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010566:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056c:	2200      	movs	r2, #0
 801056e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010572:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010578:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801057c:	4293      	cmp	r3, r2
 801057e:	bf28      	it	cs
 8010580:	4613      	movcs	r3, r2
 8010582:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010584:	8a7b      	ldrh	r3, [r7, #18]
 8010586:	085b      	lsrs	r3, r3, #1
 8010588:	b29a      	uxth	r2, r3
 801058a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010592:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801059a:	005b      	lsls	r3, r3, #1
 801059c:	b29b      	uxth	r3, r3
 801059e:	429a      	cmp	r2, r3
 80105a0:	d206      	bcs.n	80105b0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80105a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105a6:	005b      	lsls	r3, r3, #1
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80105b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80105b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80105ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105bc:	2200      	movs	r2, #0
 80105be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80105c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105c4:	f004 fd3e 	bl	8015044 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ca:	7d1b      	ldrb	r3, [r3, #20]
 80105cc:	2b06      	cmp	r3, #6
 80105ce:	d111      	bne.n	80105f4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80105d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d2:	8b5b      	ldrh	r3, [r3, #26]
 80105d4:	f003 0310 	and.w	r3, r3, #16
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d00b      	beq.n	80105f4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80105dc:	4b9d      	ldr	r3, [pc, #628]	; (8010854 <tcp_slowtmr+0x584>)
 80105de:	681a      	ldr	r2, [r3, #0]
 80105e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e2:	6a1b      	ldr	r3, [r3, #32]
 80105e4:	1ad3      	subs	r3, r2, r3
 80105e6:	2b28      	cmp	r3, #40	; 0x28
 80105e8:	d904      	bls.n	80105f4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80105ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105ee:	3301      	adds	r3, #1
 80105f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	7a5b      	ldrb	r3, [r3, #9]
 80105f8:	f003 0308 	and.w	r3, r3, #8
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d04c      	beq.n	801069a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010602:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010604:	2b04      	cmp	r3, #4
 8010606:	d003      	beq.n	8010610 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801060c:	2b07      	cmp	r3, #7
 801060e:	d144      	bne.n	801069a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010610:	4b90      	ldr	r3, [pc, #576]	; (8010854 <tcp_slowtmr+0x584>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010616:	6a1b      	ldr	r3, [r3, #32]
 8010618:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801061a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010620:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8010624:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8010628:	498b      	ldr	r1, [pc, #556]	; (8010858 <tcp_slowtmr+0x588>)
 801062a:	fba1 1303 	umull	r1, r3, r1, r3
 801062e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010630:	429a      	cmp	r2, r3
 8010632:	d90a      	bls.n	801064a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010638:	3301      	adds	r3, #1
 801063a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801063e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010642:	3301      	adds	r3, #1
 8010644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010648:	e027      	b.n	801069a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801064a:	4b82      	ldr	r3, [pc, #520]	; (8010854 <tcp_slowtmr+0x584>)
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010650:	6a1b      	ldr	r3, [r3, #32]
 8010652:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010656:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010660:	4618      	mov	r0, r3
 8010662:	4b7e      	ldr	r3, [pc, #504]	; (801085c <tcp_slowtmr+0x58c>)
 8010664:	fb03 f300 	mul.w	r3, r3, r0
 8010668:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801066a:	497b      	ldr	r1, [pc, #492]	; (8010858 <tcp_slowtmr+0x588>)
 801066c:	fba1 1303 	umull	r1, r3, r1, r3
 8010670:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010672:	429a      	cmp	r2, r3
 8010674:	d911      	bls.n	801069a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010678:	f004 ffea 	bl	8015650 <tcp_keepalive>
 801067c:	4603      	mov	r3, r0
 801067e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8010682:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010686:	2b00      	cmp	r3, #0
 8010688:	d107      	bne.n	801069a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010690:	3301      	adds	r3, #1
 8010692:	b2da      	uxtb	r2, r3
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d011      	beq.n	80106c6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80106a2:	4b6c      	ldr	r3, [pc, #432]	; (8010854 <tcp_slowtmr+0x584>)
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a8:	6a1b      	ldr	r3, [r3, #32]
 80106aa:	1ad2      	subs	r2, r2, r3
 80106ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80106b2:	4619      	mov	r1, r3
 80106b4:	460b      	mov	r3, r1
 80106b6:	005b      	lsls	r3, r3, #1
 80106b8:	440b      	add	r3, r1
 80106ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80106bc:	429a      	cmp	r2, r3
 80106be:	d302      	bcc.n	80106c6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80106c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106c2:	f000 fea9 	bl	8011418 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80106c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c8:	7d1b      	ldrb	r3, [r3, #20]
 80106ca:	2b03      	cmp	r3, #3
 80106cc:	d10b      	bne.n	80106e6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80106ce:	4b61      	ldr	r3, [pc, #388]	; (8010854 <tcp_slowtmr+0x584>)
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d4:	6a1b      	ldr	r3, [r3, #32]
 80106d6:	1ad3      	subs	r3, r2, r3
 80106d8:	2b28      	cmp	r3, #40	; 0x28
 80106da:	d904      	bls.n	80106e6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80106dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106e0:	3301      	adds	r3, #1
 80106e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80106e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e8:	7d1b      	ldrb	r3, [r3, #20]
 80106ea:	2b09      	cmp	r3, #9
 80106ec:	d10b      	bne.n	8010706 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80106ee:	4b59      	ldr	r3, [pc, #356]	; (8010854 <tcp_slowtmr+0x584>)
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f4:	6a1b      	ldr	r3, [r3, #32]
 80106f6:	1ad3      	subs	r3, r2, r3
 80106f8:	2bf0      	cmp	r3, #240	; 0xf0
 80106fa:	d904      	bls.n	8010706 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80106fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010700:	3301      	adds	r3, #1
 8010702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801070a:	2b00      	cmp	r3, #0
 801070c:	d060      	beq.n	80107d0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801070e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010714:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010718:	f000 fcca 	bl	80110b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801071c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071e:	2b00      	cmp	r3, #0
 8010720:	d010      	beq.n	8010744 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010722:	4b4f      	ldr	r3, [pc, #316]	; (8010860 <tcp_slowtmr+0x590>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010728:	429a      	cmp	r2, r3
 801072a:	d106      	bne.n	801073a <tcp_slowtmr+0x46a>
 801072c:	4b4d      	ldr	r3, [pc, #308]	; (8010864 <tcp_slowtmr+0x594>)
 801072e:	f240 526d 	movw	r2, #1389	; 0x56d
 8010732:	494d      	ldr	r1, [pc, #308]	; (8010868 <tcp_slowtmr+0x598>)
 8010734:	484d      	ldr	r0, [pc, #308]	; (801086c <tcp_slowtmr+0x59c>)
 8010736:	f00a fd91 	bl	801b25c <iprintf>
        prev->next = pcb->next;
 801073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073c:	68da      	ldr	r2, [r3, #12]
 801073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010740:	60da      	str	r2, [r3, #12]
 8010742:	e00f      	b.n	8010764 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010744:	4b46      	ldr	r3, [pc, #280]	; (8010860 <tcp_slowtmr+0x590>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801074a:	429a      	cmp	r2, r3
 801074c:	d006      	beq.n	801075c <tcp_slowtmr+0x48c>
 801074e:	4b45      	ldr	r3, [pc, #276]	; (8010864 <tcp_slowtmr+0x594>)
 8010750:	f240 5271 	movw	r2, #1393	; 0x571
 8010754:	4946      	ldr	r1, [pc, #280]	; (8010870 <tcp_slowtmr+0x5a0>)
 8010756:	4845      	ldr	r0, [pc, #276]	; (801086c <tcp_slowtmr+0x59c>)
 8010758:	f00a fd80 	bl	801b25c <iprintf>
        tcp_active_pcbs = pcb->next;
 801075c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	4a3f      	ldr	r2, [pc, #252]	; (8010860 <tcp_slowtmr+0x590>)
 8010762:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010764:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010768:	2b00      	cmp	r3, #0
 801076a:	d013      	beq.n	8010794 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010772:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010774:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010778:	3304      	adds	r3, #4
 801077a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801077c:	8ad2      	ldrh	r2, [r2, #22]
 801077e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010780:	8b09      	ldrh	r1, [r1, #24]
 8010782:	9102      	str	r1, [sp, #8]
 8010784:	9201      	str	r2, [sp, #4]
 8010786:	9300      	str	r3, [sp, #0]
 8010788:	462b      	mov	r3, r5
 801078a:	4622      	mov	r2, r4
 801078c:	4601      	mov	r1, r0
 801078e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010790:	f004 feaa 	bl	80154e8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079c:	7d1b      	ldrb	r3, [r3, #20]
 801079e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80107a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80107a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80107aa:	6838      	ldr	r0, [r7, #0]
 80107ac:	f7ff f8b8 	bl	800f920 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80107b0:	4b30      	ldr	r3, [pc, #192]	; (8010874 <tcp_slowtmr+0x5a4>)
 80107b2:	2200      	movs	r2, #0
 80107b4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d004      	beq.n	80107c6 <tcp_slowtmr+0x4f6>
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f06f 010c 	mvn.w	r1, #12
 80107c2:	68b8      	ldr	r0, [r7, #8]
 80107c4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80107c6:	4b2b      	ldr	r3, [pc, #172]	; (8010874 <tcp_slowtmr+0x5a4>)
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d037      	beq.n	801083e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80107ce:	e590      	b.n	80102f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80107d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80107d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80107da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107dc:	7f1b      	ldrb	r3, [r3, #28]
 80107de:	3301      	adds	r3, #1
 80107e0:	b2da      	uxtb	r2, r3
 80107e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80107e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e8:	7f1a      	ldrb	r2, [r3, #28]
 80107ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ec:	7f5b      	ldrb	r3, [r3, #29]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d325      	bcc.n	801083e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80107f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f4:	2200      	movs	r2, #0
 80107f6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80107f8:	4b1e      	ldr	r3, [pc, #120]	; (8010874 <tcp_slowtmr+0x5a4>)
 80107fa:	2200      	movs	r2, #0
 80107fc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80107fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00b      	beq.n	8010820 <tcp_slowtmr+0x550>
 8010808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801080a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801080e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010810:	6912      	ldr	r2, [r2, #16]
 8010812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010814:	4610      	mov	r0, r2
 8010816:	4798      	blx	r3
 8010818:	4603      	mov	r3, r0
 801081a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801081e:	e002      	b.n	8010826 <tcp_slowtmr+0x556>
 8010820:	2300      	movs	r3, #0
 8010822:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010826:	4b13      	ldr	r3, [pc, #76]	; (8010874 <tcp_slowtmr+0x5a4>)
 8010828:	781b      	ldrb	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d000      	beq.n	8010830 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801082e:	e560      	b.n	80102f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010830:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010834:	2b00      	cmp	r3, #0
 8010836:	d102      	bne.n	801083e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801083a:	f004 f8a1 	bl	8014980 <tcp_output>
  while (pcb != NULL) {
 801083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010840:	2b00      	cmp	r3, #0
 8010842:	f47f ad5c 	bne.w	80102fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010846:	2300      	movs	r3, #0
 8010848:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801084a:	4b0b      	ldr	r3, [pc, #44]	; (8010878 <tcp_slowtmr+0x5a8>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010850:	e067      	b.n	8010922 <tcp_slowtmr+0x652>
 8010852:	bf00      	nop
 8010854:	20011054 	.word	0x20011054
 8010858:	10624dd3 	.word	0x10624dd3
 801085c:	000124f8 	.word	0x000124f8
 8010860:	20011050 	.word	0x20011050
 8010864:	0801db98 	.word	0x0801db98
 8010868:	0801dfd0 	.word	0x0801dfd0
 801086c:	0801dbdc 	.word	0x0801dbdc
 8010870:	0801dffc 	.word	0x0801dffc
 8010874:	2001104c 	.word	0x2001104c
 8010878:	20011060 	.word	0x20011060
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	7d1b      	ldrb	r3, [r3, #20]
 8010880:	2b0a      	cmp	r3, #10
 8010882:	d006      	beq.n	8010892 <tcp_slowtmr+0x5c2>
 8010884:	4b2b      	ldr	r3, [pc, #172]	; (8010934 <tcp_slowtmr+0x664>)
 8010886:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801088a:	492b      	ldr	r1, [pc, #172]	; (8010938 <tcp_slowtmr+0x668>)
 801088c:	482b      	ldr	r0, [pc, #172]	; (801093c <tcp_slowtmr+0x66c>)
 801088e:	f00a fce5 	bl	801b25c <iprintf>
    pcb_remove = 0;
 8010892:	2300      	movs	r3, #0
 8010894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010898:	4b29      	ldr	r3, [pc, #164]	; (8010940 <tcp_slowtmr+0x670>)
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801089e:	6a1b      	ldr	r3, [r3, #32]
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	2bf0      	cmp	r3, #240	; 0xf0
 80108a4:	d904      	bls.n	80108b0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80108a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108aa:	3301      	adds	r3, #1
 80108ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80108b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d02f      	beq.n	8010918 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80108b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80108ba:	f000 fbf9 	bl	80110b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80108be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d010      	beq.n	80108e6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80108c4:	4b1f      	ldr	r3, [pc, #124]	; (8010944 <tcp_slowtmr+0x674>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d106      	bne.n	80108dc <tcp_slowtmr+0x60c>
 80108ce:	4b19      	ldr	r3, [pc, #100]	; (8010934 <tcp_slowtmr+0x664>)
 80108d0:	f240 52af 	movw	r2, #1455	; 0x5af
 80108d4:	491c      	ldr	r1, [pc, #112]	; (8010948 <tcp_slowtmr+0x678>)
 80108d6:	4819      	ldr	r0, [pc, #100]	; (801093c <tcp_slowtmr+0x66c>)
 80108d8:	f00a fcc0 	bl	801b25c <iprintf>
        prev->next = pcb->next;
 80108dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108de:	68da      	ldr	r2, [r3, #12]
 80108e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108e2:	60da      	str	r2, [r3, #12]
 80108e4:	e00f      	b.n	8010906 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80108e6:	4b17      	ldr	r3, [pc, #92]	; (8010944 <tcp_slowtmr+0x674>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d006      	beq.n	80108fe <tcp_slowtmr+0x62e>
 80108f0:	4b10      	ldr	r3, [pc, #64]	; (8010934 <tcp_slowtmr+0x664>)
 80108f2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80108f6:	4915      	ldr	r1, [pc, #84]	; (801094c <tcp_slowtmr+0x67c>)
 80108f8:	4810      	ldr	r0, [pc, #64]	; (801093c <tcp_slowtmr+0x66c>)
 80108fa:	f00a fcaf 	bl	801b25c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80108fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	4a10      	ldr	r2, [pc, #64]	; (8010944 <tcp_slowtmr+0x674>)
 8010904:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010908:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010910:	69f8      	ldr	r0, [r7, #28]
 8010912:	f7ff f805 	bl	800f920 <tcp_free>
 8010916:	e004      	b.n	8010922 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010924:	2b00      	cmp	r3, #0
 8010926:	d1a9      	bne.n	801087c <tcp_slowtmr+0x5ac>
    }
  }
}
 8010928:	bf00      	nop
 801092a:	bf00      	nop
 801092c:	3730      	adds	r7, #48	; 0x30
 801092e:	46bd      	mov	sp, r7
 8010930:	bdb0      	pop	{r4, r5, r7, pc}
 8010932:	bf00      	nop
 8010934:	0801db98 	.word	0x0801db98
 8010938:	0801e028 	.word	0x0801e028
 801093c:	0801dbdc 	.word	0x0801dbdc
 8010940:	20011054 	.word	0x20011054
 8010944:	20011060 	.word	0x20011060
 8010948:	0801e058 	.word	0x0801e058
 801094c:	0801e080 	.word	0x0801e080

08010950 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010956:	4b2d      	ldr	r3, [pc, #180]	; (8010a0c <tcp_fasttmr+0xbc>)
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	3301      	adds	r3, #1
 801095c:	b2da      	uxtb	r2, r3
 801095e:	4b2b      	ldr	r3, [pc, #172]	; (8010a0c <tcp_fasttmr+0xbc>)
 8010960:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010962:	4b2b      	ldr	r3, [pc, #172]	; (8010a10 <tcp_fasttmr+0xc0>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010968:	e048      	b.n	80109fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	7f9a      	ldrb	r2, [r3, #30]
 801096e:	4b27      	ldr	r3, [pc, #156]	; (8010a0c <tcp_fasttmr+0xbc>)
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	429a      	cmp	r2, r3
 8010974:	d03f      	beq.n	80109f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010976:	4b25      	ldr	r3, [pc, #148]	; (8010a0c <tcp_fasttmr+0xbc>)
 8010978:	781a      	ldrb	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	8b5b      	ldrh	r3, [r3, #26]
 8010982:	f003 0301 	and.w	r3, r3, #1
 8010986:	2b00      	cmp	r3, #0
 8010988:	d010      	beq.n	80109ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	8b5b      	ldrh	r3, [r3, #26]
 801098e:	f043 0302 	orr.w	r3, r3, #2
 8010992:	b29a      	uxth	r2, r3
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f003 fff1 	bl	8014980 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	8b5b      	ldrh	r3, [r3, #26]
 80109a2:	f023 0303 	bic.w	r3, r3, #3
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	8b5b      	ldrh	r3, [r3, #26]
 80109b0:	f003 0308 	and.w	r3, r3, #8
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d009      	beq.n	80109cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	8b5b      	ldrh	r3, [r3, #26]
 80109bc:	f023 0308 	bic.w	r3, r3, #8
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff f93e 	bl	800fc48 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	68db      	ldr	r3, [r3, #12]
 80109d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d00a      	beq.n	80109f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80109da:	4b0e      	ldr	r3, [pc, #56]	; (8010a14 <tcp_fasttmr+0xc4>)
 80109dc:	2200      	movs	r2, #0
 80109de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 f819 	bl	8010a18 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80109e6:	4b0b      	ldr	r3, [pc, #44]	; (8010a14 <tcp_fasttmr+0xc4>)
 80109e8:	781b      	ldrb	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d000      	beq.n	80109f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80109ee:	e7b8      	b.n	8010962 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	607b      	str	r3, [r7, #4]
 80109f4:	e002      	b.n	80109fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d1b3      	bne.n	801096a <tcp_fasttmr+0x1a>
    }
  }
}
 8010a02:	bf00      	nop
 8010a04:	bf00      	nop
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	20004b6a 	.word	0x20004b6a
 8010a10:	20011050 	.word	0x20011050
 8010a14:	2001104c 	.word	0x2001104c

08010a18 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010a18:	b590      	push	{r4, r7, lr}
 8010a1a:	b085      	sub	sp, #20
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d109      	bne.n	8010a3a <tcp_process_refused_data+0x22>
 8010a26:	4b37      	ldr	r3, [pc, #220]	; (8010b04 <tcp_process_refused_data+0xec>)
 8010a28:	f240 6209 	movw	r2, #1545	; 0x609
 8010a2c:	4936      	ldr	r1, [pc, #216]	; (8010b08 <tcp_process_refused_data+0xf0>)
 8010a2e:	4837      	ldr	r0, [pc, #220]	; (8010b0c <tcp_process_refused_data+0xf4>)
 8010a30:	f00a fc14 	bl	801b25c <iprintf>
 8010a34:	f06f 030f 	mvn.w	r3, #15
 8010a38:	e060      	b.n	8010afc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a3e:	7b5b      	ldrb	r3, [r3, #13]
 8010a40:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a46:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d00b      	beq.n	8010a70 <tcp_process_refused_data+0x58>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6918      	ldr	r0, [r3, #16]
 8010a62:	2300      	movs	r3, #0
 8010a64:	68ba      	ldr	r2, [r7, #8]
 8010a66:	6879      	ldr	r1, [r7, #4]
 8010a68:	47a0      	blx	r4
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	73fb      	strb	r3, [r7, #15]
 8010a6e:	e007      	b.n	8010a80 <tcp_process_refused_data+0x68>
 8010a70:	2300      	movs	r3, #0
 8010a72:	68ba      	ldr	r2, [r7, #8]
 8010a74:	6879      	ldr	r1, [r7, #4]
 8010a76:	2000      	movs	r0, #0
 8010a78:	f000 f8a4 	bl	8010bc4 <tcp_recv_null>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d12a      	bne.n	8010ade <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010a88:	7bbb      	ldrb	r3, [r7, #14]
 8010a8a:	f003 0320 	and.w	r3, r3, #32
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d033      	beq.n	8010afa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010a9a:	d005      	beq.n	8010aa8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	b29a      	uxth	r2, r3
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d00b      	beq.n	8010aca <tcp_process_refused_data+0xb2>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6918      	ldr	r0, [r3, #16]
 8010abc:	2300      	movs	r3, #0
 8010abe:	2200      	movs	r2, #0
 8010ac0:	6879      	ldr	r1, [r7, #4]
 8010ac2:	47a0      	blx	r4
 8010ac4:	4603      	mov	r3, r0
 8010ac6:	73fb      	strb	r3, [r7, #15]
 8010ac8:	e001      	b.n	8010ace <tcp_process_refused_data+0xb6>
 8010aca:	2300      	movs	r3, #0
 8010acc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ad2:	f113 0f0d 	cmn.w	r3, #13
 8010ad6:	d110      	bne.n	8010afa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010ad8:	f06f 030c 	mvn.w	r3, #12
 8010adc:	e00e      	b.n	8010afc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ae2:	f113 0f0d 	cmn.w	r3, #13
 8010ae6:	d102      	bne.n	8010aee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010ae8:	f06f 030c 	mvn.w	r3, #12
 8010aec:	e006      	b.n	8010afc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	68ba      	ldr	r2, [r7, #8]
 8010af2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010af4:	f06f 0304 	mvn.w	r3, #4
 8010af8:	e000      	b.n	8010afc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010afa:	2300      	movs	r3, #0
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3714      	adds	r7, #20
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd90      	pop	{r4, r7, pc}
 8010b04:	0801db98 	.word	0x0801db98
 8010b08:	0801e0a8 	.word	0x0801e0a8
 8010b0c:	0801dbdc 	.word	0x0801dbdc

08010b10 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010b18:	e007      	b.n	8010b2a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f000 f80a 	bl	8010b3a <tcp_seg_free>
    seg = next;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d1f4      	bne.n	8010b1a <tcp_segs_free+0xa>
  }
}
 8010b30:	bf00      	nop
 8010b32:	bf00      	nop
 8010b34:	3710      	adds	r7, #16
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b082      	sub	sp, #8
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d00c      	beq.n	8010b62 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	685b      	ldr	r3, [r3, #4]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d004      	beq.n	8010b5a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fe fb95 	bl	800f284 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010b5a:	6879      	ldr	r1, [r7, #4]
 8010b5c:	2003      	movs	r0, #3
 8010b5e:	f7fd fced 	bl	800e53c <memp_free>
  }
}
 8010b62:	bf00      	nop
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
	...

08010b6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d106      	bne.n	8010b88 <tcp_seg_copy+0x1c>
 8010b7a:	4b0f      	ldr	r3, [pc, #60]	; (8010bb8 <tcp_seg_copy+0x4c>)
 8010b7c:	f240 6282 	movw	r2, #1666	; 0x682
 8010b80:	490e      	ldr	r1, [pc, #56]	; (8010bbc <tcp_seg_copy+0x50>)
 8010b82:	480f      	ldr	r0, [pc, #60]	; (8010bc0 <tcp_seg_copy+0x54>)
 8010b84:	f00a fb6a 	bl	801b25c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010b88:	2003      	movs	r0, #3
 8010b8a:	f7fd fc85 	bl	800e498 <memp_malloc>
 8010b8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d101      	bne.n	8010b9a <tcp_seg_copy+0x2e>
    return NULL;
 8010b96:	2300      	movs	r3, #0
 8010b98:	e00a      	b.n	8010bb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010b9a:	2210      	movs	r2, #16
 8010b9c:	6879      	ldr	r1, [r7, #4]
 8010b9e:	68f8      	ldr	r0, [r7, #12]
 8010ba0:	f00a fa9c 	bl	801b0dc <memcpy>
  pbuf_ref(cseg->p);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7fe fc11 	bl	800f3d0 <pbuf_ref>
  return cseg;
 8010bae:	68fb      	ldr	r3, [r7, #12]
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3710      	adds	r7, #16
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	0801db98 	.word	0x0801db98
 8010bbc:	0801e0ec 	.word	0x0801e0ec
 8010bc0:	0801dbdc 	.word	0x0801dbdc

08010bc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b084      	sub	sp, #16
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	607a      	str	r2, [r7, #4]
 8010bd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d109      	bne.n	8010bec <tcp_recv_null+0x28>
 8010bd8:	4b12      	ldr	r3, [pc, #72]	; (8010c24 <tcp_recv_null+0x60>)
 8010bda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010bde:	4912      	ldr	r1, [pc, #72]	; (8010c28 <tcp_recv_null+0x64>)
 8010be0:	4812      	ldr	r0, [pc, #72]	; (8010c2c <tcp_recv_null+0x68>)
 8010be2:	f00a fb3b 	bl	801b25c <iprintf>
 8010be6:	f06f 030f 	mvn.w	r3, #15
 8010bea:	e016      	b.n	8010c1a <tcp_recv_null+0x56>

  if (p != NULL) {
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d009      	beq.n	8010c06 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	891b      	ldrh	r3, [r3, #8]
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	68b8      	ldr	r0, [r7, #8]
 8010bfa:	f7ff fad3 	bl	80101a4 <tcp_recved>
    pbuf_free(p);
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f7fe fb40 	bl	800f284 <pbuf_free>
 8010c04:	e008      	b.n	8010c18 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d104      	bne.n	8010c18 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010c0e:	68b8      	ldr	r0, [r7, #8]
 8010c10:	f7ff f884 	bl	800fd1c <tcp_close>
 8010c14:	4603      	mov	r3, r0
 8010c16:	e000      	b.n	8010c1a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010c18:	2300      	movs	r3, #0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3710      	adds	r7, #16
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	0801db98 	.word	0x0801db98
 8010c28:	0801e108 	.word	0x0801e108
 8010c2c:	0801dbdc 	.word	0x0801dbdc

08010c30 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b086      	sub	sp, #24
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	4603      	mov	r3, r0
 8010c38:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	db01      	blt.n	8010c46 <tcp_kill_prio+0x16>
 8010c42:	79fb      	ldrb	r3, [r7, #7]
 8010c44:	e000      	b.n	8010c48 <tcp_kill_prio+0x18>
 8010c46:	237f      	movs	r3, #127	; 0x7f
 8010c48:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010c4a:	7afb      	ldrb	r3, [r7, #11]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d034      	beq.n	8010cba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010c50:	7afb      	ldrb	r3, [r7, #11]
 8010c52:	3b01      	subs	r3, #1
 8010c54:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010c56:	2300      	movs	r3, #0
 8010c58:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c5e:	4b19      	ldr	r3, [pc, #100]	; (8010cc4 <tcp_kill_prio+0x94>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	617b      	str	r3, [r7, #20]
 8010c64:	e01f      	b.n	8010ca6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	7d5b      	ldrb	r3, [r3, #21]
 8010c6a:	7afa      	ldrb	r2, [r7, #11]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d80c      	bhi.n	8010c8a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010c74:	7afa      	ldrb	r2, [r7, #11]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d112      	bne.n	8010ca0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010c7a:	4b13      	ldr	r3, [pc, #76]	; (8010cc8 <tcp_kill_prio+0x98>)
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	6a1b      	ldr	r3, [r3, #32]
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	68fa      	ldr	r2, [r7, #12]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d80a      	bhi.n	8010ca0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010c8a:	4b0f      	ldr	r3, [pc, #60]	; (8010cc8 <tcp_kill_prio+0x98>)
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	6a1b      	ldr	r3, [r3, #32]
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	7d5b      	ldrb	r3, [r3, #21]
 8010c9e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	617b      	str	r3, [r7, #20]
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d1dc      	bne.n	8010c66 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d004      	beq.n	8010cbc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010cb2:	6938      	ldr	r0, [r7, #16]
 8010cb4:	f7ff f978 	bl	800ffa8 <tcp_abort>
 8010cb8:	e000      	b.n	8010cbc <tcp_kill_prio+0x8c>
    return;
 8010cba:	bf00      	nop
  }
}
 8010cbc:	3718      	adds	r7, #24
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	20011050 	.word	0x20011050
 8010cc8:	20011054 	.word	0x20011054

08010ccc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b086      	sub	sp, #24
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010cd6:	79fb      	ldrb	r3, [r7, #7]
 8010cd8:	2b08      	cmp	r3, #8
 8010cda:	d009      	beq.n	8010cf0 <tcp_kill_state+0x24>
 8010cdc:	79fb      	ldrb	r3, [r7, #7]
 8010cde:	2b09      	cmp	r3, #9
 8010ce0:	d006      	beq.n	8010cf0 <tcp_kill_state+0x24>
 8010ce2:	4b1a      	ldr	r3, [pc, #104]	; (8010d4c <tcp_kill_state+0x80>)
 8010ce4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010ce8:	4919      	ldr	r1, [pc, #100]	; (8010d50 <tcp_kill_state+0x84>)
 8010cea:	481a      	ldr	r0, [pc, #104]	; (8010d54 <tcp_kill_state+0x88>)
 8010cec:	f00a fab6 	bl	801b25c <iprintf>

  inactivity = 0;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cf8:	4b17      	ldr	r3, [pc, #92]	; (8010d58 <tcp_kill_state+0x8c>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	617b      	str	r3, [r7, #20]
 8010cfe:	e017      	b.n	8010d30 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	7d1b      	ldrb	r3, [r3, #20]
 8010d04:	79fa      	ldrb	r2, [r7, #7]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d10f      	bne.n	8010d2a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010d0a:	4b14      	ldr	r3, [pc, #80]	; (8010d5c <tcp_kill_state+0x90>)
 8010d0c:	681a      	ldr	r2, [r3, #0]
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	6a1b      	ldr	r3, [r3, #32]
 8010d12:	1ad3      	subs	r3, r2, r3
 8010d14:	68fa      	ldr	r2, [r7, #12]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d807      	bhi.n	8010d2a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010d1a:	4b10      	ldr	r3, [pc, #64]	; (8010d5c <tcp_kill_state+0x90>)
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	6a1b      	ldr	r3, [r3, #32]
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	617b      	str	r3, [r7, #20]
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d1e4      	bne.n	8010d00 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d003      	beq.n	8010d44 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010d3c:	2100      	movs	r1, #0
 8010d3e:	6938      	ldr	r0, [r7, #16]
 8010d40:	f7ff f874 	bl	800fe2c <tcp_abandon>
  }
}
 8010d44:	bf00      	nop
 8010d46:	3718      	adds	r7, #24
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	0801db98 	.word	0x0801db98
 8010d50:	0801e124 	.word	0x0801e124
 8010d54:	0801dbdc 	.word	0x0801dbdc
 8010d58:	20011050 	.word	0x20011050
 8010d5c:	20011054 	.word	0x20011054

08010d60 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d6e:	4b12      	ldr	r3, [pc, #72]	; (8010db8 <tcp_kill_timewait+0x58>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	60fb      	str	r3, [r7, #12]
 8010d74:	e012      	b.n	8010d9c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010d76:	4b11      	ldr	r3, [pc, #68]	; (8010dbc <tcp_kill_timewait+0x5c>)
 8010d78:	681a      	ldr	r2, [r3, #0]
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	6a1b      	ldr	r3, [r3, #32]
 8010d7e:	1ad3      	subs	r3, r2, r3
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d807      	bhi.n	8010d96 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010d86:	4b0d      	ldr	r3, [pc, #52]	; (8010dbc <tcp_kill_timewait+0x5c>)
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	6a1b      	ldr	r3, [r3, #32]
 8010d8e:	1ad3      	subs	r3, r2, r3
 8010d90:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	60fb      	str	r3, [r7, #12]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d1e9      	bne.n	8010d76 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d002      	beq.n	8010dae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010da8:	68b8      	ldr	r0, [r7, #8]
 8010daa:	f7ff f8fd 	bl	800ffa8 <tcp_abort>
  }
}
 8010dae:	bf00      	nop
 8010db0:	3710      	adds	r7, #16
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	20011060 	.word	0x20011060
 8010dbc:	20011054 	.word	0x20011054

08010dc0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010dc6:	4b10      	ldr	r3, [pc, #64]	; (8010e08 <tcp_handle_closepend+0x48>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010dcc:	e014      	b.n	8010df8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	8b5b      	ldrh	r3, [r3, #26]
 8010dd8:	f003 0308 	and.w	r3, r3, #8
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d009      	beq.n	8010df4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	8b5b      	ldrh	r3, [r3, #26]
 8010de4:	f023 0308 	bic.w	r3, r3, #8
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f7fe ff2a 	bl	800fc48 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1e7      	bne.n	8010dce <tcp_handle_closepend+0xe>
  }
}
 8010dfe:	bf00      	nop
 8010e00:	bf00      	nop
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	20011050 	.word	0x20011050

08010e0c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	4603      	mov	r3, r0
 8010e14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e16:	2001      	movs	r0, #1
 8010e18:	f7fd fb3e 	bl	800e498 <memp_malloc>
 8010e1c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d126      	bne.n	8010e72 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010e24:	f7ff ffcc 	bl	8010dc0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010e28:	f7ff ff9a 	bl	8010d60 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e2c:	2001      	movs	r0, #1
 8010e2e:	f7fd fb33 	bl	800e498 <memp_malloc>
 8010e32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d11b      	bne.n	8010e72 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010e3a:	2009      	movs	r0, #9
 8010e3c:	f7ff ff46 	bl	8010ccc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e40:	2001      	movs	r0, #1
 8010e42:	f7fd fb29 	bl	800e498 <memp_malloc>
 8010e46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d111      	bne.n	8010e72 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010e4e:	2008      	movs	r0, #8
 8010e50:	f7ff ff3c 	bl	8010ccc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e54:	2001      	movs	r0, #1
 8010e56:	f7fd fb1f 	bl	800e498 <memp_malloc>
 8010e5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d107      	bne.n	8010e72 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010e62:	79fb      	ldrb	r3, [r7, #7]
 8010e64:	4618      	mov	r0, r3
 8010e66:	f7ff fee3 	bl	8010c30 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e6a:	2001      	movs	r0, #1
 8010e6c:	f7fd fb14 	bl	800e498 <memp_malloc>
 8010e70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d03f      	beq.n	8010ef8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010e78:	229c      	movs	r2, #156	; 0x9c
 8010e7a:	2100      	movs	r1, #0
 8010e7c:	68f8      	ldr	r0, [r7, #12]
 8010e7e:	f00a f93b 	bl	801b0f8 <memset>
    pcb->prio = prio;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	79fa      	ldrb	r2, [r7, #7]
 8010e86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010e8e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010e98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	22ff      	movs	r2, #255	; 0xff
 8010ea6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010eae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2206      	movs	r2, #6
 8010eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2206      	movs	r2, #6
 8010ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ec4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	2201      	movs	r2, #1
 8010eca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010ece:	4b0d      	ldr	r3, [pc, #52]	; (8010f04 <tcp_alloc+0xf8>)
 8010ed0:	681a      	ldr	r2, [r3, #0]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010ed6:	4b0c      	ldr	r3, [pc, #48]	; (8010f08 <tcp_alloc+0xfc>)
 8010ed8:	781a      	ldrb	r2, [r3, #0]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010ee4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	4a08      	ldr	r2, [pc, #32]	; (8010f0c <tcp_alloc+0x100>)
 8010eec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	4a07      	ldr	r2, [pc, #28]	; (8010f10 <tcp_alloc+0x104>)
 8010ef4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	20011054 	.word	0x20011054
 8010f08:	20004b6a 	.word	0x20004b6a
 8010f0c:	08010bc5 	.word	0x08010bc5
 8010f10:	006ddd00 	.word	0x006ddd00

08010f14 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b084      	sub	sp, #16
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010f1e:	2040      	movs	r0, #64	; 0x40
 8010f20:	f7ff ff74 	bl	8010e0c <tcp_alloc>
 8010f24:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010f26:	68fb      	ldr	r3, [r7, #12]
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3710      	adds	r7, #16
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d002      	beq.n	8010f46 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	683a      	ldr	r2, [r7, #0]
 8010f44:	611a      	str	r2, [r3, #16]
  }
}
 8010f46:	bf00      	nop
 8010f48:	370c      	adds	r7, #12
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr
	...

08010f54 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d00e      	beq.n	8010f82 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	7d1b      	ldrb	r3, [r3, #20]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d106      	bne.n	8010f7a <tcp_recv+0x26>
 8010f6c:	4b07      	ldr	r3, [pc, #28]	; (8010f8c <tcp_recv+0x38>)
 8010f6e:	f240 72df 	movw	r2, #2015	; 0x7df
 8010f72:	4907      	ldr	r1, [pc, #28]	; (8010f90 <tcp_recv+0x3c>)
 8010f74:	4807      	ldr	r0, [pc, #28]	; (8010f94 <tcp_recv+0x40>)
 8010f76:	f00a f971 	bl	801b25c <iprintf>
    pcb->recv = recv;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	683a      	ldr	r2, [r7, #0]
 8010f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010f82:	bf00      	nop
 8010f84:	3708      	adds	r7, #8
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
 8010f8a:	bf00      	nop
 8010f8c:	0801db98 	.word	0x0801db98
 8010f90:	0801e134 	.word	0x0801e134
 8010f94:	0801dbdc 	.word	0x0801dbdc

08010f98 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d00e      	beq.n	8010fc6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	7d1b      	ldrb	r3, [r3, #20]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	d106      	bne.n	8010fbe <tcp_sent+0x26>
 8010fb0:	4b07      	ldr	r3, [pc, #28]	; (8010fd0 <tcp_sent+0x38>)
 8010fb2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010fb6:	4907      	ldr	r1, [pc, #28]	; (8010fd4 <tcp_sent+0x3c>)
 8010fb8:	4807      	ldr	r0, [pc, #28]	; (8010fd8 <tcp_sent+0x40>)
 8010fba:	f00a f94f 	bl	801b25c <iprintf>
    pcb->sent = sent;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	683a      	ldr	r2, [r7, #0]
 8010fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010fc6:	bf00      	nop
 8010fc8:	3708      	adds	r7, #8
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd80      	pop	{r7, pc}
 8010fce:	bf00      	nop
 8010fd0:	0801db98 	.word	0x0801db98
 8010fd4:	0801e15c 	.word	0x0801e15c
 8010fd8:	0801dbdc 	.word	0x0801dbdc

08010fdc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d00e      	beq.n	801100a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	7d1b      	ldrb	r3, [r3, #20]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d106      	bne.n	8011002 <tcp_err+0x26>
 8010ff4:	4b07      	ldr	r3, [pc, #28]	; (8011014 <tcp_err+0x38>)
 8010ff6:	f640 020d 	movw	r2, #2061	; 0x80d
 8010ffa:	4907      	ldr	r1, [pc, #28]	; (8011018 <tcp_err+0x3c>)
 8010ffc:	4807      	ldr	r0, [pc, #28]	; (801101c <tcp_err+0x40>)
 8010ffe:	f00a f92d 	bl	801b25c <iprintf>
    pcb->errf = err;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	683a      	ldr	r2, [r7, #0]
 8011006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801100a:	bf00      	nop
 801100c:	3708      	adds	r7, #8
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
 8011012:	bf00      	nop
 8011014:	0801db98 	.word	0x0801db98
 8011018:	0801e184 	.word	0x0801e184
 801101c:	0801dbdc 	.word	0x0801dbdc

08011020 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d008      	beq.n	8011042 <tcp_accept+0x22>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	7d1b      	ldrb	r3, [r3, #20]
 8011034:	2b01      	cmp	r3, #1
 8011036:	d104      	bne.n	8011042 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	683a      	ldr	r2, [r7, #0]
 8011040:	619a      	str	r2, [r3, #24]
  }
}
 8011042:	bf00      	nop
 8011044:	3714      	adds	r7, #20
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr
	...

08011050 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	60f8      	str	r0, [r7, #12]
 8011058:	60b9      	str	r1, [r7, #8]
 801105a:	4613      	mov	r3, r2
 801105c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d107      	bne.n	8011074 <tcp_poll+0x24>
 8011064:	4b0e      	ldr	r3, [pc, #56]	; (80110a0 <tcp_poll+0x50>)
 8011066:	f640 023d 	movw	r2, #2109	; 0x83d
 801106a:	490e      	ldr	r1, [pc, #56]	; (80110a4 <tcp_poll+0x54>)
 801106c:	480e      	ldr	r0, [pc, #56]	; (80110a8 <tcp_poll+0x58>)
 801106e:	f00a f8f5 	bl	801b25c <iprintf>
 8011072:	e011      	b.n	8011098 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	7d1b      	ldrb	r3, [r3, #20]
 8011078:	2b01      	cmp	r3, #1
 801107a:	d106      	bne.n	801108a <tcp_poll+0x3a>
 801107c:	4b08      	ldr	r3, [pc, #32]	; (80110a0 <tcp_poll+0x50>)
 801107e:	f640 023e 	movw	r2, #2110	; 0x83e
 8011082:	490a      	ldr	r1, [pc, #40]	; (80110ac <tcp_poll+0x5c>)
 8011084:	4808      	ldr	r0, [pc, #32]	; (80110a8 <tcp_poll+0x58>)
 8011086:	f00a f8e9 	bl	801b25c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	79fa      	ldrb	r2, [r7, #7]
 8011096:	775a      	strb	r2, [r3, #29]
}
 8011098:	3710      	adds	r7, #16
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	0801db98 	.word	0x0801db98
 80110a4:	0801e1ac 	.word	0x0801e1ac
 80110a8:	0801dbdc 	.word	0x0801dbdc
 80110ac:	0801e1c4 	.word	0x0801e1c4

080110b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d107      	bne.n	80110ce <tcp_pcb_purge+0x1e>
 80110be:	4b21      	ldr	r3, [pc, #132]	; (8011144 <tcp_pcb_purge+0x94>)
 80110c0:	f640 0251 	movw	r2, #2129	; 0x851
 80110c4:	4920      	ldr	r1, [pc, #128]	; (8011148 <tcp_pcb_purge+0x98>)
 80110c6:	4821      	ldr	r0, [pc, #132]	; (801114c <tcp_pcb_purge+0x9c>)
 80110c8:	f00a f8c8 	bl	801b25c <iprintf>
 80110cc:	e037      	b.n	801113e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	7d1b      	ldrb	r3, [r3, #20]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d033      	beq.n	801113e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80110da:	2b0a      	cmp	r3, #10
 80110dc:	d02f      	beq.n	801113e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d02b      	beq.n	801113e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d007      	beq.n	80110fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fe f8c6 	bl	800f284 <pbuf_free>
      pcb->refused_data = NULL;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2200      	movs	r2, #0
 80110fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011102:	2b00      	cmp	r3, #0
 8011104:	d002      	beq.n	801110c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f000 f986 	bl	8011418 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011112:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011118:	4618      	mov	r0, r3
 801111a:	f7ff fcf9 	bl	8010b10 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011122:	4618      	mov	r0, r3
 8011124:	f7ff fcf4 	bl	8010b10 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	66da      	str	r2, [r3, #108]	; 0x6c
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2200      	movs	r2, #0
 801113a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	0801db98 	.word	0x0801db98
 8011148:	0801e1e4 	.word	0x0801e1e4
 801114c:	0801dbdc 	.word	0x0801dbdc

08011150 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
 8011158:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d106      	bne.n	801116e <tcp_pcb_remove+0x1e>
 8011160:	4b3e      	ldr	r3, [pc, #248]	; (801125c <tcp_pcb_remove+0x10c>)
 8011162:	f640 0283 	movw	r2, #2179	; 0x883
 8011166:	493e      	ldr	r1, [pc, #248]	; (8011260 <tcp_pcb_remove+0x110>)
 8011168:	483e      	ldr	r0, [pc, #248]	; (8011264 <tcp_pcb_remove+0x114>)
 801116a:	f00a f877 	bl	801b25c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d106      	bne.n	8011182 <tcp_pcb_remove+0x32>
 8011174:	4b39      	ldr	r3, [pc, #228]	; (801125c <tcp_pcb_remove+0x10c>)
 8011176:	f640 0284 	movw	r2, #2180	; 0x884
 801117a:	493b      	ldr	r1, [pc, #236]	; (8011268 <tcp_pcb_remove+0x118>)
 801117c:	4839      	ldr	r0, [pc, #228]	; (8011264 <tcp_pcb_remove+0x114>)
 801117e:	f00a f86d 	bl	801b25c <iprintf>

  TCP_RMV(pcblist, pcb);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	429a      	cmp	r2, r3
 801118a:	d105      	bne.n	8011198 <tcp_pcb_remove+0x48>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	68da      	ldr	r2, [r3, #12]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	601a      	str	r2, [r3, #0]
 8011196:	e013      	b.n	80111c0 <tcp_pcb_remove+0x70>
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	60fb      	str	r3, [r7, #12]
 801119e:	e00c      	b.n	80111ba <tcp_pcb_remove+0x6a>
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	683a      	ldr	r2, [r7, #0]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d104      	bne.n	80111b4 <tcp_pcb_remove+0x64>
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	68da      	ldr	r2, [r3, #12]
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	60da      	str	r2, [r3, #12]
 80111b2:	e005      	b.n	80111c0 <tcp_pcb_remove+0x70>
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	60fb      	str	r3, [r7, #12]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d1ef      	bne.n	80111a0 <tcp_pcb_remove+0x50>
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	2200      	movs	r2, #0
 80111c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80111c6:	6838      	ldr	r0, [r7, #0]
 80111c8:	f7ff ff72 	bl	80110b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	7d1b      	ldrb	r3, [r3, #20]
 80111d0:	2b0a      	cmp	r3, #10
 80111d2:	d013      	beq.n	80111fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80111d8:	2b01      	cmp	r3, #1
 80111da:	d00f      	beq.n	80111fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	8b5b      	ldrh	r3, [r3, #26]
 80111e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d009      	beq.n	80111fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	8b5b      	ldrh	r3, [r3, #26]
 80111ec:	f043 0302 	orr.w	r3, r3, #2
 80111f0:	b29a      	uxth	r2, r3
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80111f6:	6838      	ldr	r0, [r7, #0]
 80111f8:	f003 fbc2 	bl	8014980 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	7d1b      	ldrb	r3, [r3, #20]
 8011200:	2b01      	cmp	r3, #1
 8011202:	d020      	beq.n	8011246 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011208:	2b00      	cmp	r3, #0
 801120a:	d006      	beq.n	801121a <tcp_pcb_remove+0xca>
 801120c:	4b13      	ldr	r3, [pc, #76]	; (801125c <tcp_pcb_remove+0x10c>)
 801120e:	f640 0293 	movw	r2, #2195	; 0x893
 8011212:	4916      	ldr	r1, [pc, #88]	; (801126c <tcp_pcb_remove+0x11c>)
 8011214:	4813      	ldr	r0, [pc, #76]	; (8011264 <tcp_pcb_remove+0x114>)
 8011216:	f00a f821 	bl	801b25c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801121e:	2b00      	cmp	r3, #0
 8011220:	d006      	beq.n	8011230 <tcp_pcb_remove+0xe0>
 8011222:	4b0e      	ldr	r3, [pc, #56]	; (801125c <tcp_pcb_remove+0x10c>)
 8011224:	f640 0294 	movw	r2, #2196	; 0x894
 8011228:	4911      	ldr	r1, [pc, #68]	; (8011270 <tcp_pcb_remove+0x120>)
 801122a:	480e      	ldr	r0, [pc, #56]	; (8011264 <tcp_pcb_remove+0x114>)
 801122c:	f00a f816 	bl	801b25c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011234:	2b00      	cmp	r3, #0
 8011236:	d006      	beq.n	8011246 <tcp_pcb_remove+0xf6>
 8011238:	4b08      	ldr	r3, [pc, #32]	; (801125c <tcp_pcb_remove+0x10c>)
 801123a:	f640 0296 	movw	r2, #2198	; 0x896
 801123e:	490d      	ldr	r1, [pc, #52]	; (8011274 <tcp_pcb_remove+0x124>)
 8011240:	4808      	ldr	r0, [pc, #32]	; (8011264 <tcp_pcb_remove+0x114>)
 8011242:	f00a f80b 	bl	801b25c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	2200      	movs	r2, #0
 801124a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	2200      	movs	r2, #0
 8011250:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011252:	bf00      	nop
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	0801db98 	.word	0x0801db98
 8011260:	0801e200 	.word	0x0801e200
 8011264:	0801dbdc 	.word	0x0801dbdc
 8011268:	0801e21c 	.word	0x0801e21c
 801126c:	0801e23c 	.word	0x0801e23c
 8011270:	0801e254 	.word	0x0801e254
 8011274:	0801e270 	.word	0x0801e270

08011278 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d106      	bne.n	8011294 <tcp_next_iss+0x1c>
 8011286:	4b0a      	ldr	r3, [pc, #40]	; (80112b0 <tcp_next_iss+0x38>)
 8011288:	f640 02af 	movw	r2, #2223	; 0x8af
 801128c:	4909      	ldr	r1, [pc, #36]	; (80112b4 <tcp_next_iss+0x3c>)
 801128e:	480a      	ldr	r0, [pc, #40]	; (80112b8 <tcp_next_iss+0x40>)
 8011290:	f009 ffe4 	bl	801b25c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011294:	4b09      	ldr	r3, [pc, #36]	; (80112bc <tcp_next_iss+0x44>)
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	4b09      	ldr	r3, [pc, #36]	; (80112c0 <tcp_next_iss+0x48>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4413      	add	r3, r2
 801129e:	4a07      	ldr	r2, [pc, #28]	; (80112bc <tcp_next_iss+0x44>)
 80112a0:	6013      	str	r3, [r2, #0]
  return iss;
 80112a2:	4b06      	ldr	r3, [pc, #24]	; (80112bc <tcp_next_iss+0x44>)
 80112a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3708      	adds	r7, #8
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop
 80112b0:	0801db98 	.word	0x0801db98
 80112b4:	0801e288 	.word	0x0801e288
 80112b8:	0801dbdc 	.word	0x0801dbdc
 80112bc:	20000014 	.word	0x20000014
 80112c0:	20011054 	.word	0x20011054

080112c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b086      	sub	sp, #24
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	4603      	mov	r3, r0
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
 80112d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d106      	bne.n	80112e6 <tcp_eff_send_mss_netif+0x22>
 80112d8:	4b14      	ldr	r3, [pc, #80]	; (801132c <tcp_eff_send_mss_netif+0x68>)
 80112da:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80112de:	4914      	ldr	r1, [pc, #80]	; (8011330 <tcp_eff_send_mss_netif+0x6c>)
 80112e0:	4814      	ldr	r0, [pc, #80]	; (8011334 <tcp_eff_send_mss_netif+0x70>)
 80112e2:	f009 ffbb 	bl	801b25c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d101      	bne.n	80112f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80112ec:	89fb      	ldrh	r3, [r7, #14]
 80112ee:	e019      	b.n	8011324 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80112f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80112f6:	8afb      	ldrh	r3, [r7, #22]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d012      	beq.n	8011322 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80112fc:	2328      	movs	r3, #40	; 0x28
 80112fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011300:	8afa      	ldrh	r2, [r7, #22]
 8011302:	8abb      	ldrh	r3, [r7, #20]
 8011304:	429a      	cmp	r2, r3
 8011306:	d904      	bls.n	8011312 <tcp_eff_send_mss_netif+0x4e>
 8011308:	8afa      	ldrh	r2, [r7, #22]
 801130a:	8abb      	ldrh	r3, [r7, #20]
 801130c:	1ad3      	subs	r3, r2, r3
 801130e:	b29b      	uxth	r3, r3
 8011310:	e000      	b.n	8011314 <tcp_eff_send_mss_netif+0x50>
 8011312:	2300      	movs	r3, #0
 8011314:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011316:	8a7a      	ldrh	r2, [r7, #18]
 8011318:	89fb      	ldrh	r3, [r7, #14]
 801131a:	4293      	cmp	r3, r2
 801131c:	bf28      	it	cs
 801131e:	4613      	movcs	r3, r2
 8011320:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011322:	89fb      	ldrh	r3, [r7, #14]
}
 8011324:	4618      	mov	r0, r3
 8011326:	3718      	adds	r7, #24
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	0801db98 	.word	0x0801db98
 8011330:	0801e2a4 	.word	0x0801e2a4
 8011334:	0801dbdc 	.word	0x0801dbdc

08011338 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d119      	bne.n	8011380 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801134c:	4b10      	ldr	r3, [pc, #64]	; (8011390 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801134e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011352:	4910      	ldr	r1, [pc, #64]	; (8011394 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011354:	4810      	ldr	r0, [pc, #64]	; (8011398 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011356:	f009 ff81 	bl	801b25c <iprintf>

  while (pcb != NULL) {
 801135a:	e011      	b.n	8011380 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681a      	ldr	r2, [r3, #0]
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	429a      	cmp	r2, r3
 8011366:	d108      	bne.n	801137a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801136e:	68f8      	ldr	r0, [r7, #12]
 8011370:	f7fe fe1a 	bl	800ffa8 <tcp_abort>
      pcb = next;
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	60fb      	str	r3, [r7, #12]
 8011378:	e002      	b.n	8011380 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d1ea      	bne.n	801135c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8011386:	bf00      	nop
 8011388:	bf00      	nop
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	0801db98 	.word	0x0801db98
 8011394:	0801e2cc 	.word	0x0801e2cc
 8011398:	0801dbdc 	.word	0x0801dbdc

0801139c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b084      	sub	sp, #16
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d02a      	beq.n	8011402 <tcp_netif_ip_addr_changed+0x66>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d026      	beq.n	8011402 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80113b4:	4b15      	ldr	r3, [pc, #84]	; (801140c <tcp_netif_ip_addr_changed+0x70>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	4619      	mov	r1, r3
 80113ba:	6878      	ldr	r0, [r7, #4]
 80113bc:	f7ff ffbc 	bl	8011338 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80113c0:	4b13      	ldr	r3, [pc, #76]	; (8011410 <tcp_netif_ip_addr_changed+0x74>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4619      	mov	r1, r3
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f7ff ffb6 	bl	8011338 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d017      	beq.n	8011402 <tcp_netif_ip_addr_changed+0x66>
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d013      	beq.n	8011402 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80113da:	4b0e      	ldr	r3, [pc, #56]	; (8011414 <tcp_netif_ip_addr_changed+0x78>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	60fb      	str	r3, [r7, #12]
 80113e0:	e00c      	b.n	80113fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d103      	bne.n	80113f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	681a      	ldr	r2, [r3, #0]
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	60fb      	str	r3, [r7, #12]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d1ef      	bne.n	80113e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011402:	bf00      	nop
 8011404:	3710      	adds	r7, #16
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}
 801140a:	bf00      	nop
 801140c:	20011050 	.word	0x20011050
 8011410:	2001105c 	.word	0x2001105c
 8011414:	20011058 	.word	0x20011058

08011418 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b082      	sub	sp, #8
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011424:	2b00      	cmp	r3, #0
 8011426:	d007      	beq.n	8011438 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801142c:	4618      	mov	r0, r3
 801142e:	f7ff fb6f 	bl	8010b10 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011438:	bf00      	nop
 801143a:	3708      	adds	r7, #8
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011440:	b590      	push	{r4, r7, lr}
 8011442:	b08d      	sub	sp, #52	; 0x34
 8011444:	af04      	add	r7, sp, #16
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d105      	bne.n	801145c <tcp_input+0x1c>
 8011450:	4b9b      	ldr	r3, [pc, #620]	; (80116c0 <tcp_input+0x280>)
 8011452:	2283      	movs	r2, #131	; 0x83
 8011454:	499b      	ldr	r1, [pc, #620]	; (80116c4 <tcp_input+0x284>)
 8011456:	489c      	ldr	r0, [pc, #624]	; (80116c8 <tcp_input+0x288>)
 8011458:	f009 ff00 	bl	801b25c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	4a9a      	ldr	r2, [pc, #616]	; (80116cc <tcp_input+0x28c>)
 8011462:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	895b      	ldrh	r3, [r3, #10]
 8011468:	2b13      	cmp	r3, #19
 801146a:	f240 83c4 	bls.w	8011bf6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801146e:	4b98      	ldr	r3, [pc, #608]	; (80116d0 <tcp_input+0x290>)
 8011470:	695b      	ldr	r3, [r3, #20]
 8011472:	4a97      	ldr	r2, [pc, #604]	; (80116d0 <tcp_input+0x290>)
 8011474:	6812      	ldr	r2, [r2, #0]
 8011476:	4611      	mov	r1, r2
 8011478:	4618      	mov	r0, r3
 801147a:	f006 fb89 	bl	8017b90 <ip4_addr_isbroadcast_u32>
 801147e:	4603      	mov	r3, r0
 8011480:	2b00      	cmp	r3, #0
 8011482:	f040 83ba 	bne.w	8011bfa <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011486:	4b92      	ldr	r3, [pc, #584]	; (80116d0 <tcp_input+0x290>)
 8011488:	695b      	ldr	r3, [r3, #20]
 801148a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801148e:	2be0      	cmp	r3, #224	; 0xe0
 8011490:	f000 83b3 	beq.w	8011bfa <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011494:	4b8d      	ldr	r3, [pc, #564]	; (80116cc <tcp_input+0x28c>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	899b      	ldrh	r3, [r3, #12]
 801149a:	b29b      	uxth	r3, r3
 801149c:	4618      	mov	r0, r3
 801149e:	f7fc fb45 	bl	800db2c <lwip_htons>
 80114a2:	4603      	mov	r3, r0
 80114a4:	0b1b      	lsrs	r3, r3, #12
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	009b      	lsls	r3, r3, #2
 80114ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80114ae:	7cbb      	ldrb	r3, [r7, #18]
 80114b0:	2b13      	cmp	r3, #19
 80114b2:	f240 83a4 	bls.w	8011bfe <tcp_input+0x7be>
 80114b6:	7cbb      	ldrb	r3, [r7, #18]
 80114b8:	b29a      	uxth	r2, r3
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	891b      	ldrh	r3, [r3, #8]
 80114be:	429a      	cmp	r2, r3
 80114c0:	f200 839d 	bhi.w	8011bfe <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80114c4:	7cbb      	ldrb	r3, [r7, #18]
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	3b14      	subs	r3, #20
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	4b81      	ldr	r3, [pc, #516]	; (80116d4 <tcp_input+0x294>)
 80114ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80114d0:	4b81      	ldr	r3, [pc, #516]	; (80116d8 <tcp_input+0x298>)
 80114d2:	2200      	movs	r2, #0
 80114d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	895a      	ldrh	r2, [r3, #10]
 80114da:	7cbb      	ldrb	r3, [r7, #18]
 80114dc:	b29b      	uxth	r3, r3
 80114de:	429a      	cmp	r2, r3
 80114e0:	d309      	bcc.n	80114f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80114e2:	4b7c      	ldr	r3, [pc, #496]	; (80116d4 <tcp_input+0x294>)
 80114e4:	881a      	ldrh	r2, [r3, #0]
 80114e6:	4b7d      	ldr	r3, [pc, #500]	; (80116dc <tcp_input+0x29c>)
 80114e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80114ea:	7cbb      	ldrb	r3, [r7, #18]
 80114ec:	4619      	mov	r1, r3
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f7fd fe42 	bl	800f178 <pbuf_remove_header>
 80114f4:	e04e      	b.n	8011594 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d105      	bne.n	801150a <tcp_input+0xca>
 80114fe:	4b70      	ldr	r3, [pc, #448]	; (80116c0 <tcp_input+0x280>)
 8011500:	22c2      	movs	r2, #194	; 0xc2
 8011502:	4977      	ldr	r1, [pc, #476]	; (80116e0 <tcp_input+0x2a0>)
 8011504:	4870      	ldr	r0, [pc, #448]	; (80116c8 <tcp_input+0x288>)
 8011506:	f009 fea9 	bl	801b25c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801150a:	2114      	movs	r1, #20
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f7fd fe33 	bl	800f178 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	895a      	ldrh	r2, [r3, #10]
 8011516:	4b71      	ldr	r3, [pc, #452]	; (80116dc <tcp_input+0x29c>)
 8011518:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801151a:	4b6e      	ldr	r3, [pc, #440]	; (80116d4 <tcp_input+0x294>)
 801151c:	881a      	ldrh	r2, [r3, #0]
 801151e:	4b6f      	ldr	r3, [pc, #444]	; (80116dc <tcp_input+0x29c>)
 8011520:	881b      	ldrh	r3, [r3, #0]
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011526:	4b6d      	ldr	r3, [pc, #436]	; (80116dc <tcp_input+0x29c>)
 8011528:	881b      	ldrh	r3, [r3, #0]
 801152a:	4619      	mov	r1, r3
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7fd fe23 	bl	800f178 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	895b      	ldrh	r3, [r3, #10]
 8011538:	8a3a      	ldrh	r2, [r7, #16]
 801153a:	429a      	cmp	r2, r3
 801153c:	f200 8361 	bhi.w	8011c02 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	4a64      	ldr	r2, [pc, #400]	; (80116d8 <tcp_input+0x298>)
 8011548:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	8a3a      	ldrh	r2, [r7, #16]
 8011550:	4611      	mov	r1, r2
 8011552:	4618      	mov	r0, r3
 8011554:	f7fd fe10 	bl	800f178 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	891a      	ldrh	r2, [r3, #8]
 801155c:	8a3b      	ldrh	r3, [r7, #16]
 801155e:	1ad3      	subs	r3, r2, r3
 8011560:	b29a      	uxth	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	895b      	ldrh	r3, [r3, #10]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d005      	beq.n	801157a <tcp_input+0x13a>
 801156e:	4b54      	ldr	r3, [pc, #336]	; (80116c0 <tcp_input+0x280>)
 8011570:	22df      	movs	r2, #223	; 0xdf
 8011572:	495c      	ldr	r1, [pc, #368]	; (80116e4 <tcp_input+0x2a4>)
 8011574:	4854      	ldr	r0, [pc, #336]	; (80116c8 <tcp_input+0x288>)
 8011576:	f009 fe71 	bl	801b25c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	891a      	ldrh	r2, [r3, #8]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	891b      	ldrh	r3, [r3, #8]
 8011584:	429a      	cmp	r2, r3
 8011586:	d005      	beq.n	8011594 <tcp_input+0x154>
 8011588:	4b4d      	ldr	r3, [pc, #308]	; (80116c0 <tcp_input+0x280>)
 801158a:	22e0      	movs	r2, #224	; 0xe0
 801158c:	4956      	ldr	r1, [pc, #344]	; (80116e8 <tcp_input+0x2a8>)
 801158e:	484e      	ldr	r0, [pc, #312]	; (80116c8 <tcp_input+0x288>)
 8011590:	f009 fe64 	bl	801b25c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011594:	4b4d      	ldr	r3, [pc, #308]	; (80116cc <tcp_input+0x28c>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	881b      	ldrh	r3, [r3, #0]
 801159a:	b29b      	uxth	r3, r3
 801159c:	4a4b      	ldr	r2, [pc, #300]	; (80116cc <tcp_input+0x28c>)
 801159e:	6814      	ldr	r4, [r2, #0]
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7fc fac3 	bl	800db2c <lwip_htons>
 80115a6:	4603      	mov	r3, r0
 80115a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80115aa:	4b48      	ldr	r3, [pc, #288]	; (80116cc <tcp_input+0x28c>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	885b      	ldrh	r3, [r3, #2]
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	4a46      	ldr	r2, [pc, #280]	; (80116cc <tcp_input+0x28c>)
 80115b4:	6814      	ldr	r4, [r2, #0]
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fc fab8 	bl	800db2c <lwip_htons>
 80115bc:	4603      	mov	r3, r0
 80115be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80115c0:	4b42      	ldr	r3, [pc, #264]	; (80116cc <tcp_input+0x28c>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	4a41      	ldr	r2, [pc, #260]	; (80116cc <tcp_input+0x28c>)
 80115c8:	6814      	ldr	r4, [r2, #0]
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7fc fac3 	bl	800db56 <lwip_htonl>
 80115d0:	4603      	mov	r3, r0
 80115d2:	6063      	str	r3, [r4, #4]
 80115d4:	6863      	ldr	r3, [r4, #4]
 80115d6:	4a45      	ldr	r2, [pc, #276]	; (80116ec <tcp_input+0x2ac>)
 80115d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80115da:	4b3c      	ldr	r3, [pc, #240]	; (80116cc <tcp_input+0x28c>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	689b      	ldr	r3, [r3, #8]
 80115e0:	4a3a      	ldr	r2, [pc, #232]	; (80116cc <tcp_input+0x28c>)
 80115e2:	6814      	ldr	r4, [r2, #0]
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7fc fab6 	bl	800db56 <lwip_htonl>
 80115ea:	4603      	mov	r3, r0
 80115ec:	60a3      	str	r3, [r4, #8]
 80115ee:	68a3      	ldr	r3, [r4, #8]
 80115f0:	4a3f      	ldr	r2, [pc, #252]	; (80116f0 <tcp_input+0x2b0>)
 80115f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80115f4:	4b35      	ldr	r3, [pc, #212]	; (80116cc <tcp_input+0x28c>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	89db      	ldrh	r3, [r3, #14]
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	4a33      	ldr	r2, [pc, #204]	; (80116cc <tcp_input+0x28c>)
 80115fe:	6814      	ldr	r4, [r2, #0]
 8011600:	4618      	mov	r0, r3
 8011602:	f7fc fa93 	bl	800db2c <lwip_htons>
 8011606:	4603      	mov	r3, r0
 8011608:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801160a:	4b30      	ldr	r3, [pc, #192]	; (80116cc <tcp_input+0x28c>)
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	899b      	ldrh	r3, [r3, #12]
 8011610:	b29b      	uxth	r3, r3
 8011612:	4618      	mov	r0, r3
 8011614:	f7fc fa8a 	bl	800db2c <lwip_htons>
 8011618:	4603      	mov	r3, r0
 801161a:	b2db      	uxtb	r3, r3
 801161c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011620:	b2da      	uxtb	r2, r3
 8011622:	4b34      	ldr	r3, [pc, #208]	; (80116f4 <tcp_input+0x2b4>)
 8011624:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	891a      	ldrh	r2, [r3, #8]
 801162a:	4b33      	ldr	r3, [pc, #204]	; (80116f8 <tcp_input+0x2b8>)
 801162c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801162e:	4b31      	ldr	r3, [pc, #196]	; (80116f4 <tcp_input+0x2b4>)
 8011630:	781b      	ldrb	r3, [r3, #0]
 8011632:	f003 0303 	and.w	r3, r3, #3
 8011636:	2b00      	cmp	r3, #0
 8011638:	d00c      	beq.n	8011654 <tcp_input+0x214>
    tcplen++;
 801163a:	4b2f      	ldr	r3, [pc, #188]	; (80116f8 <tcp_input+0x2b8>)
 801163c:	881b      	ldrh	r3, [r3, #0]
 801163e:	3301      	adds	r3, #1
 8011640:	b29a      	uxth	r2, r3
 8011642:	4b2d      	ldr	r3, [pc, #180]	; (80116f8 <tcp_input+0x2b8>)
 8011644:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	891a      	ldrh	r2, [r3, #8]
 801164a:	4b2b      	ldr	r3, [pc, #172]	; (80116f8 <tcp_input+0x2b8>)
 801164c:	881b      	ldrh	r3, [r3, #0]
 801164e:	429a      	cmp	r2, r3
 8011650:	f200 82d9 	bhi.w	8011c06 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011654:	2300      	movs	r3, #0
 8011656:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011658:	4b28      	ldr	r3, [pc, #160]	; (80116fc <tcp_input+0x2bc>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	61fb      	str	r3, [r7, #28]
 801165e:	e09d      	b.n	801179c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	7d1b      	ldrb	r3, [r3, #20]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d105      	bne.n	8011674 <tcp_input+0x234>
 8011668:	4b15      	ldr	r3, [pc, #84]	; (80116c0 <tcp_input+0x280>)
 801166a:	22fb      	movs	r2, #251	; 0xfb
 801166c:	4924      	ldr	r1, [pc, #144]	; (8011700 <tcp_input+0x2c0>)
 801166e:	4816      	ldr	r0, [pc, #88]	; (80116c8 <tcp_input+0x288>)
 8011670:	f009 fdf4 	bl	801b25c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011674:	69fb      	ldr	r3, [r7, #28]
 8011676:	7d1b      	ldrb	r3, [r3, #20]
 8011678:	2b0a      	cmp	r3, #10
 801167a:	d105      	bne.n	8011688 <tcp_input+0x248>
 801167c:	4b10      	ldr	r3, [pc, #64]	; (80116c0 <tcp_input+0x280>)
 801167e:	22fc      	movs	r2, #252	; 0xfc
 8011680:	4920      	ldr	r1, [pc, #128]	; (8011704 <tcp_input+0x2c4>)
 8011682:	4811      	ldr	r0, [pc, #68]	; (80116c8 <tcp_input+0x288>)
 8011684:	f009 fdea 	bl	801b25c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	7d1b      	ldrb	r3, [r3, #20]
 801168c:	2b01      	cmp	r3, #1
 801168e:	d105      	bne.n	801169c <tcp_input+0x25c>
 8011690:	4b0b      	ldr	r3, [pc, #44]	; (80116c0 <tcp_input+0x280>)
 8011692:	22fd      	movs	r2, #253	; 0xfd
 8011694:	491c      	ldr	r1, [pc, #112]	; (8011708 <tcp_input+0x2c8>)
 8011696:	480c      	ldr	r0, [pc, #48]	; (80116c8 <tcp_input+0x288>)
 8011698:	f009 fde0 	bl	801b25c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801169c:	69fb      	ldr	r3, [r7, #28]
 801169e:	7a1b      	ldrb	r3, [r3, #8]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d033      	beq.n	801170c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	7a1a      	ldrb	r2, [r3, #8]
 80116a8:	4b09      	ldr	r3, [pc, #36]	; (80116d0 <tcp_input+0x290>)
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116b0:	3301      	adds	r3, #1
 80116b2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d029      	beq.n	801170c <tcp_input+0x2cc>
      prev = pcb;
 80116b8:	69fb      	ldr	r3, [r7, #28]
 80116ba:	61bb      	str	r3, [r7, #24]
      continue;
 80116bc:	e06b      	b.n	8011796 <tcp_input+0x356>
 80116be:	bf00      	nop
 80116c0:	0801e300 	.word	0x0801e300
 80116c4:	0801e334 	.word	0x0801e334
 80116c8:	0801e34c 	.word	0x0801e34c
 80116cc:	20004b7c 	.word	0x20004b7c
 80116d0:	2000d93c 	.word	0x2000d93c
 80116d4:	20004b80 	.word	0x20004b80
 80116d8:	20004b84 	.word	0x20004b84
 80116dc:	20004b82 	.word	0x20004b82
 80116e0:	0801e374 	.word	0x0801e374
 80116e4:	0801e384 	.word	0x0801e384
 80116e8:	0801e390 	.word	0x0801e390
 80116ec:	20004b8c 	.word	0x20004b8c
 80116f0:	20004b90 	.word	0x20004b90
 80116f4:	20004b98 	.word	0x20004b98
 80116f8:	20004b96 	.word	0x20004b96
 80116fc:	20011050 	.word	0x20011050
 8011700:	0801e3b0 	.word	0x0801e3b0
 8011704:	0801e3d8 	.word	0x0801e3d8
 8011708:	0801e404 	.word	0x0801e404
    }

    if (pcb->remote_port == tcphdr->src &&
 801170c:	69fb      	ldr	r3, [r7, #28]
 801170e:	8b1a      	ldrh	r2, [r3, #24]
 8011710:	4b94      	ldr	r3, [pc, #592]	; (8011964 <tcp_input+0x524>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	881b      	ldrh	r3, [r3, #0]
 8011716:	b29b      	uxth	r3, r3
 8011718:	429a      	cmp	r2, r3
 801171a:	d13a      	bne.n	8011792 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	8ada      	ldrh	r2, [r3, #22]
 8011720:	4b90      	ldr	r3, [pc, #576]	; (8011964 <tcp_input+0x524>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	885b      	ldrh	r3, [r3, #2]
 8011726:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011728:	429a      	cmp	r2, r3
 801172a:	d132      	bne.n	8011792 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	685a      	ldr	r2, [r3, #4]
 8011730:	4b8d      	ldr	r3, [pc, #564]	; (8011968 <tcp_input+0x528>)
 8011732:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011734:	429a      	cmp	r2, r3
 8011736:	d12c      	bne.n	8011792 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	681a      	ldr	r2, [r3, #0]
 801173c:	4b8a      	ldr	r3, [pc, #552]	; (8011968 <tcp_input+0x528>)
 801173e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011740:	429a      	cmp	r2, r3
 8011742:	d126      	bne.n	8011792 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	69fa      	ldr	r2, [r7, #28]
 801174a:	429a      	cmp	r2, r3
 801174c:	d106      	bne.n	801175c <tcp_input+0x31c>
 801174e:	4b87      	ldr	r3, [pc, #540]	; (801196c <tcp_input+0x52c>)
 8011750:	f240 120d 	movw	r2, #269	; 0x10d
 8011754:	4986      	ldr	r1, [pc, #536]	; (8011970 <tcp_input+0x530>)
 8011756:	4887      	ldr	r0, [pc, #540]	; (8011974 <tcp_input+0x534>)
 8011758:	f009 fd80 	bl	801b25c <iprintf>
      if (prev != NULL) {
 801175c:	69bb      	ldr	r3, [r7, #24]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d00a      	beq.n	8011778 <tcp_input+0x338>
        prev->next = pcb->next;
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	68da      	ldr	r2, [r3, #12]
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801176a:	4b83      	ldr	r3, [pc, #524]	; (8011978 <tcp_input+0x538>)
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011772:	4a81      	ldr	r2, [pc, #516]	; (8011978 <tcp_input+0x538>)
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011778:	69fb      	ldr	r3, [r7, #28]
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	69fa      	ldr	r2, [r7, #28]
 801177e:	429a      	cmp	r2, r3
 8011780:	d111      	bne.n	80117a6 <tcp_input+0x366>
 8011782:	4b7a      	ldr	r3, [pc, #488]	; (801196c <tcp_input+0x52c>)
 8011784:	f240 1215 	movw	r2, #277	; 0x115
 8011788:	497c      	ldr	r1, [pc, #496]	; (801197c <tcp_input+0x53c>)
 801178a:	487a      	ldr	r0, [pc, #488]	; (8011974 <tcp_input+0x534>)
 801178c:	f009 fd66 	bl	801b25c <iprintf>
      break;
 8011790:	e009      	b.n	80117a6 <tcp_input+0x366>
    }
    prev = pcb;
 8011792:	69fb      	ldr	r3, [r7, #28]
 8011794:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011796:	69fb      	ldr	r3, [r7, #28]
 8011798:	68db      	ldr	r3, [r3, #12]
 801179a:	61fb      	str	r3, [r7, #28]
 801179c:	69fb      	ldr	r3, [r7, #28]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f47f af5e 	bne.w	8011660 <tcp_input+0x220>
 80117a4:	e000      	b.n	80117a8 <tcp_input+0x368>
      break;
 80117a6:	bf00      	nop
  }

  if (pcb == NULL) {
 80117a8:	69fb      	ldr	r3, [r7, #28]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	f040 8095 	bne.w	80118da <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80117b0:	4b73      	ldr	r3, [pc, #460]	; (8011980 <tcp_input+0x540>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	61fb      	str	r3, [r7, #28]
 80117b6:	e03f      	b.n	8011838 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	7d1b      	ldrb	r3, [r3, #20]
 80117bc:	2b0a      	cmp	r3, #10
 80117be:	d006      	beq.n	80117ce <tcp_input+0x38e>
 80117c0:	4b6a      	ldr	r3, [pc, #424]	; (801196c <tcp_input+0x52c>)
 80117c2:	f240 121f 	movw	r2, #287	; 0x11f
 80117c6:	496f      	ldr	r1, [pc, #444]	; (8011984 <tcp_input+0x544>)
 80117c8:	486a      	ldr	r0, [pc, #424]	; (8011974 <tcp_input+0x534>)
 80117ca:	f009 fd47 	bl	801b25c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	7a1b      	ldrb	r3, [r3, #8]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d009      	beq.n	80117ea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80117d6:	69fb      	ldr	r3, [r7, #28]
 80117d8:	7a1a      	ldrb	r2, [r3, #8]
 80117da:	4b63      	ldr	r3, [pc, #396]	; (8011968 <tcp_input+0x528>)
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80117e2:	3301      	adds	r3, #1
 80117e4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d122      	bne.n	8011830 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	8b1a      	ldrh	r2, [r3, #24]
 80117ee:	4b5d      	ldr	r3, [pc, #372]	; (8011964 <tcp_input+0x524>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	881b      	ldrh	r3, [r3, #0]
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d11b      	bne.n	8011832 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80117fa:	69fb      	ldr	r3, [r7, #28]
 80117fc:	8ada      	ldrh	r2, [r3, #22]
 80117fe:	4b59      	ldr	r3, [pc, #356]	; (8011964 <tcp_input+0x524>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	885b      	ldrh	r3, [r3, #2]
 8011804:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011806:	429a      	cmp	r2, r3
 8011808:	d113      	bne.n	8011832 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801180a:	69fb      	ldr	r3, [r7, #28]
 801180c:	685a      	ldr	r2, [r3, #4]
 801180e:	4b56      	ldr	r3, [pc, #344]	; (8011968 <tcp_input+0x528>)
 8011810:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011812:	429a      	cmp	r2, r3
 8011814:	d10d      	bne.n	8011832 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011816:	69fb      	ldr	r3, [r7, #28]
 8011818:	681a      	ldr	r2, [r3, #0]
 801181a:	4b53      	ldr	r3, [pc, #332]	; (8011968 <tcp_input+0x528>)
 801181c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801181e:	429a      	cmp	r2, r3
 8011820:	d107      	bne.n	8011832 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011822:	69f8      	ldr	r0, [r7, #28]
 8011824:	f000 fb54 	bl	8011ed0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f7fd fd2b 	bl	800f284 <pbuf_free>
        return;
 801182e:	e1f0      	b.n	8011c12 <tcp_input+0x7d2>
        continue;
 8011830:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011832:	69fb      	ldr	r3, [r7, #28]
 8011834:	68db      	ldr	r3, [r3, #12]
 8011836:	61fb      	str	r3, [r7, #28]
 8011838:	69fb      	ldr	r3, [r7, #28]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d1bc      	bne.n	80117b8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801183e:	2300      	movs	r3, #0
 8011840:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011842:	4b51      	ldr	r3, [pc, #324]	; (8011988 <tcp_input+0x548>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	617b      	str	r3, [r7, #20]
 8011848:	e02a      	b.n	80118a0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	7a1b      	ldrb	r3, [r3, #8]
 801184e:	2b00      	cmp	r3, #0
 8011850:	d00c      	beq.n	801186c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	7a1a      	ldrb	r2, [r3, #8]
 8011856:	4b44      	ldr	r3, [pc, #272]	; (8011968 <tcp_input+0x528>)
 8011858:	685b      	ldr	r3, [r3, #4]
 801185a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801185e:	3301      	adds	r3, #1
 8011860:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011862:	429a      	cmp	r2, r3
 8011864:	d002      	beq.n	801186c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	61bb      	str	r3, [r7, #24]
        continue;
 801186a:	e016      	b.n	801189a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	8ada      	ldrh	r2, [r3, #22]
 8011870:	4b3c      	ldr	r3, [pc, #240]	; (8011964 <tcp_input+0x524>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	885b      	ldrh	r3, [r3, #2]
 8011876:	b29b      	uxth	r3, r3
 8011878:	429a      	cmp	r2, r3
 801187a:	d10c      	bne.n	8011896 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	4b39      	ldr	r3, [pc, #228]	; (8011968 <tcp_input+0x528>)
 8011882:	695b      	ldr	r3, [r3, #20]
 8011884:	429a      	cmp	r2, r3
 8011886:	d00f      	beq.n	80118a8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d00d      	beq.n	80118aa <tcp_input+0x46a>
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d009      	beq.n	80118aa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	617b      	str	r3, [r7, #20]
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1d1      	bne.n	801184a <tcp_input+0x40a>
 80118a6:	e000      	b.n	80118aa <tcp_input+0x46a>
            break;
 80118a8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d014      	beq.n	80118da <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80118b0:	69bb      	ldr	r3, [r7, #24]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d00a      	beq.n	80118cc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	68da      	ldr	r2, [r3, #12]
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80118be:	4b32      	ldr	r3, [pc, #200]	; (8011988 <tcp_input+0x548>)
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80118c6:	4a30      	ldr	r2, [pc, #192]	; (8011988 <tcp_input+0x548>)
 80118c8:	697b      	ldr	r3, [r7, #20]
 80118ca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80118cc:	6978      	ldr	r0, [r7, #20]
 80118ce:	f000 fa01 	bl	8011cd4 <tcp_listen_input>
      }
      pbuf_free(p);
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f7fd fcd6 	bl	800f284 <pbuf_free>
      return;
 80118d8:	e19b      	b.n	8011c12 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	f000 8160 	beq.w	8011ba2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80118e2:	4b2a      	ldr	r3, [pc, #168]	; (801198c <tcp_input+0x54c>)
 80118e4:	2200      	movs	r2, #0
 80118e6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	891a      	ldrh	r2, [r3, #8]
 80118ec:	4b27      	ldr	r3, [pc, #156]	; (801198c <tcp_input+0x54c>)
 80118ee:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80118f0:	4a26      	ldr	r2, [pc, #152]	; (801198c <tcp_input+0x54c>)
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80118f6:	4b1b      	ldr	r3, [pc, #108]	; (8011964 <tcp_input+0x524>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	4a24      	ldr	r2, [pc, #144]	; (801198c <tcp_input+0x54c>)
 80118fc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80118fe:	4b24      	ldr	r3, [pc, #144]	; (8011990 <tcp_input+0x550>)
 8011900:	2200      	movs	r2, #0
 8011902:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011904:	4b23      	ldr	r3, [pc, #140]	; (8011994 <tcp_input+0x554>)
 8011906:	2200      	movs	r2, #0
 8011908:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801190a:	4b23      	ldr	r3, [pc, #140]	; (8011998 <tcp_input+0x558>)
 801190c:	2200      	movs	r2, #0
 801190e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011910:	4b22      	ldr	r3, [pc, #136]	; (801199c <tcp_input+0x55c>)
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	f003 0308 	and.w	r3, r3, #8
 8011918:	2b00      	cmp	r3, #0
 801191a:	d006      	beq.n	801192a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	7b5b      	ldrb	r3, [r3, #13]
 8011920:	f043 0301 	orr.w	r3, r3, #1
 8011924:	b2da      	uxtb	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801192a:	69fb      	ldr	r3, [r7, #28]
 801192c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801192e:	2b00      	cmp	r3, #0
 8011930:	d038      	beq.n	80119a4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011932:	69f8      	ldr	r0, [r7, #28]
 8011934:	f7ff f870 	bl	8010a18 <tcp_process_refused_data>
 8011938:	4603      	mov	r3, r0
 801193a:	f113 0f0d 	cmn.w	r3, #13
 801193e:	d007      	beq.n	8011950 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011944:	2b00      	cmp	r3, #0
 8011946:	d02d      	beq.n	80119a4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011948:	4b15      	ldr	r3, [pc, #84]	; (80119a0 <tcp_input+0x560>)
 801194a:	881b      	ldrh	r3, [r3, #0]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d029      	beq.n	80119a4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011950:	69fb      	ldr	r3, [r7, #28]
 8011952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011954:	2b00      	cmp	r3, #0
 8011956:	f040 8104 	bne.w	8011b62 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801195a:	69f8      	ldr	r0, [r7, #28]
 801195c:	f003 fe16 	bl	801558c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011960:	e0ff      	b.n	8011b62 <tcp_input+0x722>
 8011962:	bf00      	nop
 8011964:	20004b7c 	.word	0x20004b7c
 8011968:	2000d93c 	.word	0x2000d93c
 801196c:	0801e300 	.word	0x0801e300
 8011970:	0801e42c 	.word	0x0801e42c
 8011974:	0801e34c 	.word	0x0801e34c
 8011978:	20011050 	.word	0x20011050
 801197c:	0801e458 	.word	0x0801e458
 8011980:	20011060 	.word	0x20011060
 8011984:	0801e484 	.word	0x0801e484
 8011988:	20011058 	.word	0x20011058
 801198c:	20004b6c 	.word	0x20004b6c
 8011990:	20004b9c 	.word	0x20004b9c
 8011994:	20004b99 	.word	0x20004b99
 8011998:	20004b94 	.word	0x20004b94
 801199c:	20004b98 	.word	0x20004b98
 80119a0:	20004b96 	.word	0x20004b96
      }
    }
    tcp_input_pcb = pcb;
 80119a4:	4a9c      	ldr	r2, [pc, #624]	; (8011c18 <tcp_input+0x7d8>)
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80119aa:	69f8      	ldr	r0, [r7, #28]
 80119ac:	f000 fb0a 	bl	8011fc4 <tcp_process>
 80119b0:	4603      	mov	r3, r0
 80119b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80119b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119b8:	f113 0f0d 	cmn.w	r3, #13
 80119bc:	f000 80d3 	beq.w	8011b66 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80119c0:	4b96      	ldr	r3, [pc, #600]	; (8011c1c <tcp_input+0x7dc>)
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	f003 0308 	and.w	r3, r3, #8
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d015      	beq.n	80119f8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80119cc:	69fb      	ldr	r3, [r7, #28]
 80119ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d008      	beq.n	80119e8 <tcp_input+0x5a8>
 80119d6:	69fb      	ldr	r3, [r7, #28]
 80119d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80119dc:	69fa      	ldr	r2, [r7, #28]
 80119de:	6912      	ldr	r2, [r2, #16]
 80119e0:	f06f 010d 	mvn.w	r1, #13
 80119e4:	4610      	mov	r0, r2
 80119e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80119e8:	69f9      	ldr	r1, [r7, #28]
 80119ea:	488d      	ldr	r0, [pc, #564]	; (8011c20 <tcp_input+0x7e0>)
 80119ec:	f7ff fbb0 	bl	8011150 <tcp_pcb_remove>
        tcp_free(pcb);
 80119f0:	69f8      	ldr	r0, [r7, #28]
 80119f2:	f7fd ff95 	bl	800f920 <tcp_free>
 80119f6:	e0c1      	b.n	8011b7c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80119f8:	2300      	movs	r3, #0
 80119fa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80119fc:	4b89      	ldr	r3, [pc, #548]	; (8011c24 <tcp_input+0x7e4>)
 80119fe:	881b      	ldrh	r3, [r3, #0]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d01d      	beq.n	8011a40 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011a04:	4b87      	ldr	r3, [pc, #540]	; (8011c24 <tcp_input+0x7e4>)
 8011a06:	881b      	ldrh	r3, [r3, #0]
 8011a08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011a0a:	69fb      	ldr	r3, [r7, #28]
 8011a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d00a      	beq.n	8011a2a <tcp_input+0x5ea>
 8011a14:	69fb      	ldr	r3, [r7, #28]
 8011a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a1a:	69fa      	ldr	r2, [r7, #28]
 8011a1c:	6910      	ldr	r0, [r2, #16]
 8011a1e:	89fa      	ldrh	r2, [r7, #14]
 8011a20:	69f9      	ldr	r1, [r7, #28]
 8011a22:	4798      	blx	r3
 8011a24:	4603      	mov	r3, r0
 8011a26:	74fb      	strb	r3, [r7, #19]
 8011a28:	e001      	b.n	8011a2e <tcp_input+0x5ee>
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a32:	f113 0f0d 	cmn.w	r3, #13
 8011a36:	f000 8098 	beq.w	8011b6a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011a3a:	4b7a      	ldr	r3, [pc, #488]	; (8011c24 <tcp_input+0x7e4>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011a40:	69f8      	ldr	r0, [r7, #28]
 8011a42:	f000 f907 	bl	8011c54 <tcp_input_delayed_close>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f040 8090 	bne.w	8011b6e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011a4e:	4b76      	ldr	r3, [pc, #472]	; (8011c28 <tcp_input+0x7e8>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d041      	beq.n	8011ada <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d006      	beq.n	8011a6c <tcp_input+0x62c>
 8011a5e:	4b73      	ldr	r3, [pc, #460]	; (8011c2c <tcp_input+0x7ec>)
 8011a60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011a64:	4972      	ldr	r1, [pc, #456]	; (8011c30 <tcp_input+0x7f0>)
 8011a66:	4873      	ldr	r0, [pc, #460]	; (8011c34 <tcp_input+0x7f4>)
 8011a68:	f009 fbf8 	bl	801b25c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	8b5b      	ldrh	r3, [r3, #26]
 8011a70:	f003 0310 	and.w	r3, r3, #16
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d008      	beq.n	8011a8a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011a78:	4b6b      	ldr	r3, [pc, #428]	; (8011c28 <tcp_input+0x7e8>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fd fc01 	bl	800f284 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011a82:	69f8      	ldr	r0, [r7, #28]
 8011a84:	f7fe fa90 	bl	800ffa8 <tcp_abort>
            goto aborted;
 8011a88:	e078      	b.n	8011b7c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011a8a:	69fb      	ldr	r3, [r7, #28]
 8011a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d00c      	beq.n	8011aae <tcp_input+0x66e>
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	6918      	ldr	r0, [r3, #16]
 8011a9e:	4b62      	ldr	r3, [pc, #392]	; (8011c28 <tcp_input+0x7e8>)
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	69f9      	ldr	r1, [r7, #28]
 8011aa6:	47a0      	blx	r4
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	74fb      	strb	r3, [r7, #19]
 8011aac:	e008      	b.n	8011ac0 <tcp_input+0x680>
 8011aae:	4b5e      	ldr	r3, [pc, #376]	; (8011c28 <tcp_input+0x7e8>)
 8011ab0:	681a      	ldr	r2, [r3, #0]
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	69f9      	ldr	r1, [r7, #28]
 8011ab6:	2000      	movs	r0, #0
 8011ab8:	f7ff f884 	bl	8010bc4 <tcp_recv_null>
 8011abc:	4603      	mov	r3, r0
 8011abe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011ac0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ac4:	f113 0f0d 	cmn.w	r3, #13
 8011ac8:	d053      	beq.n	8011b72 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011aca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d003      	beq.n	8011ada <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011ad2:	4b55      	ldr	r3, [pc, #340]	; (8011c28 <tcp_input+0x7e8>)
 8011ad4:	681a      	ldr	r2, [r3, #0]
 8011ad6:	69fb      	ldr	r3, [r7, #28]
 8011ad8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011ada:	4b50      	ldr	r3, [pc, #320]	; (8011c1c <tcp_input+0x7dc>)
 8011adc:	781b      	ldrb	r3, [r3, #0]
 8011ade:	f003 0320 	and.w	r3, r3, #32
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d030      	beq.n	8011b48 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8011ae6:	69fb      	ldr	r3, [r7, #28]
 8011ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d009      	beq.n	8011b02 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011af2:	7b5a      	ldrb	r2, [r3, #13]
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011af8:	f042 0220 	orr.w	r2, r2, #32
 8011afc:	b2d2      	uxtb	r2, r2
 8011afe:	735a      	strb	r2, [r3, #13]
 8011b00:	e022      	b.n	8011b48 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011b0a:	d005      	beq.n	8011b18 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b10:	3301      	adds	r3, #1
 8011b12:	b29a      	uxth	r2, r3
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d00b      	beq.n	8011b3a <tcp_input+0x6fa>
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	6918      	ldr	r0, [r3, #16]
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	2200      	movs	r2, #0
 8011b30:	69f9      	ldr	r1, [r7, #28]
 8011b32:	47a0      	blx	r4
 8011b34:	4603      	mov	r3, r0
 8011b36:	74fb      	strb	r3, [r7, #19]
 8011b38:	e001      	b.n	8011b3e <tcp_input+0x6fe>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011b3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011b42:	f113 0f0d 	cmn.w	r3, #13
 8011b46:	d016      	beq.n	8011b76 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011b48:	4b33      	ldr	r3, [pc, #204]	; (8011c18 <tcp_input+0x7d8>)
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011b4e:	69f8      	ldr	r0, [r7, #28]
 8011b50:	f000 f880 	bl	8011c54 <tcp_input_delayed_close>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d10f      	bne.n	8011b7a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011b5a:	69f8      	ldr	r0, [r7, #28]
 8011b5c:	f002 ff10 	bl	8014980 <tcp_output>
 8011b60:	e00c      	b.n	8011b7c <tcp_input+0x73c>
        goto aborted;
 8011b62:	bf00      	nop
 8011b64:	e00a      	b.n	8011b7c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011b66:	bf00      	nop
 8011b68:	e008      	b.n	8011b7c <tcp_input+0x73c>
              goto aborted;
 8011b6a:	bf00      	nop
 8011b6c:	e006      	b.n	8011b7c <tcp_input+0x73c>
          goto aborted;
 8011b6e:	bf00      	nop
 8011b70:	e004      	b.n	8011b7c <tcp_input+0x73c>
            goto aborted;
 8011b72:	bf00      	nop
 8011b74:	e002      	b.n	8011b7c <tcp_input+0x73c>
              goto aborted;
 8011b76:	bf00      	nop
 8011b78:	e000      	b.n	8011b7c <tcp_input+0x73c>
          goto aborted;
 8011b7a:	bf00      	nop
    tcp_input_pcb = NULL;
 8011b7c:	4b26      	ldr	r3, [pc, #152]	; (8011c18 <tcp_input+0x7d8>)
 8011b7e:	2200      	movs	r2, #0
 8011b80:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011b82:	4b29      	ldr	r3, [pc, #164]	; (8011c28 <tcp_input+0x7e8>)
 8011b84:	2200      	movs	r2, #0
 8011b86:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011b88:	4b2b      	ldr	r3, [pc, #172]	; (8011c38 <tcp_input+0x7f8>)
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d03f      	beq.n	8011c10 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011b90:	4b29      	ldr	r3, [pc, #164]	; (8011c38 <tcp_input+0x7f8>)
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7fd fb75 	bl	800f284 <pbuf_free>
      inseg.p = NULL;
 8011b9a:	4b27      	ldr	r3, [pc, #156]	; (8011c38 <tcp_input+0x7f8>)
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011ba0:	e036      	b.n	8011c10 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011ba2:	4b26      	ldr	r3, [pc, #152]	; (8011c3c <tcp_input+0x7fc>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	899b      	ldrh	r3, [r3, #12]
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7fb ffbe 	bl	800db2c <lwip_htons>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	f003 0304 	and.w	r3, r3, #4
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d118      	bne.n	8011bee <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bbc:	4b20      	ldr	r3, [pc, #128]	; (8011c40 <tcp_input+0x800>)
 8011bbe:	6819      	ldr	r1, [r3, #0]
 8011bc0:	4b20      	ldr	r3, [pc, #128]	; (8011c44 <tcp_input+0x804>)
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4b20      	ldr	r3, [pc, #128]	; (8011c48 <tcp_input+0x808>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bcc:	4b1b      	ldr	r3, [pc, #108]	; (8011c3c <tcp_input+0x7fc>)
 8011bce:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bd0:	885b      	ldrh	r3, [r3, #2]
 8011bd2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bd4:	4a19      	ldr	r2, [pc, #100]	; (8011c3c <tcp_input+0x7fc>)
 8011bd6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bd8:	8812      	ldrh	r2, [r2, #0]
 8011bda:	b292      	uxth	r2, r2
 8011bdc:	9202      	str	r2, [sp, #8]
 8011bde:	9301      	str	r3, [sp, #4]
 8011be0:	4b1a      	ldr	r3, [pc, #104]	; (8011c4c <tcp_input+0x80c>)
 8011be2:	9300      	str	r3, [sp, #0]
 8011be4:	4b1a      	ldr	r3, [pc, #104]	; (8011c50 <tcp_input+0x810>)
 8011be6:	4602      	mov	r2, r0
 8011be8:	2000      	movs	r0, #0
 8011bea:	f003 fc7d 	bl	80154e8 <tcp_rst>
    pbuf_free(p);
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f7fd fb48 	bl	800f284 <pbuf_free>
  return;
 8011bf4:	e00c      	b.n	8011c10 <tcp_input+0x7d0>
    goto dropped;
 8011bf6:	bf00      	nop
 8011bf8:	e006      	b.n	8011c08 <tcp_input+0x7c8>
    goto dropped;
 8011bfa:	bf00      	nop
 8011bfc:	e004      	b.n	8011c08 <tcp_input+0x7c8>
    goto dropped;
 8011bfe:	bf00      	nop
 8011c00:	e002      	b.n	8011c08 <tcp_input+0x7c8>
      goto dropped;
 8011c02:	bf00      	nop
 8011c04:	e000      	b.n	8011c08 <tcp_input+0x7c8>
      goto dropped;
 8011c06:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7fd fb3b 	bl	800f284 <pbuf_free>
 8011c0e:	e000      	b.n	8011c12 <tcp_input+0x7d2>
  return;
 8011c10:	bf00      	nop
}
 8011c12:	3724      	adds	r7, #36	; 0x24
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd90      	pop	{r4, r7, pc}
 8011c18:	20011064 	.word	0x20011064
 8011c1c:	20004b99 	.word	0x20004b99
 8011c20:	20011050 	.word	0x20011050
 8011c24:	20004b94 	.word	0x20004b94
 8011c28:	20004b9c 	.word	0x20004b9c
 8011c2c:	0801e300 	.word	0x0801e300
 8011c30:	0801e4b4 	.word	0x0801e4b4
 8011c34:	0801e34c 	.word	0x0801e34c
 8011c38:	20004b6c 	.word	0x20004b6c
 8011c3c:	20004b7c 	.word	0x20004b7c
 8011c40:	20004b90 	.word	0x20004b90
 8011c44:	20004b96 	.word	0x20004b96
 8011c48:	20004b8c 	.word	0x20004b8c
 8011c4c:	2000d94c 	.word	0x2000d94c
 8011c50:	2000d950 	.word	0x2000d950

08011c54 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d106      	bne.n	8011c70 <tcp_input_delayed_close+0x1c>
 8011c62:	4b17      	ldr	r3, [pc, #92]	; (8011cc0 <tcp_input_delayed_close+0x6c>)
 8011c64:	f240 225a 	movw	r2, #602	; 0x25a
 8011c68:	4916      	ldr	r1, [pc, #88]	; (8011cc4 <tcp_input_delayed_close+0x70>)
 8011c6a:	4817      	ldr	r0, [pc, #92]	; (8011cc8 <tcp_input_delayed_close+0x74>)
 8011c6c:	f009 faf6 	bl	801b25c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011c70:	4b16      	ldr	r3, [pc, #88]	; (8011ccc <tcp_input_delayed_close+0x78>)
 8011c72:	781b      	ldrb	r3, [r3, #0]
 8011c74:	f003 0310 	and.w	r3, r3, #16
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d01c      	beq.n	8011cb6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	8b5b      	ldrh	r3, [r3, #26]
 8011c80:	f003 0310 	and.w	r3, r3, #16
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d10d      	bne.n	8011ca4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d008      	beq.n	8011ca4 <tcp_input_delayed_close+0x50>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c98:	687a      	ldr	r2, [r7, #4]
 8011c9a:	6912      	ldr	r2, [r2, #16]
 8011c9c:	f06f 010e 	mvn.w	r1, #14
 8011ca0:	4610      	mov	r0, r2
 8011ca2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011ca4:	6879      	ldr	r1, [r7, #4]
 8011ca6:	480a      	ldr	r0, [pc, #40]	; (8011cd0 <tcp_input_delayed_close+0x7c>)
 8011ca8:	f7ff fa52 	bl	8011150 <tcp_pcb_remove>
    tcp_free(pcb);
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f7fd fe37 	bl	800f920 <tcp_free>
    return 1;
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	e000      	b.n	8011cb8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011cb6:	2300      	movs	r3, #0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}
 8011cc0:	0801e300 	.word	0x0801e300
 8011cc4:	0801e4d0 	.word	0x0801e4d0
 8011cc8:	0801e34c 	.word	0x0801e34c
 8011ccc:	20004b99 	.word	0x20004b99
 8011cd0:	20011050 	.word	0x20011050

08011cd4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011cd4:	b590      	push	{r4, r7, lr}
 8011cd6:	b08b      	sub	sp, #44	; 0x2c
 8011cd8:	af04      	add	r7, sp, #16
 8011cda:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011cdc:	4b6f      	ldr	r3, [pc, #444]	; (8011e9c <tcp_listen_input+0x1c8>)
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	f003 0304 	and.w	r3, r3, #4
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	f040 80d2 	bne.w	8011e8e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d106      	bne.n	8011cfe <tcp_listen_input+0x2a>
 8011cf0:	4b6b      	ldr	r3, [pc, #428]	; (8011ea0 <tcp_listen_input+0x1cc>)
 8011cf2:	f240 2281 	movw	r2, #641	; 0x281
 8011cf6:	496b      	ldr	r1, [pc, #428]	; (8011ea4 <tcp_listen_input+0x1d0>)
 8011cf8:	486b      	ldr	r0, [pc, #428]	; (8011ea8 <tcp_listen_input+0x1d4>)
 8011cfa:	f009 faaf 	bl	801b25c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011cfe:	4b67      	ldr	r3, [pc, #412]	; (8011e9c <tcp_listen_input+0x1c8>)
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	f003 0310 	and.w	r3, r3, #16
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d019      	beq.n	8011d3e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d0a:	4b68      	ldr	r3, [pc, #416]	; (8011eac <tcp_listen_input+0x1d8>)
 8011d0c:	6819      	ldr	r1, [r3, #0]
 8011d0e:	4b68      	ldr	r3, [pc, #416]	; (8011eb0 <tcp_listen_input+0x1dc>)
 8011d10:	881b      	ldrh	r3, [r3, #0]
 8011d12:	461a      	mov	r2, r3
 8011d14:	4b67      	ldr	r3, [pc, #412]	; (8011eb4 <tcp_listen_input+0x1e0>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d1a:	4b67      	ldr	r3, [pc, #412]	; (8011eb8 <tcp_listen_input+0x1e4>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d1e:	885b      	ldrh	r3, [r3, #2]
 8011d20:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d22:	4a65      	ldr	r2, [pc, #404]	; (8011eb8 <tcp_listen_input+0x1e4>)
 8011d24:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d26:	8812      	ldrh	r2, [r2, #0]
 8011d28:	b292      	uxth	r2, r2
 8011d2a:	9202      	str	r2, [sp, #8]
 8011d2c:	9301      	str	r3, [sp, #4]
 8011d2e:	4b63      	ldr	r3, [pc, #396]	; (8011ebc <tcp_listen_input+0x1e8>)
 8011d30:	9300      	str	r3, [sp, #0]
 8011d32:	4b63      	ldr	r3, [pc, #396]	; (8011ec0 <tcp_listen_input+0x1ec>)
 8011d34:	4602      	mov	r2, r0
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f003 fbd6 	bl	80154e8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011d3c:	e0a9      	b.n	8011e92 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011d3e:	4b57      	ldr	r3, [pc, #348]	; (8011e9c <tcp_listen_input+0x1c8>)
 8011d40:	781b      	ldrb	r3, [r3, #0]
 8011d42:	f003 0302 	and.w	r3, r3, #2
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	f000 80a3 	beq.w	8011e92 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	7d5b      	ldrb	r3, [r3, #21]
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7ff f85b 	bl	8010e0c <tcp_alloc>
 8011d56:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d111      	bne.n	8011d82 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	699b      	ldr	r3, [r3, #24]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d00a      	beq.n	8011d7c <tcp_listen_input+0xa8>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	699b      	ldr	r3, [r3, #24]
 8011d6a:	687a      	ldr	r2, [r7, #4]
 8011d6c:	6910      	ldr	r0, [r2, #16]
 8011d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8011d72:	2100      	movs	r1, #0
 8011d74:	4798      	blx	r3
 8011d76:	4603      	mov	r3, r0
 8011d78:	73bb      	strb	r3, [r7, #14]
      return;
 8011d7a:	e08b      	b.n	8011e94 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011d7c:	23f0      	movs	r3, #240	; 0xf0
 8011d7e:	73bb      	strb	r3, [r7, #14]
      return;
 8011d80:	e088      	b.n	8011e94 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011d82:	4b50      	ldr	r3, [pc, #320]	; (8011ec4 <tcp_listen_input+0x1f0>)
 8011d84:	695a      	ldr	r2, [r3, #20]
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011d8a:	4b4e      	ldr	r3, [pc, #312]	; (8011ec4 <tcp_listen_input+0x1f0>)
 8011d8c:	691a      	ldr	r2, [r3, #16]
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	8ada      	ldrh	r2, [r3, #22]
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011d9a:	4b47      	ldr	r3, [pc, #284]	; (8011eb8 <tcp_listen_input+0x1e4>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	881b      	ldrh	r3, [r3, #0]
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	2203      	movs	r2, #3
 8011daa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011dac:	4b41      	ldr	r3, [pc, #260]	; (8011eb4 <tcp_listen_input+0x1e0>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	1c5a      	adds	r2, r3, #1
 8011db2:	697b      	ldr	r3, [r7, #20]
 8011db4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011db6:	697b      	ldr	r3, [r7, #20]
 8011db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011dbe:	6978      	ldr	r0, [r7, #20]
 8011dc0:	f7ff fa5a 	bl	8011278 <tcp_next_iss>
 8011dc4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	693a      	ldr	r2, [r7, #16]
 8011dca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	693a      	ldr	r2, [r7, #16]
 8011dd0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	693a      	ldr	r2, [r7, #16]
 8011dd6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	693a      	ldr	r2, [r7, #16]
 8011ddc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011dde:	4b35      	ldr	r3, [pc, #212]	; (8011eb4 <tcp_listen_input+0x1e0>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	1e5a      	subs	r2, r3, #1
 8011de4:	697b      	ldr	r3, [r7, #20]
 8011de6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	691a      	ldr	r2, [r3, #16]
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	687a      	ldr	r2, [r7, #4]
 8011df4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	7a5b      	ldrb	r3, [r3, #9]
 8011dfa:	f003 030c 	and.w	r3, r3, #12
 8011dfe:	b2da      	uxtb	r2, r3
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	7a1a      	ldrb	r2, [r3, #8]
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011e0c:	4b2e      	ldr	r3, [pc, #184]	; (8011ec8 <tcp_listen_input+0x1f4>)
 8011e0e:	681a      	ldr	r2, [r3, #0]
 8011e10:	697b      	ldr	r3, [r7, #20]
 8011e12:	60da      	str	r2, [r3, #12]
 8011e14:	4a2c      	ldr	r2, [pc, #176]	; (8011ec8 <tcp_listen_input+0x1f4>)
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	6013      	str	r3, [r2, #0]
 8011e1a:	f003 fd27 	bl	801586c <tcp_timer_needed>
 8011e1e:	4b2b      	ldr	r3, [pc, #172]	; (8011ecc <tcp_listen_input+0x1f8>)
 8011e20:	2201      	movs	r2, #1
 8011e22:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011e24:	6978      	ldr	r0, [r7, #20]
 8011e26:	f001 fd8d 	bl	8013944 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011e2a:	4b23      	ldr	r3, [pc, #140]	; (8011eb8 <tcp_listen_input+0x1e4>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	89db      	ldrh	r3, [r3, #14]
 8011e30:	b29a      	uxth	r2, r3
 8011e32:	697b      	ldr	r3, [r7, #20]
 8011e34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	3304      	adds	r3, #4
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f005 fc09 	bl	8017664 <ip4_route>
 8011e52:	4601      	mov	r1, r0
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	3304      	adds	r3, #4
 8011e58:	461a      	mov	r2, r3
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	f7ff fa32 	bl	80112c4 <tcp_eff_send_mss_netif>
 8011e60:	4603      	mov	r3, r0
 8011e62:	461a      	mov	r2, r3
 8011e64:	697b      	ldr	r3, [r7, #20]
 8011e66:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011e68:	2112      	movs	r1, #18
 8011e6a:	6978      	ldr	r0, [r7, #20]
 8011e6c:	f002 fc9a 	bl	80147a4 <tcp_enqueue_flags>
 8011e70:	4603      	mov	r3, r0
 8011e72:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d004      	beq.n	8011e86 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011e7c:	2100      	movs	r1, #0
 8011e7e:	6978      	ldr	r0, [r7, #20]
 8011e80:	f7fd ffd4 	bl	800fe2c <tcp_abandon>
      return;
 8011e84:	e006      	b.n	8011e94 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011e86:	6978      	ldr	r0, [r7, #20]
 8011e88:	f002 fd7a 	bl	8014980 <tcp_output>
  return;
 8011e8c:	e001      	b.n	8011e92 <tcp_listen_input+0x1be>
    return;
 8011e8e:	bf00      	nop
 8011e90:	e000      	b.n	8011e94 <tcp_listen_input+0x1c0>
  return;
 8011e92:	bf00      	nop
}
 8011e94:	371c      	adds	r7, #28
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd90      	pop	{r4, r7, pc}
 8011e9a:	bf00      	nop
 8011e9c:	20004b98 	.word	0x20004b98
 8011ea0:	0801e300 	.word	0x0801e300
 8011ea4:	0801e4f8 	.word	0x0801e4f8
 8011ea8:	0801e34c 	.word	0x0801e34c
 8011eac:	20004b90 	.word	0x20004b90
 8011eb0:	20004b96 	.word	0x20004b96
 8011eb4:	20004b8c 	.word	0x20004b8c
 8011eb8:	20004b7c 	.word	0x20004b7c
 8011ebc:	2000d94c 	.word	0x2000d94c
 8011ec0:	2000d950 	.word	0x2000d950
 8011ec4:	2000d93c 	.word	0x2000d93c
 8011ec8:	20011050 	.word	0x20011050
 8011ecc:	2001104c 	.word	0x2001104c

08011ed0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b086      	sub	sp, #24
 8011ed4:	af04      	add	r7, sp, #16
 8011ed6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011ed8:	4b2f      	ldr	r3, [pc, #188]	; (8011f98 <tcp_timewait_input+0xc8>)
 8011eda:	781b      	ldrb	r3, [r3, #0]
 8011edc:	f003 0304 	and.w	r3, r3, #4
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d153      	bne.n	8011f8c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d106      	bne.n	8011ef8 <tcp_timewait_input+0x28>
 8011eea:	4b2c      	ldr	r3, [pc, #176]	; (8011f9c <tcp_timewait_input+0xcc>)
 8011eec:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011ef0:	492b      	ldr	r1, [pc, #172]	; (8011fa0 <tcp_timewait_input+0xd0>)
 8011ef2:	482c      	ldr	r0, [pc, #176]	; (8011fa4 <tcp_timewait_input+0xd4>)
 8011ef4:	f009 f9b2 	bl	801b25c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011ef8:	4b27      	ldr	r3, [pc, #156]	; (8011f98 <tcp_timewait_input+0xc8>)
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	f003 0302 	and.w	r3, r3, #2
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d02a      	beq.n	8011f5a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011f04:	4b28      	ldr	r3, [pc, #160]	; (8011fa8 <tcp_timewait_input+0xd8>)
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f0c:	1ad3      	subs	r3, r2, r3
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	db2d      	blt.n	8011f6e <tcp_timewait_input+0x9e>
 8011f12:	4b25      	ldr	r3, [pc, #148]	; (8011fa8 <tcp_timewait_input+0xd8>)
 8011f14:	681a      	ldr	r2, [r3, #0]
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f1a:	6879      	ldr	r1, [r7, #4]
 8011f1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011f1e:	440b      	add	r3, r1
 8011f20:	1ad3      	subs	r3, r2, r3
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	dc23      	bgt.n	8011f6e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f26:	4b21      	ldr	r3, [pc, #132]	; (8011fac <tcp_timewait_input+0xdc>)
 8011f28:	6819      	ldr	r1, [r3, #0]
 8011f2a:	4b21      	ldr	r3, [pc, #132]	; (8011fb0 <tcp_timewait_input+0xe0>)
 8011f2c:	881b      	ldrh	r3, [r3, #0]
 8011f2e:	461a      	mov	r2, r3
 8011f30:	4b1d      	ldr	r3, [pc, #116]	; (8011fa8 <tcp_timewait_input+0xd8>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f36:	4b1f      	ldr	r3, [pc, #124]	; (8011fb4 <tcp_timewait_input+0xe4>)
 8011f38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f3a:	885b      	ldrh	r3, [r3, #2]
 8011f3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f3e:	4a1d      	ldr	r2, [pc, #116]	; (8011fb4 <tcp_timewait_input+0xe4>)
 8011f40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f42:	8812      	ldrh	r2, [r2, #0]
 8011f44:	b292      	uxth	r2, r2
 8011f46:	9202      	str	r2, [sp, #8]
 8011f48:	9301      	str	r3, [sp, #4]
 8011f4a:	4b1b      	ldr	r3, [pc, #108]	; (8011fb8 <tcp_timewait_input+0xe8>)
 8011f4c:	9300      	str	r3, [sp, #0]
 8011f4e:	4b1b      	ldr	r3, [pc, #108]	; (8011fbc <tcp_timewait_input+0xec>)
 8011f50:	4602      	mov	r2, r0
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	f003 fac8 	bl	80154e8 <tcp_rst>
      return;
 8011f58:	e01b      	b.n	8011f92 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011f5a:	4b0f      	ldr	r3, [pc, #60]	; (8011f98 <tcp_timewait_input+0xc8>)
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	f003 0301 	and.w	r3, r3, #1
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d003      	beq.n	8011f6e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011f66:	4b16      	ldr	r3, [pc, #88]	; (8011fc0 <tcp_timewait_input+0xf0>)
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011f6e:	4b10      	ldr	r3, [pc, #64]	; (8011fb0 <tcp_timewait_input+0xe0>)
 8011f70:	881b      	ldrh	r3, [r3, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d00c      	beq.n	8011f90 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	8b5b      	ldrh	r3, [r3, #26]
 8011f7a:	f043 0302 	orr.w	r3, r3, #2
 8011f7e:	b29a      	uxth	r2, r3
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f002 fcfb 	bl	8014980 <tcp_output>
  }
  return;
 8011f8a:	e001      	b.n	8011f90 <tcp_timewait_input+0xc0>
    return;
 8011f8c:	bf00      	nop
 8011f8e:	e000      	b.n	8011f92 <tcp_timewait_input+0xc2>
  return;
 8011f90:	bf00      	nop
}
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}
 8011f98:	20004b98 	.word	0x20004b98
 8011f9c:	0801e300 	.word	0x0801e300
 8011fa0:	0801e518 	.word	0x0801e518
 8011fa4:	0801e34c 	.word	0x0801e34c
 8011fa8:	20004b8c 	.word	0x20004b8c
 8011fac:	20004b90 	.word	0x20004b90
 8011fb0:	20004b96 	.word	0x20004b96
 8011fb4:	20004b7c 	.word	0x20004b7c
 8011fb8:	2000d94c 	.word	0x2000d94c
 8011fbc:	2000d950 	.word	0x2000d950
 8011fc0:	20011054 	.word	0x20011054

08011fc4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011fc4:	b590      	push	{r4, r7, lr}
 8011fc6:	b08d      	sub	sp, #52	; 0x34
 8011fc8:	af04      	add	r7, sp, #16
 8011fca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d106      	bne.n	8011fe8 <tcp_process+0x24>
 8011fda:	4ba5      	ldr	r3, [pc, #660]	; (8012270 <tcp_process+0x2ac>)
 8011fdc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011fe0:	49a4      	ldr	r1, [pc, #656]	; (8012274 <tcp_process+0x2b0>)
 8011fe2:	48a5      	ldr	r0, [pc, #660]	; (8012278 <tcp_process+0x2b4>)
 8011fe4:	f009 f93a 	bl	801b25c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011fe8:	4ba4      	ldr	r3, [pc, #656]	; (801227c <tcp_process+0x2b8>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	f003 0304 	and.w	r3, r3, #4
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d04e      	beq.n	8012092 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	7d1b      	ldrb	r3, [r3, #20]
 8011ff8:	2b02      	cmp	r3, #2
 8011ffa:	d108      	bne.n	801200e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012000:	4b9f      	ldr	r3, [pc, #636]	; (8012280 <tcp_process+0x2bc>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	429a      	cmp	r2, r3
 8012006:	d123      	bne.n	8012050 <tcp_process+0x8c>
        acceptable = 1;
 8012008:	2301      	movs	r3, #1
 801200a:	76fb      	strb	r3, [r7, #27]
 801200c:	e020      	b.n	8012050 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012012:	4b9c      	ldr	r3, [pc, #624]	; (8012284 <tcp_process+0x2c0>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	429a      	cmp	r2, r3
 8012018:	d102      	bne.n	8012020 <tcp_process+0x5c>
        acceptable = 1;
 801201a:	2301      	movs	r3, #1
 801201c:	76fb      	strb	r3, [r7, #27]
 801201e:	e017      	b.n	8012050 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012020:	4b98      	ldr	r3, [pc, #608]	; (8012284 <tcp_process+0x2c0>)
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	2b00      	cmp	r3, #0
 801202c:	db10      	blt.n	8012050 <tcp_process+0x8c>
 801202e:	4b95      	ldr	r3, [pc, #596]	; (8012284 <tcp_process+0x2c0>)
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012036:	6879      	ldr	r1, [r7, #4]
 8012038:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801203a:	440b      	add	r3, r1
 801203c:	1ad3      	subs	r3, r2, r3
 801203e:	2b00      	cmp	r3, #0
 8012040:	dc06      	bgt.n	8012050 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	8b5b      	ldrh	r3, [r3, #26]
 8012046:	f043 0302 	orr.w	r3, r3, #2
 801204a:	b29a      	uxth	r2, r3
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012050:	7efb      	ldrb	r3, [r7, #27]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d01b      	beq.n	801208e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	7d1b      	ldrb	r3, [r3, #20]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d106      	bne.n	801206c <tcp_process+0xa8>
 801205e:	4b84      	ldr	r3, [pc, #528]	; (8012270 <tcp_process+0x2ac>)
 8012060:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012064:	4988      	ldr	r1, [pc, #544]	; (8012288 <tcp_process+0x2c4>)
 8012066:	4884      	ldr	r0, [pc, #528]	; (8012278 <tcp_process+0x2b4>)
 8012068:	f009 f8f8 	bl	801b25c <iprintf>
      recv_flags |= TF_RESET;
 801206c:	4b87      	ldr	r3, [pc, #540]	; (801228c <tcp_process+0x2c8>)
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	f043 0308 	orr.w	r3, r3, #8
 8012074:	b2da      	uxtb	r2, r3
 8012076:	4b85      	ldr	r3, [pc, #532]	; (801228c <tcp_process+0x2c8>)
 8012078:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8b5b      	ldrh	r3, [r3, #26]
 801207e:	f023 0301 	bic.w	r3, r3, #1
 8012082:	b29a      	uxth	r2, r3
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012088:	f06f 030d 	mvn.w	r3, #13
 801208c:	e37a      	b.n	8012784 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801208e:	2300      	movs	r3, #0
 8012090:	e378      	b.n	8012784 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012092:	4b7a      	ldr	r3, [pc, #488]	; (801227c <tcp_process+0x2b8>)
 8012094:	781b      	ldrb	r3, [r3, #0]
 8012096:	f003 0302 	and.w	r3, r3, #2
 801209a:	2b00      	cmp	r3, #0
 801209c:	d010      	beq.n	80120c0 <tcp_process+0xfc>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	7d1b      	ldrb	r3, [r3, #20]
 80120a2:	2b02      	cmp	r3, #2
 80120a4:	d00c      	beq.n	80120c0 <tcp_process+0xfc>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	7d1b      	ldrb	r3, [r3, #20]
 80120aa:	2b03      	cmp	r3, #3
 80120ac:	d008      	beq.n	80120c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	8b5b      	ldrh	r3, [r3, #26]
 80120b2:	f043 0302 	orr.w	r3, r3, #2
 80120b6:	b29a      	uxth	r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80120bc:	2300      	movs	r3, #0
 80120be:	e361      	b.n	8012784 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	8b5b      	ldrh	r3, [r3, #26]
 80120c4:	f003 0310 	and.w	r3, r3, #16
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d103      	bne.n	80120d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80120cc:	4b70      	ldr	r3, [pc, #448]	; (8012290 <tcp_process+0x2cc>)
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2200      	movs	r2, #0
 80120d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2200      	movs	r2, #0
 80120e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f001 fc2d 	bl	8013944 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	7d1b      	ldrb	r3, [r3, #20]
 80120ee:	3b02      	subs	r3, #2
 80120f0:	2b07      	cmp	r3, #7
 80120f2:	f200 8337 	bhi.w	8012764 <tcp_process+0x7a0>
 80120f6:	a201      	add	r2, pc, #4	; (adr r2, 80120fc <tcp_process+0x138>)
 80120f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120fc:	0801211d 	.word	0x0801211d
 8012100:	0801234d 	.word	0x0801234d
 8012104:	080124c5 	.word	0x080124c5
 8012108:	080124ef 	.word	0x080124ef
 801210c:	08012613 	.word	0x08012613
 8012110:	080124c5 	.word	0x080124c5
 8012114:	0801269f 	.word	0x0801269f
 8012118:	0801272f 	.word	0x0801272f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801211c:	4b57      	ldr	r3, [pc, #348]	; (801227c <tcp_process+0x2b8>)
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	f003 0310 	and.w	r3, r3, #16
 8012124:	2b00      	cmp	r3, #0
 8012126:	f000 80e4 	beq.w	80122f2 <tcp_process+0x32e>
 801212a:	4b54      	ldr	r3, [pc, #336]	; (801227c <tcp_process+0x2b8>)
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	f003 0302 	and.w	r3, r3, #2
 8012132:	2b00      	cmp	r3, #0
 8012134:	f000 80dd 	beq.w	80122f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801213c:	1c5a      	adds	r2, r3, #1
 801213e:	4b50      	ldr	r3, [pc, #320]	; (8012280 <tcp_process+0x2bc>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	429a      	cmp	r2, r3
 8012144:	f040 80d5 	bne.w	80122f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012148:	4b4e      	ldr	r3, [pc, #312]	; (8012284 <tcp_process+0x2c0>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	1c5a      	adds	r2, r3, #1
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801215a:	4b49      	ldr	r3, [pc, #292]	; (8012280 <tcp_process+0x2bc>)
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012162:	4b4c      	ldr	r3, [pc, #304]	; (8012294 <tcp_process+0x2d0>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	89db      	ldrh	r3, [r3, #14]
 8012168:	b29a      	uxth	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801217c:	4b41      	ldr	r3, [pc, #260]	; (8012284 <tcp_process+0x2c0>)
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	1e5a      	subs	r2, r3, #1
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2204      	movs	r2, #4
 801218a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	3304      	adds	r3, #4
 8012194:	4618      	mov	r0, r3
 8012196:	f005 fa65 	bl	8017664 <ip4_route>
 801219a:	4601      	mov	r1, r0
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	3304      	adds	r3, #4
 80121a0:	461a      	mov	r2, r3
 80121a2:	4620      	mov	r0, r4
 80121a4:	f7ff f88e 	bl	80112c4 <tcp_eff_send_mss_netif>
 80121a8:	4603      	mov	r3, r0
 80121aa:	461a      	mov	r2, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121b4:	009a      	lsls	r2, r3, #2
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	f241 111c 	movw	r1, #4380	; 0x111c
 80121c0:	428b      	cmp	r3, r1
 80121c2:	bf38      	it	cc
 80121c4:	460b      	movcc	r3, r1
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d204      	bcs.n	80121d4 <tcp_process+0x210>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121ce:	009b      	lsls	r3, r3, #2
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	e00d      	b.n	80121f0 <tcp_process+0x22c>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121d8:	005b      	lsls	r3, r3, #1
 80121da:	f241 121c 	movw	r2, #4380	; 0x111c
 80121de:	4293      	cmp	r3, r2
 80121e0:	d904      	bls.n	80121ec <tcp_process+0x228>
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121e6:	005b      	lsls	r3, r3, #1
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	e001      	b.n	80121f0 <tcp_process+0x22c>
 80121ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80121f0:	687a      	ldr	r2, [r7, #4]
 80121f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d106      	bne.n	801220e <tcp_process+0x24a>
 8012200:	4b1b      	ldr	r3, [pc, #108]	; (8012270 <tcp_process+0x2ac>)
 8012202:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012206:	4924      	ldr	r1, [pc, #144]	; (8012298 <tcp_process+0x2d4>)
 8012208:	481b      	ldr	r0, [pc, #108]	; (8012278 <tcp_process+0x2b4>)
 801220a:	f009 f827 	bl	801b25c <iprintf>
        --pcb->snd_queuelen;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012214:	3b01      	subs	r3, #1
 8012216:	b29a      	uxth	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012222:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d111      	bne.n	801224e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801222e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d106      	bne.n	8012244 <tcp_process+0x280>
 8012236:	4b0e      	ldr	r3, [pc, #56]	; (8012270 <tcp_process+0x2ac>)
 8012238:	f44f 725d 	mov.w	r2, #884	; 0x374
 801223c:	4917      	ldr	r1, [pc, #92]	; (801229c <tcp_process+0x2d8>)
 801223e:	480e      	ldr	r0, [pc, #56]	; (8012278 <tcp_process+0x2b4>)
 8012240:	f009 f80c 	bl	801b25c <iprintf>
          pcb->unsent = rseg->next;
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	66da      	str	r2, [r3, #108]	; 0x6c
 801224c:	e003      	b.n	8012256 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801224e:	69fb      	ldr	r3, [r7, #28]
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012256:	69f8      	ldr	r0, [r7, #28]
 8012258:	f7fe fc6f 	bl	8010b3a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012260:	2b00      	cmp	r3, #0
 8012262:	d11d      	bne.n	80122a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801226a:	861a      	strh	r2, [r3, #48]	; 0x30
 801226c:	e01f      	b.n	80122ae <tcp_process+0x2ea>
 801226e:	bf00      	nop
 8012270:	0801e300 	.word	0x0801e300
 8012274:	0801e538 	.word	0x0801e538
 8012278:	0801e34c 	.word	0x0801e34c
 801227c:	20004b98 	.word	0x20004b98
 8012280:	20004b90 	.word	0x20004b90
 8012284:	20004b8c 	.word	0x20004b8c
 8012288:	0801e554 	.word	0x0801e554
 801228c:	20004b99 	.word	0x20004b99
 8012290:	20011054 	.word	0x20011054
 8012294:	20004b7c 	.word	0x20004b7c
 8012298:	0801e574 	.word	0x0801e574
 801229c:	0801e58c 	.word	0x0801e58c
        } else {
          pcb->rtime = 0;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2200      	movs	r2, #0
 80122a4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2200      	movs	r2, #0
 80122aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d00a      	beq.n	80122ce <tcp_process+0x30a>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80122be:	687a      	ldr	r2, [r7, #4]
 80122c0:	6910      	ldr	r0, [r2, #16]
 80122c2:	2200      	movs	r2, #0
 80122c4:	6879      	ldr	r1, [r7, #4]
 80122c6:	4798      	blx	r3
 80122c8:	4603      	mov	r3, r0
 80122ca:	76bb      	strb	r3, [r7, #26]
 80122cc:	e001      	b.n	80122d2 <tcp_process+0x30e>
 80122ce:	2300      	movs	r3, #0
 80122d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80122d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80122d6:	f113 0f0d 	cmn.w	r3, #13
 80122da:	d102      	bne.n	80122e2 <tcp_process+0x31e>
          return ERR_ABRT;
 80122dc:	f06f 030c 	mvn.w	r3, #12
 80122e0:	e250      	b.n	8012784 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	8b5b      	ldrh	r3, [r3, #26]
 80122e6:	f043 0302 	orr.w	r3, r3, #2
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80122f0:	e23a      	b.n	8012768 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80122f2:	4b9d      	ldr	r3, [pc, #628]	; (8012568 <tcp_process+0x5a4>)
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	f003 0310 	and.w	r3, r3, #16
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	f000 8234 	beq.w	8012768 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012300:	4b9a      	ldr	r3, [pc, #616]	; (801256c <tcp_process+0x5a8>)
 8012302:	6819      	ldr	r1, [r3, #0]
 8012304:	4b9a      	ldr	r3, [pc, #616]	; (8012570 <tcp_process+0x5ac>)
 8012306:	881b      	ldrh	r3, [r3, #0]
 8012308:	461a      	mov	r2, r3
 801230a:	4b9a      	ldr	r3, [pc, #616]	; (8012574 <tcp_process+0x5b0>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012310:	4b99      	ldr	r3, [pc, #612]	; (8012578 <tcp_process+0x5b4>)
 8012312:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012314:	885b      	ldrh	r3, [r3, #2]
 8012316:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012318:	4a97      	ldr	r2, [pc, #604]	; (8012578 <tcp_process+0x5b4>)
 801231a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801231c:	8812      	ldrh	r2, [r2, #0]
 801231e:	b292      	uxth	r2, r2
 8012320:	9202      	str	r2, [sp, #8]
 8012322:	9301      	str	r3, [sp, #4]
 8012324:	4b95      	ldr	r3, [pc, #596]	; (801257c <tcp_process+0x5b8>)
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	4b95      	ldr	r3, [pc, #596]	; (8012580 <tcp_process+0x5bc>)
 801232a:	4602      	mov	r2, r0
 801232c:	6878      	ldr	r0, [r7, #4]
 801232e:	f003 f8db 	bl	80154e8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012338:	2b05      	cmp	r3, #5
 801233a:	f200 8215 	bhi.w	8012768 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2200      	movs	r2, #0
 8012342:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f002 fea5 	bl	8015094 <tcp_rexmit_rto>
      break;
 801234a:	e20d      	b.n	8012768 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801234c:	4b86      	ldr	r3, [pc, #536]	; (8012568 <tcp_process+0x5a4>)
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	f003 0310 	and.w	r3, r3, #16
 8012354:	2b00      	cmp	r3, #0
 8012356:	f000 80a1 	beq.w	801249c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801235a:	4b84      	ldr	r3, [pc, #528]	; (801256c <tcp_process+0x5a8>)
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	3b01      	subs	r3, #1
 8012366:	2b00      	cmp	r3, #0
 8012368:	db7e      	blt.n	8012468 <tcp_process+0x4a4>
 801236a:	4b80      	ldr	r3, [pc, #512]	; (801256c <tcp_process+0x5a8>)
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012372:	1ad3      	subs	r3, r2, r3
 8012374:	2b00      	cmp	r3, #0
 8012376:	dc77      	bgt.n	8012468 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2204      	movs	r2, #4
 801237c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012382:	2b00      	cmp	r3, #0
 8012384:	d102      	bne.n	801238c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012386:	23fa      	movs	r3, #250	; 0xfa
 8012388:	76bb      	strb	r3, [r7, #26]
 801238a:	e01d      	b.n	80123c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012390:	699b      	ldr	r3, [r3, #24]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d106      	bne.n	80123a4 <tcp_process+0x3e0>
 8012396:	4b7b      	ldr	r3, [pc, #492]	; (8012584 <tcp_process+0x5c0>)
 8012398:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801239c:	497a      	ldr	r1, [pc, #488]	; (8012588 <tcp_process+0x5c4>)
 801239e:	487b      	ldr	r0, [pc, #492]	; (801258c <tcp_process+0x5c8>)
 80123a0:	f008 ff5c 	bl	801b25c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123a8:	699b      	ldr	r3, [r3, #24]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d00a      	beq.n	80123c4 <tcp_process+0x400>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123b2:	699b      	ldr	r3, [r3, #24]
 80123b4:	687a      	ldr	r2, [r7, #4]
 80123b6:	6910      	ldr	r0, [r2, #16]
 80123b8:	2200      	movs	r2, #0
 80123ba:	6879      	ldr	r1, [r7, #4]
 80123bc:	4798      	blx	r3
 80123be:	4603      	mov	r3, r0
 80123c0:	76bb      	strb	r3, [r7, #26]
 80123c2:	e001      	b.n	80123c8 <tcp_process+0x404>
 80123c4:	23f0      	movs	r3, #240	; 0xf0
 80123c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80123c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d00a      	beq.n	80123e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80123d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80123d4:	f113 0f0d 	cmn.w	r3, #13
 80123d8:	d002      	beq.n	80123e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7fd fde4 	bl	800ffa8 <tcp_abort>
            }
            return ERR_ABRT;
 80123e0:	f06f 030c 	mvn.w	r3, #12
 80123e4:	e1ce      	b.n	8012784 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f000 fae0 	bl	80129ac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80123ec:	4b68      	ldr	r3, [pc, #416]	; (8012590 <tcp_process+0x5cc>)
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d005      	beq.n	8012400 <tcp_process+0x43c>
            recv_acked--;
 80123f4:	4b66      	ldr	r3, [pc, #408]	; (8012590 <tcp_process+0x5cc>)
 80123f6:	881b      	ldrh	r3, [r3, #0]
 80123f8:	3b01      	subs	r3, #1
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	4b64      	ldr	r3, [pc, #400]	; (8012590 <tcp_process+0x5cc>)
 80123fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012404:	009a      	lsls	r2, r3, #2
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801240a:	005b      	lsls	r3, r3, #1
 801240c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012410:	428b      	cmp	r3, r1
 8012412:	bf38      	it	cc
 8012414:	460b      	movcc	r3, r1
 8012416:	429a      	cmp	r2, r3
 8012418:	d204      	bcs.n	8012424 <tcp_process+0x460>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801241e:	009b      	lsls	r3, r3, #2
 8012420:	b29b      	uxth	r3, r3
 8012422:	e00d      	b.n	8012440 <tcp_process+0x47c>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012428:	005b      	lsls	r3, r3, #1
 801242a:	f241 121c 	movw	r2, #4380	; 0x111c
 801242e:	4293      	cmp	r3, r2
 8012430:	d904      	bls.n	801243c <tcp_process+0x478>
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012436:	005b      	lsls	r3, r3, #1
 8012438:	b29b      	uxth	r3, r3
 801243a:	e001      	b.n	8012440 <tcp_process+0x47c>
 801243c:	f241 131c 	movw	r3, #4380	; 0x111c
 8012440:	687a      	ldr	r2, [r7, #4]
 8012442:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012446:	4b53      	ldr	r3, [pc, #332]	; (8012594 <tcp_process+0x5d0>)
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	f003 0320 	and.w	r3, r3, #32
 801244e:	2b00      	cmp	r3, #0
 8012450:	d037      	beq.n	80124c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	8b5b      	ldrh	r3, [r3, #26]
 8012456:	f043 0302 	orr.w	r3, r3, #2
 801245a:	b29a      	uxth	r2, r3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2207      	movs	r2, #7
 8012464:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012466:	e02c      	b.n	80124c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012468:	4b40      	ldr	r3, [pc, #256]	; (801256c <tcp_process+0x5a8>)
 801246a:	6819      	ldr	r1, [r3, #0]
 801246c:	4b40      	ldr	r3, [pc, #256]	; (8012570 <tcp_process+0x5ac>)
 801246e:	881b      	ldrh	r3, [r3, #0]
 8012470:	461a      	mov	r2, r3
 8012472:	4b40      	ldr	r3, [pc, #256]	; (8012574 <tcp_process+0x5b0>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012478:	4b3f      	ldr	r3, [pc, #252]	; (8012578 <tcp_process+0x5b4>)
 801247a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801247c:	885b      	ldrh	r3, [r3, #2]
 801247e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012480:	4a3d      	ldr	r2, [pc, #244]	; (8012578 <tcp_process+0x5b4>)
 8012482:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012484:	8812      	ldrh	r2, [r2, #0]
 8012486:	b292      	uxth	r2, r2
 8012488:	9202      	str	r2, [sp, #8]
 801248a:	9301      	str	r3, [sp, #4]
 801248c:	4b3b      	ldr	r3, [pc, #236]	; (801257c <tcp_process+0x5b8>)
 801248e:	9300      	str	r3, [sp, #0]
 8012490:	4b3b      	ldr	r3, [pc, #236]	; (8012580 <tcp_process+0x5bc>)
 8012492:	4602      	mov	r2, r0
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f003 f827 	bl	80154e8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801249a:	e167      	b.n	801276c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801249c:	4b32      	ldr	r3, [pc, #200]	; (8012568 <tcp_process+0x5a4>)
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	f003 0302 	and.w	r3, r3, #2
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f000 8161 	beq.w	801276c <tcp_process+0x7a8>
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ae:	1e5a      	subs	r2, r3, #1
 80124b0:	4b30      	ldr	r3, [pc, #192]	; (8012574 <tcp_process+0x5b0>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	429a      	cmp	r2, r3
 80124b6:	f040 8159 	bne.w	801276c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f002 fe0c 	bl	80150d8 <tcp_rexmit>
      break;
 80124c0:	e154      	b.n	801276c <tcp_process+0x7a8>
 80124c2:	e153      	b.n	801276c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f000 fa71 	bl	80129ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80124ca:	4b32      	ldr	r3, [pc, #200]	; (8012594 <tcp_process+0x5d0>)
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	f003 0320 	and.w	r3, r3, #32
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	f000 814c 	beq.w	8012770 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	8b5b      	ldrh	r3, [r3, #26]
 80124dc:	f043 0302 	orr.w	r3, r3, #2
 80124e0:	b29a      	uxth	r2, r3
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2207      	movs	r2, #7
 80124ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80124ec:	e140      	b.n	8012770 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f000 fa5c 	bl	80129ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80124f4:	4b27      	ldr	r3, [pc, #156]	; (8012594 <tcp_process+0x5d0>)
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	f003 0320 	and.w	r3, r3, #32
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d071      	beq.n	80125e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012500:	4b19      	ldr	r3, [pc, #100]	; (8012568 <tcp_process+0x5a4>)
 8012502:	781b      	ldrb	r3, [r3, #0]
 8012504:	f003 0310 	and.w	r3, r3, #16
 8012508:	2b00      	cmp	r3, #0
 801250a:	d060      	beq.n	80125ce <tcp_process+0x60a>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012510:	4b16      	ldr	r3, [pc, #88]	; (801256c <tcp_process+0x5a8>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	429a      	cmp	r2, r3
 8012516:	d15a      	bne.n	80125ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801251c:	2b00      	cmp	r3, #0
 801251e:	d156      	bne.n	80125ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	8b5b      	ldrh	r3, [r3, #26]
 8012524:	f043 0302 	orr.w	r3, r3, #2
 8012528:	b29a      	uxth	r2, r3
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f7fe fdbe 	bl	80110b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012534:	4b18      	ldr	r3, [pc, #96]	; (8012598 <tcp_process+0x5d4>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	429a      	cmp	r2, r3
 801253c:	d105      	bne.n	801254a <tcp_process+0x586>
 801253e:	4b16      	ldr	r3, [pc, #88]	; (8012598 <tcp_process+0x5d4>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	68db      	ldr	r3, [r3, #12]
 8012544:	4a14      	ldr	r2, [pc, #80]	; (8012598 <tcp_process+0x5d4>)
 8012546:	6013      	str	r3, [r2, #0]
 8012548:	e02e      	b.n	80125a8 <tcp_process+0x5e4>
 801254a:	4b13      	ldr	r3, [pc, #76]	; (8012598 <tcp_process+0x5d4>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	617b      	str	r3, [r7, #20]
 8012550:	e027      	b.n	80125a2 <tcp_process+0x5de>
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	429a      	cmp	r2, r3
 801255a:	d11f      	bne.n	801259c <tcp_process+0x5d8>
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	68da      	ldr	r2, [r3, #12]
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	60da      	str	r2, [r3, #12]
 8012564:	e020      	b.n	80125a8 <tcp_process+0x5e4>
 8012566:	bf00      	nop
 8012568:	20004b98 	.word	0x20004b98
 801256c:	20004b90 	.word	0x20004b90
 8012570:	20004b96 	.word	0x20004b96
 8012574:	20004b8c 	.word	0x20004b8c
 8012578:	20004b7c 	.word	0x20004b7c
 801257c:	2000d94c 	.word	0x2000d94c
 8012580:	2000d950 	.word	0x2000d950
 8012584:	0801e300 	.word	0x0801e300
 8012588:	0801e5a0 	.word	0x0801e5a0
 801258c:	0801e34c 	.word	0x0801e34c
 8012590:	20004b94 	.word	0x20004b94
 8012594:	20004b99 	.word	0x20004b99
 8012598:	20011050 	.word	0x20011050
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	68db      	ldr	r3, [r3, #12]
 80125a0:	617b      	str	r3, [r7, #20]
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d1d4      	bne.n	8012552 <tcp_process+0x58e>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2200      	movs	r2, #0
 80125ac:	60da      	str	r2, [r3, #12]
 80125ae:	4b77      	ldr	r3, [pc, #476]	; (801278c <tcp_process+0x7c8>)
 80125b0:	2201      	movs	r2, #1
 80125b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	220a      	movs	r2, #10
 80125b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80125ba:	4b75      	ldr	r3, [pc, #468]	; (8012790 <tcp_process+0x7cc>)
 80125bc:	681a      	ldr	r2, [r3, #0]
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	60da      	str	r2, [r3, #12]
 80125c2:	4a73      	ldr	r2, [pc, #460]	; (8012790 <tcp_process+0x7cc>)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6013      	str	r3, [r2, #0]
 80125c8:	f003 f950 	bl	801586c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80125cc:	e0d2      	b.n	8012774 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	8b5b      	ldrh	r3, [r3, #26]
 80125d2:	f043 0302 	orr.w	r3, r3, #2
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2208      	movs	r2, #8
 80125e0:	751a      	strb	r2, [r3, #20]
      break;
 80125e2:	e0c7      	b.n	8012774 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80125e4:	4b6b      	ldr	r3, [pc, #428]	; (8012794 <tcp_process+0x7d0>)
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	f003 0310 	and.w	r3, r3, #16
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f000 80c1 	beq.w	8012774 <tcp_process+0x7b0>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125f6:	4b68      	ldr	r3, [pc, #416]	; (8012798 <tcp_process+0x7d4>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	f040 80ba 	bne.w	8012774 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012604:	2b00      	cmp	r3, #0
 8012606:	f040 80b5 	bne.w	8012774 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2206      	movs	r2, #6
 801260e:	751a      	strb	r2, [r3, #20]
      break;
 8012610:	e0b0      	b.n	8012774 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f000 f9ca 	bl	80129ac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012618:	4b60      	ldr	r3, [pc, #384]	; (801279c <tcp_process+0x7d8>)
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	f003 0320 	and.w	r3, r3, #32
 8012620:	2b00      	cmp	r3, #0
 8012622:	f000 80a9 	beq.w	8012778 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	8b5b      	ldrh	r3, [r3, #26]
 801262a:	f043 0302 	orr.w	r3, r3, #2
 801262e:	b29a      	uxth	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f7fe fd3b 	bl	80110b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801263a:	4b59      	ldr	r3, [pc, #356]	; (80127a0 <tcp_process+0x7dc>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	429a      	cmp	r2, r3
 8012642:	d105      	bne.n	8012650 <tcp_process+0x68c>
 8012644:	4b56      	ldr	r3, [pc, #344]	; (80127a0 <tcp_process+0x7dc>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	68db      	ldr	r3, [r3, #12]
 801264a:	4a55      	ldr	r2, [pc, #340]	; (80127a0 <tcp_process+0x7dc>)
 801264c:	6013      	str	r3, [r2, #0]
 801264e:	e013      	b.n	8012678 <tcp_process+0x6b4>
 8012650:	4b53      	ldr	r3, [pc, #332]	; (80127a0 <tcp_process+0x7dc>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	613b      	str	r3, [r7, #16]
 8012656:	e00c      	b.n	8012672 <tcp_process+0x6ae>
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	429a      	cmp	r2, r3
 8012660:	d104      	bne.n	801266c <tcp_process+0x6a8>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	68da      	ldr	r2, [r3, #12]
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	60da      	str	r2, [r3, #12]
 801266a:	e005      	b.n	8012678 <tcp_process+0x6b4>
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	68db      	ldr	r3, [r3, #12]
 8012670:	613b      	str	r3, [r7, #16]
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d1ef      	bne.n	8012658 <tcp_process+0x694>
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2200      	movs	r2, #0
 801267c:	60da      	str	r2, [r3, #12]
 801267e:	4b43      	ldr	r3, [pc, #268]	; (801278c <tcp_process+0x7c8>)
 8012680:	2201      	movs	r2, #1
 8012682:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	220a      	movs	r2, #10
 8012688:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801268a:	4b41      	ldr	r3, [pc, #260]	; (8012790 <tcp_process+0x7cc>)
 801268c:	681a      	ldr	r2, [r3, #0]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	60da      	str	r2, [r3, #12]
 8012692:	4a3f      	ldr	r2, [pc, #252]	; (8012790 <tcp_process+0x7cc>)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6013      	str	r3, [r2, #0]
 8012698:	f003 f8e8 	bl	801586c <tcp_timer_needed>
      }
      break;
 801269c:	e06c      	b.n	8012778 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f000 f984 	bl	80129ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80126a4:	4b3b      	ldr	r3, [pc, #236]	; (8012794 <tcp_process+0x7d0>)
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	f003 0310 	and.w	r3, r3, #16
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d065      	beq.n	801277c <tcp_process+0x7b8>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80126b4:	4b38      	ldr	r3, [pc, #224]	; (8012798 <tcp_process+0x7d4>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d15f      	bne.n	801277c <tcp_process+0x7b8>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d15b      	bne.n	801277c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f7fe fcf3 	bl	80110b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80126ca:	4b35      	ldr	r3, [pc, #212]	; (80127a0 <tcp_process+0x7dc>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	687a      	ldr	r2, [r7, #4]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d105      	bne.n	80126e0 <tcp_process+0x71c>
 80126d4:	4b32      	ldr	r3, [pc, #200]	; (80127a0 <tcp_process+0x7dc>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	68db      	ldr	r3, [r3, #12]
 80126da:	4a31      	ldr	r2, [pc, #196]	; (80127a0 <tcp_process+0x7dc>)
 80126dc:	6013      	str	r3, [r2, #0]
 80126de:	e013      	b.n	8012708 <tcp_process+0x744>
 80126e0:	4b2f      	ldr	r3, [pc, #188]	; (80127a0 <tcp_process+0x7dc>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	60fb      	str	r3, [r7, #12]
 80126e6:	e00c      	b.n	8012702 <tcp_process+0x73e>
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	68db      	ldr	r3, [r3, #12]
 80126ec:	687a      	ldr	r2, [r7, #4]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d104      	bne.n	80126fc <tcp_process+0x738>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	68da      	ldr	r2, [r3, #12]
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	60da      	str	r2, [r3, #12]
 80126fa:	e005      	b.n	8012708 <tcp_process+0x744>
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	68db      	ldr	r3, [r3, #12]
 8012700:	60fb      	str	r3, [r7, #12]
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d1ef      	bne.n	80126e8 <tcp_process+0x724>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	60da      	str	r2, [r3, #12]
 801270e:	4b1f      	ldr	r3, [pc, #124]	; (801278c <tcp_process+0x7c8>)
 8012710:	2201      	movs	r2, #1
 8012712:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	220a      	movs	r2, #10
 8012718:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801271a:	4b1d      	ldr	r3, [pc, #116]	; (8012790 <tcp_process+0x7cc>)
 801271c:	681a      	ldr	r2, [r3, #0]
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	60da      	str	r2, [r3, #12]
 8012722:	4a1b      	ldr	r2, [pc, #108]	; (8012790 <tcp_process+0x7cc>)
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6013      	str	r3, [r2, #0]
 8012728:	f003 f8a0 	bl	801586c <tcp_timer_needed>
      }
      break;
 801272c:	e026      	b.n	801277c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801272e:	6878      	ldr	r0, [r7, #4]
 8012730:	f000 f93c 	bl	80129ac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012734:	4b17      	ldr	r3, [pc, #92]	; (8012794 <tcp_process+0x7d0>)
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	f003 0310 	and.w	r3, r3, #16
 801273c:	2b00      	cmp	r3, #0
 801273e:	d01f      	beq.n	8012780 <tcp_process+0x7bc>
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012744:	4b14      	ldr	r3, [pc, #80]	; (8012798 <tcp_process+0x7d4>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	429a      	cmp	r2, r3
 801274a:	d119      	bne.n	8012780 <tcp_process+0x7bc>
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012750:	2b00      	cmp	r3, #0
 8012752:	d115      	bne.n	8012780 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012754:	4b11      	ldr	r3, [pc, #68]	; (801279c <tcp_process+0x7d8>)
 8012756:	781b      	ldrb	r3, [r3, #0]
 8012758:	f043 0310 	orr.w	r3, r3, #16
 801275c:	b2da      	uxtb	r2, r3
 801275e:	4b0f      	ldr	r3, [pc, #60]	; (801279c <tcp_process+0x7d8>)
 8012760:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012762:	e00d      	b.n	8012780 <tcp_process+0x7bc>
    default:
      break;
 8012764:	bf00      	nop
 8012766:	e00c      	b.n	8012782 <tcp_process+0x7be>
      break;
 8012768:	bf00      	nop
 801276a:	e00a      	b.n	8012782 <tcp_process+0x7be>
      break;
 801276c:	bf00      	nop
 801276e:	e008      	b.n	8012782 <tcp_process+0x7be>
      break;
 8012770:	bf00      	nop
 8012772:	e006      	b.n	8012782 <tcp_process+0x7be>
      break;
 8012774:	bf00      	nop
 8012776:	e004      	b.n	8012782 <tcp_process+0x7be>
      break;
 8012778:	bf00      	nop
 801277a:	e002      	b.n	8012782 <tcp_process+0x7be>
      break;
 801277c:	bf00      	nop
 801277e:	e000      	b.n	8012782 <tcp_process+0x7be>
      break;
 8012780:	bf00      	nop
  }
  return ERR_OK;
 8012782:	2300      	movs	r3, #0
}
 8012784:	4618      	mov	r0, r3
 8012786:	3724      	adds	r7, #36	; 0x24
 8012788:	46bd      	mov	sp, r7
 801278a:	bd90      	pop	{r4, r7, pc}
 801278c:	2001104c 	.word	0x2001104c
 8012790:	20011060 	.word	0x20011060
 8012794:	20004b98 	.word	0x20004b98
 8012798:	20004b90 	.word	0x20004b90
 801279c:	20004b99 	.word	0x20004b99
 80127a0:	20011050 	.word	0x20011050

080127a4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80127a4:	b590      	push	{r4, r7, lr}
 80127a6:	b085      	sub	sp, #20
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d106      	bne.n	80127c2 <tcp_oos_insert_segment+0x1e>
 80127b4:	4b3b      	ldr	r3, [pc, #236]	; (80128a4 <tcp_oos_insert_segment+0x100>)
 80127b6:	f240 421f 	movw	r2, #1055	; 0x41f
 80127ba:	493b      	ldr	r1, [pc, #236]	; (80128a8 <tcp_oos_insert_segment+0x104>)
 80127bc:	483b      	ldr	r0, [pc, #236]	; (80128ac <tcp_oos_insert_segment+0x108>)
 80127be:	f008 fd4d 	bl	801b25c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	899b      	ldrh	r3, [r3, #12]
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7fb f9ae 	bl	800db2c <lwip_htons>
 80127d0:	4603      	mov	r3, r0
 80127d2:	b2db      	uxtb	r3, r3
 80127d4:	f003 0301 	and.w	r3, r3, #1
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d028      	beq.n	801282e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80127dc:	6838      	ldr	r0, [r7, #0]
 80127de:	f7fe f997 	bl	8010b10 <tcp_segs_free>
    next = NULL;
 80127e2:	2300      	movs	r3, #0
 80127e4:	603b      	str	r3, [r7, #0]
 80127e6:	e056      	b.n	8012896 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	899b      	ldrh	r3, [r3, #12]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7fb f99b 	bl	800db2c <lwip_htons>
 80127f6:	4603      	mov	r3, r0
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	f003 0301 	and.w	r3, r3, #1
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d00d      	beq.n	801281e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	68db      	ldr	r3, [r3, #12]
 8012806:	899b      	ldrh	r3, [r3, #12]
 8012808:	b29c      	uxth	r4, r3
 801280a:	2001      	movs	r0, #1
 801280c:	f7fb f98e 	bl	800db2c <lwip_htons>
 8012810:	4603      	mov	r3, r0
 8012812:	461a      	mov	r2, r3
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	68db      	ldr	r3, [r3, #12]
 8012818:	4322      	orrs	r2, r4
 801281a:	b292      	uxth	r2, r2
 801281c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012828:	68f8      	ldr	r0, [r7, #12]
 801282a:	f7fe f986 	bl	8010b3a <tcp_seg_free>
    while (next &&
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00e      	beq.n	8012852 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	891b      	ldrh	r3, [r3, #8]
 8012838:	461a      	mov	r2, r3
 801283a:	4b1d      	ldr	r3, [pc, #116]	; (80128b0 <tcp_oos_insert_segment+0x10c>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	441a      	add	r2, r3
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	6839      	ldr	r1, [r7, #0]
 8012848:	8909      	ldrh	r1, [r1, #8]
 801284a:	440b      	add	r3, r1
 801284c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801284e:	2b00      	cmp	r3, #0
 8012850:	daca      	bge.n	80127e8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d01e      	beq.n	8012896 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	891b      	ldrh	r3, [r3, #8]
 801285c:	461a      	mov	r2, r3
 801285e:	4b14      	ldr	r3, [pc, #80]	; (80128b0 <tcp_oos_insert_segment+0x10c>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	441a      	add	r2, r3
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	68db      	ldr	r3, [r3, #12]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801286c:	2b00      	cmp	r3, #0
 801286e:	dd12      	ble.n	8012896 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	b29a      	uxth	r2, r3
 8012878:	4b0d      	ldr	r3, [pc, #52]	; (80128b0 <tcp_oos_insert_segment+0x10c>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	b29b      	uxth	r3, r3
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	b29a      	uxth	r2, r3
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	685a      	ldr	r2, [r3, #4]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	891b      	ldrh	r3, [r3, #8]
 801288e:	4619      	mov	r1, r3
 8012890:	4610      	mov	r0, r2
 8012892:	f7fc fb71 	bl	800ef78 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	683a      	ldr	r2, [r7, #0]
 801289a:	601a      	str	r2, [r3, #0]
}
 801289c:	bf00      	nop
 801289e:	3714      	adds	r7, #20
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd90      	pop	{r4, r7, pc}
 80128a4:	0801e300 	.word	0x0801e300
 80128a8:	0801e5c0 	.word	0x0801e5c0
 80128ac:	0801e34c 	.word	0x0801e34c
 80128b0:	20004b8c 	.word	0x20004b8c

080128b4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80128b4:	b5b0      	push	{r4, r5, r7, lr}
 80128b6:	b086      	sub	sp, #24
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	60f8      	str	r0, [r7, #12]
 80128bc:	60b9      	str	r1, [r7, #8]
 80128be:	607a      	str	r2, [r7, #4]
 80128c0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80128c2:	e03e      	b.n	8012942 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80128ce:	697b      	ldr	r3, [r7, #20]
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f7fc fd64 	bl	800f3a0 <pbuf_clen>
 80128d8:	4603      	mov	r3, r0
 80128da:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128e2:	8a7a      	ldrh	r2, [r7, #18]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d906      	bls.n	80128f6 <tcp_free_acked_segments+0x42>
 80128e8:	4b2a      	ldr	r3, [pc, #168]	; (8012994 <tcp_free_acked_segments+0xe0>)
 80128ea:	f240 4257 	movw	r2, #1111	; 0x457
 80128ee:	492a      	ldr	r1, [pc, #168]	; (8012998 <tcp_free_acked_segments+0xe4>)
 80128f0:	482a      	ldr	r0, [pc, #168]	; (801299c <tcp_free_acked_segments+0xe8>)
 80128f2:	f008 fcb3 	bl	801b25c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80128fc:	8a7b      	ldrh	r3, [r7, #18]
 80128fe:	1ad3      	subs	r3, r2, r3
 8012900:	b29a      	uxth	r2, r3
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	891a      	ldrh	r2, [r3, #8]
 801290c:	4b24      	ldr	r3, [pc, #144]	; (80129a0 <tcp_free_acked_segments+0xec>)
 801290e:	881b      	ldrh	r3, [r3, #0]
 8012910:	4413      	add	r3, r2
 8012912:	b29a      	uxth	r2, r3
 8012914:	4b22      	ldr	r3, [pc, #136]	; (80129a0 <tcp_free_acked_segments+0xec>)
 8012916:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012918:	6978      	ldr	r0, [r7, #20]
 801291a:	f7fe f90e 	bl	8010b3a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012924:	2b00      	cmp	r3, #0
 8012926:	d00c      	beq.n	8012942 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d109      	bne.n	8012942 <tcp_free_acked_segments+0x8e>
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d106      	bne.n	8012942 <tcp_free_acked_segments+0x8e>
 8012934:	4b17      	ldr	r3, [pc, #92]	; (8012994 <tcp_free_acked_segments+0xe0>)
 8012936:	f240 4261 	movw	r2, #1121	; 0x461
 801293a:	491a      	ldr	r1, [pc, #104]	; (80129a4 <tcp_free_acked_segments+0xf0>)
 801293c:	4817      	ldr	r0, [pc, #92]	; (801299c <tcp_free_acked_segments+0xe8>)
 801293e:	f008 fc8d 	bl	801b25c <iprintf>
  while (seg_list != NULL &&
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d020      	beq.n	801298a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012948:	68bb      	ldr	r3, [r7, #8]
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	685b      	ldr	r3, [r3, #4]
 801294e:	4618      	mov	r0, r3
 8012950:	f7fb f901 	bl	800db56 <lwip_htonl>
 8012954:	4604      	mov	r4, r0
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	891b      	ldrh	r3, [r3, #8]
 801295a:	461d      	mov	r5, r3
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	899b      	ldrh	r3, [r3, #12]
 8012962:	b29b      	uxth	r3, r3
 8012964:	4618      	mov	r0, r3
 8012966:	f7fb f8e1 	bl	800db2c <lwip_htons>
 801296a:	4603      	mov	r3, r0
 801296c:	b2db      	uxtb	r3, r3
 801296e:	f003 0303 	and.w	r3, r3, #3
 8012972:	2b00      	cmp	r3, #0
 8012974:	d001      	beq.n	801297a <tcp_free_acked_segments+0xc6>
 8012976:	2301      	movs	r3, #1
 8012978:	e000      	b.n	801297c <tcp_free_acked_segments+0xc8>
 801297a:	2300      	movs	r3, #0
 801297c:	442b      	add	r3, r5
 801297e:	18e2      	adds	r2, r4, r3
 8012980:	4b09      	ldr	r3, [pc, #36]	; (80129a8 <tcp_free_acked_segments+0xf4>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012986:	2b00      	cmp	r3, #0
 8012988:	dd9c      	ble.n	80128c4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801298a:	68bb      	ldr	r3, [r7, #8]
}
 801298c:	4618      	mov	r0, r3
 801298e:	3718      	adds	r7, #24
 8012990:	46bd      	mov	sp, r7
 8012992:	bdb0      	pop	{r4, r5, r7, pc}
 8012994:	0801e300 	.word	0x0801e300
 8012998:	0801e5e8 	.word	0x0801e5e8
 801299c:	0801e34c 	.word	0x0801e34c
 80129a0:	20004b94 	.word	0x20004b94
 80129a4:	0801e610 	.word	0x0801e610
 80129a8:	20004b90 	.word	0x20004b90

080129ac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80129ac:	b5b0      	push	{r4, r5, r7, lr}
 80129ae:	b094      	sub	sp, #80	; 0x50
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80129b4:	2300      	movs	r3, #0
 80129b6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d106      	bne.n	80129cc <tcp_receive+0x20>
 80129be:	4ba6      	ldr	r3, [pc, #664]	; (8012c58 <tcp_receive+0x2ac>)
 80129c0:	f240 427b 	movw	r2, #1147	; 0x47b
 80129c4:	49a5      	ldr	r1, [pc, #660]	; (8012c5c <tcp_receive+0x2b0>)
 80129c6:	48a6      	ldr	r0, [pc, #664]	; (8012c60 <tcp_receive+0x2b4>)
 80129c8:	f008 fc48 	bl	801b25c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	7d1b      	ldrb	r3, [r3, #20]
 80129d0:	2b03      	cmp	r3, #3
 80129d2:	d806      	bhi.n	80129e2 <tcp_receive+0x36>
 80129d4:	4ba0      	ldr	r3, [pc, #640]	; (8012c58 <tcp_receive+0x2ac>)
 80129d6:	f240 427c 	movw	r2, #1148	; 0x47c
 80129da:	49a2      	ldr	r1, [pc, #648]	; (8012c64 <tcp_receive+0x2b8>)
 80129dc:	48a0      	ldr	r0, [pc, #640]	; (8012c60 <tcp_receive+0x2b4>)
 80129de:	f008 fc3d 	bl	801b25c <iprintf>

  if (flags & TCP_ACK) {
 80129e2:	4ba1      	ldr	r3, [pc, #644]	; (8012c68 <tcp_receive+0x2bc>)
 80129e4:	781b      	ldrb	r3, [r3, #0]
 80129e6:	f003 0310 	and.w	r3, r3, #16
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	f000 8263 	beq.w	8012eb6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80129f6:	461a      	mov	r2, r3
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129fc:	4413      	add	r3, r2
 80129fe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a04:	4b99      	ldr	r3, [pc, #612]	; (8012c6c <tcp_receive+0x2c0>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	1ad3      	subs	r3, r2, r3
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	db1b      	blt.n	8012a46 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012a12:	4b96      	ldr	r3, [pc, #600]	; (8012c6c <tcp_receive+0x2c0>)
 8012a14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d106      	bne.n	8012a28 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012a1e:	4b94      	ldr	r3, [pc, #592]	; (8012c70 <tcp_receive+0x2c4>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	1ad3      	subs	r3, r2, r3
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	db0e      	blt.n	8012a46 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012a2c:	4b90      	ldr	r3, [pc, #576]	; (8012c70 <tcp_receive+0x2c4>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d125      	bne.n	8012a80 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012a34:	4b8f      	ldr	r3, [pc, #572]	; (8012c74 <tcp_receive+0x2c8>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	89db      	ldrh	r3, [r3, #14]
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d91c      	bls.n	8012a80 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012a46:	4b8b      	ldr	r3, [pc, #556]	; (8012c74 <tcp_receive+0x2c8>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	89db      	ldrh	r3, [r3, #14]
 8012a4c:	b29a      	uxth	r2, r3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d205      	bcs.n	8012a70 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012a70:	4b7e      	ldr	r3, [pc, #504]	; (8012c6c <tcp_receive+0x2c0>)
 8012a72:	681a      	ldr	r2, [r3, #0]
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012a78:	4b7d      	ldr	r3, [pc, #500]	; (8012c70 <tcp_receive+0x2c4>)
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012a80:	4b7b      	ldr	r3, [pc, #492]	; (8012c70 <tcp_receive+0x2c4>)
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	dc58      	bgt.n	8012b40 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012a8e:	4b7a      	ldr	r3, [pc, #488]	; (8012c78 <tcp_receive+0x2cc>)
 8012a90:	881b      	ldrh	r3, [r3, #0]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d14b      	bne.n	8012b2e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a9a:	687a      	ldr	r2, [r7, #4]
 8012a9c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012aa0:	4413      	add	r3, r2
 8012aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d142      	bne.n	8012b2e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	db3d      	blt.n	8012b2e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012ab6:	4b6e      	ldr	r3, [pc, #440]	; (8012c70 <tcp_receive+0x2c4>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d137      	bne.n	8012b2e <tcp_receive+0x182>
              found_dupack = 1;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012ac8:	2bff      	cmp	r3, #255	; 0xff
 8012aca:	d007      	beq.n	8012adc <tcp_receive+0x130>
                ++pcb->dupacks;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	b2da      	uxtb	r2, r3
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012ae2:	2b03      	cmp	r3, #3
 8012ae4:	d91b      	bls.n	8012b1e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012af0:	4413      	add	r3, r2
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d30a      	bcc.n	8012b14 <tcp_receive+0x168>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012b08:	4413      	add	r3, r2
 8012b0a:	b29a      	uxth	r2, r3
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012b12:	e004      	b.n	8012b1e <tcp_receive+0x172>
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012b24:	2b02      	cmp	r3, #2
 8012b26:	d902      	bls.n	8012b2e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f002 fb41 	bl	80151b0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	f040 8160 	bne.w	8012df6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012b3e:	e15a      	b.n	8012df6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012b40:	4b4b      	ldr	r3, [pc, #300]	; (8012c70 <tcp_receive+0x2c4>)
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b48:	1ad3      	subs	r3, r2, r3
 8012b4a:	3b01      	subs	r3, #1
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	f2c0 814d 	blt.w	8012dec <tcp_receive+0x440>
 8012b52:	4b47      	ldr	r3, [pc, #284]	; (8012c70 <tcp_receive+0x2c4>)
 8012b54:	681a      	ldr	r2, [r3, #0]
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b5a:	1ad3      	subs	r3, r2, r3
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	f300 8145 	bgt.w	8012dec <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	8b5b      	ldrh	r3, [r3, #26]
 8012b66:	f003 0304 	and.w	r3, r3, #4
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d010      	beq.n	8012b90 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	8b5b      	ldrh	r3, [r3, #26]
 8012b72:	f023 0304 	bic.w	r3, r3, #4
 8012b76:	b29a      	uxth	r2, r3
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	2200      	movs	r2, #0
 8012b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012b9e:	10db      	asrs	r3, r3, #3
 8012ba0:	b21b      	sxth	r3, r3
 8012ba2:	b29a      	uxth	r2, r3
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	4413      	add	r3, r2
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	b21a      	sxth	r2, r3
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012bb8:	4b2d      	ldr	r3, [pc, #180]	; (8012c70 <tcp_receive+0x2c4>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	b29a      	uxth	r2, r3
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	1ad3      	subs	r3, r2, r3
 8012bc6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012bd0:	4b27      	ldr	r3, [pc, #156]	; (8012c70 <tcp_receive+0x2c4>)
 8012bd2:	681a      	ldr	r2, [r3, #0]
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	7d1b      	ldrb	r3, [r3, #20]
 8012bdc:	2b03      	cmp	r3, #3
 8012bde:	f240 8096 	bls.w	8012d0e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d244      	bcs.n	8012c7c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	8b5b      	ldrh	r3, [r3, #26]
 8012bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d001      	beq.n	8012c02 <tcp_receive+0x256>
 8012bfe:	2301      	movs	r3, #1
 8012c00:	e000      	b.n	8012c04 <tcp_receive+0x258>
 8012c02:	2302      	movs	r3, #2
 8012c04:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012c08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012c0c:	b29a      	uxth	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c12:	fb12 f303 	smulbb	r3, r2, r3
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	bf28      	it	cs
 8012c1e:	4613      	movcs	r3, r2
 8012c20:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c2a:	4413      	add	r3, r2
 8012c2c:	b29a      	uxth	r2, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d309      	bcc.n	8012c4c <tcp_receive+0x2a0>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012c40:	4413      	add	r3, r2
 8012c42:	b29a      	uxth	r2, r3
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012c4a:	e060      	b.n	8012d0e <tcp_receive+0x362>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012c56:	e05a      	b.n	8012d0e <tcp_receive+0x362>
 8012c58:	0801e300 	.word	0x0801e300
 8012c5c:	0801e630 	.word	0x0801e630
 8012c60:	0801e34c 	.word	0x0801e34c
 8012c64:	0801e64c 	.word	0x0801e64c
 8012c68:	20004b98 	.word	0x20004b98
 8012c6c:	20004b8c 	.word	0x20004b8c
 8012c70:	20004b90 	.word	0x20004b90
 8012c74:	20004b7c 	.word	0x20004b7c
 8012c78:	20004b96 	.word	0x20004b96
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012c82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c84:	4413      	add	r3, r2
 8012c86:	b29a      	uxth	r2, r3
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d309      	bcc.n	8012ca6 <tcp_receive+0x2fa>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012c98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c9a:	4413      	add	r3, r2
 8012c9c:	b29a      	uxth	r2, r3
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012ca4:	e004      	b.n	8012cb0 <tcp_receive+0x304>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012cac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d326      	bcc.n	8012d0e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ccc:	1ad3      	subs	r3, r2, r3
 8012cce:	b29a      	uxth	r2, r3
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ce0:	4413      	add	r3, r2
 8012ce2:	b29a      	uxth	r2, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d30a      	bcc.n	8012d04 <tcp_receive+0x358>
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cf8:	4413      	add	r3, r2
 8012cfa:	b29a      	uxth	r2, r3
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012d02:	e004      	b.n	8012d0e <tcp_receive+0x362>
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d16:	4a98      	ldr	r2, [pc, #608]	; (8012f78 <tcp_receive+0x5cc>)
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f7ff fdcb 	bl	80128b4 <tcp_free_acked_segments>
 8012d1e:	4602      	mov	r2, r0
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d2c:	4a93      	ldr	r2, [pc, #588]	; (8012f7c <tcp_receive+0x5d0>)
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f7ff fdc0 	bl	80128b4 <tcp_free_acked_segments>
 8012d34:	4602      	mov	r2, r0
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d104      	bne.n	8012d4c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012d48:	861a      	strh	r2, [r3, #48]	; 0x30
 8012d4a:	e002      	b.n	8012d52 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2200      	movs	r2, #0
 8012d56:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d103      	bne.n	8012d68 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2200      	movs	r2, #0
 8012d64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012d6e:	4b84      	ldr	r3, [pc, #528]	; (8012f80 <tcp_receive+0x5d4>)
 8012d70:	881b      	ldrh	r3, [r3, #0]
 8012d72:	4413      	add	r3, r2
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	8b5b      	ldrh	r3, [r3, #26]
 8012d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d035      	beq.n	8012df4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d118      	bne.n	8012dc2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d00c      	beq.n	8012db2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012da0:	68db      	ldr	r3, [r3, #12]
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7fa fed6 	bl	800db56 <lwip_htonl>
 8012daa:	4603      	mov	r3, r0
 8012dac:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	dc20      	bgt.n	8012df4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	8b5b      	ldrh	r3, [r3, #26]
 8012db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012dba:	b29a      	uxth	r2, r3
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012dc0:	e018      	b.n	8012df4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dca:	68db      	ldr	r3, [r3, #12]
 8012dcc:	685b      	ldr	r3, [r3, #4]
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fa fec1 	bl	800db56 <lwip_htonl>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	1ae3      	subs	r3, r4, r3
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	dc0b      	bgt.n	8012df4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	8b5b      	ldrh	r3, [r3, #26]
 8012de0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012de4:	b29a      	uxth	r2, r3
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012dea:	e003      	b.n	8012df4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f002 fbcd 	bl	801558c <tcp_send_empty_ack>
 8012df2:	e000      	b.n	8012df6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012df4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d05b      	beq.n	8012eb6 <tcp_receive+0x50a>
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012e02:	4b60      	ldr	r3, [pc, #384]	; (8012f84 <tcp_receive+0x5d8>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	1ad3      	subs	r3, r2, r3
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	da54      	bge.n	8012eb6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012e0c:	4b5e      	ldr	r3, [pc, #376]	; (8012f88 <tcp_receive+0x5dc>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	b29a      	uxth	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	1ad3      	subs	r3, r2, r3
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012e20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012e2a:	10db      	asrs	r3, r3, #3
 8012e2c:	b21b      	sxth	r3, r3
 8012e2e:	b29b      	uxth	r3, r3
 8012e30:	1ad3      	subs	r3, r2, r3
 8012e32:	b29b      	uxth	r3, r3
 8012e34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012e44:	4413      	add	r3, r2
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	b21a      	sxth	r2, r3
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012e4e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	da05      	bge.n	8012e62 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012e56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012e5a:	425b      	negs	r3, r3
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012e62:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012e6c:	109b      	asrs	r3, r3, #2
 8012e6e:	b21b      	sxth	r3, r3
 8012e70:	b29b      	uxth	r3, r3
 8012e72:	1ad3      	subs	r3, r2, r3
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012e80:	b29a      	uxth	r2, r3
 8012e82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012e86:	4413      	add	r3, r2
 8012e88:	b29b      	uxth	r3, r3
 8012e8a:	b21a      	sxth	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012e96:	10db      	asrs	r3, r3, #3
 8012e98:	b21b      	sxth	r3, r3
 8012e9a:	b29a      	uxth	r2, r3
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012ea2:	b29b      	uxth	r3, r3
 8012ea4:	4413      	add	r3, r2
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	b21a      	sxth	r2, r3
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012eb6:	4b35      	ldr	r3, [pc, #212]	; (8012f8c <tcp_receive+0x5e0>)
 8012eb8:	881b      	ldrh	r3, [r3, #0]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	f000 84e1 	beq.w	8013882 <tcp_receive+0xed6>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	7d1b      	ldrb	r3, [r3, #20]
 8012ec4:	2b06      	cmp	r3, #6
 8012ec6:	f200 84dc 	bhi.w	8013882 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ece:	4b30      	ldr	r3, [pc, #192]	; (8012f90 <tcp_receive+0x5e4>)
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	3b01      	subs	r3, #1
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	f2c0 808e 	blt.w	8012ff8 <tcp_receive+0x64c>
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ee0:	4b2a      	ldr	r3, [pc, #168]	; (8012f8c <tcp_receive+0x5e0>)
 8012ee2:	881b      	ldrh	r3, [r3, #0]
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	4b2a      	ldr	r3, [pc, #168]	; (8012f90 <tcp_receive+0x5e4>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	440b      	add	r3, r1
 8012eec:	1ad3      	subs	r3, r2, r3
 8012eee:	3301      	adds	r3, #1
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	f300 8081 	bgt.w	8012ff8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012ef6:	4b27      	ldr	r3, [pc, #156]	; (8012f94 <tcp_receive+0x5e8>)
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f00:	4b23      	ldr	r3, [pc, #140]	; (8012f90 <tcp_receive+0x5e4>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012f08:	4b22      	ldr	r3, [pc, #136]	; (8012f94 <tcp_receive+0x5e8>)
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d106      	bne.n	8012f1e <tcp_receive+0x572>
 8012f10:	4b21      	ldr	r3, [pc, #132]	; (8012f98 <tcp_receive+0x5ec>)
 8012f12:	f240 5294 	movw	r2, #1428	; 0x594
 8012f16:	4921      	ldr	r1, [pc, #132]	; (8012f9c <tcp_receive+0x5f0>)
 8012f18:	4821      	ldr	r0, [pc, #132]	; (8012fa0 <tcp_receive+0x5f4>)
 8012f1a:	f008 f99f 	bl	801b25c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d906      	bls.n	8012f36 <tcp_receive+0x58a>
 8012f28:	4b1b      	ldr	r3, [pc, #108]	; (8012f98 <tcp_receive+0x5ec>)
 8012f2a:	f240 5295 	movw	r2, #1429	; 0x595
 8012f2e:	491d      	ldr	r1, [pc, #116]	; (8012fa4 <tcp_receive+0x5f8>)
 8012f30:	481b      	ldr	r0, [pc, #108]	; (8012fa0 <tcp_receive+0x5f4>)
 8012f32:	f008 f993 	bl	801b25c <iprintf>
      off = (u16_t)off32;
 8012f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012f3c:	4b15      	ldr	r3, [pc, #84]	; (8012f94 <tcp_receive+0x5e8>)
 8012f3e:	685b      	ldr	r3, [r3, #4]
 8012f40:	891b      	ldrh	r3, [r3, #8]
 8012f42:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d906      	bls.n	8012f58 <tcp_receive+0x5ac>
 8012f4a:	4b13      	ldr	r3, [pc, #76]	; (8012f98 <tcp_receive+0x5ec>)
 8012f4c:	f240 5297 	movw	r2, #1431	; 0x597
 8012f50:	4915      	ldr	r1, [pc, #84]	; (8012fa8 <tcp_receive+0x5fc>)
 8012f52:	4813      	ldr	r0, [pc, #76]	; (8012fa0 <tcp_receive+0x5f4>)
 8012f54:	f008 f982 	bl	801b25c <iprintf>
      inseg.len -= off;
 8012f58:	4b0e      	ldr	r3, [pc, #56]	; (8012f94 <tcp_receive+0x5e8>)
 8012f5a:	891a      	ldrh	r2, [r3, #8]
 8012f5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f60:	1ad3      	subs	r3, r2, r3
 8012f62:	b29a      	uxth	r2, r3
 8012f64:	4b0b      	ldr	r3, [pc, #44]	; (8012f94 <tcp_receive+0x5e8>)
 8012f66:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012f68:	4b0a      	ldr	r3, [pc, #40]	; (8012f94 <tcp_receive+0x5e8>)
 8012f6a:	685b      	ldr	r3, [r3, #4]
 8012f6c:	891a      	ldrh	r2, [r3, #8]
 8012f6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f72:	1ad3      	subs	r3, r2, r3
 8012f74:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012f76:	e029      	b.n	8012fcc <tcp_receive+0x620>
 8012f78:	0801e668 	.word	0x0801e668
 8012f7c:	0801e670 	.word	0x0801e670
 8012f80:	20004b94 	.word	0x20004b94
 8012f84:	20004b90 	.word	0x20004b90
 8012f88:	20011054 	.word	0x20011054
 8012f8c:	20004b96 	.word	0x20004b96
 8012f90:	20004b8c 	.word	0x20004b8c
 8012f94:	20004b6c 	.word	0x20004b6c
 8012f98:	0801e300 	.word	0x0801e300
 8012f9c:	0801e678 	.word	0x0801e678
 8012fa0:	0801e34c 	.word	0x0801e34c
 8012fa4:	0801e688 	.word	0x0801e688
 8012fa8:	0801e698 	.word	0x0801e698
        off -= p->len;
 8012fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fae:	895b      	ldrh	r3, [r3, #10]
 8012fb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012fb4:	1ad3      	subs	r3, r2, r3
 8012fb6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fbc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fbe:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fce:	895b      	ldrh	r3, [r3, #10]
 8012fd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d8e9      	bhi.n	8012fac <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012fd8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012fdc:	4619      	mov	r1, r3
 8012fde:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012fe0:	f7fc f8ca 	bl	800f178 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fe8:	4a91      	ldr	r2, [pc, #580]	; (8013230 <tcp_receive+0x884>)
 8012fea:	6013      	str	r3, [r2, #0]
 8012fec:	4b91      	ldr	r3, [pc, #580]	; (8013234 <tcp_receive+0x888>)
 8012fee:	68db      	ldr	r3, [r3, #12]
 8012ff0:	4a8f      	ldr	r2, [pc, #572]	; (8013230 <tcp_receive+0x884>)
 8012ff2:	6812      	ldr	r2, [r2, #0]
 8012ff4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012ff6:	e00d      	b.n	8013014 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012ff8:	4b8d      	ldr	r3, [pc, #564]	; (8013230 <tcp_receive+0x884>)
 8012ffa:	681a      	ldr	r2, [r3, #0]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013000:	1ad3      	subs	r3, r2, r3
 8013002:	2b00      	cmp	r3, #0
 8013004:	da06      	bge.n	8013014 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	8b5b      	ldrh	r3, [r3, #26]
 801300a:	f043 0302 	orr.w	r3, r3, #2
 801300e:	b29a      	uxth	r2, r3
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013014:	4b86      	ldr	r3, [pc, #536]	; (8013230 <tcp_receive+0x884>)
 8013016:	681a      	ldr	r2, [r3, #0]
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801301c:	1ad3      	subs	r3, r2, r3
 801301e:	2b00      	cmp	r3, #0
 8013020:	f2c0 842a 	blt.w	8013878 <tcp_receive+0xecc>
 8013024:	4b82      	ldr	r3, [pc, #520]	; (8013230 <tcp_receive+0x884>)
 8013026:	681a      	ldr	r2, [r3, #0]
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801302c:	6879      	ldr	r1, [r7, #4]
 801302e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013030:	440b      	add	r3, r1
 8013032:	1ad3      	subs	r3, r2, r3
 8013034:	3301      	adds	r3, #1
 8013036:	2b00      	cmp	r3, #0
 8013038:	f300 841e 	bgt.w	8013878 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013040:	4b7b      	ldr	r3, [pc, #492]	; (8013230 <tcp_receive+0x884>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	429a      	cmp	r2, r3
 8013046:	f040 829a 	bne.w	801357e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801304a:	4b7a      	ldr	r3, [pc, #488]	; (8013234 <tcp_receive+0x888>)
 801304c:	891c      	ldrh	r4, [r3, #8]
 801304e:	4b79      	ldr	r3, [pc, #484]	; (8013234 <tcp_receive+0x888>)
 8013050:	68db      	ldr	r3, [r3, #12]
 8013052:	899b      	ldrh	r3, [r3, #12]
 8013054:	b29b      	uxth	r3, r3
 8013056:	4618      	mov	r0, r3
 8013058:	f7fa fd68 	bl	800db2c <lwip_htons>
 801305c:	4603      	mov	r3, r0
 801305e:	b2db      	uxtb	r3, r3
 8013060:	f003 0303 	and.w	r3, r3, #3
 8013064:	2b00      	cmp	r3, #0
 8013066:	d001      	beq.n	801306c <tcp_receive+0x6c0>
 8013068:	2301      	movs	r3, #1
 801306a:	e000      	b.n	801306e <tcp_receive+0x6c2>
 801306c:	2300      	movs	r3, #0
 801306e:	4423      	add	r3, r4
 8013070:	b29a      	uxth	r2, r3
 8013072:	4b71      	ldr	r3, [pc, #452]	; (8013238 <tcp_receive+0x88c>)
 8013074:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801307a:	4b6f      	ldr	r3, [pc, #444]	; (8013238 <tcp_receive+0x88c>)
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	429a      	cmp	r2, r3
 8013080:	d275      	bcs.n	801316e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013082:	4b6c      	ldr	r3, [pc, #432]	; (8013234 <tcp_receive+0x888>)
 8013084:	68db      	ldr	r3, [r3, #12]
 8013086:	899b      	ldrh	r3, [r3, #12]
 8013088:	b29b      	uxth	r3, r3
 801308a:	4618      	mov	r0, r3
 801308c:	f7fa fd4e 	bl	800db2c <lwip_htons>
 8013090:	4603      	mov	r3, r0
 8013092:	b2db      	uxtb	r3, r3
 8013094:	f003 0301 	and.w	r3, r3, #1
 8013098:	2b00      	cmp	r3, #0
 801309a:	d01f      	beq.n	80130dc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801309c:	4b65      	ldr	r3, [pc, #404]	; (8013234 <tcp_receive+0x888>)
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	899b      	ldrh	r3, [r3, #12]
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	b21b      	sxth	r3, r3
 80130a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80130aa:	b21c      	sxth	r4, r3
 80130ac:	4b61      	ldr	r3, [pc, #388]	; (8013234 <tcp_receive+0x888>)
 80130ae:	68db      	ldr	r3, [r3, #12]
 80130b0:	899b      	ldrh	r3, [r3, #12]
 80130b2:	b29b      	uxth	r3, r3
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fa fd39 	bl	800db2c <lwip_htons>
 80130ba:	4603      	mov	r3, r0
 80130bc:	b2db      	uxtb	r3, r3
 80130be:	b29b      	uxth	r3, r3
 80130c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80130c4:	b29b      	uxth	r3, r3
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7fa fd30 	bl	800db2c <lwip_htons>
 80130cc:	4603      	mov	r3, r0
 80130ce:	b21b      	sxth	r3, r3
 80130d0:	4323      	orrs	r3, r4
 80130d2:	b21a      	sxth	r2, r3
 80130d4:	4b57      	ldr	r3, [pc, #348]	; (8013234 <tcp_receive+0x888>)
 80130d6:	68db      	ldr	r3, [r3, #12]
 80130d8:	b292      	uxth	r2, r2
 80130da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80130e0:	4b54      	ldr	r3, [pc, #336]	; (8013234 <tcp_receive+0x888>)
 80130e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80130e4:	4b53      	ldr	r3, [pc, #332]	; (8013234 <tcp_receive+0x888>)
 80130e6:	68db      	ldr	r3, [r3, #12]
 80130e8:	899b      	ldrh	r3, [r3, #12]
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7fa fd1d 	bl	800db2c <lwip_htons>
 80130f2:	4603      	mov	r3, r0
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	f003 0302 	and.w	r3, r3, #2
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d005      	beq.n	801310a <tcp_receive+0x75e>
            inseg.len -= 1;
 80130fe:	4b4d      	ldr	r3, [pc, #308]	; (8013234 <tcp_receive+0x888>)
 8013100:	891b      	ldrh	r3, [r3, #8]
 8013102:	3b01      	subs	r3, #1
 8013104:	b29a      	uxth	r2, r3
 8013106:	4b4b      	ldr	r3, [pc, #300]	; (8013234 <tcp_receive+0x888>)
 8013108:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801310a:	4b4a      	ldr	r3, [pc, #296]	; (8013234 <tcp_receive+0x888>)
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	4a49      	ldr	r2, [pc, #292]	; (8013234 <tcp_receive+0x888>)
 8013110:	8912      	ldrh	r2, [r2, #8]
 8013112:	4611      	mov	r1, r2
 8013114:	4618      	mov	r0, r3
 8013116:	f7fb ff2f 	bl	800ef78 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801311a:	4b46      	ldr	r3, [pc, #280]	; (8013234 <tcp_receive+0x888>)
 801311c:	891c      	ldrh	r4, [r3, #8]
 801311e:	4b45      	ldr	r3, [pc, #276]	; (8013234 <tcp_receive+0x888>)
 8013120:	68db      	ldr	r3, [r3, #12]
 8013122:	899b      	ldrh	r3, [r3, #12]
 8013124:	b29b      	uxth	r3, r3
 8013126:	4618      	mov	r0, r3
 8013128:	f7fa fd00 	bl	800db2c <lwip_htons>
 801312c:	4603      	mov	r3, r0
 801312e:	b2db      	uxtb	r3, r3
 8013130:	f003 0303 	and.w	r3, r3, #3
 8013134:	2b00      	cmp	r3, #0
 8013136:	d001      	beq.n	801313c <tcp_receive+0x790>
 8013138:	2301      	movs	r3, #1
 801313a:	e000      	b.n	801313e <tcp_receive+0x792>
 801313c:	2300      	movs	r3, #0
 801313e:	4423      	add	r3, r4
 8013140:	b29a      	uxth	r2, r3
 8013142:	4b3d      	ldr	r3, [pc, #244]	; (8013238 <tcp_receive+0x88c>)
 8013144:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013146:	4b3c      	ldr	r3, [pc, #240]	; (8013238 <tcp_receive+0x88c>)
 8013148:	881b      	ldrh	r3, [r3, #0]
 801314a:	461a      	mov	r2, r3
 801314c:	4b38      	ldr	r3, [pc, #224]	; (8013230 <tcp_receive+0x884>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	441a      	add	r2, r3
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013156:	6879      	ldr	r1, [r7, #4]
 8013158:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801315a:	440b      	add	r3, r1
 801315c:	429a      	cmp	r2, r3
 801315e:	d006      	beq.n	801316e <tcp_receive+0x7c2>
 8013160:	4b36      	ldr	r3, [pc, #216]	; (801323c <tcp_receive+0x890>)
 8013162:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013166:	4936      	ldr	r1, [pc, #216]	; (8013240 <tcp_receive+0x894>)
 8013168:	4836      	ldr	r0, [pc, #216]	; (8013244 <tcp_receive+0x898>)
 801316a:	f008 f877 	bl	801b25c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013172:	2b00      	cmp	r3, #0
 8013174:	f000 80e7 	beq.w	8013346 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013178:	4b2e      	ldr	r3, [pc, #184]	; (8013234 <tcp_receive+0x888>)
 801317a:	68db      	ldr	r3, [r3, #12]
 801317c:	899b      	ldrh	r3, [r3, #12]
 801317e:	b29b      	uxth	r3, r3
 8013180:	4618      	mov	r0, r3
 8013182:	f7fa fcd3 	bl	800db2c <lwip_htons>
 8013186:	4603      	mov	r3, r0
 8013188:	b2db      	uxtb	r3, r3
 801318a:	f003 0301 	and.w	r3, r3, #1
 801318e:	2b00      	cmp	r3, #0
 8013190:	d010      	beq.n	80131b4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013192:	e00a      	b.n	80131aa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013198:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801319e:	681a      	ldr	r2, [r3, #0]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80131a4:	68f8      	ldr	r0, [r7, #12]
 80131a6:	f7fd fcc8 	bl	8010b3a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d1f0      	bne.n	8013194 <tcp_receive+0x7e8>
 80131b2:	e0c8      	b.n	8013346 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80131ba:	e052      	b.n	8013262 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80131bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	899b      	ldrh	r3, [r3, #12]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7fa fcb1 	bl	800db2c <lwip_htons>
 80131ca:	4603      	mov	r3, r0
 80131cc:	b2db      	uxtb	r3, r3
 80131ce:	f003 0301 	and.w	r3, r3, #1
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d03d      	beq.n	8013252 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80131d6:	4b17      	ldr	r3, [pc, #92]	; (8013234 <tcp_receive+0x888>)
 80131d8:	68db      	ldr	r3, [r3, #12]
 80131da:	899b      	ldrh	r3, [r3, #12]
 80131dc:	b29b      	uxth	r3, r3
 80131de:	4618      	mov	r0, r3
 80131e0:	f7fa fca4 	bl	800db2c <lwip_htons>
 80131e4:	4603      	mov	r3, r0
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d130      	bne.n	8013252 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80131f0:	4b10      	ldr	r3, [pc, #64]	; (8013234 <tcp_receive+0x888>)
 80131f2:	68db      	ldr	r3, [r3, #12]
 80131f4:	899b      	ldrh	r3, [r3, #12]
 80131f6:	b29c      	uxth	r4, r3
 80131f8:	2001      	movs	r0, #1
 80131fa:	f7fa fc97 	bl	800db2c <lwip_htons>
 80131fe:	4603      	mov	r3, r0
 8013200:	461a      	mov	r2, r3
 8013202:	4b0c      	ldr	r3, [pc, #48]	; (8013234 <tcp_receive+0x888>)
 8013204:	68db      	ldr	r3, [r3, #12]
 8013206:	4322      	orrs	r2, r4
 8013208:	b292      	uxth	r2, r2
 801320a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801320c:	4b09      	ldr	r3, [pc, #36]	; (8013234 <tcp_receive+0x888>)
 801320e:	891c      	ldrh	r4, [r3, #8]
 8013210:	4b08      	ldr	r3, [pc, #32]	; (8013234 <tcp_receive+0x888>)
 8013212:	68db      	ldr	r3, [r3, #12]
 8013214:	899b      	ldrh	r3, [r3, #12]
 8013216:	b29b      	uxth	r3, r3
 8013218:	4618      	mov	r0, r3
 801321a:	f7fa fc87 	bl	800db2c <lwip_htons>
 801321e:	4603      	mov	r3, r0
 8013220:	b2db      	uxtb	r3, r3
 8013222:	f003 0303 	and.w	r3, r3, #3
 8013226:	2b00      	cmp	r3, #0
 8013228:	d00e      	beq.n	8013248 <tcp_receive+0x89c>
 801322a:	2301      	movs	r3, #1
 801322c:	e00d      	b.n	801324a <tcp_receive+0x89e>
 801322e:	bf00      	nop
 8013230:	20004b8c 	.word	0x20004b8c
 8013234:	20004b6c 	.word	0x20004b6c
 8013238:	20004b96 	.word	0x20004b96
 801323c:	0801e300 	.word	0x0801e300
 8013240:	0801e6a8 	.word	0x0801e6a8
 8013244:	0801e34c 	.word	0x0801e34c
 8013248:	2300      	movs	r3, #0
 801324a:	4423      	add	r3, r4
 801324c:	b29a      	uxth	r2, r3
 801324e:	4b98      	ldr	r3, [pc, #608]	; (80134b0 <tcp_receive+0xb04>)
 8013250:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013254:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801325c:	6938      	ldr	r0, [r7, #16]
 801325e:	f7fd fc6c 	bl	8010b3a <tcp_seg_free>
            while (next &&
 8013262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013264:	2b00      	cmp	r3, #0
 8013266:	d00e      	beq.n	8013286 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013268:	4b91      	ldr	r3, [pc, #580]	; (80134b0 <tcp_receive+0xb04>)
 801326a:	881b      	ldrh	r3, [r3, #0]
 801326c:	461a      	mov	r2, r3
 801326e:	4b91      	ldr	r3, [pc, #580]	; (80134b4 <tcp_receive+0xb08>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	441a      	add	r2, r3
 8013274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013276:	68db      	ldr	r3, [r3, #12]
 8013278:	685b      	ldr	r3, [r3, #4]
 801327a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801327c:	8909      	ldrh	r1, [r1, #8]
 801327e:	440b      	add	r3, r1
 8013280:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013282:	2b00      	cmp	r3, #0
 8013284:	da9a      	bge.n	80131bc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013288:	2b00      	cmp	r3, #0
 801328a:	d059      	beq.n	8013340 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801328c:	4b88      	ldr	r3, [pc, #544]	; (80134b0 <tcp_receive+0xb04>)
 801328e:	881b      	ldrh	r3, [r3, #0]
 8013290:	461a      	mov	r2, r3
 8013292:	4b88      	ldr	r3, [pc, #544]	; (80134b4 <tcp_receive+0xb08>)
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	441a      	add	r2, r3
 8013298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	685b      	ldr	r3, [r3, #4]
 801329e:	1ad3      	subs	r3, r2, r3
            if (next &&
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	dd4d      	ble.n	8013340 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80132a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132a6:	68db      	ldr	r3, [r3, #12]
 80132a8:	685b      	ldr	r3, [r3, #4]
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	4b81      	ldr	r3, [pc, #516]	; (80134b4 <tcp_receive+0xb08>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	1ad3      	subs	r3, r2, r3
 80132b4:	b29a      	uxth	r2, r3
 80132b6:	4b80      	ldr	r3, [pc, #512]	; (80134b8 <tcp_receive+0xb0c>)
 80132b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80132ba:	4b7f      	ldr	r3, [pc, #508]	; (80134b8 <tcp_receive+0xb0c>)
 80132bc:	68db      	ldr	r3, [r3, #12]
 80132be:	899b      	ldrh	r3, [r3, #12]
 80132c0:	b29b      	uxth	r3, r3
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fa fc32 	bl	800db2c <lwip_htons>
 80132c8:	4603      	mov	r3, r0
 80132ca:	b2db      	uxtb	r3, r3
 80132cc:	f003 0302 	and.w	r3, r3, #2
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d005      	beq.n	80132e0 <tcp_receive+0x934>
                inseg.len -= 1;
 80132d4:	4b78      	ldr	r3, [pc, #480]	; (80134b8 <tcp_receive+0xb0c>)
 80132d6:	891b      	ldrh	r3, [r3, #8]
 80132d8:	3b01      	subs	r3, #1
 80132da:	b29a      	uxth	r2, r3
 80132dc:	4b76      	ldr	r3, [pc, #472]	; (80134b8 <tcp_receive+0xb0c>)
 80132de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80132e0:	4b75      	ldr	r3, [pc, #468]	; (80134b8 <tcp_receive+0xb0c>)
 80132e2:	685b      	ldr	r3, [r3, #4]
 80132e4:	4a74      	ldr	r2, [pc, #464]	; (80134b8 <tcp_receive+0xb0c>)
 80132e6:	8912      	ldrh	r2, [r2, #8]
 80132e8:	4611      	mov	r1, r2
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7fb fe44 	bl	800ef78 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80132f0:	4b71      	ldr	r3, [pc, #452]	; (80134b8 <tcp_receive+0xb0c>)
 80132f2:	891c      	ldrh	r4, [r3, #8]
 80132f4:	4b70      	ldr	r3, [pc, #448]	; (80134b8 <tcp_receive+0xb0c>)
 80132f6:	68db      	ldr	r3, [r3, #12]
 80132f8:	899b      	ldrh	r3, [r3, #12]
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7fa fc15 	bl	800db2c <lwip_htons>
 8013302:	4603      	mov	r3, r0
 8013304:	b2db      	uxtb	r3, r3
 8013306:	f003 0303 	and.w	r3, r3, #3
 801330a:	2b00      	cmp	r3, #0
 801330c:	d001      	beq.n	8013312 <tcp_receive+0x966>
 801330e:	2301      	movs	r3, #1
 8013310:	e000      	b.n	8013314 <tcp_receive+0x968>
 8013312:	2300      	movs	r3, #0
 8013314:	4423      	add	r3, r4
 8013316:	b29a      	uxth	r2, r3
 8013318:	4b65      	ldr	r3, [pc, #404]	; (80134b0 <tcp_receive+0xb04>)
 801331a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801331c:	4b64      	ldr	r3, [pc, #400]	; (80134b0 <tcp_receive+0xb04>)
 801331e:	881b      	ldrh	r3, [r3, #0]
 8013320:	461a      	mov	r2, r3
 8013322:	4b64      	ldr	r3, [pc, #400]	; (80134b4 <tcp_receive+0xb08>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	441a      	add	r2, r3
 8013328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801332a:	68db      	ldr	r3, [r3, #12]
 801332c:	685b      	ldr	r3, [r3, #4]
 801332e:	429a      	cmp	r2, r3
 8013330:	d006      	beq.n	8013340 <tcp_receive+0x994>
 8013332:	4b62      	ldr	r3, [pc, #392]	; (80134bc <tcp_receive+0xb10>)
 8013334:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013338:	4961      	ldr	r1, [pc, #388]	; (80134c0 <tcp_receive+0xb14>)
 801333a:	4862      	ldr	r0, [pc, #392]	; (80134c4 <tcp_receive+0xb18>)
 801333c:	f007 ff8e 	bl	801b25c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013344:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013346:	4b5a      	ldr	r3, [pc, #360]	; (80134b0 <tcp_receive+0xb04>)
 8013348:	881b      	ldrh	r3, [r3, #0]
 801334a:	461a      	mov	r2, r3
 801334c:	4b59      	ldr	r3, [pc, #356]	; (80134b4 <tcp_receive+0xb08>)
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	441a      	add	r2, r3
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801335a:	4b55      	ldr	r3, [pc, #340]	; (80134b0 <tcp_receive+0xb04>)
 801335c:	881b      	ldrh	r3, [r3, #0]
 801335e:	429a      	cmp	r2, r3
 8013360:	d206      	bcs.n	8013370 <tcp_receive+0x9c4>
 8013362:	4b56      	ldr	r3, [pc, #344]	; (80134bc <tcp_receive+0xb10>)
 8013364:	f240 6207 	movw	r2, #1543	; 0x607
 8013368:	4957      	ldr	r1, [pc, #348]	; (80134c8 <tcp_receive+0xb1c>)
 801336a:	4856      	ldr	r0, [pc, #344]	; (80134c4 <tcp_receive+0xb18>)
 801336c:	f007 ff76 	bl	801b25c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013374:	4b4e      	ldr	r3, [pc, #312]	; (80134b0 <tcp_receive+0xb04>)
 8013376:	881b      	ldrh	r3, [r3, #0]
 8013378:	1ad3      	subs	r3, r2, r3
 801337a:	b29a      	uxth	r2, r3
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7fc feb5 	bl	80100f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013386:	4b4c      	ldr	r3, [pc, #304]	; (80134b8 <tcp_receive+0xb0c>)
 8013388:	685b      	ldr	r3, [r3, #4]
 801338a:	891b      	ldrh	r3, [r3, #8]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d006      	beq.n	801339e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013390:	4b49      	ldr	r3, [pc, #292]	; (80134b8 <tcp_receive+0xb0c>)
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	4a4d      	ldr	r2, [pc, #308]	; (80134cc <tcp_receive+0xb20>)
 8013396:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013398:	4b47      	ldr	r3, [pc, #284]	; (80134b8 <tcp_receive+0xb0c>)
 801339a:	2200      	movs	r2, #0
 801339c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801339e:	4b46      	ldr	r3, [pc, #280]	; (80134b8 <tcp_receive+0xb0c>)
 80133a0:	68db      	ldr	r3, [r3, #12]
 80133a2:	899b      	ldrh	r3, [r3, #12]
 80133a4:	b29b      	uxth	r3, r3
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7fa fbc0 	bl	800db2c <lwip_htons>
 80133ac:	4603      	mov	r3, r0
 80133ae:	b2db      	uxtb	r3, r3
 80133b0:	f003 0301 	and.w	r3, r3, #1
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	f000 80b8 	beq.w	801352a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80133ba:	4b45      	ldr	r3, [pc, #276]	; (80134d0 <tcp_receive+0xb24>)
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	f043 0320 	orr.w	r3, r3, #32
 80133c2:	b2da      	uxtb	r2, r3
 80133c4:	4b42      	ldr	r3, [pc, #264]	; (80134d0 <tcp_receive+0xb24>)
 80133c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80133c8:	e0af      	b.n	801352a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133d4:	68db      	ldr	r3, [r3, #12]
 80133d6:	685b      	ldr	r3, [r3, #4]
 80133d8:	4a36      	ldr	r2, [pc, #216]	; (80134b4 <tcp_receive+0xb08>)
 80133da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80133dc:	68bb      	ldr	r3, [r7, #8]
 80133de:	891b      	ldrh	r3, [r3, #8]
 80133e0:	461c      	mov	r4, r3
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	68db      	ldr	r3, [r3, #12]
 80133e6:	899b      	ldrh	r3, [r3, #12]
 80133e8:	b29b      	uxth	r3, r3
 80133ea:	4618      	mov	r0, r3
 80133ec:	f7fa fb9e 	bl	800db2c <lwip_htons>
 80133f0:	4603      	mov	r3, r0
 80133f2:	b2db      	uxtb	r3, r3
 80133f4:	f003 0303 	and.w	r3, r3, #3
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d001      	beq.n	8013400 <tcp_receive+0xa54>
 80133fc:	2301      	movs	r3, #1
 80133fe:	e000      	b.n	8013402 <tcp_receive+0xa56>
 8013400:	2300      	movs	r3, #0
 8013402:	191a      	adds	r2, r3, r4
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013408:	441a      	add	r2, r3
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013412:	461c      	mov	r4, r3
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	891b      	ldrh	r3, [r3, #8]
 8013418:	461d      	mov	r5, r3
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	68db      	ldr	r3, [r3, #12]
 801341e:	899b      	ldrh	r3, [r3, #12]
 8013420:	b29b      	uxth	r3, r3
 8013422:	4618      	mov	r0, r3
 8013424:	f7fa fb82 	bl	800db2c <lwip_htons>
 8013428:	4603      	mov	r3, r0
 801342a:	b2db      	uxtb	r3, r3
 801342c:	f003 0303 	and.w	r3, r3, #3
 8013430:	2b00      	cmp	r3, #0
 8013432:	d001      	beq.n	8013438 <tcp_receive+0xa8c>
 8013434:	2301      	movs	r3, #1
 8013436:	e000      	b.n	801343a <tcp_receive+0xa8e>
 8013438:	2300      	movs	r3, #0
 801343a:	442b      	add	r3, r5
 801343c:	429c      	cmp	r4, r3
 801343e:	d206      	bcs.n	801344e <tcp_receive+0xaa2>
 8013440:	4b1e      	ldr	r3, [pc, #120]	; (80134bc <tcp_receive+0xb10>)
 8013442:	f240 622b 	movw	r2, #1579	; 0x62b
 8013446:	4923      	ldr	r1, [pc, #140]	; (80134d4 <tcp_receive+0xb28>)
 8013448:	481e      	ldr	r0, [pc, #120]	; (80134c4 <tcp_receive+0xb18>)
 801344a:	f007 ff07 	bl	801b25c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	891b      	ldrh	r3, [r3, #8]
 8013452:	461c      	mov	r4, r3
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	68db      	ldr	r3, [r3, #12]
 8013458:	899b      	ldrh	r3, [r3, #12]
 801345a:	b29b      	uxth	r3, r3
 801345c:	4618      	mov	r0, r3
 801345e:	f7fa fb65 	bl	800db2c <lwip_htons>
 8013462:	4603      	mov	r3, r0
 8013464:	b2db      	uxtb	r3, r3
 8013466:	f003 0303 	and.w	r3, r3, #3
 801346a:	2b00      	cmp	r3, #0
 801346c:	d001      	beq.n	8013472 <tcp_receive+0xac6>
 801346e:	2301      	movs	r3, #1
 8013470:	e000      	b.n	8013474 <tcp_receive+0xac8>
 8013472:	2300      	movs	r3, #0
 8013474:	1919      	adds	r1, r3, r4
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801347a:	b28b      	uxth	r3, r1
 801347c:	1ad3      	subs	r3, r2, r3
 801347e:	b29a      	uxth	r2, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f7fc fe33 	bl	80100f0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	685b      	ldr	r3, [r3, #4]
 801348e:	891b      	ldrh	r3, [r3, #8]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d028      	beq.n	80134e6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013494:	4b0d      	ldr	r3, [pc, #52]	; (80134cc <tcp_receive+0xb20>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d01d      	beq.n	80134d8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801349c:	4b0b      	ldr	r3, [pc, #44]	; (80134cc <tcp_receive+0xb20>)
 801349e:	681a      	ldr	r2, [r3, #0]
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	685b      	ldr	r3, [r3, #4]
 80134a4:	4619      	mov	r1, r3
 80134a6:	4610      	mov	r0, r2
 80134a8:	f7fb ffba 	bl	800f420 <pbuf_cat>
 80134ac:	e018      	b.n	80134e0 <tcp_receive+0xb34>
 80134ae:	bf00      	nop
 80134b0:	20004b96 	.word	0x20004b96
 80134b4:	20004b8c 	.word	0x20004b8c
 80134b8:	20004b6c 	.word	0x20004b6c
 80134bc:	0801e300 	.word	0x0801e300
 80134c0:	0801e6e0 	.word	0x0801e6e0
 80134c4:	0801e34c 	.word	0x0801e34c
 80134c8:	0801e71c 	.word	0x0801e71c
 80134cc:	20004b9c 	.word	0x20004b9c
 80134d0:	20004b99 	.word	0x20004b99
 80134d4:	0801e73c 	.word	0x0801e73c
            } else {
              recv_data = cseg->p;
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	685b      	ldr	r3, [r3, #4]
 80134dc:	4a70      	ldr	r2, [pc, #448]	; (80136a0 <tcp_receive+0xcf4>)
 80134de:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	2200      	movs	r2, #0
 80134e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	68db      	ldr	r3, [r3, #12]
 80134ea:	899b      	ldrh	r3, [r3, #12]
 80134ec:	b29b      	uxth	r3, r3
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7fa fb1c 	bl	800db2c <lwip_htons>
 80134f4:	4603      	mov	r3, r0
 80134f6:	b2db      	uxtb	r3, r3
 80134f8:	f003 0301 	and.w	r3, r3, #1
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00d      	beq.n	801351c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013500:	4b68      	ldr	r3, [pc, #416]	; (80136a4 <tcp_receive+0xcf8>)
 8013502:	781b      	ldrb	r3, [r3, #0]
 8013504:	f043 0320 	orr.w	r3, r3, #32
 8013508:	b2da      	uxtb	r2, r3
 801350a:	4b66      	ldr	r3, [pc, #408]	; (80136a4 <tcp_receive+0xcf8>)
 801350c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	7d1b      	ldrb	r3, [r3, #20]
 8013512:	2b04      	cmp	r3, #4
 8013514:	d102      	bne.n	801351c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2207      	movs	r2, #7
 801351a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013524:	68b8      	ldr	r0, [r7, #8]
 8013526:	f7fd fb08 	bl	8010b3a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801352e:	2b00      	cmp	r3, #0
 8013530:	d008      	beq.n	8013544 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013536:	68db      	ldr	r3, [r3, #12]
 8013538:	685a      	ldr	r2, [r3, #4]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801353e:	429a      	cmp	r2, r3
 8013540:	f43f af43 	beq.w	80133ca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	8b5b      	ldrh	r3, [r3, #26]
 8013548:	f003 0301 	and.w	r3, r3, #1
 801354c:	2b00      	cmp	r3, #0
 801354e:	d00e      	beq.n	801356e <tcp_receive+0xbc2>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	8b5b      	ldrh	r3, [r3, #26]
 8013554:	f023 0301 	bic.w	r3, r3, #1
 8013558:	b29a      	uxth	r2, r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	835a      	strh	r2, [r3, #26]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	8b5b      	ldrh	r3, [r3, #26]
 8013562:	f043 0302 	orr.w	r3, r3, #2
 8013566:	b29a      	uxth	r2, r3
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801356c:	e188      	b.n	8013880 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	8b5b      	ldrh	r3, [r3, #26]
 8013572:	f043 0301 	orr.w	r3, r3, #1
 8013576:	b29a      	uxth	r2, r3
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801357c:	e180      	b.n	8013880 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013582:	2b00      	cmp	r3, #0
 8013584:	d106      	bne.n	8013594 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013586:	4848      	ldr	r0, [pc, #288]	; (80136a8 <tcp_receive+0xcfc>)
 8013588:	f7fd faf0 	bl	8010b6c <tcp_seg_copy>
 801358c:	4602      	mov	r2, r0
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	675a      	str	r2, [r3, #116]	; 0x74
 8013592:	e16d      	b.n	8013870 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013594:	2300      	movs	r3, #0
 8013596:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801359c:	63bb      	str	r3, [r7, #56]	; 0x38
 801359e:	e157      	b.n	8013850 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80135a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	685a      	ldr	r2, [r3, #4]
 80135a6:	4b41      	ldr	r3, [pc, #260]	; (80136ac <tcp_receive+0xd00>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d11d      	bne.n	80135ea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80135ae:	4b3e      	ldr	r3, [pc, #248]	; (80136a8 <tcp_receive+0xcfc>)
 80135b0:	891a      	ldrh	r2, [r3, #8]
 80135b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135b4:	891b      	ldrh	r3, [r3, #8]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	f240 814f 	bls.w	801385a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80135bc:	483a      	ldr	r0, [pc, #232]	; (80136a8 <tcp_receive+0xcfc>)
 80135be:	f7fd fad5 	bl	8010b6c <tcp_seg_copy>
 80135c2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80135c4:	697b      	ldr	r3, [r7, #20]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f000 8149 	beq.w	801385e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80135cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d003      	beq.n	80135da <tcp_receive+0xc2e>
                    prev->next = cseg;
 80135d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135d4:	697a      	ldr	r2, [r7, #20]
 80135d6:	601a      	str	r2, [r3, #0]
 80135d8:	e002      	b.n	80135e0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	697a      	ldr	r2, [r7, #20]
 80135de:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80135e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80135e2:	6978      	ldr	r0, [r7, #20]
 80135e4:	f7ff f8de 	bl	80127a4 <tcp_oos_insert_segment>
                }
                break;
 80135e8:	e139      	b.n	801385e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80135ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d117      	bne.n	8013620 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80135f0:	4b2e      	ldr	r3, [pc, #184]	; (80136ac <tcp_receive+0xd00>)
 80135f2:	681a      	ldr	r2, [r3, #0]
 80135f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	1ad3      	subs	r3, r2, r3
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	da57      	bge.n	80136b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013600:	4829      	ldr	r0, [pc, #164]	; (80136a8 <tcp_receive+0xcfc>)
 8013602:	f7fd fab3 	bl	8010b6c <tcp_seg_copy>
 8013606:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013608:	69bb      	ldr	r3, [r7, #24]
 801360a:	2b00      	cmp	r3, #0
 801360c:	f000 8129 	beq.w	8013862 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	69ba      	ldr	r2, [r7, #24]
 8013614:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013616:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013618:	69b8      	ldr	r0, [r7, #24]
 801361a:	f7ff f8c3 	bl	80127a4 <tcp_oos_insert_segment>
                  }
                  break;
 801361e:	e120      	b.n	8013862 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013620:	4b22      	ldr	r3, [pc, #136]	; (80136ac <tcp_receive+0xd00>)
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013626:	68db      	ldr	r3, [r3, #12]
 8013628:	685b      	ldr	r3, [r3, #4]
 801362a:	1ad3      	subs	r3, r2, r3
 801362c:	3b01      	subs	r3, #1
 801362e:	2b00      	cmp	r3, #0
 8013630:	db3e      	blt.n	80136b0 <tcp_receive+0xd04>
 8013632:	4b1e      	ldr	r3, [pc, #120]	; (80136ac <tcp_receive+0xd00>)
 8013634:	681a      	ldr	r2, [r3, #0]
 8013636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013638:	68db      	ldr	r3, [r3, #12]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	1ad3      	subs	r3, r2, r3
 801363e:	3301      	adds	r3, #1
 8013640:	2b00      	cmp	r3, #0
 8013642:	dc35      	bgt.n	80136b0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013644:	4818      	ldr	r0, [pc, #96]	; (80136a8 <tcp_receive+0xcfc>)
 8013646:	f7fd fa91 	bl	8010b6c <tcp_seg_copy>
 801364a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	2b00      	cmp	r3, #0
 8013650:	f000 8109 	beq.w	8013866 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013656:	68db      	ldr	r3, [r3, #12]
 8013658:	685b      	ldr	r3, [r3, #4]
 801365a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801365c:	8912      	ldrh	r2, [r2, #8]
 801365e:	441a      	add	r2, r3
 8013660:	4b12      	ldr	r3, [pc, #72]	; (80136ac <tcp_receive+0xd00>)
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	1ad3      	subs	r3, r2, r3
 8013666:	2b00      	cmp	r3, #0
 8013668:	dd12      	ble.n	8013690 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801366a:	4b10      	ldr	r3, [pc, #64]	; (80136ac <tcp_receive+0xd00>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	b29a      	uxth	r2, r3
 8013670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013672:	68db      	ldr	r3, [r3, #12]
 8013674:	685b      	ldr	r3, [r3, #4]
 8013676:	b29b      	uxth	r3, r3
 8013678:	1ad3      	subs	r3, r2, r3
 801367a:	b29a      	uxth	r2, r3
 801367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801367e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013682:	685a      	ldr	r2, [r3, #4]
 8013684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013686:	891b      	ldrh	r3, [r3, #8]
 8013688:	4619      	mov	r1, r3
 801368a:	4610      	mov	r0, r2
 801368c:	f7fb fc74 	bl	800ef78 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013692:	69fa      	ldr	r2, [r7, #28]
 8013694:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013698:	69f8      	ldr	r0, [r7, #28]
 801369a:	f7ff f883 	bl	80127a4 <tcp_oos_insert_segment>
                  }
                  break;
 801369e:	e0e2      	b.n	8013866 <tcp_receive+0xeba>
 80136a0:	20004b9c 	.word	0x20004b9c
 80136a4:	20004b99 	.word	0x20004b99
 80136a8:	20004b6c 	.word	0x20004b6c
 80136ac:	20004b8c 	.word	0x20004b8c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80136b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80136b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	f040 80c6 	bne.w	801384a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80136be:	4b80      	ldr	r3, [pc, #512]	; (80138c0 <tcp_receive+0xf14>)
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136c4:	68db      	ldr	r3, [r3, #12]
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	f340 80bd 	ble.w	801384a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80136d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d2:	68db      	ldr	r3, [r3, #12]
 80136d4:	899b      	ldrh	r3, [r3, #12]
 80136d6:	b29b      	uxth	r3, r3
 80136d8:	4618      	mov	r0, r3
 80136da:	f7fa fa27 	bl	800db2c <lwip_htons>
 80136de:	4603      	mov	r3, r0
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	f003 0301 	and.w	r3, r3, #1
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	f040 80bf 	bne.w	801386a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80136ec:	4875      	ldr	r0, [pc, #468]	; (80138c4 <tcp_receive+0xf18>)
 80136ee:	f7fd fa3d 	bl	8010b6c <tcp_seg_copy>
 80136f2:	4602      	mov	r2, r0
 80136f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80136f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	f000 80b6 	beq.w	801386e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801370a:	8912      	ldrh	r2, [r2, #8]
 801370c:	441a      	add	r2, r3
 801370e:	4b6c      	ldr	r3, [pc, #432]	; (80138c0 <tcp_receive+0xf14>)
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	1ad3      	subs	r3, r2, r3
 8013714:	2b00      	cmp	r3, #0
 8013716:	dd12      	ble.n	801373e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013718:	4b69      	ldr	r3, [pc, #420]	; (80138c0 <tcp_receive+0xf14>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	b29a      	uxth	r2, r3
 801371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013720:	68db      	ldr	r3, [r3, #12]
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	b29b      	uxth	r3, r3
 8013726:	1ad3      	subs	r3, r2, r3
 8013728:	b29a      	uxth	r2, r3
 801372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013730:	685a      	ldr	r2, [r3, #4]
 8013732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013734:	891b      	ldrh	r3, [r3, #8]
 8013736:	4619      	mov	r1, r3
 8013738:	4610      	mov	r0, r2
 801373a:	f7fb fc1d 	bl	800ef78 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801373e:	4b62      	ldr	r3, [pc, #392]	; (80138c8 <tcp_receive+0xf1c>)
 8013740:	881b      	ldrh	r3, [r3, #0]
 8013742:	461a      	mov	r2, r3
 8013744:	4b5e      	ldr	r3, [pc, #376]	; (80138c0 <tcp_receive+0xf14>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	441a      	add	r2, r3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801374e:	6879      	ldr	r1, [r7, #4]
 8013750:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013752:	440b      	add	r3, r1
 8013754:	1ad3      	subs	r3, r2, r3
 8013756:	2b00      	cmp	r3, #0
 8013758:	f340 8089 	ble.w	801386e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	899b      	ldrh	r3, [r3, #12]
 8013764:	b29b      	uxth	r3, r3
 8013766:	4618      	mov	r0, r3
 8013768:	f7fa f9e0 	bl	800db2c <lwip_htons>
 801376c:	4603      	mov	r3, r0
 801376e:	b2db      	uxtb	r3, r3
 8013770:	f003 0301 	and.w	r3, r3, #1
 8013774:	2b00      	cmp	r3, #0
 8013776:	d022      	beq.n	80137be <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	68db      	ldr	r3, [r3, #12]
 801377e:	899b      	ldrh	r3, [r3, #12]
 8013780:	b29b      	uxth	r3, r3
 8013782:	b21b      	sxth	r3, r3
 8013784:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013788:	b21c      	sxth	r4, r3
 801378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	68db      	ldr	r3, [r3, #12]
 8013790:	899b      	ldrh	r3, [r3, #12]
 8013792:	b29b      	uxth	r3, r3
 8013794:	4618      	mov	r0, r3
 8013796:	f7fa f9c9 	bl	800db2c <lwip_htons>
 801379a:	4603      	mov	r3, r0
 801379c:	b2db      	uxtb	r3, r3
 801379e:	b29b      	uxth	r3, r3
 80137a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80137a4:	b29b      	uxth	r3, r3
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7fa f9c0 	bl	800db2c <lwip_htons>
 80137ac:	4603      	mov	r3, r0
 80137ae:	b21b      	sxth	r3, r3
 80137b0:	4323      	orrs	r3, r4
 80137b2:	b21a      	sxth	r2, r3
 80137b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	68db      	ldr	r3, [r3, #12]
 80137ba:	b292      	uxth	r2, r2
 80137bc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137c8:	4413      	add	r3, r2
 80137ca:	b299      	uxth	r1, r3
 80137cc:	4b3c      	ldr	r3, [pc, #240]	; (80138c0 <tcp_receive+0xf14>)
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	b29a      	uxth	r2, r3
 80137d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	1a8a      	subs	r2, r1, r2
 80137d8:	b292      	uxth	r2, r2
 80137da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80137dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	685a      	ldr	r2, [r3, #4]
 80137e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	891b      	ldrh	r3, [r3, #8]
 80137e8:	4619      	mov	r1, r3
 80137ea:	4610      	mov	r0, r2
 80137ec:	f7fb fbc4 	bl	800ef78 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80137f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	891c      	ldrh	r4, [r3, #8]
 80137f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	899b      	ldrh	r3, [r3, #12]
 80137fe:	b29b      	uxth	r3, r3
 8013800:	4618      	mov	r0, r3
 8013802:	f7fa f993 	bl	800db2c <lwip_htons>
 8013806:	4603      	mov	r3, r0
 8013808:	b2db      	uxtb	r3, r3
 801380a:	f003 0303 	and.w	r3, r3, #3
 801380e:	2b00      	cmp	r3, #0
 8013810:	d001      	beq.n	8013816 <tcp_receive+0xe6a>
 8013812:	2301      	movs	r3, #1
 8013814:	e000      	b.n	8013818 <tcp_receive+0xe6c>
 8013816:	2300      	movs	r3, #0
 8013818:	4423      	add	r3, r4
 801381a:	b29a      	uxth	r2, r3
 801381c:	4b2a      	ldr	r3, [pc, #168]	; (80138c8 <tcp_receive+0xf1c>)
 801381e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013820:	4b29      	ldr	r3, [pc, #164]	; (80138c8 <tcp_receive+0xf1c>)
 8013822:	881b      	ldrh	r3, [r3, #0]
 8013824:	461a      	mov	r2, r3
 8013826:	4b26      	ldr	r3, [pc, #152]	; (80138c0 <tcp_receive+0xf14>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	441a      	add	r2, r3
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013830:	6879      	ldr	r1, [r7, #4]
 8013832:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013834:	440b      	add	r3, r1
 8013836:	429a      	cmp	r2, r3
 8013838:	d019      	beq.n	801386e <tcp_receive+0xec2>
 801383a:	4b24      	ldr	r3, [pc, #144]	; (80138cc <tcp_receive+0xf20>)
 801383c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013840:	4923      	ldr	r1, [pc, #140]	; (80138d0 <tcp_receive+0xf24>)
 8013842:	4824      	ldr	r0, [pc, #144]	; (80138d4 <tcp_receive+0xf28>)
 8013844:	f007 fd0a 	bl	801b25c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013848:	e011      	b.n	801386e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013852:	2b00      	cmp	r3, #0
 8013854:	f47f aea4 	bne.w	80135a0 <tcp_receive+0xbf4>
 8013858:	e00a      	b.n	8013870 <tcp_receive+0xec4>
                break;
 801385a:	bf00      	nop
 801385c:	e008      	b.n	8013870 <tcp_receive+0xec4>
                break;
 801385e:	bf00      	nop
 8013860:	e006      	b.n	8013870 <tcp_receive+0xec4>
                  break;
 8013862:	bf00      	nop
 8013864:	e004      	b.n	8013870 <tcp_receive+0xec4>
                  break;
 8013866:	bf00      	nop
 8013868:	e002      	b.n	8013870 <tcp_receive+0xec4>
                  break;
 801386a:	bf00      	nop
 801386c:	e000      	b.n	8013870 <tcp_receive+0xec4>
                break;
 801386e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f001 fe8b 	bl	801558c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013876:	e003      	b.n	8013880 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f001 fe87 	bl	801558c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801387e:	e01a      	b.n	80138b6 <tcp_receive+0xf0a>
 8013880:	e019      	b.n	80138b6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013882:	4b0f      	ldr	r3, [pc, #60]	; (80138c0 <tcp_receive+0xf14>)
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	2b00      	cmp	r3, #0
 801388e:	db0a      	blt.n	80138a6 <tcp_receive+0xefa>
 8013890:	4b0b      	ldr	r3, [pc, #44]	; (80138c0 <tcp_receive+0xf14>)
 8013892:	681a      	ldr	r2, [r3, #0]
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013898:	6879      	ldr	r1, [r7, #4]
 801389a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801389c:	440b      	add	r3, r1
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	3301      	adds	r3, #1
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	dd07      	ble.n	80138b6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	8b5b      	ldrh	r3, [r3, #26]
 80138aa:	f043 0302 	orr.w	r3, r3, #2
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80138b4:	e7ff      	b.n	80138b6 <tcp_receive+0xf0a>
 80138b6:	bf00      	nop
 80138b8:	3750      	adds	r7, #80	; 0x50
 80138ba:	46bd      	mov	sp, r7
 80138bc:	bdb0      	pop	{r4, r5, r7, pc}
 80138be:	bf00      	nop
 80138c0:	20004b8c 	.word	0x20004b8c
 80138c4:	20004b6c 	.word	0x20004b6c
 80138c8:	20004b96 	.word	0x20004b96
 80138cc:	0801e300 	.word	0x0801e300
 80138d0:	0801e6a8 	.word	0x0801e6a8
 80138d4:	0801e34c 	.word	0x0801e34c

080138d8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80138d8:	b480      	push	{r7}
 80138da:	b083      	sub	sp, #12
 80138dc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80138de:	4b15      	ldr	r3, [pc, #84]	; (8013934 <tcp_get_next_optbyte+0x5c>)
 80138e0:	881b      	ldrh	r3, [r3, #0]
 80138e2:	1c5a      	adds	r2, r3, #1
 80138e4:	b291      	uxth	r1, r2
 80138e6:	4a13      	ldr	r2, [pc, #76]	; (8013934 <tcp_get_next_optbyte+0x5c>)
 80138e8:	8011      	strh	r1, [r2, #0]
 80138ea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80138ec:	4b12      	ldr	r3, [pc, #72]	; (8013938 <tcp_get_next_optbyte+0x60>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d004      	beq.n	80138fe <tcp_get_next_optbyte+0x26>
 80138f4:	4b11      	ldr	r3, [pc, #68]	; (801393c <tcp_get_next_optbyte+0x64>)
 80138f6:	881b      	ldrh	r3, [r3, #0]
 80138f8:	88fa      	ldrh	r2, [r7, #6]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d208      	bcs.n	8013910 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80138fe:	4b10      	ldr	r3, [pc, #64]	; (8013940 <tcp_get_next_optbyte+0x68>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	3314      	adds	r3, #20
 8013904:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013906:	88fb      	ldrh	r3, [r7, #6]
 8013908:	683a      	ldr	r2, [r7, #0]
 801390a:	4413      	add	r3, r2
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	e00b      	b.n	8013928 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013910:	88fb      	ldrh	r3, [r7, #6]
 8013912:	b2da      	uxtb	r2, r3
 8013914:	4b09      	ldr	r3, [pc, #36]	; (801393c <tcp_get_next_optbyte+0x64>)
 8013916:	881b      	ldrh	r3, [r3, #0]
 8013918:	b2db      	uxtb	r3, r3
 801391a:	1ad3      	subs	r3, r2, r3
 801391c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801391e:	4b06      	ldr	r3, [pc, #24]	; (8013938 <tcp_get_next_optbyte+0x60>)
 8013920:	681a      	ldr	r2, [r3, #0]
 8013922:	797b      	ldrb	r3, [r7, #5]
 8013924:	4413      	add	r3, r2
 8013926:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013928:	4618      	mov	r0, r3
 801392a:	370c      	adds	r7, #12
 801392c:	46bd      	mov	sp, r7
 801392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013932:	4770      	bx	lr
 8013934:	20004b88 	.word	0x20004b88
 8013938:	20004b84 	.word	0x20004b84
 801393c:	20004b82 	.word	0x20004b82
 8013940:	20004b7c 	.word	0x20004b7c

08013944 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b084      	sub	sp, #16
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d106      	bne.n	8013960 <tcp_parseopt+0x1c>
 8013952:	4b32      	ldr	r3, [pc, #200]	; (8013a1c <tcp_parseopt+0xd8>)
 8013954:	f240 727d 	movw	r2, #1917	; 0x77d
 8013958:	4931      	ldr	r1, [pc, #196]	; (8013a20 <tcp_parseopt+0xdc>)
 801395a:	4832      	ldr	r0, [pc, #200]	; (8013a24 <tcp_parseopt+0xe0>)
 801395c:	f007 fc7e 	bl	801b25c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013960:	4b31      	ldr	r3, [pc, #196]	; (8013a28 <tcp_parseopt+0xe4>)
 8013962:	881b      	ldrh	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d055      	beq.n	8013a14 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013968:	4b30      	ldr	r3, [pc, #192]	; (8013a2c <tcp_parseopt+0xe8>)
 801396a:	2200      	movs	r2, #0
 801396c:	801a      	strh	r2, [r3, #0]
 801396e:	e045      	b.n	80139fc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013970:	f7ff ffb2 	bl	80138d8 <tcp_get_next_optbyte>
 8013974:	4603      	mov	r3, r0
 8013976:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013978:	7bfb      	ldrb	r3, [r7, #15]
 801397a:	2b02      	cmp	r3, #2
 801397c:	d006      	beq.n	801398c <tcp_parseopt+0x48>
 801397e:	2b02      	cmp	r3, #2
 8013980:	dc2b      	bgt.n	80139da <tcp_parseopt+0x96>
 8013982:	2b00      	cmp	r3, #0
 8013984:	d041      	beq.n	8013a0a <tcp_parseopt+0xc6>
 8013986:	2b01      	cmp	r3, #1
 8013988:	d127      	bne.n	80139da <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801398a:	e037      	b.n	80139fc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801398c:	f7ff ffa4 	bl	80138d8 <tcp_get_next_optbyte>
 8013990:	4603      	mov	r3, r0
 8013992:	2b04      	cmp	r3, #4
 8013994:	d13b      	bne.n	8013a0e <tcp_parseopt+0xca>
 8013996:	4b25      	ldr	r3, [pc, #148]	; (8013a2c <tcp_parseopt+0xe8>)
 8013998:	881b      	ldrh	r3, [r3, #0]
 801399a:	3301      	adds	r3, #1
 801399c:	4a22      	ldr	r2, [pc, #136]	; (8013a28 <tcp_parseopt+0xe4>)
 801399e:	8812      	ldrh	r2, [r2, #0]
 80139a0:	4293      	cmp	r3, r2
 80139a2:	da34      	bge.n	8013a0e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80139a4:	f7ff ff98 	bl	80138d8 <tcp_get_next_optbyte>
 80139a8:	4603      	mov	r3, r0
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	021b      	lsls	r3, r3, #8
 80139ae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80139b0:	f7ff ff92 	bl	80138d8 <tcp_get_next_optbyte>
 80139b4:	4603      	mov	r3, r0
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	89bb      	ldrh	r3, [r7, #12]
 80139ba:	4313      	orrs	r3, r2
 80139bc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80139be:	89bb      	ldrh	r3, [r7, #12]
 80139c0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80139c4:	d804      	bhi.n	80139d0 <tcp_parseopt+0x8c>
 80139c6:	89bb      	ldrh	r3, [r7, #12]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d001      	beq.n	80139d0 <tcp_parseopt+0x8c>
 80139cc:	89ba      	ldrh	r2, [r7, #12]
 80139ce:	e001      	b.n	80139d4 <tcp_parseopt+0x90>
 80139d0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80139d8:	e010      	b.n	80139fc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80139da:	f7ff ff7d 	bl	80138d8 <tcp_get_next_optbyte>
 80139de:	4603      	mov	r3, r0
 80139e0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80139e2:	7afb      	ldrb	r3, [r7, #11]
 80139e4:	2b01      	cmp	r3, #1
 80139e6:	d914      	bls.n	8013a12 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80139e8:	7afb      	ldrb	r3, [r7, #11]
 80139ea:	b29a      	uxth	r2, r3
 80139ec:	4b0f      	ldr	r3, [pc, #60]	; (8013a2c <tcp_parseopt+0xe8>)
 80139ee:	881b      	ldrh	r3, [r3, #0]
 80139f0:	4413      	add	r3, r2
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	3b02      	subs	r3, #2
 80139f6:	b29a      	uxth	r2, r3
 80139f8:	4b0c      	ldr	r3, [pc, #48]	; (8013a2c <tcp_parseopt+0xe8>)
 80139fa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80139fc:	4b0b      	ldr	r3, [pc, #44]	; (8013a2c <tcp_parseopt+0xe8>)
 80139fe:	881a      	ldrh	r2, [r3, #0]
 8013a00:	4b09      	ldr	r3, [pc, #36]	; (8013a28 <tcp_parseopt+0xe4>)
 8013a02:	881b      	ldrh	r3, [r3, #0]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d3b3      	bcc.n	8013970 <tcp_parseopt+0x2c>
 8013a08:	e004      	b.n	8013a14 <tcp_parseopt+0xd0>
          return;
 8013a0a:	bf00      	nop
 8013a0c:	e002      	b.n	8013a14 <tcp_parseopt+0xd0>
            return;
 8013a0e:	bf00      	nop
 8013a10:	e000      	b.n	8013a14 <tcp_parseopt+0xd0>
            return;
 8013a12:	bf00      	nop
      }
    }
  }
}
 8013a14:	3710      	adds	r7, #16
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	bf00      	nop
 8013a1c:	0801e300 	.word	0x0801e300
 8013a20:	0801e764 	.word	0x0801e764
 8013a24:	0801e34c 	.word	0x0801e34c
 8013a28:	20004b80 	.word	0x20004b80
 8013a2c:	20004b88 	.word	0x20004b88

08013a30 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013a30:	b480      	push	{r7}
 8013a32:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013a34:	4b05      	ldr	r3, [pc, #20]	; (8013a4c <tcp_trigger_input_pcb_close+0x1c>)
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	f043 0310 	orr.w	r3, r3, #16
 8013a3c:	b2da      	uxtb	r2, r3
 8013a3e:	4b03      	ldr	r3, [pc, #12]	; (8013a4c <tcp_trigger_input_pcb_close+0x1c>)
 8013a40:	701a      	strb	r2, [r3, #0]
}
 8013a42:	bf00      	nop
 8013a44:	46bd      	mov	sp, r7
 8013a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4a:	4770      	bx	lr
 8013a4c:	20004b99 	.word	0x20004b99

08013a50 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	60b9      	str	r1, [r7, #8]
 8013a5a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d00a      	beq.n	8013a78 <tcp_route+0x28>
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	7a1b      	ldrb	r3, [r3, #8]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d006      	beq.n	8013a78 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	7a1b      	ldrb	r3, [r3, #8]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fb f87a 	bl	800eb68 <netif_get_by_index>
 8013a74:	4603      	mov	r3, r0
 8013a76:	e003      	b.n	8013a80 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f003 fdf3 	bl	8017664 <ip4_route>
 8013a7e:	4603      	mov	r3, r0
  }
}
 8013a80:	4618      	mov	r0, r3
 8013a82:	3710      	adds	r7, #16
 8013a84:	46bd      	mov	sp, r7
 8013a86:	bd80      	pop	{r7, pc}

08013a88 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013a88:	b590      	push	{r4, r7, lr}
 8013a8a:	b087      	sub	sp, #28
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	60f8      	str	r0, [r7, #12]
 8013a90:	60b9      	str	r1, [r7, #8]
 8013a92:	603b      	str	r3, [r7, #0]
 8013a94:	4613      	mov	r3, r2
 8013a96:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d105      	bne.n	8013aaa <tcp_create_segment+0x22>
 8013a9e:	4b44      	ldr	r3, [pc, #272]	; (8013bb0 <tcp_create_segment+0x128>)
 8013aa0:	22a3      	movs	r2, #163	; 0xa3
 8013aa2:	4944      	ldr	r1, [pc, #272]	; (8013bb4 <tcp_create_segment+0x12c>)
 8013aa4:	4844      	ldr	r0, [pc, #272]	; (8013bb8 <tcp_create_segment+0x130>)
 8013aa6:	f007 fbd9 	bl	801b25c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d105      	bne.n	8013abc <tcp_create_segment+0x34>
 8013ab0:	4b3f      	ldr	r3, [pc, #252]	; (8013bb0 <tcp_create_segment+0x128>)
 8013ab2:	22a4      	movs	r2, #164	; 0xa4
 8013ab4:	4941      	ldr	r1, [pc, #260]	; (8013bbc <tcp_create_segment+0x134>)
 8013ab6:	4840      	ldr	r0, [pc, #256]	; (8013bb8 <tcp_create_segment+0x130>)
 8013ab8:	f007 fbd0 	bl	801b25c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013abc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013ac0:	009b      	lsls	r3, r3, #2
 8013ac2:	b2db      	uxtb	r3, r3
 8013ac4:	f003 0304 	and.w	r3, r3, #4
 8013ac8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013aca:	2003      	movs	r0, #3
 8013acc:	f7fa fce4 	bl	800e498 <memp_malloc>
 8013ad0:	6138      	str	r0, [r7, #16]
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d104      	bne.n	8013ae2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013ad8:	68b8      	ldr	r0, [r7, #8]
 8013ada:	f7fb fbd3 	bl	800f284 <pbuf_free>
    return NULL;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	e061      	b.n	8013ba6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8013ae2:	693b      	ldr	r3, [r7, #16]
 8013ae4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013ae8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	2200      	movs	r2, #0
 8013aee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013af0:	693b      	ldr	r3, [r7, #16]
 8013af2:	68ba      	ldr	r2, [r7, #8]
 8013af4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	891a      	ldrh	r2, [r3, #8]
 8013afa:	7dfb      	ldrb	r3, [r7, #23]
 8013afc:	b29b      	uxth	r3, r3
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d205      	bcs.n	8013b0e <tcp_create_segment+0x86>
 8013b02:	4b2b      	ldr	r3, [pc, #172]	; (8013bb0 <tcp_create_segment+0x128>)
 8013b04:	22b0      	movs	r2, #176	; 0xb0
 8013b06:	492e      	ldr	r1, [pc, #184]	; (8013bc0 <tcp_create_segment+0x138>)
 8013b08:	482b      	ldr	r0, [pc, #172]	; (8013bb8 <tcp_create_segment+0x130>)
 8013b0a:	f007 fba7 	bl	801b25c <iprintf>
  seg->len = p->tot_len - optlen;
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	891a      	ldrh	r2, [r3, #8]
 8013b12:	7dfb      	ldrb	r3, [r7, #23]
 8013b14:	b29b      	uxth	r3, r3
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	b29a      	uxth	r2, r3
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013b1e:	2114      	movs	r1, #20
 8013b20:	68b8      	ldr	r0, [r7, #8]
 8013b22:	f7fb fb19 	bl	800f158 <pbuf_add_header>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d004      	beq.n	8013b36 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013b2c:	6938      	ldr	r0, [r7, #16]
 8013b2e:	f7fd f804 	bl	8010b3a <tcp_seg_free>
    return NULL;
 8013b32:	2300      	movs	r3, #0
 8013b34:	e037      	b.n	8013ba6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013b36:	693b      	ldr	r3, [r7, #16]
 8013b38:	685b      	ldr	r3, [r3, #4]
 8013b3a:	685a      	ldr	r2, [r3, #4]
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	8ada      	ldrh	r2, [r3, #22]
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	68dc      	ldr	r4, [r3, #12]
 8013b48:	4610      	mov	r0, r2
 8013b4a:	f7f9 ffef 	bl	800db2c <lwip_htons>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	8b1a      	ldrh	r2, [r3, #24]
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	68dc      	ldr	r4, [r3, #12]
 8013b5a:	4610      	mov	r0, r2
 8013b5c:	f7f9 ffe6 	bl	800db2c <lwip_htons>
 8013b60:	4603      	mov	r3, r0
 8013b62:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	68dc      	ldr	r4, [r3, #12]
 8013b68:	6838      	ldr	r0, [r7, #0]
 8013b6a:	f7f9 fff4 	bl	800db56 <lwip_htonl>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013b72:	7dfb      	ldrb	r3, [r7, #23]
 8013b74:	089b      	lsrs	r3, r3, #2
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	3305      	adds	r3, #5
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	031b      	lsls	r3, r3, #12
 8013b80:	b29a      	uxth	r2, r3
 8013b82:	79fb      	ldrb	r3, [r7, #7]
 8013b84:	b29b      	uxth	r3, r3
 8013b86:	4313      	orrs	r3, r2
 8013b88:	b29a      	uxth	r2, r3
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	68dc      	ldr	r4, [r3, #12]
 8013b8e:	4610      	mov	r0, r2
 8013b90:	f7f9 ffcc 	bl	800db2c <lwip_htons>
 8013b94:	4603      	mov	r3, r0
 8013b96:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013b98:	693b      	ldr	r3, [r7, #16]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	749a      	strb	r2, [r3, #18]
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	74da      	strb	r2, [r3, #19]
  return seg;
 8013ba4:	693b      	ldr	r3, [r7, #16]
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	371c      	adds	r7, #28
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd90      	pop	{r4, r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	0801e780 	.word	0x0801e780
 8013bb4:	0801e7b4 	.word	0x0801e7b4
 8013bb8:	0801e7d4 	.word	0x0801e7d4
 8013bbc:	0801e7fc 	.word	0x0801e7fc
 8013bc0:	0801e820 	.word	0x0801e820

08013bc4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b086      	sub	sp, #24
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	607b      	str	r3, [r7, #4]
 8013bcc:	4603      	mov	r3, r0
 8013bce:	73fb      	strb	r3, [r7, #15]
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	81bb      	strh	r3, [r7, #12]
 8013bd4:	4613      	mov	r3, r2
 8013bd6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013bd8:	89bb      	ldrh	r3, [r7, #12]
 8013bda:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d105      	bne.n	8013bee <tcp_pbuf_prealloc+0x2a>
 8013be2:	4b30      	ldr	r3, [pc, #192]	; (8013ca4 <tcp_pbuf_prealloc+0xe0>)
 8013be4:	22e8      	movs	r2, #232	; 0xe8
 8013be6:	4930      	ldr	r1, [pc, #192]	; (8013ca8 <tcp_pbuf_prealloc+0xe4>)
 8013be8:	4830      	ldr	r0, [pc, #192]	; (8013cac <tcp_pbuf_prealloc+0xe8>)
 8013bea:	f007 fb37 	bl	801b25c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013bee:	6a3b      	ldr	r3, [r7, #32]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d105      	bne.n	8013c00 <tcp_pbuf_prealloc+0x3c>
 8013bf4:	4b2b      	ldr	r3, [pc, #172]	; (8013ca4 <tcp_pbuf_prealloc+0xe0>)
 8013bf6:	22e9      	movs	r2, #233	; 0xe9
 8013bf8:	492d      	ldr	r1, [pc, #180]	; (8013cb0 <tcp_pbuf_prealloc+0xec>)
 8013bfa:	482c      	ldr	r0, [pc, #176]	; (8013cac <tcp_pbuf_prealloc+0xe8>)
 8013bfc:	f007 fb2e 	bl	801b25c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013c00:	89ba      	ldrh	r2, [r7, #12]
 8013c02:	897b      	ldrh	r3, [r7, #10]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d221      	bcs.n	8013c4c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013c08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013c0c:	f003 0302 	and.w	r3, r3, #2
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d111      	bne.n	8013c38 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013c14:	6a3b      	ldr	r3, [r7, #32]
 8013c16:	8b5b      	ldrh	r3, [r3, #26]
 8013c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d115      	bne.n	8013c4c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013c20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d007      	beq.n	8013c38 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013c28:	6a3b      	ldr	r3, [r7, #32]
 8013c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d103      	bne.n	8013c38 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013c30:	6a3b      	ldr	r3, [r7, #32]
 8013c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d009      	beq.n	8013c4c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013c38:	89bb      	ldrh	r3, [r7, #12]
 8013c3a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013c3e:	f023 0203 	bic.w	r2, r3, #3
 8013c42:	897b      	ldrh	r3, [r7, #10]
 8013c44:	4293      	cmp	r3, r2
 8013c46:	bf28      	it	cs
 8013c48:	4613      	movcs	r3, r2
 8013c4a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013c4c:	8af9      	ldrh	r1, [r7, #22]
 8013c4e:	7bfb      	ldrb	r3, [r7, #15]
 8013c50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7fb f831 	bl	800ecbc <pbuf_alloc>
 8013c5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d101      	bne.n	8013c66 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013c62:	2300      	movs	r3, #0
 8013c64:	e019      	b.n	8013c9a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013c66:	693b      	ldr	r3, [r7, #16]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d006      	beq.n	8013c7c <tcp_pbuf_prealloc+0xb8>
 8013c6e:	4b0d      	ldr	r3, [pc, #52]	; (8013ca4 <tcp_pbuf_prealloc+0xe0>)
 8013c70:	f240 120b 	movw	r2, #267	; 0x10b
 8013c74:	490f      	ldr	r1, [pc, #60]	; (8013cb4 <tcp_pbuf_prealloc+0xf0>)
 8013c76:	480d      	ldr	r0, [pc, #52]	; (8013cac <tcp_pbuf_prealloc+0xe8>)
 8013c78:	f007 faf0 	bl	801b25c <iprintf>
  *oversize = p->len - length;
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	895a      	ldrh	r2, [r3, #10]
 8013c80:	89bb      	ldrh	r3, [r7, #12]
 8013c82:	1ad3      	subs	r3, r2, r3
 8013c84:	b29a      	uxth	r2, r3
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	89ba      	ldrh	r2, [r7, #12]
 8013c8e:	811a      	strh	r2, [r3, #8]
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	891a      	ldrh	r2, [r3, #8]
 8013c94:	693b      	ldr	r3, [r7, #16]
 8013c96:	815a      	strh	r2, [r3, #10]
  return p;
 8013c98:	693b      	ldr	r3, [r7, #16]
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	3718      	adds	r7, #24
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	bd80      	pop	{r7, pc}
 8013ca2:	bf00      	nop
 8013ca4:	0801e780 	.word	0x0801e780
 8013ca8:	0801e838 	.word	0x0801e838
 8013cac:	0801e7d4 	.word	0x0801e7d4
 8013cb0:	0801e85c 	.word	0x0801e85c
 8013cb4:	0801e87c 	.word	0x0801e87c

08013cb8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b082      	sub	sp, #8
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
 8013cc0:	460b      	mov	r3, r1
 8013cc2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d106      	bne.n	8013cd8 <tcp_write_checks+0x20>
 8013cca:	4b33      	ldr	r3, [pc, #204]	; (8013d98 <tcp_write_checks+0xe0>)
 8013ccc:	f240 1233 	movw	r2, #307	; 0x133
 8013cd0:	4932      	ldr	r1, [pc, #200]	; (8013d9c <tcp_write_checks+0xe4>)
 8013cd2:	4833      	ldr	r0, [pc, #204]	; (8013da0 <tcp_write_checks+0xe8>)
 8013cd4:	f007 fac2 	bl	801b25c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	7d1b      	ldrb	r3, [r3, #20]
 8013cdc:	2b04      	cmp	r3, #4
 8013cde:	d00e      	beq.n	8013cfe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013ce4:	2b07      	cmp	r3, #7
 8013ce6:	d00a      	beq.n	8013cfe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013cec:	2b02      	cmp	r3, #2
 8013cee:	d006      	beq.n	8013cfe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013cf4:	2b03      	cmp	r3, #3
 8013cf6:	d002      	beq.n	8013cfe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013cf8:	f06f 030a 	mvn.w	r3, #10
 8013cfc:	e048      	b.n	8013d90 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013cfe:	887b      	ldrh	r3, [r7, #2]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d101      	bne.n	8013d08 <tcp_write_checks+0x50>
    return ERR_OK;
 8013d04:	2300      	movs	r3, #0
 8013d06:	e043      	b.n	8013d90 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013d0e:	887a      	ldrh	r2, [r7, #2]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d909      	bls.n	8013d28 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	8b5b      	ldrh	r3, [r3, #26]
 8013d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d1c:	b29a      	uxth	r2, r3
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013d22:	f04f 33ff 	mov.w	r3, #4294967295
 8013d26:	e033      	b.n	8013d90 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d2e:	2b08      	cmp	r3, #8
 8013d30:	d909      	bls.n	8013d46 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	8b5b      	ldrh	r3, [r3, #26]
 8013d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d3a:	b29a      	uxth	r2, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013d40:	f04f 33ff 	mov.w	r3, #4294967295
 8013d44:	e024      	b.n	8013d90 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d00f      	beq.n	8013d70 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d11a      	bne.n	8013d8e <tcp_write_checks+0xd6>
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d116      	bne.n	8013d8e <tcp_write_checks+0xd6>
 8013d60:	4b0d      	ldr	r3, [pc, #52]	; (8013d98 <tcp_write_checks+0xe0>)
 8013d62:	f240 1255 	movw	r2, #341	; 0x155
 8013d66:	490f      	ldr	r1, [pc, #60]	; (8013da4 <tcp_write_checks+0xec>)
 8013d68:	480d      	ldr	r0, [pc, #52]	; (8013da0 <tcp_write_checks+0xe8>)
 8013d6a:	f007 fa77 	bl	801b25c <iprintf>
 8013d6e:	e00e      	b.n	8013d8e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d103      	bne.n	8013d80 <tcp_write_checks+0xc8>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d006      	beq.n	8013d8e <tcp_write_checks+0xd6>
 8013d80:	4b05      	ldr	r3, [pc, #20]	; (8013d98 <tcp_write_checks+0xe0>)
 8013d82:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013d86:	4908      	ldr	r1, [pc, #32]	; (8013da8 <tcp_write_checks+0xf0>)
 8013d88:	4805      	ldr	r0, [pc, #20]	; (8013da0 <tcp_write_checks+0xe8>)
 8013d8a:	f007 fa67 	bl	801b25c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013d8e:	2300      	movs	r3, #0
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3708      	adds	r7, #8
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}
 8013d98:	0801e780 	.word	0x0801e780
 8013d9c:	0801e890 	.word	0x0801e890
 8013da0:	0801e7d4 	.word	0x0801e7d4
 8013da4:	0801e8b0 	.word	0x0801e8b0
 8013da8:	0801e8ec 	.word	0x0801e8ec

08013dac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013dac:	b590      	push	{r4, r7, lr}
 8013dae:	b09b      	sub	sp, #108	; 0x6c
 8013db0:	af04      	add	r7, sp, #16
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	60b9      	str	r1, [r7, #8]
 8013db6:	4611      	mov	r1, r2
 8013db8:	461a      	mov	r2, r3
 8013dba:	460b      	mov	r3, r1
 8013dbc:	80fb      	strh	r3, [r7, #6]
 8013dbe:	4613      	mov	r3, r2
 8013dc0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8013dca:	2300      	movs	r3, #0
 8013dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013dce:	2300      	movs	r3, #0
 8013dd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013de2:	2300      	movs	r3, #0
 8013de4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013de6:	2300      	movs	r3, #0
 8013de8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013dea:	2300      	movs	r3, #0
 8013dec:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d109      	bne.n	8013e08 <tcp_write+0x5c>
 8013df4:	4ba4      	ldr	r3, [pc, #656]	; (8014088 <tcp_write+0x2dc>)
 8013df6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013dfa:	49a4      	ldr	r1, [pc, #656]	; (801408c <tcp_write+0x2e0>)
 8013dfc:	48a4      	ldr	r0, [pc, #656]	; (8014090 <tcp_write+0x2e4>)
 8013dfe:	f007 fa2d 	bl	801b25c <iprintf>
 8013e02:	f06f 030f 	mvn.w	r3, #15
 8013e06:	e32a      	b.n	801445e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013e0e:	085b      	lsrs	r3, r3, #1
 8013e10:	b29a      	uxth	r2, r3
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e16:	4293      	cmp	r3, r2
 8013e18:	bf28      	it	cs
 8013e1a:	4613      	movcs	r3, r2
 8013e1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013e1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d102      	bne.n	8013e2a <tcp_write+0x7e>
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e28:	e000      	b.n	8013e2c <tcp_write+0x80>
 8013e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d109      	bne.n	8013e48 <tcp_write+0x9c>
 8013e34:	4b94      	ldr	r3, [pc, #592]	; (8014088 <tcp_write+0x2dc>)
 8013e36:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013e3a:	4996      	ldr	r1, [pc, #600]	; (8014094 <tcp_write+0x2e8>)
 8013e3c:	4894      	ldr	r0, [pc, #592]	; (8014090 <tcp_write+0x2e4>)
 8013e3e:	f007 fa0d 	bl	801b25c <iprintf>
 8013e42:	f06f 030f 	mvn.w	r3, #15
 8013e46:	e30a      	b.n	801445e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013e48:	88fb      	ldrh	r3, [r7, #6]
 8013e4a:	4619      	mov	r1, r3
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f7ff ff33 	bl	8013cb8 <tcp_write_checks>
 8013e52:	4603      	mov	r3, r0
 8013e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013e58:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d002      	beq.n	8013e66 <tcp_write+0xba>
    return err;
 8013e60:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013e64:	e2fb      	b.n	801445e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e6c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013e70:	2300      	movs	r3, #0
 8013e72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	f000 80f6 	beq.w	801406c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e84:	653b      	str	r3, [r7, #80]	; 0x50
 8013e86:	e002      	b.n	8013e8e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d1f8      	bne.n	8013e88 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e98:	7a9b      	ldrb	r3, [r3, #10]
 8013e9a:	009b      	lsls	r3, r3, #2
 8013e9c:	b29b      	uxth	r3, r3
 8013e9e:	f003 0304 	and.w	r3, r3, #4
 8013ea2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013ea4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ea8:	891b      	ldrh	r3, [r3, #8]
 8013eaa:	4619      	mov	r1, r3
 8013eac:	8c3b      	ldrh	r3, [r7, #32]
 8013eae:	440b      	add	r3, r1
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	da06      	bge.n	8013ec2 <tcp_write+0x116>
 8013eb4:	4b74      	ldr	r3, [pc, #464]	; (8014088 <tcp_write+0x2dc>)
 8013eb6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013eba:	4977      	ldr	r1, [pc, #476]	; (8014098 <tcp_write+0x2ec>)
 8013ebc:	4874      	ldr	r0, [pc, #464]	; (8014090 <tcp_write+0x2e4>)
 8013ebe:	f007 f9cd 	bl	801b25c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ec4:	891a      	ldrh	r2, [r3, #8]
 8013ec6:	8c3b      	ldrh	r3, [r7, #32]
 8013ec8:	4413      	add	r3, r2
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013ece:	1ad3      	subs	r3, r2, r3
 8013ed0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013ed8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013eda:	8a7b      	ldrh	r3, [r7, #18]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d026      	beq.n	8013f2e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013ee0:	8a7b      	ldrh	r3, [r7, #18]
 8013ee2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d206      	bcs.n	8013ef6 <tcp_write+0x14a>
 8013ee8:	4b67      	ldr	r3, [pc, #412]	; (8014088 <tcp_write+0x2dc>)
 8013eea:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013eee:	496b      	ldr	r1, [pc, #428]	; (801409c <tcp_write+0x2f0>)
 8013ef0:	4867      	ldr	r0, [pc, #412]	; (8014090 <tcp_write+0x2e4>)
 8013ef2:	f007 f9b3 	bl	801b25c <iprintf>
      seg = last_unsent;
 8013ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013efa:	8a7b      	ldrh	r3, [r7, #18]
 8013efc:	88fa      	ldrh	r2, [r7, #6]
 8013efe:	4293      	cmp	r3, r2
 8013f00:	bf28      	it	cs
 8013f02:	4613      	movcs	r3, r2
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f08:	4293      	cmp	r3, r2
 8013f0a:	bf28      	it	cs
 8013f0c:	4613      	movcs	r3, r2
 8013f0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013f10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013f14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013f16:	4413      	add	r3, r2
 8013f18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013f1c:	8a7a      	ldrh	r2, [r7, #18]
 8013f1e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013f20:	1ad3      	subs	r3, r2, r3
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013f26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013f2a:	1ad3      	subs	r3, r2, r3
 8013f2c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013f2e:	8a7b      	ldrh	r3, [r7, #18]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d00b      	beq.n	8013f4c <tcp_write+0x1a0>
 8013f34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013f38:	88fb      	ldrh	r3, [r7, #6]
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d006      	beq.n	8013f4c <tcp_write+0x1a0>
 8013f3e:	4b52      	ldr	r3, [pc, #328]	; (8014088 <tcp_write+0x2dc>)
 8013f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013f44:	4956      	ldr	r1, [pc, #344]	; (80140a0 <tcp_write+0x2f4>)
 8013f46:	4852      	ldr	r0, [pc, #328]	; (8014090 <tcp_write+0x2e4>)
 8013f48:	f007 f988 	bl	801b25c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013f4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013f50:	88fb      	ldrh	r3, [r7, #6]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	f080 8167 	bcs.w	8014226 <tcp_write+0x47a>
 8013f58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	f000 8163 	beq.w	8014226 <tcp_write+0x47a>
 8013f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f62:	891b      	ldrh	r3, [r3, #8]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	f000 815e 	beq.w	8014226 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013f6a:	88fa      	ldrh	r2, [r7, #6]
 8013f6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f70:	1ad2      	subs	r2, r2, r3
 8013f72:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f74:	4293      	cmp	r3, r2
 8013f76:	bfa8      	it	ge
 8013f78:	4613      	movge	r3, r2
 8013f7a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f7e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013f80:	797b      	ldrb	r3, [r7, #5]
 8013f82:	f003 0301 	and.w	r3, r3, #1
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d027      	beq.n	8013fda <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013f8a:	f107 0012 	add.w	r0, r7, #18
 8013f8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f90:	8bf9      	ldrh	r1, [r7, #30]
 8013f92:	2301      	movs	r3, #1
 8013f94:	9302      	str	r3, [sp, #8]
 8013f96:	797b      	ldrb	r3, [r7, #5]
 8013f98:	9301      	str	r3, [sp, #4]
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	9300      	str	r3, [sp, #0]
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	f7ff fe0f 	bl	8013bc4 <tcp_pbuf_prealloc>
 8013fa6:	6578      	str	r0, [r7, #84]	; 0x54
 8013fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	f000 8225 	beq.w	80143fa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fb2:	6858      	ldr	r0, [r3, #4]
 8013fb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013fb8:	68ba      	ldr	r2, [r7, #8]
 8013fba:	4413      	add	r3, r2
 8013fbc:	8bfa      	ldrh	r2, [r7, #30]
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	f007 f88c 	bl	801b0dc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013fc4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013fc6:	f7fb f9eb 	bl	800f3a0 <pbuf_clen>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	461a      	mov	r2, r3
 8013fce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013fd2:	4413      	add	r3, r2
 8013fd4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013fd8:	e041      	b.n	801405e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fdc:	685b      	ldr	r3, [r3, #4]
 8013fde:	637b      	str	r3, [r7, #52]	; 0x34
 8013fe0:	e002      	b.n	8013fe8 <tcp_write+0x23c>
 8013fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8013fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d1f8      	bne.n	8013fe2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ff2:	7b1b      	ldrb	r3, [r3, #12]
 8013ff4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d115      	bne.n	8014028 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014002:	8952      	ldrh	r2, [r2, #10]
 8014004:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8014006:	68ba      	ldr	r2, [r7, #8]
 8014008:	429a      	cmp	r2, r3
 801400a:	d10d      	bne.n	8014028 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801400c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014010:	2b00      	cmp	r3, #0
 8014012:	d006      	beq.n	8014022 <tcp_write+0x276>
 8014014:	4b1c      	ldr	r3, [pc, #112]	; (8014088 <tcp_write+0x2dc>)
 8014016:	f240 2231 	movw	r2, #561	; 0x231
 801401a:	4922      	ldr	r1, [pc, #136]	; (80140a4 <tcp_write+0x2f8>)
 801401c:	481c      	ldr	r0, [pc, #112]	; (8014090 <tcp_write+0x2e4>)
 801401e:	f007 f91d 	bl	801b25c <iprintf>
          extendlen = seglen;
 8014022:	8bfb      	ldrh	r3, [r7, #30]
 8014024:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8014026:	e01a      	b.n	801405e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8014028:	8bfb      	ldrh	r3, [r7, #30]
 801402a:	2201      	movs	r2, #1
 801402c:	4619      	mov	r1, r3
 801402e:	2000      	movs	r0, #0
 8014030:	f7fa fe44 	bl	800ecbc <pbuf_alloc>
 8014034:	6578      	str	r0, [r7, #84]	; 0x54
 8014036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014038:	2b00      	cmp	r3, #0
 801403a:	f000 81e0 	beq.w	80143fe <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801403e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014042:	68ba      	ldr	r2, [r7, #8]
 8014044:	441a      	add	r2, r3
 8014046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014048:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801404a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801404c:	f7fb f9a8 	bl	800f3a0 <pbuf_clen>
 8014050:	4603      	mov	r3, r0
 8014052:	461a      	mov	r2, r3
 8014054:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014058:	4413      	add	r3, r2
 801405a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801405e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014062:	8bfb      	ldrh	r3, [r7, #30]
 8014064:	4413      	add	r3, r2
 8014066:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801406a:	e0dc      	b.n	8014226 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014072:	2b00      	cmp	r3, #0
 8014074:	f000 80d7 	beq.w	8014226 <tcp_write+0x47a>
 8014078:	4b03      	ldr	r3, [pc, #12]	; (8014088 <tcp_write+0x2dc>)
 801407a:	f240 224a 	movw	r2, #586	; 0x24a
 801407e:	490a      	ldr	r1, [pc, #40]	; (80140a8 <tcp_write+0x2fc>)
 8014080:	4803      	ldr	r0, [pc, #12]	; (8014090 <tcp_write+0x2e4>)
 8014082:	f007 f8eb 	bl	801b25c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8014086:	e0ce      	b.n	8014226 <tcp_write+0x47a>
 8014088:	0801e780 	.word	0x0801e780
 801408c:	0801e920 	.word	0x0801e920
 8014090:	0801e7d4 	.word	0x0801e7d4
 8014094:	0801e938 	.word	0x0801e938
 8014098:	0801e96c 	.word	0x0801e96c
 801409c:	0801e984 	.word	0x0801e984
 80140a0:	0801e9a4 	.word	0x0801e9a4
 80140a4:	0801e9c4 	.word	0x0801e9c4
 80140a8:	0801e9f0 	.word	0x0801e9f0
    struct pbuf *p;
    u16_t left = len - pos;
 80140ac:	88fa      	ldrh	r2, [r7, #6]
 80140ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80140b2:	1ad3      	subs	r3, r2, r3
 80140b4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80140b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80140ba:	b29b      	uxth	r3, r3
 80140bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80140be:	1ad3      	subs	r3, r2, r3
 80140c0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80140c2:	8b7a      	ldrh	r2, [r7, #26]
 80140c4:	8bbb      	ldrh	r3, [r7, #28]
 80140c6:	4293      	cmp	r3, r2
 80140c8:	bf28      	it	cs
 80140ca:	4613      	movcs	r3, r2
 80140cc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80140ce:	797b      	ldrb	r3, [r7, #5]
 80140d0:	f003 0301 	and.w	r3, r3, #1
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d036      	beq.n	8014146 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80140d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80140dc:	b29a      	uxth	r2, r3
 80140de:	8b3b      	ldrh	r3, [r7, #24]
 80140e0:	4413      	add	r3, r2
 80140e2:	b299      	uxth	r1, r3
 80140e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	bf0c      	ite	eq
 80140ea:	2301      	moveq	r3, #1
 80140ec:	2300      	movne	r3, #0
 80140ee:	b2db      	uxtb	r3, r3
 80140f0:	f107 0012 	add.w	r0, r7, #18
 80140f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80140f6:	9302      	str	r3, [sp, #8]
 80140f8:	797b      	ldrb	r3, [r7, #5]
 80140fa:	9301      	str	r3, [sp, #4]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	9300      	str	r3, [sp, #0]
 8014100:	4603      	mov	r3, r0
 8014102:	2036      	movs	r0, #54	; 0x36
 8014104:	f7ff fd5e 	bl	8013bc4 <tcp_pbuf_prealloc>
 8014108:	6338      	str	r0, [r7, #48]	; 0x30
 801410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801410c:	2b00      	cmp	r3, #0
 801410e:	f000 8178 	beq.w	8014402 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8014112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014114:	895b      	ldrh	r3, [r3, #10]
 8014116:	8b3a      	ldrh	r2, [r7, #24]
 8014118:	429a      	cmp	r2, r3
 801411a:	d906      	bls.n	801412a <tcp_write+0x37e>
 801411c:	4b8c      	ldr	r3, [pc, #560]	; (8014350 <tcp_write+0x5a4>)
 801411e:	f240 2266 	movw	r2, #614	; 0x266
 8014122:	498c      	ldr	r1, [pc, #560]	; (8014354 <tcp_write+0x5a8>)
 8014124:	488c      	ldr	r0, [pc, #560]	; (8014358 <tcp_write+0x5ac>)
 8014126:	f007 f899 	bl	801b25c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412c:	685a      	ldr	r2, [r3, #4]
 801412e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014132:	18d0      	adds	r0, r2, r3
 8014134:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014138:	68ba      	ldr	r2, [r7, #8]
 801413a:	4413      	add	r3, r2
 801413c:	8b3a      	ldrh	r2, [r7, #24]
 801413e:	4619      	mov	r1, r3
 8014140:	f006 ffcc 	bl	801b0dc <memcpy>
 8014144:	e02f      	b.n	80141a6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014146:	8a7b      	ldrh	r3, [r7, #18]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d006      	beq.n	801415a <tcp_write+0x3ae>
 801414c:	4b80      	ldr	r3, [pc, #512]	; (8014350 <tcp_write+0x5a4>)
 801414e:	f240 2271 	movw	r2, #625	; 0x271
 8014152:	4982      	ldr	r1, [pc, #520]	; (801435c <tcp_write+0x5b0>)
 8014154:	4880      	ldr	r0, [pc, #512]	; (8014358 <tcp_write+0x5ac>)
 8014156:	f007 f881 	bl	801b25c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801415a:	8b3b      	ldrh	r3, [r7, #24]
 801415c:	2201      	movs	r2, #1
 801415e:	4619      	mov	r1, r3
 8014160:	2036      	movs	r0, #54	; 0x36
 8014162:	f7fa fdab 	bl	800ecbc <pbuf_alloc>
 8014166:	6178      	str	r0, [r7, #20]
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	2b00      	cmp	r3, #0
 801416c:	f000 814b 	beq.w	8014406 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8014170:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014174:	68ba      	ldr	r2, [r7, #8]
 8014176:	441a      	add	r2, r3
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801417c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014180:	b29b      	uxth	r3, r3
 8014182:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014186:	4619      	mov	r1, r3
 8014188:	2036      	movs	r0, #54	; 0x36
 801418a:	f7fa fd97 	bl	800ecbc <pbuf_alloc>
 801418e:	6338      	str	r0, [r7, #48]	; 0x30
 8014190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014192:	2b00      	cmp	r3, #0
 8014194:	d103      	bne.n	801419e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014196:	6978      	ldr	r0, [r7, #20]
 8014198:	f7fb f874 	bl	800f284 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801419c:	e136      	b.n	801440c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801419e:	6979      	ldr	r1, [r7, #20]
 80141a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141a2:	f7fb f93d 	bl	800f420 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80141a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141a8:	f7fb f8fa 	bl	800f3a0 <pbuf_clen>
 80141ac:	4603      	mov	r3, r0
 80141ae:	461a      	mov	r2, r3
 80141b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80141b4:	4413      	add	r3, r2
 80141b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80141ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80141be:	2b09      	cmp	r3, #9
 80141c0:	d903      	bls.n	80141ca <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80141c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141c4:	f7fb f85e 	bl	800f284 <pbuf_free>
      goto memerr;
 80141c8:	e120      	b.n	801440c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80141ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80141d2:	441a      	add	r2, r3
 80141d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141d8:	9300      	str	r3, [sp, #0]
 80141da:	4613      	mov	r3, r2
 80141dc:	2200      	movs	r2, #0
 80141de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80141e0:	68f8      	ldr	r0, [r7, #12]
 80141e2:	f7ff fc51 	bl	8013a88 <tcp_create_segment>
 80141e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80141e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	f000 810d 	beq.w	801440a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80141f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d102      	bne.n	80141fc <tcp_write+0x450>
      queue = seg;
 80141f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141f8:	647b      	str	r3, [r7, #68]	; 0x44
 80141fa:	e00c      	b.n	8014216 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80141fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d106      	bne.n	8014210 <tcp_write+0x464>
 8014202:	4b53      	ldr	r3, [pc, #332]	; (8014350 <tcp_write+0x5a4>)
 8014204:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014208:	4955      	ldr	r1, [pc, #340]	; (8014360 <tcp_write+0x5b4>)
 801420a:	4853      	ldr	r0, [pc, #332]	; (8014358 <tcp_write+0x5ac>)
 801420c:	f007 f826 	bl	801b25c <iprintf>
      prev_seg->next = seg;
 8014210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014212:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014214:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8014216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014218:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801421a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801421e:	8b3b      	ldrh	r3, [r7, #24]
 8014220:	4413      	add	r3, r2
 8014222:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8014226:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801422a:	88fb      	ldrh	r3, [r7, #6]
 801422c:	429a      	cmp	r2, r3
 801422e:	f4ff af3d 	bcc.w	80140ac <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014232:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014234:	2b00      	cmp	r3, #0
 8014236:	d02c      	beq.n	8014292 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801423a:	685b      	ldr	r3, [r3, #4]
 801423c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801423e:	e01e      	b.n	801427e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8014240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014242:	891a      	ldrh	r2, [r3, #8]
 8014244:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014246:	4413      	add	r3, r2
 8014248:	b29a      	uxth	r2, r3
 801424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d110      	bne.n	8014278 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801425c:	8952      	ldrh	r2, [r2, #10]
 801425e:	4413      	add	r3, r2
 8014260:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014262:	68b9      	ldr	r1, [r7, #8]
 8014264:	4618      	mov	r0, r3
 8014266:	f006 ff39 	bl	801b0dc <memcpy>
        p->len += oversize_used;
 801426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426c:	895a      	ldrh	r2, [r3, #10]
 801426e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014270:	4413      	add	r3, r2
 8014272:	b29a      	uxth	r2, r3
 8014274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014276:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014280:	2b00      	cmp	r3, #0
 8014282:	d1dd      	bne.n	8014240 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8014284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014286:	891a      	ldrh	r2, [r3, #8]
 8014288:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801428a:	4413      	add	r3, r2
 801428c:	b29a      	uxth	r2, r3
 801428e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014290:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8014292:	8a7a      	ldrh	r2, [r7, #18]
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801429a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801429c:	2b00      	cmp	r3, #0
 801429e:	d018      	beq.n	80142d2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80142a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d106      	bne.n	80142b4 <tcp_write+0x508>
 80142a6:	4b2a      	ldr	r3, [pc, #168]	; (8014350 <tcp_write+0x5a4>)
 80142a8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80142ac:	492d      	ldr	r1, [pc, #180]	; (8014364 <tcp_write+0x5b8>)
 80142ae:	482a      	ldr	r0, [pc, #168]	; (8014358 <tcp_write+0x5ac>)
 80142b0:	f006 ffd4 	bl	801b25c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80142b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80142ba:	4618      	mov	r0, r3
 80142bc:	f7fb f8b0 	bl	800f420 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80142c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142c2:	891a      	ldrh	r2, [r3, #8]
 80142c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142c6:	891b      	ldrh	r3, [r3, #8]
 80142c8:	4413      	add	r3, r2
 80142ca:	b29a      	uxth	r2, r3
 80142cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142ce:	811a      	strh	r2, [r3, #8]
 80142d0:	e037      	b.n	8014342 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80142d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d034      	beq.n	8014342 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80142d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d003      	beq.n	80142e6 <tcp_write+0x53a>
 80142de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142e0:	685b      	ldr	r3, [r3, #4]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d106      	bne.n	80142f4 <tcp_write+0x548>
 80142e6:	4b1a      	ldr	r3, [pc, #104]	; (8014350 <tcp_write+0x5a4>)
 80142e8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80142ec:	491e      	ldr	r1, [pc, #120]	; (8014368 <tcp_write+0x5bc>)
 80142ee:	481a      	ldr	r0, [pc, #104]	; (8014358 <tcp_write+0x5ac>)
 80142f0:	f006 ffb4 	bl	801b25c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80142f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80142fa:	e009      	b.n	8014310 <tcp_write+0x564>
      p->tot_len += extendlen;
 80142fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fe:	891a      	ldrh	r2, [r3, #8]
 8014300:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014302:	4413      	add	r3, r2
 8014304:	b29a      	uxth	r2, r3
 8014306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014308:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d1f1      	bne.n	80142fc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801431a:	891a      	ldrh	r2, [r3, #8]
 801431c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801431e:	4413      	add	r3, r2
 8014320:	b29a      	uxth	r2, r3
 8014322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014324:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8014326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014328:	895a      	ldrh	r2, [r3, #10]
 801432a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801432c:	4413      	add	r3, r2
 801432e:	b29a      	uxth	r2, r3
 8014330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014332:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8014334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014336:	891a      	ldrh	r2, [r3, #8]
 8014338:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801433a:	4413      	add	r3, r2
 801433c:	b29a      	uxth	r2, r3
 801433e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014340:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8014342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014344:	2b00      	cmp	r3, #0
 8014346:	d111      	bne.n	801436c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801434c:	66da      	str	r2, [r3, #108]	; 0x6c
 801434e:	e010      	b.n	8014372 <tcp_write+0x5c6>
 8014350:	0801e780 	.word	0x0801e780
 8014354:	0801ea20 	.word	0x0801ea20
 8014358:	0801e7d4 	.word	0x0801e7d4
 801435c:	0801ea60 	.word	0x0801ea60
 8014360:	0801ea70 	.word	0x0801ea70
 8014364:	0801ea84 	.word	0x0801ea84
 8014368:	0801eabc 	.word	0x0801eabc
  } else {
    last_unsent->next = queue;
 801436c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801436e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014370:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014376:	88fb      	ldrh	r3, [r7, #6]
 8014378:	441a      	add	r2, r3
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014384:	88fb      	ldrh	r3, [r7, #6]
 8014386:	1ad3      	subs	r3, r2, r3
 8014388:	b29a      	uxth	r2, r3
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014396:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d00e      	beq.n	80143c2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d10a      	bne.n	80143c2 <tcp_write+0x616>
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d106      	bne.n	80143c2 <tcp_write+0x616>
 80143b4:	4b2c      	ldr	r3, [pc, #176]	; (8014468 <tcp_write+0x6bc>)
 80143b6:	f240 3212 	movw	r2, #786	; 0x312
 80143ba:	492c      	ldr	r1, [pc, #176]	; (801446c <tcp_write+0x6c0>)
 80143bc:	482c      	ldr	r0, [pc, #176]	; (8014470 <tcp_write+0x6c4>)
 80143be:	f006 ff4d 	bl	801b25c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80143c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d016      	beq.n	80143f6 <tcp_write+0x64a>
 80143c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143ca:	68db      	ldr	r3, [r3, #12]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d012      	beq.n	80143f6 <tcp_write+0x64a>
 80143d0:	797b      	ldrb	r3, [r7, #5]
 80143d2:	f003 0302 	and.w	r3, r3, #2
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d10d      	bne.n	80143f6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80143da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	899b      	ldrh	r3, [r3, #12]
 80143e0:	b29c      	uxth	r4, r3
 80143e2:	2008      	movs	r0, #8
 80143e4:	f7f9 fba2 	bl	800db2c <lwip_htons>
 80143e8:	4603      	mov	r3, r0
 80143ea:	461a      	mov	r2, r3
 80143ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143ee:	68db      	ldr	r3, [r3, #12]
 80143f0:	4322      	orrs	r2, r4
 80143f2:	b292      	uxth	r2, r2
 80143f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80143f6:	2300      	movs	r3, #0
 80143f8:	e031      	b.n	801445e <tcp_write+0x6b2>
          goto memerr;
 80143fa:	bf00      	nop
 80143fc:	e006      	b.n	801440c <tcp_write+0x660>
            goto memerr;
 80143fe:	bf00      	nop
 8014400:	e004      	b.n	801440c <tcp_write+0x660>
        goto memerr;
 8014402:	bf00      	nop
 8014404:	e002      	b.n	801440c <tcp_write+0x660>
        goto memerr;
 8014406:	bf00      	nop
 8014408:	e000      	b.n	801440c <tcp_write+0x660>
      goto memerr;
 801440a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	8b5b      	ldrh	r3, [r3, #26]
 8014410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014414:	b29a      	uxth	r2, r3
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801441c:	2b00      	cmp	r3, #0
 801441e:	d002      	beq.n	8014426 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8014420:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014422:	f7fa ff2f 	bl	800f284 <pbuf_free>
  }
  if (queue != NULL) {
 8014426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014428:	2b00      	cmp	r3, #0
 801442a:	d002      	beq.n	8014432 <tcp_write+0x686>
    tcp_segs_free(queue);
 801442c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801442e:	f7fc fb6f 	bl	8010b10 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014438:	2b00      	cmp	r3, #0
 801443a:	d00e      	beq.n	801445a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014440:	2b00      	cmp	r3, #0
 8014442:	d10a      	bne.n	801445a <tcp_write+0x6ae>
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014448:	2b00      	cmp	r3, #0
 801444a:	d106      	bne.n	801445a <tcp_write+0x6ae>
 801444c:	4b06      	ldr	r3, [pc, #24]	; (8014468 <tcp_write+0x6bc>)
 801444e:	f240 3227 	movw	r2, #807	; 0x327
 8014452:	4906      	ldr	r1, [pc, #24]	; (801446c <tcp_write+0x6c0>)
 8014454:	4806      	ldr	r0, [pc, #24]	; (8014470 <tcp_write+0x6c4>)
 8014456:	f006 ff01 	bl	801b25c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801445a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801445e:	4618      	mov	r0, r3
 8014460:	375c      	adds	r7, #92	; 0x5c
 8014462:	46bd      	mov	sp, r7
 8014464:	bd90      	pop	{r4, r7, pc}
 8014466:	bf00      	nop
 8014468:	0801e780 	.word	0x0801e780
 801446c:	0801eaf4 	.word	0x0801eaf4
 8014470:	0801e7d4 	.word	0x0801e7d4

08014474 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014474:	b590      	push	{r4, r7, lr}
 8014476:	b08b      	sub	sp, #44	; 0x2c
 8014478:	af02      	add	r7, sp, #8
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	460b      	mov	r3, r1
 801447e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014480:	2300      	movs	r3, #0
 8014482:	61fb      	str	r3, [r7, #28]
 8014484:	2300      	movs	r3, #0
 8014486:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014488:	2300      	movs	r3, #0
 801448a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d106      	bne.n	80144a0 <tcp_split_unsent_seg+0x2c>
 8014492:	4b95      	ldr	r3, [pc, #596]	; (80146e8 <tcp_split_unsent_seg+0x274>)
 8014494:	f240 324b 	movw	r2, #843	; 0x34b
 8014498:	4994      	ldr	r1, [pc, #592]	; (80146ec <tcp_split_unsent_seg+0x278>)
 801449a:	4895      	ldr	r0, [pc, #596]	; (80146f0 <tcp_split_unsent_seg+0x27c>)
 801449c:	f006 fede 	bl	801b25c <iprintf>

  useg = pcb->unsent;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d102      	bne.n	80144b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80144ac:	f04f 33ff 	mov.w	r3, #4294967295
 80144b0:	e116      	b.n	80146e0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80144b2:	887b      	ldrh	r3, [r7, #2]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d109      	bne.n	80144cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80144b8:	4b8b      	ldr	r3, [pc, #556]	; (80146e8 <tcp_split_unsent_seg+0x274>)
 80144ba:	f240 3253 	movw	r2, #851	; 0x353
 80144be:	498d      	ldr	r1, [pc, #564]	; (80146f4 <tcp_split_unsent_seg+0x280>)
 80144c0:	488b      	ldr	r0, [pc, #556]	; (80146f0 <tcp_split_unsent_seg+0x27c>)
 80144c2:	f006 fecb 	bl	801b25c <iprintf>
    return ERR_VAL;
 80144c6:	f06f 0305 	mvn.w	r3, #5
 80144ca:	e109      	b.n	80146e0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	891b      	ldrh	r3, [r3, #8]
 80144d0:	887a      	ldrh	r2, [r7, #2]
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d301      	bcc.n	80144da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80144d6:	2300      	movs	r3, #0
 80144d8:	e102      	b.n	80146e0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144de:	887a      	ldrh	r2, [r7, #2]
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d906      	bls.n	80144f2 <tcp_split_unsent_seg+0x7e>
 80144e4:	4b80      	ldr	r3, [pc, #512]	; (80146e8 <tcp_split_unsent_seg+0x274>)
 80144e6:	f240 325b 	movw	r2, #859	; 0x35b
 80144ea:	4983      	ldr	r1, [pc, #524]	; (80146f8 <tcp_split_unsent_seg+0x284>)
 80144ec:	4880      	ldr	r0, [pc, #512]	; (80146f0 <tcp_split_unsent_seg+0x27c>)
 80144ee:	f006 feb5 	bl	801b25c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	891b      	ldrh	r3, [r3, #8]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d106      	bne.n	8014508 <tcp_split_unsent_seg+0x94>
 80144fa:	4b7b      	ldr	r3, [pc, #492]	; (80146e8 <tcp_split_unsent_seg+0x274>)
 80144fc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014500:	497e      	ldr	r1, [pc, #504]	; (80146fc <tcp_split_unsent_seg+0x288>)
 8014502:	487b      	ldr	r0, [pc, #492]	; (80146f0 <tcp_split_unsent_seg+0x27c>)
 8014504:	f006 feaa 	bl	801b25c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	7a9b      	ldrb	r3, [r3, #10]
 801450c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801450e:	7bfb      	ldrb	r3, [r7, #15]
 8014510:	009b      	lsls	r3, r3, #2
 8014512:	b2db      	uxtb	r3, r3
 8014514:	f003 0304 	and.w	r3, r3, #4
 8014518:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801451a:	697b      	ldr	r3, [r7, #20]
 801451c:	891a      	ldrh	r2, [r3, #8]
 801451e:	887b      	ldrh	r3, [r7, #2]
 8014520:	1ad3      	subs	r3, r2, r3
 8014522:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014524:	7bbb      	ldrb	r3, [r7, #14]
 8014526:	b29a      	uxth	r2, r3
 8014528:	89bb      	ldrh	r3, [r7, #12]
 801452a:	4413      	add	r3, r2
 801452c:	b29b      	uxth	r3, r3
 801452e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014532:	4619      	mov	r1, r3
 8014534:	2036      	movs	r0, #54	; 0x36
 8014536:	f7fa fbc1 	bl	800ecbc <pbuf_alloc>
 801453a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801453c:	693b      	ldr	r3, [r7, #16]
 801453e:	2b00      	cmp	r3, #0
 8014540:	f000 80b7 	beq.w	80146b2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	891a      	ldrh	r2, [r3, #8]
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	891b      	ldrh	r3, [r3, #8]
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	b29a      	uxth	r2, r3
 8014552:	887b      	ldrh	r3, [r7, #2]
 8014554:	4413      	add	r3, r2
 8014556:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	6858      	ldr	r0, [r3, #4]
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	685a      	ldr	r2, [r3, #4]
 8014560:	7bbb      	ldrb	r3, [r7, #14]
 8014562:	18d1      	adds	r1, r2, r3
 8014564:	897b      	ldrh	r3, [r7, #10]
 8014566:	89ba      	ldrh	r2, [r7, #12]
 8014568:	f7fb f892 	bl	800f690 <pbuf_copy_partial>
 801456c:	4603      	mov	r3, r0
 801456e:	461a      	mov	r2, r3
 8014570:	89bb      	ldrh	r3, [r7, #12]
 8014572:	4293      	cmp	r3, r2
 8014574:	f040 809f 	bne.w	80146b6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	899b      	ldrh	r3, [r3, #12]
 801457e:	b29b      	uxth	r3, r3
 8014580:	4618      	mov	r0, r3
 8014582:	f7f9 fad3 	bl	800db2c <lwip_htons>
 8014586:	4603      	mov	r3, r0
 8014588:	b2db      	uxtb	r3, r3
 801458a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801458e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014590:	2300      	movs	r3, #0
 8014592:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014594:	7efb      	ldrb	r3, [r7, #27]
 8014596:	f003 0308 	and.w	r3, r3, #8
 801459a:	2b00      	cmp	r3, #0
 801459c:	d007      	beq.n	80145ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801459e:	7efb      	ldrb	r3, [r7, #27]
 80145a0:	f023 0308 	bic.w	r3, r3, #8
 80145a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80145a6:	7ebb      	ldrb	r3, [r7, #26]
 80145a8:	f043 0308 	orr.w	r3, r3, #8
 80145ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80145ae:	7efb      	ldrb	r3, [r7, #27]
 80145b0:	f003 0301 	and.w	r3, r3, #1
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d007      	beq.n	80145c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80145b8:	7efb      	ldrb	r3, [r7, #27]
 80145ba:	f023 0301 	bic.w	r3, r3, #1
 80145be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80145c0:	7ebb      	ldrb	r3, [r7, #26]
 80145c2:	f043 0301 	orr.w	r3, r3, #1
 80145c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80145c8:	697b      	ldr	r3, [r7, #20]
 80145ca:	68db      	ldr	r3, [r3, #12]
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	4618      	mov	r0, r3
 80145d0:	f7f9 fac1 	bl	800db56 <lwip_htonl>
 80145d4:	4602      	mov	r2, r0
 80145d6:	887b      	ldrh	r3, [r7, #2]
 80145d8:	18d1      	adds	r1, r2, r3
 80145da:	7eba      	ldrb	r2, [r7, #26]
 80145dc:	7bfb      	ldrb	r3, [r7, #15]
 80145de:	9300      	str	r3, [sp, #0]
 80145e0:	460b      	mov	r3, r1
 80145e2:	6939      	ldr	r1, [r7, #16]
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f7ff fa4f 	bl	8013a88 <tcp_create_segment>
 80145ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80145ec:	69fb      	ldr	r3, [r7, #28]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d063      	beq.n	80146ba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80145f2:	697b      	ldr	r3, [r7, #20]
 80145f4:	685b      	ldr	r3, [r3, #4]
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7fa fed2 	bl	800f3a0 <pbuf_clen>
 80145fc:	4603      	mov	r3, r0
 80145fe:	461a      	mov	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014606:	1a9b      	subs	r3, r3, r2
 8014608:	b29a      	uxth	r2, r3
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	6858      	ldr	r0, [r3, #4]
 8014614:	697b      	ldr	r3, [r7, #20]
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	891a      	ldrh	r2, [r3, #8]
 801461a:	89bb      	ldrh	r3, [r7, #12]
 801461c:	1ad3      	subs	r3, r2, r3
 801461e:	b29b      	uxth	r3, r3
 8014620:	4619      	mov	r1, r3
 8014622:	f7fa fca9 	bl	800ef78 <pbuf_realloc>
  useg->len -= remainder;
 8014626:	697b      	ldr	r3, [r7, #20]
 8014628:	891a      	ldrh	r2, [r3, #8]
 801462a:	89bb      	ldrh	r3, [r7, #12]
 801462c:	1ad3      	subs	r3, r2, r3
 801462e:	b29a      	uxth	r2, r3
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014634:	697b      	ldr	r3, [r7, #20]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	899b      	ldrh	r3, [r3, #12]
 801463a:	b29c      	uxth	r4, r3
 801463c:	7efb      	ldrb	r3, [r7, #27]
 801463e:	b29b      	uxth	r3, r3
 8014640:	4618      	mov	r0, r3
 8014642:	f7f9 fa73 	bl	800db2c <lwip_htons>
 8014646:	4603      	mov	r3, r0
 8014648:	461a      	mov	r2, r3
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	4322      	orrs	r2, r4
 8014650:	b292      	uxth	r2, r2
 8014652:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	4618      	mov	r0, r3
 801465a:	f7fa fea1 	bl	800f3a0 <pbuf_clen>
 801465e:	4603      	mov	r3, r0
 8014660:	461a      	mov	r2, r3
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014668:	4413      	add	r3, r2
 801466a:	b29a      	uxth	r2, r3
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014672:	69fb      	ldr	r3, [r7, #28]
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	4618      	mov	r0, r3
 8014678:	f7fa fe92 	bl	800f3a0 <pbuf_clen>
 801467c:	4603      	mov	r3, r0
 801467e:	461a      	mov	r2, r3
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014686:	4413      	add	r3, r2
 8014688:	b29a      	uxth	r2, r3
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	681a      	ldr	r2, [r3, #0]
 8014694:	69fb      	ldr	r3, [r7, #28]
 8014696:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014698:	697b      	ldr	r3, [r7, #20]
 801469a:	69fa      	ldr	r2, [r7, #28]
 801469c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d103      	bne.n	80146ae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80146ae:	2300      	movs	r3, #0
 80146b0:	e016      	b.n	80146e0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80146b2:	bf00      	nop
 80146b4:	e002      	b.n	80146bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80146b6:	bf00      	nop
 80146b8:	e000      	b.n	80146bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80146ba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d006      	beq.n	80146d0 <tcp_split_unsent_seg+0x25c>
 80146c2:	4b09      	ldr	r3, [pc, #36]	; (80146e8 <tcp_split_unsent_seg+0x274>)
 80146c4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80146c8:	490d      	ldr	r1, [pc, #52]	; (8014700 <tcp_split_unsent_seg+0x28c>)
 80146ca:	4809      	ldr	r0, [pc, #36]	; (80146f0 <tcp_split_unsent_seg+0x27c>)
 80146cc:	f006 fdc6 	bl	801b25c <iprintf>
  if (p != NULL) {
 80146d0:	693b      	ldr	r3, [r7, #16]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d002      	beq.n	80146dc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80146d6:	6938      	ldr	r0, [r7, #16]
 80146d8:	f7fa fdd4 	bl	800f284 <pbuf_free>
  }

  return ERR_MEM;
 80146dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	3724      	adds	r7, #36	; 0x24
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd90      	pop	{r4, r7, pc}
 80146e8:	0801e780 	.word	0x0801e780
 80146ec:	0801eb14 	.word	0x0801eb14
 80146f0:	0801e7d4 	.word	0x0801e7d4
 80146f4:	0801eb38 	.word	0x0801eb38
 80146f8:	0801eb5c 	.word	0x0801eb5c
 80146fc:	0801eb6c 	.word	0x0801eb6c
 8014700:	0801eb7c 	.word	0x0801eb7c

08014704 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014704:	b590      	push	{r4, r7, lr}
 8014706:	b085      	sub	sp, #20
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d106      	bne.n	8014720 <tcp_send_fin+0x1c>
 8014712:	4b21      	ldr	r3, [pc, #132]	; (8014798 <tcp_send_fin+0x94>)
 8014714:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014718:	4920      	ldr	r1, [pc, #128]	; (801479c <tcp_send_fin+0x98>)
 801471a:	4821      	ldr	r0, [pc, #132]	; (80147a0 <tcp_send_fin+0x9c>)
 801471c:	f006 fd9e 	bl	801b25c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014724:	2b00      	cmp	r3, #0
 8014726:	d02e      	beq.n	8014786 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801472c:	60fb      	str	r3, [r7, #12]
 801472e:	e002      	b.n	8014736 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d1f8      	bne.n	8014730 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	68db      	ldr	r3, [r3, #12]
 8014742:	899b      	ldrh	r3, [r3, #12]
 8014744:	b29b      	uxth	r3, r3
 8014746:	4618      	mov	r0, r3
 8014748:	f7f9 f9f0 	bl	800db2c <lwip_htons>
 801474c:	4603      	mov	r3, r0
 801474e:	b2db      	uxtb	r3, r3
 8014750:	f003 0307 	and.w	r3, r3, #7
 8014754:	2b00      	cmp	r3, #0
 8014756:	d116      	bne.n	8014786 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	68db      	ldr	r3, [r3, #12]
 801475c:	899b      	ldrh	r3, [r3, #12]
 801475e:	b29c      	uxth	r4, r3
 8014760:	2001      	movs	r0, #1
 8014762:	f7f9 f9e3 	bl	800db2c <lwip_htons>
 8014766:	4603      	mov	r3, r0
 8014768:	461a      	mov	r2, r3
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	68db      	ldr	r3, [r3, #12]
 801476e:	4322      	orrs	r2, r4
 8014770:	b292      	uxth	r2, r2
 8014772:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	8b5b      	ldrh	r3, [r3, #26]
 8014778:	f043 0320 	orr.w	r3, r3, #32
 801477c:	b29a      	uxth	r2, r3
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014782:	2300      	movs	r3, #0
 8014784:	e004      	b.n	8014790 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014786:	2101      	movs	r1, #1
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f000 f80b 	bl	80147a4 <tcp_enqueue_flags>
 801478e:	4603      	mov	r3, r0
}
 8014790:	4618      	mov	r0, r3
 8014792:	3714      	adds	r7, #20
 8014794:	46bd      	mov	sp, r7
 8014796:	bd90      	pop	{r4, r7, pc}
 8014798:	0801e780 	.word	0x0801e780
 801479c:	0801eb88 	.word	0x0801eb88
 80147a0:	0801e7d4 	.word	0x0801e7d4

080147a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b08a      	sub	sp, #40	; 0x28
 80147a8:	af02      	add	r7, sp, #8
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	460b      	mov	r3, r1
 80147ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80147b0:	2300      	movs	r3, #0
 80147b2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80147b4:	2300      	movs	r3, #0
 80147b6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80147b8:	78fb      	ldrb	r3, [r7, #3]
 80147ba:	f003 0303 	and.w	r3, r3, #3
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d106      	bne.n	80147d0 <tcp_enqueue_flags+0x2c>
 80147c2:	4b67      	ldr	r3, [pc, #412]	; (8014960 <tcp_enqueue_flags+0x1bc>)
 80147c4:	f240 4211 	movw	r2, #1041	; 0x411
 80147c8:	4966      	ldr	r1, [pc, #408]	; (8014964 <tcp_enqueue_flags+0x1c0>)
 80147ca:	4867      	ldr	r0, [pc, #412]	; (8014968 <tcp_enqueue_flags+0x1c4>)
 80147cc:	f006 fd46 	bl	801b25c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d106      	bne.n	80147e4 <tcp_enqueue_flags+0x40>
 80147d6:	4b62      	ldr	r3, [pc, #392]	; (8014960 <tcp_enqueue_flags+0x1bc>)
 80147d8:	f240 4213 	movw	r2, #1043	; 0x413
 80147dc:	4963      	ldr	r1, [pc, #396]	; (801496c <tcp_enqueue_flags+0x1c8>)
 80147de:	4862      	ldr	r0, [pc, #392]	; (8014968 <tcp_enqueue_flags+0x1c4>)
 80147e0:	f006 fd3c 	bl	801b25c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80147e4:	78fb      	ldrb	r3, [r7, #3]
 80147e6:	f003 0302 	and.w	r3, r3, #2
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d001      	beq.n	80147f2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80147ee:	2301      	movs	r3, #1
 80147f0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80147f2:	7ffb      	ldrb	r3, [r7, #31]
 80147f4:	009b      	lsls	r3, r3, #2
 80147f6:	b2db      	uxtb	r3, r3
 80147f8:	f003 0304 	and.w	r3, r3, #4
 80147fc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80147fe:	7dfb      	ldrb	r3, [r7, #23]
 8014800:	b29b      	uxth	r3, r3
 8014802:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014806:	4619      	mov	r1, r3
 8014808:	2036      	movs	r0, #54	; 0x36
 801480a:	f7fa fa57 	bl	800ecbc <pbuf_alloc>
 801480e:	6138      	str	r0, [r7, #16]
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d109      	bne.n	801482a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	8b5b      	ldrh	r3, [r3, #26]
 801481a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801481e:	b29a      	uxth	r2, r3
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014824:	f04f 33ff 	mov.w	r3, #4294967295
 8014828:	e095      	b.n	8014956 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	895a      	ldrh	r2, [r3, #10]
 801482e:	7dfb      	ldrb	r3, [r7, #23]
 8014830:	b29b      	uxth	r3, r3
 8014832:	429a      	cmp	r2, r3
 8014834:	d206      	bcs.n	8014844 <tcp_enqueue_flags+0xa0>
 8014836:	4b4a      	ldr	r3, [pc, #296]	; (8014960 <tcp_enqueue_flags+0x1bc>)
 8014838:	f240 4239 	movw	r2, #1081	; 0x439
 801483c:	494c      	ldr	r1, [pc, #304]	; (8014970 <tcp_enqueue_flags+0x1cc>)
 801483e:	484a      	ldr	r0, [pc, #296]	; (8014968 <tcp_enqueue_flags+0x1c4>)
 8014840:	f006 fd0c 	bl	801b25c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014848:	78fa      	ldrb	r2, [r7, #3]
 801484a:	7ffb      	ldrb	r3, [r7, #31]
 801484c:	9300      	str	r3, [sp, #0]
 801484e:	460b      	mov	r3, r1
 8014850:	6939      	ldr	r1, [r7, #16]
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f7ff f918 	bl	8013a88 <tcp_create_segment>
 8014858:	60f8      	str	r0, [r7, #12]
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d109      	bne.n	8014874 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	8b5b      	ldrh	r3, [r3, #26]
 8014864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014868:	b29a      	uxth	r2, r3
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801486e:	f04f 33ff 	mov.w	r3, #4294967295
 8014872:	e070      	b.n	8014956 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	68db      	ldr	r3, [r3, #12]
 8014878:	f003 0303 	and.w	r3, r3, #3
 801487c:	2b00      	cmp	r3, #0
 801487e:	d006      	beq.n	801488e <tcp_enqueue_flags+0xea>
 8014880:	4b37      	ldr	r3, [pc, #220]	; (8014960 <tcp_enqueue_flags+0x1bc>)
 8014882:	f240 4242 	movw	r2, #1090	; 0x442
 8014886:	493b      	ldr	r1, [pc, #236]	; (8014974 <tcp_enqueue_flags+0x1d0>)
 8014888:	4837      	ldr	r0, [pc, #220]	; (8014968 <tcp_enqueue_flags+0x1c4>)
 801488a:	f006 fce7 	bl	801b25c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	891b      	ldrh	r3, [r3, #8]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d006      	beq.n	80148a4 <tcp_enqueue_flags+0x100>
 8014896:	4b32      	ldr	r3, [pc, #200]	; (8014960 <tcp_enqueue_flags+0x1bc>)
 8014898:	f240 4243 	movw	r2, #1091	; 0x443
 801489c:	4936      	ldr	r1, [pc, #216]	; (8014978 <tcp_enqueue_flags+0x1d4>)
 801489e:	4832      	ldr	r0, [pc, #200]	; (8014968 <tcp_enqueue_flags+0x1c4>)
 80148a0:	f006 fcdc 	bl	801b25c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d103      	bne.n	80148b4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	68fa      	ldr	r2, [r7, #12]
 80148b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80148b2:	e00d      	b.n	80148d0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148b8:	61bb      	str	r3, [r7, #24]
 80148ba:	e002      	b.n	80148c2 <tcp_enqueue_flags+0x11e>
 80148bc:	69bb      	ldr	r3, [r7, #24]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	61bb      	str	r3, [r7, #24]
 80148c2:	69bb      	ldr	r3, [r7, #24]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d1f8      	bne.n	80148bc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80148ca:	69bb      	ldr	r3, [r7, #24]
 80148cc:	68fa      	ldr	r2, [r7, #12]
 80148ce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2200      	movs	r2, #0
 80148d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80148d8:	78fb      	ldrb	r3, [r7, #3]
 80148da:	f003 0302 	and.w	r3, r3, #2
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d104      	bne.n	80148ec <tcp_enqueue_flags+0x148>
 80148e2:	78fb      	ldrb	r3, [r7, #3]
 80148e4:	f003 0301 	and.w	r3, r3, #1
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d004      	beq.n	80148f6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80148f0:	1c5a      	adds	r2, r3, #1
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80148f6:	78fb      	ldrb	r3, [r7, #3]
 80148f8:	f003 0301 	and.w	r3, r3, #1
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d006      	beq.n	801490e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	8b5b      	ldrh	r3, [r3, #26]
 8014904:	f043 0320 	orr.w	r3, r3, #32
 8014908:	b29a      	uxth	r2, r3
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	685b      	ldr	r3, [r3, #4]
 8014912:	4618      	mov	r0, r3
 8014914:	f7fa fd44 	bl	800f3a0 <pbuf_clen>
 8014918:	4603      	mov	r3, r0
 801491a:	461a      	mov	r2, r3
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014922:	4413      	add	r3, r2
 8014924:	b29a      	uxth	r2, r3
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014932:	2b00      	cmp	r3, #0
 8014934:	d00e      	beq.n	8014954 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801493a:	2b00      	cmp	r3, #0
 801493c:	d10a      	bne.n	8014954 <tcp_enqueue_flags+0x1b0>
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014942:	2b00      	cmp	r3, #0
 8014944:	d106      	bne.n	8014954 <tcp_enqueue_flags+0x1b0>
 8014946:	4b06      	ldr	r3, [pc, #24]	; (8014960 <tcp_enqueue_flags+0x1bc>)
 8014948:	f240 4265 	movw	r2, #1125	; 0x465
 801494c:	490b      	ldr	r1, [pc, #44]	; (801497c <tcp_enqueue_flags+0x1d8>)
 801494e:	4806      	ldr	r0, [pc, #24]	; (8014968 <tcp_enqueue_flags+0x1c4>)
 8014950:	f006 fc84 	bl	801b25c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014954:	2300      	movs	r3, #0
}
 8014956:	4618      	mov	r0, r3
 8014958:	3720      	adds	r7, #32
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}
 801495e:	bf00      	nop
 8014960:	0801e780 	.word	0x0801e780
 8014964:	0801eba4 	.word	0x0801eba4
 8014968:	0801e7d4 	.word	0x0801e7d4
 801496c:	0801ebfc 	.word	0x0801ebfc
 8014970:	0801ec1c 	.word	0x0801ec1c
 8014974:	0801ec58 	.word	0x0801ec58
 8014978:	0801ec70 	.word	0x0801ec70
 801497c:	0801ec9c 	.word	0x0801ec9c

08014980 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014980:	b5b0      	push	{r4, r5, r7, lr}
 8014982:	b08a      	sub	sp, #40	; 0x28
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d106      	bne.n	801499c <tcp_output+0x1c>
 801498e:	4b9e      	ldr	r3, [pc, #632]	; (8014c08 <tcp_output+0x288>)
 8014990:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014994:	499d      	ldr	r1, [pc, #628]	; (8014c0c <tcp_output+0x28c>)
 8014996:	489e      	ldr	r0, [pc, #632]	; (8014c10 <tcp_output+0x290>)
 8014998:	f006 fc60 	bl	801b25c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	7d1b      	ldrb	r3, [r3, #20]
 80149a0:	2b01      	cmp	r3, #1
 80149a2:	d106      	bne.n	80149b2 <tcp_output+0x32>
 80149a4:	4b98      	ldr	r3, [pc, #608]	; (8014c08 <tcp_output+0x288>)
 80149a6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80149aa:	499a      	ldr	r1, [pc, #616]	; (8014c14 <tcp_output+0x294>)
 80149ac:	4898      	ldr	r0, [pc, #608]	; (8014c10 <tcp_output+0x290>)
 80149ae:	f006 fc55 	bl	801b25c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80149b2:	4b99      	ldr	r3, [pc, #612]	; (8014c18 <tcp_output+0x298>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d101      	bne.n	80149c0 <tcp_output+0x40>
    return ERR_OK;
 80149bc:	2300      	movs	r3, #0
 80149be:	e1ce      	b.n	8014d5e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80149cc:	4293      	cmp	r3, r2
 80149ce:	bf28      	it	cs
 80149d0:	4613      	movcs	r3, r2
 80149d2:	b29b      	uxth	r3, r3
 80149d4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149da:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80149dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d10b      	bne.n	80149fa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	8b5b      	ldrh	r3, [r3, #26]
 80149e6:	f003 0302 	and.w	r3, r3, #2
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	f000 81aa 	beq.w	8014d44 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f000 fdcb 	bl	801558c <tcp_send_empty_ack>
 80149f6:	4603      	mov	r3, r0
 80149f8:	e1b1      	b.n	8014d5e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80149fa:	6879      	ldr	r1, [r7, #4]
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	3304      	adds	r3, #4
 8014a00:	461a      	mov	r2, r3
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f7ff f824 	bl	8013a50 <tcp_route>
 8014a08:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d102      	bne.n	8014a16 <tcp_output+0x96>
    return ERR_RTE;
 8014a10:	f06f 0303 	mvn.w	r3, #3
 8014a14:	e1a3      	b.n	8014d5e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d003      	beq.n	8014a24 <tcp_output+0xa4>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d111      	bne.n	8014a48 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d002      	beq.n	8014a30 <tcp_output+0xb0>
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	3304      	adds	r3, #4
 8014a2e:	e000      	b.n	8014a32 <tcp_output+0xb2>
 8014a30:	2300      	movs	r3, #0
 8014a32:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d102      	bne.n	8014a40 <tcp_output+0xc0>
      return ERR_RTE;
 8014a3a:	f06f 0303 	mvn.w	r3, #3
 8014a3e:	e18e      	b.n	8014d5e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014a40:	693b      	ldr	r3, [r7, #16]
 8014a42:	681a      	ldr	r2, [r3, #0]
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	685b      	ldr	r3, [r3, #4]
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7f9 f881 	bl	800db56 <lwip_htonl>
 8014a54:	4602      	mov	r2, r0
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a5a:	1ad3      	subs	r3, r2, r3
 8014a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a5e:	8912      	ldrh	r2, [r2, #8]
 8014a60:	4413      	add	r3, r2
 8014a62:	69ba      	ldr	r2, [r7, #24]
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d227      	bcs.n	8014ab8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a6e:	461a      	mov	r2, r3
 8014a70:	69bb      	ldr	r3, [r7, #24]
 8014a72:	4293      	cmp	r3, r2
 8014a74:	d114      	bne.n	8014aa0 <tcp_output+0x120>
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d110      	bne.n	8014aa0 <tcp_output+0x120>
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d10b      	bne.n	8014aa0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	2201      	movs	r2, #1
 8014a94:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	8b5b      	ldrh	r3, [r3, #26]
 8014aa4:	f003 0302 	and.w	r3, r3, #2
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	f000 814d 	beq.w	8014d48 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f000 fd6c 	bl	801558c <tcp_send_empty_ack>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	e152      	b.n	8014d5e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2200      	movs	r2, #0
 8014abc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ac4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014ac6:	6a3b      	ldr	r3, [r7, #32]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f000 811c 	beq.w	8014d06 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014ace:	e002      	b.n	8014ad6 <tcp_output+0x156>
 8014ad0:	6a3b      	ldr	r3, [r7, #32]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	623b      	str	r3, [r7, #32]
 8014ad6:	6a3b      	ldr	r3, [r7, #32]
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d1f8      	bne.n	8014ad0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014ade:	e112      	b.n	8014d06 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae2:	68db      	ldr	r3, [r3, #12]
 8014ae4:	899b      	ldrh	r3, [r3, #12]
 8014ae6:	b29b      	uxth	r3, r3
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7f9 f81f 	bl	800db2c <lwip_htons>
 8014aee:	4603      	mov	r3, r0
 8014af0:	b2db      	uxtb	r3, r3
 8014af2:	f003 0304 	and.w	r3, r3, #4
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d006      	beq.n	8014b08 <tcp_output+0x188>
 8014afa:	4b43      	ldr	r3, [pc, #268]	; (8014c08 <tcp_output+0x288>)
 8014afc:	f240 5236 	movw	r2, #1334	; 0x536
 8014b00:	4946      	ldr	r1, [pc, #280]	; (8014c1c <tcp_output+0x29c>)
 8014b02:	4843      	ldr	r0, [pc, #268]	; (8014c10 <tcp_output+0x290>)
 8014b04:	f006 fbaa 	bl	801b25c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d01f      	beq.n	8014b50 <tcp_output+0x1d0>
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	8b5b      	ldrh	r3, [r3, #26]
 8014b14:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d119      	bne.n	8014b50 <tcp_output+0x1d0>
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d00b      	beq.n	8014b3c <tcp_output+0x1bc>
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d110      	bne.n	8014b50 <tcp_output+0x1d0>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b32:	891a      	ldrh	r2, [r3, #8]
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d209      	bcs.n	8014b50 <tcp_output+0x1d0>
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d004      	beq.n	8014b50 <tcp_output+0x1d0>
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b4c:	2b08      	cmp	r3, #8
 8014b4e:	d901      	bls.n	8014b54 <tcp_output+0x1d4>
 8014b50:	2301      	movs	r3, #1
 8014b52:	e000      	b.n	8014b56 <tcp_output+0x1d6>
 8014b54:	2300      	movs	r3, #0
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d106      	bne.n	8014b68 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	8b5b      	ldrh	r3, [r3, #26]
 8014b5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	f000 80e4 	beq.w	8014d30 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	7d1b      	ldrb	r3, [r3, #20]
 8014b6c:	2b02      	cmp	r3, #2
 8014b6e:	d00d      	beq.n	8014b8c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b72:	68db      	ldr	r3, [r3, #12]
 8014b74:	899b      	ldrh	r3, [r3, #12]
 8014b76:	b29c      	uxth	r4, r3
 8014b78:	2010      	movs	r0, #16
 8014b7a:	f7f8 ffd7 	bl	800db2c <lwip_htons>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	461a      	mov	r2, r3
 8014b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	4322      	orrs	r2, r4
 8014b88:	b292      	uxth	r2, r2
 8014b8a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014b8c:	697a      	ldr	r2, [r7, #20]
 8014b8e:	6879      	ldr	r1, [r7, #4]
 8014b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b92:	f000 f909 	bl	8014da8 <tcp_output_segment>
 8014b96:	4603      	mov	r3, r0
 8014b98:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d009      	beq.n	8014bb6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	8b5b      	ldrh	r3, [r3, #26]
 8014ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	835a      	strh	r2, [r3, #26]
      return err;
 8014bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014bb4:	e0d3      	b.n	8014d5e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb8:	681a      	ldr	r2, [r3, #0]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	7d1b      	ldrb	r3, [r3, #20]
 8014bc2:	2b02      	cmp	r3, #2
 8014bc4:	d006      	beq.n	8014bd4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	8b5b      	ldrh	r3, [r3, #26]
 8014bca:	f023 0303 	bic.w	r3, r3, #3
 8014bce:	b29a      	uxth	r2, r3
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd6:	68db      	ldr	r3, [r3, #12]
 8014bd8:	685b      	ldr	r3, [r3, #4]
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7f8 ffbb 	bl	800db56 <lwip_htonl>
 8014be0:	4604      	mov	r4, r0
 8014be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be4:	891b      	ldrh	r3, [r3, #8]
 8014be6:	461d      	mov	r5, r3
 8014be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	899b      	ldrh	r3, [r3, #12]
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f7f8 ff9b 	bl	800db2c <lwip_htons>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	b2db      	uxtb	r3, r3
 8014bfa:	f003 0303 	and.w	r3, r3, #3
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d00e      	beq.n	8014c20 <tcp_output+0x2a0>
 8014c02:	2301      	movs	r3, #1
 8014c04:	e00d      	b.n	8014c22 <tcp_output+0x2a2>
 8014c06:	bf00      	nop
 8014c08:	0801e780 	.word	0x0801e780
 8014c0c:	0801ecc4 	.word	0x0801ecc4
 8014c10:	0801e7d4 	.word	0x0801e7d4
 8014c14:	0801ecdc 	.word	0x0801ecdc
 8014c18:	20011064 	.word	0x20011064
 8014c1c:	0801ed04 	.word	0x0801ed04
 8014c20:	2300      	movs	r3, #0
 8014c22:	442b      	add	r3, r5
 8014c24:	4423      	add	r3, r4
 8014c26:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	1ad3      	subs	r3, r2, r3
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	da02      	bge.n	8014c3a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	68ba      	ldr	r2, [r7, #8]
 8014c38:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3c:	891b      	ldrh	r3, [r3, #8]
 8014c3e:	461c      	mov	r4, r3
 8014c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	899b      	ldrh	r3, [r3, #12]
 8014c46:	b29b      	uxth	r3, r3
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7f8 ff6f 	bl	800db2c <lwip_htons>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	b2db      	uxtb	r3, r3
 8014c52:	f003 0303 	and.w	r3, r3, #3
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d001      	beq.n	8014c5e <tcp_output+0x2de>
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	e000      	b.n	8014c60 <tcp_output+0x2e0>
 8014c5e:	2300      	movs	r3, #0
 8014c60:	4423      	add	r3, r4
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d049      	beq.n	8014cfa <tcp_output+0x37a>
      seg->next = NULL;
 8014c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c68:	2200      	movs	r2, #0
 8014c6a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d105      	bne.n	8014c80 <tcp_output+0x300>
        pcb->unacked = seg;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c78:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c7c:	623b      	str	r3, [r7, #32]
 8014c7e:	e03f      	b.n	8014d00 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c82:	68db      	ldr	r3, [r3, #12]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	4618      	mov	r0, r3
 8014c88:	f7f8 ff65 	bl	800db56 <lwip_htonl>
 8014c8c:	4604      	mov	r4, r0
 8014c8e:	6a3b      	ldr	r3, [r7, #32]
 8014c90:	68db      	ldr	r3, [r3, #12]
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7f8 ff5e 	bl	800db56 <lwip_htonl>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	1ae3      	subs	r3, r4, r3
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	da24      	bge.n	8014cec <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	3370      	adds	r3, #112	; 0x70
 8014ca6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014ca8:	e002      	b.n	8014cb0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014cb0:	69fb      	ldr	r3, [r7, #28]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d011      	beq.n	8014cdc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014cb8:	69fb      	ldr	r3, [r7, #28]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7f8 ff48 	bl	800db56 <lwip_htonl>
 8014cc6:	4604      	mov	r4, r0
 8014cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7f8 ff41 	bl	800db56 <lwip_htonl>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	dbe6      	blt.n	8014caa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014cdc:	69fb      	ldr	r3, [r7, #28]
 8014cde:	681a      	ldr	r2, [r3, #0]
 8014ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014ce4:	69fb      	ldr	r3, [r7, #28]
 8014ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ce8:	601a      	str	r2, [r3, #0]
 8014cea:	e009      	b.n	8014d00 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014cec:	6a3b      	ldr	r3, [r7, #32]
 8014cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cf0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014cf2:	6a3b      	ldr	r3, [r7, #32]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	623b      	str	r3, [r7, #32]
 8014cf8:	e002      	b.n	8014d00 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014cfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cfc:	f7fb ff1d 	bl	8010b3a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d04:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d012      	beq.n	8014d32 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	685b      	ldr	r3, [r3, #4]
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7f8 ff1f 	bl	800db56 <lwip_htonl>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d1e:	1ad3      	subs	r3, r2, r3
 8014d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d22:	8912      	ldrh	r2, [r2, #8]
 8014d24:	4413      	add	r3, r2
  while (seg != NULL &&
 8014d26:	69ba      	ldr	r2, [r7, #24]
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	f4bf aed9 	bcs.w	8014ae0 <tcp_output+0x160>
 8014d2e:	e000      	b.n	8014d32 <tcp_output+0x3b2>
      break;
 8014d30:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d108      	bne.n	8014d4c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014d42:	e004      	b.n	8014d4e <tcp_output+0x3ce>
    goto output_done;
 8014d44:	bf00      	nop
 8014d46:	e002      	b.n	8014d4e <tcp_output+0x3ce>
    goto output_done;
 8014d48:	bf00      	nop
 8014d4a:	e000      	b.n	8014d4e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014d4c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	8b5b      	ldrh	r3, [r3, #26]
 8014d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d56:	b29a      	uxth	r2, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014d5c:	2300      	movs	r3, #0
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3728      	adds	r7, #40	; 0x28
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bdb0      	pop	{r4, r5, r7, pc}
 8014d66:	bf00      	nop

08014d68 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d106      	bne.n	8014d84 <tcp_output_segment_busy+0x1c>
 8014d76:	4b09      	ldr	r3, [pc, #36]	; (8014d9c <tcp_output_segment_busy+0x34>)
 8014d78:	f240 529a 	movw	r2, #1434	; 0x59a
 8014d7c:	4908      	ldr	r1, [pc, #32]	; (8014da0 <tcp_output_segment_busy+0x38>)
 8014d7e:	4809      	ldr	r0, [pc, #36]	; (8014da4 <tcp_output_segment_busy+0x3c>)
 8014d80:	f006 fa6c 	bl	801b25c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	7b9b      	ldrb	r3, [r3, #14]
 8014d8a:	2b01      	cmp	r3, #1
 8014d8c:	d001      	beq.n	8014d92 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014d8e:	2301      	movs	r3, #1
 8014d90:	e000      	b.n	8014d94 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014d92:	2300      	movs	r3, #0
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}
 8014d9c:	0801e780 	.word	0x0801e780
 8014da0:	0801ed1c 	.word	0x0801ed1c
 8014da4:	0801e7d4 	.word	0x0801e7d4

08014da8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014da8:	b5b0      	push	{r4, r5, r7, lr}
 8014daa:	b08c      	sub	sp, #48	; 0x30
 8014dac:	af04      	add	r7, sp, #16
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d106      	bne.n	8014dc8 <tcp_output_segment+0x20>
 8014dba:	4b63      	ldr	r3, [pc, #396]	; (8014f48 <tcp_output_segment+0x1a0>)
 8014dbc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014dc0:	4962      	ldr	r1, [pc, #392]	; (8014f4c <tcp_output_segment+0x1a4>)
 8014dc2:	4863      	ldr	r0, [pc, #396]	; (8014f50 <tcp_output_segment+0x1a8>)
 8014dc4:	f006 fa4a 	bl	801b25c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d106      	bne.n	8014ddc <tcp_output_segment+0x34>
 8014dce:	4b5e      	ldr	r3, [pc, #376]	; (8014f48 <tcp_output_segment+0x1a0>)
 8014dd0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014dd4:	495f      	ldr	r1, [pc, #380]	; (8014f54 <tcp_output_segment+0x1ac>)
 8014dd6:	485e      	ldr	r0, [pc, #376]	; (8014f50 <tcp_output_segment+0x1a8>)
 8014dd8:	f006 fa40 	bl	801b25c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d106      	bne.n	8014df0 <tcp_output_segment+0x48>
 8014de2:	4b59      	ldr	r3, [pc, #356]	; (8014f48 <tcp_output_segment+0x1a0>)
 8014de4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014de8:	495b      	ldr	r1, [pc, #364]	; (8014f58 <tcp_output_segment+0x1b0>)
 8014dea:	4859      	ldr	r0, [pc, #356]	; (8014f50 <tcp_output_segment+0x1a8>)
 8014dec:	f006 fa36 	bl	801b25c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014df0:	68f8      	ldr	r0, [r7, #12]
 8014df2:	f7ff ffb9 	bl	8014d68 <tcp_output_segment_busy>
 8014df6:	4603      	mov	r3, r0
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d001      	beq.n	8014e00 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	e09f      	b.n	8014f40 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	68dc      	ldr	r4, [r3, #12]
 8014e08:	4610      	mov	r0, r2
 8014e0a:	f7f8 fea4 	bl	800db56 <lwip_htonl>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	68dc      	ldr	r4, [r3, #12]
 8014e1a:	4610      	mov	r0, r2
 8014e1c:	f7f8 fe86 	bl	800db2c <lwip_htons>
 8014e20:	4603      	mov	r3, r0
 8014e22:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e28:	68ba      	ldr	r2, [r7, #8]
 8014e2a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014e2c:	441a      	add	r2, r3
 8014e2e:	68bb      	ldr	r3, [r7, #8]
 8014e30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	68db      	ldr	r3, [r3, #12]
 8014e36:	3314      	adds	r3, #20
 8014e38:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	7a9b      	ldrb	r3, [r3, #10]
 8014e3e:	f003 0301 	and.w	r3, r3, #1
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d015      	beq.n	8014e72 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014e46:	68bb      	ldr	r3, [r7, #8]
 8014e48:	3304      	adds	r3, #4
 8014e4a:	461a      	mov	r2, r3
 8014e4c:	6879      	ldr	r1, [r7, #4]
 8014e4e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014e52:	f7fc fa37 	bl	80112c4 <tcp_eff_send_mss_netif>
 8014e56:	4603      	mov	r3, r0
 8014e58:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014e5a:	8b7b      	ldrh	r3, [r7, #26]
 8014e5c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7f8 fe78 	bl	800db56 <lwip_htonl>
 8014e66:	4602      	mov	r2, r0
 8014e68:	69fb      	ldr	r3, [r7, #28]
 8014e6a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014e6c:	69fb      	ldr	r3, [r7, #28]
 8014e6e:	3304      	adds	r3, #4
 8014e70:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	da02      	bge.n	8014e82 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	2200      	movs	r2, #0
 8014e80:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014e82:	68bb      	ldr	r3, [r7, #8]
 8014e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d10c      	bne.n	8014ea4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014e8a:	4b34      	ldr	r3, [pc, #208]	; (8014f5c <tcp_output_segment+0x1b4>)
 8014e8c:	681a      	ldr	r2, [r3, #0]
 8014e8e:	68bb      	ldr	r3, [r7, #8]
 8014e90:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	68db      	ldr	r3, [r3, #12]
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7f8 fe5c 	bl	800db56 <lwip_htonl>
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	68da      	ldr	r2, [r3, #12]
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	1ad3      	subs	r3, r2, r3
 8014eb0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	8959      	ldrh	r1, [r3, #10]
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	685b      	ldr	r3, [r3, #4]
 8014ebc:	8b3a      	ldrh	r2, [r7, #24]
 8014ebe:	1a8a      	subs	r2, r1, r2
 8014ec0:	b292      	uxth	r2, r2
 8014ec2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	685b      	ldr	r3, [r3, #4]
 8014ec8:	8919      	ldrh	r1, [r3, #8]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	685b      	ldr	r3, [r3, #4]
 8014ece:	8b3a      	ldrh	r2, [r7, #24]
 8014ed0:	1a8a      	subs	r2, r1, r2
 8014ed2:	b292      	uxth	r2, r2
 8014ed4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	68fa      	ldr	r2, [r7, #12]
 8014edc:	68d2      	ldr	r2, [r2, #12]
 8014ede:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	68db      	ldr	r3, [r3, #12]
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	741a      	strb	r2, [r3, #16]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	68db      	ldr	r3, [r3, #12]
 8014ef0:	f103 0214 	add.w	r2, r3, #20
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	7a9b      	ldrb	r3, [r3, #10]
 8014ef8:	009b      	lsls	r3, r3, #2
 8014efa:	f003 0304 	and.w	r3, r3, #4
 8014efe:	4413      	add	r3, r2
 8014f00:	69fa      	ldr	r2, [r7, #28]
 8014f02:	429a      	cmp	r2, r3
 8014f04:	d006      	beq.n	8014f14 <tcp_output_segment+0x16c>
 8014f06:	4b10      	ldr	r3, [pc, #64]	; (8014f48 <tcp_output_segment+0x1a0>)
 8014f08:	f240 621c 	movw	r2, #1564	; 0x61c
 8014f0c:	4914      	ldr	r1, [pc, #80]	; (8014f60 <tcp_output_segment+0x1b8>)
 8014f0e:	4810      	ldr	r0, [pc, #64]	; (8014f50 <tcp_output_segment+0x1a8>)
 8014f10:	f006 f9a4 	bl	801b25c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	6858      	ldr	r0, [r3, #4]
 8014f18:	68b9      	ldr	r1, [r7, #8]
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	1d1c      	adds	r4, r3, #4
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	7add      	ldrb	r5, [r3, #11]
 8014f22:	68bb      	ldr	r3, [r7, #8]
 8014f24:	7a9b      	ldrb	r3, [r3, #10]
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	9202      	str	r2, [sp, #8]
 8014f2a:	2206      	movs	r2, #6
 8014f2c:	9201      	str	r2, [sp, #4]
 8014f2e:	9300      	str	r3, [sp, #0]
 8014f30:	462b      	mov	r3, r5
 8014f32:	4622      	mov	r2, r4
 8014f34:	f002 fd54 	bl	80179e0 <ip4_output_if>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014f3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3720      	adds	r7, #32
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bdb0      	pop	{r4, r5, r7, pc}
 8014f48:	0801e780 	.word	0x0801e780
 8014f4c:	0801ed44 	.word	0x0801ed44
 8014f50:	0801e7d4 	.word	0x0801e7d4
 8014f54:	0801ed64 	.word	0x0801ed64
 8014f58:	0801ed84 	.word	0x0801ed84
 8014f5c:	20011054 	.word	0x20011054
 8014f60:	0801eda8 	.word	0x0801eda8

08014f64 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014f64:	b5b0      	push	{r4, r5, r7, lr}
 8014f66:	b084      	sub	sp, #16
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d106      	bne.n	8014f80 <tcp_rexmit_rto_prepare+0x1c>
 8014f72:	4b31      	ldr	r3, [pc, #196]	; (8015038 <tcp_rexmit_rto_prepare+0xd4>)
 8014f74:	f240 6263 	movw	r2, #1635	; 0x663
 8014f78:	4930      	ldr	r1, [pc, #192]	; (801503c <tcp_rexmit_rto_prepare+0xd8>)
 8014f7a:	4831      	ldr	r0, [pc, #196]	; (8015040 <tcp_rexmit_rto_prepare+0xdc>)
 8014f7c:	f006 f96e 	bl	801b25c <iprintf>

  if (pcb->unacked == NULL) {
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d102      	bne.n	8014f8e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014f88:	f06f 0305 	mvn.w	r3, #5
 8014f8c:	e050      	b.n	8015030 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f92:	60fb      	str	r3, [r7, #12]
 8014f94:	e00b      	b.n	8014fae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014f96:	68f8      	ldr	r0, [r7, #12]
 8014f98:	f7ff fee6 	bl	8014d68 <tcp_output_segment_busy>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d002      	beq.n	8014fa8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014fa2:	f06f 0305 	mvn.w	r3, #5
 8014fa6:	e043      	b.n	8015030 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	60fb      	str	r3, [r7, #12]
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d1ef      	bne.n	8014f96 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014fb6:	68f8      	ldr	r0, [r7, #12]
 8014fb8:	f7ff fed6 	bl	8014d68 <tcp_output_segment_busy>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d002      	beq.n	8014fc8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014fc2:	f06f 0305 	mvn.w	r3, #5
 8014fc6:	e033      	b.n	8015030 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	8b5b      	ldrh	r3, [r3, #26]
 8014fe2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	68db      	ldr	r3, [r3, #12]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7f8 fdaf 	bl	800db56 <lwip_htonl>
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	891b      	ldrh	r3, [r3, #8]
 8014ffe:	461d      	mov	r5, r3
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	68db      	ldr	r3, [r3, #12]
 8015004:	899b      	ldrh	r3, [r3, #12]
 8015006:	b29b      	uxth	r3, r3
 8015008:	4618      	mov	r0, r3
 801500a:	f7f8 fd8f 	bl	800db2c <lwip_htons>
 801500e:	4603      	mov	r3, r0
 8015010:	b2db      	uxtb	r3, r3
 8015012:	f003 0303 	and.w	r3, r3, #3
 8015016:	2b00      	cmp	r3, #0
 8015018:	d001      	beq.n	801501e <tcp_rexmit_rto_prepare+0xba>
 801501a:	2301      	movs	r3, #1
 801501c:	e000      	b.n	8015020 <tcp_rexmit_rto_prepare+0xbc>
 801501e:	2300      	movs	r3, #0
 8015020:	442b      	add	r3, r5
 8015022:	18e2      	adds	r2, r4, r3
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2200      	movs	r2, #0
 801502c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801502e:	2300      	movs	r3, #0
}
 8015030:	4618      	mov	r0, r3
 8015032:	3710      	adds	r7, #16
 8015034:	46bd      	mov	sp, r7
 8015036:	bdb0      	pop	{r4, r5, r7, pc}
 8015038:	0801e780 	.word	0x0801e780
 801503c:	0801edbc 	.word	0x0801edbc
 8015040:	0801e7d4 	.word	0x0801e7d4

08015044 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d106      	bne.n	8015060 <tcp_rexmit_rto_commit+0x1c>
 8015052:	4b0d      	ldr	r3, [pc, #52]	; (8015088 <tcp_rexmit_rto_commit+0x44>)
 8015054:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015058:	490c      	ldr	r1, [pc, #48]	; (801508c <tcp_rexmit_rto_commit+0x48>)
 801505a:	480d      	ldr	r0, [pc, #52]	; (8015090 <tcp_rexmit_rto_commit+0x4c>)
 801505c:	f006 f8fe 	bl	801b25c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015066:	2bff      	cmp	r3, #255	; 0xff
 8015068:	d007      	beq.n	801507a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015070:	3301      	adds	r3, #1
 8015072:	b2da      	uxtb	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f7ff fc80 	bl	8014980 <tcp_output>
}
 8015080:	bf00      	nop
 8015082:	3708      	adds	r7, #8
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}
 8015088:	0801e780 	.word	0x0801e780
 801508c:	0801ede0 	.word	0x0801ede0
 8015090:	0801e7d4 	.word	0x0801e7d4

08015094 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b082      	sub	sp, #8
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d106      	bne.n	80150b0 <tcp_rexmit_rto+0x1c>
 80150a2:	4b0a      	ldr	r3, [pc, #40]	; (80150cc <tcp_rexmit_rto+0x38>)
 80150a4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80150a8:	4909      	ldr	r1, [pc, #36]	; (80150d0 <tcp_rexmit_rto+0x3c>)
 80150aa:	480a      	ldr	r0, [pc, #40]	; (80150d4 <tcp_rexmit_rto+0x40>)
 80150ac:	f006 f8d6 	bl	801b25c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80150b0:	6878      	ldr	r0, [r7, #4]
 80150b2:	f7ff ff57 	bl	8014f64 <tcp_rexmit_rto_prepare>
 80150b6:	4603      	mov	r3, r0
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d102      	bne.n	80150c2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80150bc:	6878      	ldr	r0, [r7, #4]
 80150be:	f7ff ffc1 	bl	8015044 <tcp_rexmit_rto_commit>
  }
}
 80150c2:	bf00      	nop
 80150c4:	3708      	adds	r7, #8
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	0801e780 	.word	0x0801e780
 80150d0:	0801ee04 	.word	0x0801ee04
 80150d4:	0801e7d4 	.word	0x0801e7d4

080150d8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80150d8:	b590      	push	{r4, r7, lr}
 80150da:	b085      	sub	sp, #20
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d106      	bne.n	80150f4 <tcp_rexmit+0x1c>
 80150e6:	4b2f      	ldr	r3, [pc, #188]	; (80151a4 <tcp_rexmit+0xcc>)
 80150e8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80150ec:	492e      	ldr	r1, [pc, #184]	; (80151a8 <tcp_rexmit+0xd0>)
 80150ee:	482f      	ldr	r0, [pc, #188]	; (80151ac <tcp_rexmit+0xd4>)
 80150f0:	f006 f8b4 	bl	801b25c <iprintf>

  if (pcb->unacked == NULL) {
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d102      	bne.n	8015102 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80150fc:	f06f 0305 	mvn.w	r3, #5
 8015100:	e04c      	b.n	801519c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015106:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015108:	68b8      	ldr	r0, [r7, #8]
 801510a:	f7ff fe2d 	bl	8014d68 <tcp_output_segment_busy>
 801510e:	4603      	mov	r3, r0
 8015110:	2b00      	cmp	r3, #0
 8015112:	d002      	beq.n	801511a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015114:	f06f 0305 	mvn.w	r3, #5
 8015118:	e040      	b.n	801519c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	681a      	ldr	r2, [r3, #0]
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	336c      	adds	r3, #108	; 0x6c
 8015126:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015128:	e002      	b.n	8015130 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d011      	beq.n	801515c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	68db      	ldr	r3, [r3, #12]
 801513e:	685b      	ldr	r3, [r3, #4]
 8015140:	4618      	mov	r0, r3
 8015142:	f7f8 fd08 	bl	800db56 <lwip_htonl>
 8015146:	4604      	mov	r4, r0
 8015148:	68bb      	ldr	r3, [r7, #8]
 801514a:	68db      	ldr	r3, [r3, #12]
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	4618      	mov	r0, r3
 8015150:	f7f8 fd01 	bl	800db56 <lwip_htonl>
 8015154:	4603      	mov	r3, r0
 8015156:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015158:	2b00      	cmp	r3, #0
 801515a:	dbe6      	blt.n	801512a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	68ba      	ldr	r2, [r7, #8]
 8015168:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801516a:	68bb      	ldr	r3, [r7, #8]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d103      	bne.n	801517a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2200      	movs	r2, #0
 8015176:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015180:	2bff      	cmp	r3, #255	; 0xff
 8015182:	d007      	beq.n	8015194 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801518a:	3301      	adds	r3, #1
 801518c:	b2da      	uxtb	r2, r3
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2200      	movs	r2, #0
 8015198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801519a:	2300      	movs	r3, #0
}
 801519c:	4618      	mov	r0, r3
 801519e:	3714      	adds	r7, #20
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd90      	pop	{r4, r7, pc}
 80151a4:	0801e780 	.word	0x0801e780
 80151a8:	0801ee20 	.word	0x0801ee20
 80151ac:	0801e7d4 	.word	0x0801e7d4

080151b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d106      	bne.n	80151cc <tcp_rexmit_fast+0x1c>
 80151be:	4b2a      	ldr	r3, [pc, #168]	; (8015268 <tcp_rexmit_fast+0xb8>)
 80151c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80151c4:	4929      	ldr	r1, [pc, #164]	; (801526c <tcp_rexmit_fast+0xbc>)
 80151c6:	482a      	ldr	r0, [pc, #168]	; (8015270 <tcp_rexmit_fast+0xc0>)
 80151c8:	f006 f848 	bl	801b25c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d044      	beq.n	801525e <tcp_rexmit_fast+0xae>
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	8b5b      	ldrh	r3, [r3, #26]
 80151d8:	f003 0304 	and.w	r3, r3, #4
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d13e      	bne.n	801525e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	f7ff ff79 	bl	80150d8 <tcp_rexmit>
 80151e6:	4603      	mov	r3, r0
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d138      	bne.n	801525e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80151f8:	4293      	cmp	r3, r2
 80151fa:	bf28      	it	cs
 80151fc:	4613      	movcs	r3, r2
 80151fe:	b29b      	uxth	r3, r3
 8015200:	0fda      	lsrs	r2, r3, #31
 8015202:	4413      	add	r3, r2
 8015204:	105b      	asrs	r3, r3, #1
 8015206:	b29a      	uxth	r2, r3
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015214:	461a      	mov	r2, r3
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801521a:	005b      	lsls	r3, r3, #1
 801521c:	429a      	cmp	r2, r3
 801521e:	d206      	bcs.n	801522e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015224:	005b      	lsls	r3, r3, #1
 8015226:	b29a      	uxth	r2, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015238:	4619      	mov	r1, r3
 801523a:	0049      	lsls	r1, r1, #1
 801523c:	440b      	add	r3, r1
 801523e:	b29b      	uxth	r3, r3
 8015240:	4413      	add	r3, r2
 8015242:	b29a      	uxth	r2, r3
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	8b5b      	ldrh	r3, [r3, #26]
 801524e:	f043 0304 	orr.w	r3, r3, #4
 8015252:	b29a      	uxth	r2, r3
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2200      	movs	r2, #0
 801525c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801525e:	bf00      	nop
 8015260:	3708      	adds	r7, #8
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
 8015266:	bf00      	nop
 8015268:	0801e780 	.word	0x0801e780
 801526c:	0801ee38 	.word	0x0801ee38
 8015270:	0801e7d4 	.word	0x0801e7d4

08015274 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015274:	b580      	push	{r7, lr}
 8015276:	b086      	sub	sp, #24
 8015278:	af00      	add	r7, sp, #0
 801527a:	60f8      	str	r0, [r7, #12]
 801527c:	607b      	str	r3, [r7, #4]
 801527e:	460b      	mov	r3, r1
 8015280:	817b      	strh	r3, [r7, #10]
 8015282:	4613      	mov	r3, r2
 8015284:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015286:	897a      	ldrh	r2, [r7, #10]
 8015288:	893b      	ldrh	r3, [r7, #8]
 801528a:	4413      	add	r3, r2
 801528c:	b29b      	uxth	r3, r3
 801528e:	3314      	adds	r3, #20
 8015290:	b29b      	uxth	r3, r3
 8015292:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015296:	4619      	mov	r1, r3
 8015298:	2022      	movs	r0, #34	; 0x22
 801529a:	f7f9 fd0f 	bl	800ecbc <pbuf_alloc>
 801529e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d04d      	beq.n	8015342 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80152a6:	897b      	ldrh	r3, [r7, #10]
 80152a8:	3313      	adds	r3, #19
 80152aa:	697a      	ldr	r2, [r7, #20]
 80152ac:	8952      	ldrh	r2, [r2, #10]
 80152ae:	4293      	cmp	r3, r2
 80152b0:	db06      	blt.n	80152c0 <tcp_output_alloc_header_common+0x4c>
 80152b2:	4b26      	ldr	r3, [pc, #152]	; (801534c <tcp_output_alloc_header_common+0xd8>)
 80152b4:	f240 7223 	movw	r2, #1827	; 0x723
 80152b8:	4925      	ldr	r1, [pc, #148]	; (8015350 <tcp_output_alloc_header_common+0xdc>)
 80152ba:	4826      	ldr	r0, [pc, #152]	; (8015354 <tcp_output_alloc_header_common+0xe0>)
 80152bc:	f005 ffce 	bl	801b25c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80152c0:	697b      	ldr	r3, [r7, #20]
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80152c6:	8c3b      	ldrh	r3, [r7, #32]
 80152c8:	4618      	mov	r0, r3
 80152ca:	f7f8 fc2f 	bl	800db2c <lwip_htons>
 80152ce:	4603      	mov	r3, r0
 80152d0:	461a      	mov	r2, r3
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80152d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80152d8:	4618      	mov	r0, r3
 80152da:	f7f8 fc27 	bl	800db2c <lwip_htons>
 80152de:	4603      	mov	r3, r0
 80152e0:	461a      	mov	r2, r3
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80152e6:	693b      	ldr	r3, [r7, #16]
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80152ec:	68f8      	ldr	r0, [r7, #12]
 80152ee:	f7f8 fc32 	bl	800db56 <lwip_htonl>
 80152f2:	4602      	mov	r2, r0
 80152f4:	693b      	ldr	r3, [r7, #16]
 80152f6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80152f8:	897b      	ldrh	r3, [r7, #10]
 80152fa:	089b      	lsrs	r3, r3, #2
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	3305      	adds	r3, #5
 8015300:	b29b      	uxth	r3, r3
 8015302:	031b      	lsls	r3, r3, #12
 8015304:	b29a      	uxth	r2, r3
 8015306:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801530a:	b29b      	uxth	r3, r3
 801530c:	4313      	orrs	r3, r2
 801530e:	b29b      	uxth	r3, r3
 8015310:	4618      	mov	r0, r3
 8015312:	f7f8 fc0b 	bl	800db2c <lwip_htons>
 8015316:	4603      	mov	r3, r0
 8015318:	461a      	mov	r2, r3
 801531a:	693b      	ldr	r3, [r7, #16]
 801531c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801531e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015320:	4618      	mov	r0, r3
 8015322:	f7f8 fc03 	bl	800db2c <lwip_htons>
 8015326:	4603      	mov	r3, r0
 8015328:	461a      	mov	r2, r3
 801532a:	693b      	ldr	r3, [r7, #16]
 801532c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801532e:	693b      	ldr	r3, [r7, #16]
 8015330:	2200      	movs	r2, #0
 8015332:	741a      	strb	r2, [r3, #16]
 8015334:	2200      	movs	r2, #0
 8015336:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	2200      	movs	r2, #0
 801533c:	749a      	strb	r2, [r3, #18]
 801533e:	2200      	movs	r2, #0
 8015340:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015342:	697b      	ldr	r3, [r7, #20]
}
 8015344:	4618      	mov	r0, r3
 8015346:	3718      	adds	r7, #24
 8015348:	46bd      	mov	sp, r7
 801534a:	bd80      	pop	{r7, pc}
 801534c:	0801e780 	.word	0x0801e780
 8015350:	0801ee58 	.word	0x0801ee58
 8015354:	0801e7d4 	.word	0x0801e7d4

08015358 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015358:	b5b0      	push	{r4, r5, r7, lr}
 801535a:	b08a      	sub	sp, #40	; 0x28
 801535c:	af04      	add	r7, sp, #16
 801535e:	60f8      	str	r0, [r7, #12]
 8015360:	607b      	str	r3, [r7, #4]
 8015362:	460b      	mov	r3, r1
 8015364:	817b      	strh	r3, [r7, #10]
 8015366:	4613      	mov	r3, r2
 8015368:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d106      	bne.n	801537e <tcp_output_alloc_header+0x26>
 8015370:	4b15      	ldr	r3, [pc, #84]	; (80153c8 <tcp_output_alloc_header+0x70>)
 8015372:	f240 7242 	movw	r2, #1858	; 0x742
 8015376:	4915      	ldr	r1, [pc, #84]	; (80153cc <tcp_output_alloc_header+0x74>)
 8015378:	4815      	ldr	r0, [pc, #84]	; (80153d0 <tcp_output_alloc_header+0x78>)
 801537a:	f005 ff6f 	bl	801b25c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	8adb      	ldrh	r3, [r3, #22]
 8015386:	68fa      	ldr	r2, [r7, #12]
 8015388:	8b12      	ldrh	r2, [r2, #24]
 801538a:	68f9      	ldr	r1, [r7, #12]
 801538c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801538e:	893d      	ldrh	r5, [r7, #8]
 8015390:	897c      	ldrh	r4, [r7, #10]
 8015392:	9103      	str	r1, [sp, #12]
 8015394:	2110      	movs	r1, #16
 8015396:	9102      	str	r1, [sp, #8]
 8015398:	9201      	str	r2, [sp, #4]
 801539a:	9300      	str	r3, [sp, #0]
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	462a      	mov	r2, r5
 80153a0:	4621      	mov	r1, r4
 80153a2:	f7ff ff67 	bl	8015274 <tcp_output_alloc_header_common>
 80153a6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d006      	beq.n	80153bc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153b2:	68fa      	ldr	r2, [r7, #12]
 80153b4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80153b6:	441a      	add	r2, r3
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80153bc:	697b      	ldr	r3, [r7, #20]
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3718      	adds	r7, #24
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bdb0      	pop	{r4, r5, r7, pc}
 80153c6:	bf00      	nop
 80153c8:	0801e780 	.word	0x0801e780
 80153cc:	0801ee88 	.word	0x0801ee88
 80153d0:	0801e7d4 	.word	0x0801e7d4

080153d4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b088      	sub	sp, #32
 80153d8:	af00      	add	r7, sp, #0
 80153da:	60f8      	str	r0, [r7, #12]
 80153dc:	60b9      	str	r1, [r7, #8]
 80153de:	4611      	mov	r1, r2
 80153e0:	461a      	mov	r2, r3
 80153e2:	460b      	mov	r3, r1
 80153e4:	71fb      	strb	r3, [r7, #7]
 80153e6:	4613      	mov	r3, r2
 80153e8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80153ea:	2300      	movs	r3, #0
 80153ec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d106      	bne.n	8015402 <tcp_output_fill_options+0x2e>
 80153f4:	4b13      	ldr	r3, [pc, #76]	; (8015444 <tcp_output_fill_options+0x70>)
 80153f6:	f240 7256 	movw	r2, #1878	; 0x756
 80153fa:	4913      	ldr	r1, [pc, #76]	; (8015448 <tcp_output_fill_options+0x74>)
 80153fc:	4813      	ldr	r0, [pc, #76]	; (801544c <tcp_output_fill_options+0x78>)
 80153fe:	f005 ff2d 	bl	801b25c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	685b      	ldr	r3, [r3, #4]
 8015406:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015408:	69bb      	ldr	r3, [r7, #24]
 801540a:	3314      	adds	r3, #20
 801540c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801540e:	69bb      	ldr	r3, [r7, #24]
 8015410:	f103 0214 	add.w	r2, r3, #20
 8015414:	8bfb      	ldrh	r3, [r7, #30]
 8015416:	009b      	lsls	r3, r3, #2
 8015418:	4619      	mov	r1, r3
 801541a:	79fb      	ldrb	r3, [r7, #7]
 801541c:	009b      	lsls	r3, r3, #2
 801541e:	f003 0304 	and.w	r3, r3, #4
 8015422:	440b      	add	r3, r1
 8015424:	4413      	add	r3, r2
 8015426:	697a      	ldr	r2, [r7, #20]
 8015428:	429a      	cmp	r2, r3
 801542a:	d006      	beq.n	801543a <tcp_output_fill_options+0x66>
 801542c:	4b05      	ldr	r3, [pc, #20]	; (8015444 <tcp_output_fill_options+0x70>)
 801542e:	f240 7275 	movw	r2, #1909	; 0x775
 8015432:	4907      	ldr	r1, [pc, #28]	; (8015450 <tcp_output_fill_options+0x7c>)
 8015434:	4805      	ldr	r0, [pc, #20]	; (801544c <tcp_output_fill_options+0x78>)
 8015436:	f005 ff11 	bl	801b25c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801543a:	bf00      	nop
 801543c:	3720      	adds	r7, #32
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	0801e780 	.word	0x0801e780
 8015448:	0801eeb0 	.word	0x0801eeb0
 801544c:	0801e7d4 	.word	0x0801e7d4
 8015450:	0801eda8 	.word	0x0801eda8

08015454 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b08a      	sub	sp, #40	; 0x28
 8015458:	af04      	add	r7, sp, #16
 801545a:	60f8      	str	r0, [r7, #12]
 801545c:	60b9      	str	r1, [r7, #8]
 801545e:	607a      	str	r2, [r7, #4]
 8015460:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d106      	bne.n	8015476 <tcp_output_control_segment+0x22>
 8015468:	4b1c      	ldr	r3, [pc, #112]	; (80154dc <tcp_output_control_segment+0x88>)
 801546a:	f240 7287 	movw	r2, #1927	; 0x787
 801546e:	491c      	ldr	r1, [pc, #112]	; (80154e0 <tcp_output_control_segment+0x8c>)
 8015470:	481c      	ldr	r0, [pc, #112]	; (80154e4 <tcp_output_control_segment+0x90>)
 8015472:	f005 fef3 	bl	801b25c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015476:	683a      	ldr	r2, [r7, #0]
 8015478:	6879      	ldr	r1, [r7, #4]
 801547a:	68f8      	ldr	r0, [r7, #12]
 801547c:	f7fe fae8 	bl	8013a50 <tcp_route>
 8015480:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d102      	bne.n	801548e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015488:	23fc      	movs	r3, #252	; 0xfc
 801548a:	75fb      	strb	r3, [r7, #23]
 801548c:	e01c      	b.n	80154c8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d006      	beq.n	80154a2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	7adb      	ldrb	r3, [r3, #11]
 8015498:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	7a9b      	ldrb	r3, [r3, #10]
 801549e:	757b      	strb	r3, [r7, #21]
 80154a0:	e003      	b.n	80154aa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80154a2:	23ff      	movs	r3, #255	; 0xff
 80154a4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80154a6:	2300      	movs	r3, #0
 80154a8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80154aa:	7dba      	ldrb	r2, [r7, #22]
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	9302      	str	r3, [sp, #8]
 80154b0:	2306      	movs	r3, #6
 80154b2:	9301      	str	r3, [sp, #4]
 80154b4:	7d7b      	ldrb	r3, [r7, #21]
 80154b6:	9300      	str	r3, [sp, #0]
 80154b8:	4613      	mov	r3, r2
 80154ba:	683a      	ldr	r2, [r7, #0]
 80154bc:	6879      	ldr	r1, [r7, #4]
 80154be:	68b8      	ldr	r0, [r7, #8]
 80154c0:	f002 fa8e 	bl	80179e0 <ip4_output_if>
 80154c4:	4603      	mov	r3, r0
 80154c6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80154c8:	68b8      	ldr	r0, [r7, #8]
 80154ca:	f7f9 fedb 	bl	800f284 <pbuf_free>
  return err;
 80154ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3718      	adds	r7, #24
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	0801e780 	.word	0x0801e780
 80154e0:	0801eed8 	.word	0x0801eed8
 80154e4:	0801e7d4 	.word	0x0801e7d4

080154e8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80154e8:	b590      	push	{r4, r7, lr}
 80154ea:	b08b      	sub	sp, #44	; 0x2c
 80154ec:	af04      	add	r7, sp, #16
 80154ee:	60f8      	str	r0, [r7, #12]
 80154f0:	60b9      	str	r1, [r7, #8]
 80154f2:	607a      	str	r2, [r7, #4]
 80154f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d106      	bne.n	801550a <tcp_rst+0x22>
 80154fc:	4b1f      	ldr	r3, [pc, #124]	; (801557c <tcp_rst+0x94>)
 80154fe:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015502:	491f      	ldr	r1, [pc, #124]	; (8015580 <tcp_rst+0x98>)
 8015504:	481f      	ldr	r0, [pc, #124]	; (8015584 <tcp_rst+0x9c>)
 8015506:	f005 fea9 	bl	801b25c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801550c:	2b00      	cmp	r3, #0
 801550e:	d106      	bne.n	801551e <tcp_rst+0x36>
 8015510:	4b1a      	ldr	r3, [pc, #104]	; (801557c <tcp_rst+0x94>)
 8015512:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015516:	491c      	ldr	r1, [pc, #112]	; (8015588 <tcp_rst+0xa0>)
 8015518:	481a      	ldr	r0, [pc, #104]	; (8015584 <tcp_rst+0x9c>)
 801551a:	f005 fe9f 	bl	801b25c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801551e:	2300      	movs	r3, #0
 8015520:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015522:	f246 0308 	movw	r3, #24584	; 0x6008
 8015526:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015528:	7dfb      	ldrb	r3, [r7, #23]
 801552a:	b29c      	uxth	r4, r3
 801552c:	68b8      	ldr	r0, [r7, #8]
 801552e:	f7f8 fb12 	bl	800db56 <lwip_htonl>
 8015532:	4602      	mov	r2, r0
 8015534:	8abb      	ldrh	r3, [r7, #20]
 8015536:	9303      	str	r3, [sp, #12]
 8015538:	2314      	movs	r3, #20
 801553a:	9302      	str	r3, [sp, #8]
 801553c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801553e:	9301      	str	r3, [sp, #4]
 8015540:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015542:	9300      	str	r3, [sp, #0]
 8015544:	4613      	mov	r3, r2
 8015546:	2200      	movs	r2, #0
 8015548:	4621      	mov	r1, r4
 801554a:	6878      	ldr	r0, [r7, #4]
 801554c:	f7ff fe92 	bl	8015274 <tcp_output_alloc_header_common>
 8015550:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d00c      	beq.n	8015572 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015558:	7dfb      	ldrb	r3, [r7, #23]
 801555a:	2200      	movs	r2, #0
 801555c:	6939      	ldr	r1, [r7, #16]
 801555e:	68f8      	ldr	r0, [r7, #12]
 8015560:	f7ff ff38 	bl	80153d4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015566:	683a      	ldr	r2, [r7, #0]
 8015568:	6939      	ldr	r1, [r7, #16]
 801556a:	68f8      	ldr	r0, [r7, #12]
 801556c:	f7ff ff72 	bl	8015454 <tcp_output_control_segment>
 8015570:	e000      	b.n	8015574 <tcp_rst+0x8c>
    return;
 8015572:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015574:	371c      	adds	r7, #28
 8015576:	46bd      	mov	sp, r7
 8015578:	bd90      	pop	{r4, r7, pc}
 801557a:	bf00      	nop
 801557c:	0801e780 	.word	0x0801e780
 8015580:	0801ef04 	.word	0x0801ef04
 8015584:	0801e7d4 	.word	0x0801e7d4
 8015588:	0801ef20 	.word	0x0801ef20

0801558c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801558c:	b590      	push	{r4, r7, lr}
 801558e:	b087      	sub	sp, #28
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015594:	2300      	movs	r3, #0
 8015596:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015598:	2300      	movs	r3, #0
 801559a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d106      	bne.n	80155b0 <tcp_send_empty_ack+0x24>
 80155a2:	4b28      	ldr	r3, [pc, #160]	; (8015644 <tcp_send_empty_ack+0xb8>)
 80155a4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80155a8:	4927      	ldr	r1, [pc, #156]	; (8015648 <tcp_send_empty_ack+0xbc>)
 80155aa:	4828      	ldr	r0, [pc, #160]	; (801564c <tcp_send_empty_ack+0xc0>)
 80155ac:	f005 fe56 	bl	801b25c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80155b0:	7dfb      	ldrb	r3, [r7, #23]
 80155b2:	009b      	lsls	r3, r3, #2
 80155b4:	b2db      	uxtb	r3, r3
 80155b6:	f003 0304 	and.w	r3, r3, #4
 80155ba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80155bc:	7d7b      	ldrb	r3, [r7, #21]
 80155be:	b29c      	uxth	r4, r3
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80155c4:	4618      	mov	r0, r3
 80155c6:	f7f8 fac6 	bl	800db56 <lwip_htonl>
 80155ca:	4603      	mov	r3, r0
 80155cc:	2200      	movs	r2, #0
 80155ce:	4621      	mov	r1, r4
 80155d0:	6878      	ldr	r0, [r7, #4]
 80155d2:	f7ff fec1 	bl	8015358 <tcp_output_alloc_header>
 80155d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80155d8:	693b      	ldr	r3, [r7, #16]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d109      	bne.n	80155f2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	8b5b      	ldrh	r3, [r3, #26]
 80155e2:	f043 0303 	orr.w	r3, r3, #3
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80155ec:	f06f 0301 	mvn.w	r3, #1
 80155f0:	e023      	b.n	801563a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80155f2:	7dbb      	ldrb	r3, [r7, #22]
 80155f4:	7dfa      	ldrb	r2, [r7, #23]
 80155f6:	6939      	ldr	r1, [r7, #16]
 80155f8:	6878      	ldr	r0, [r7, #4]
 80155fa:	f7ff feeb 	bl	80153d4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80155fe:	687a      	ldr	r2, [r7, #4]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	3304      	adds	r3, #4
 8015604:	6939      	ldr	r1, [r7, #16]
 8015606:	6878      	ldr	r0, [r7, #4]
 8015608:	f7ff ff24 	bl	8015454 <tcp_output_control_segment>
 801560c:	4603      	mov	r3, r0
 801560e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d007      	beq.n	8015628 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	8b5b      	ldrh	r3, [r3, #26]
 801561c:	f043 0303 	orr.w	r3, r3, #3
 8015620:	b29a      	uxth	r2, r3
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	835a      	strh	r2, [r3, #26]
 8015626:	e006      	b.n	8015636 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	8b5b      	ldrh	r3, [r3, #26]
 801562c:	f023 0303 	bic.w	r3, r3, #3
 8015630:	b29a      	uxth	r2, r3
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015636:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801563a:	4618      	mov	r0, r3
 801563c:	371c      	adds	r7, #28
 801563e:	46bd      	mov	sp, r7
 8015640:	bd90      	pop	{r4, r7, pc}
 8015642:	bf00      	nop
 8015644:	0801e780 	.word	0x0801e780
 8015648:	0801ef3c 	.word	0x0801ef3c
 801564c:	0801e7d4 	.word	0x0801e7d4

08015650 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015650:	b590      	push	{r4, r7, lr}
 8015652:	b087      	sub	sp, #28
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015658:	2300      	movs	r3, #0
 801565a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d106      	bne.n	8015670 <tcp_keepalive+0x20>
 8015662:	4b18      	ldr	r3, [pc, #96]	; (80156c4 <tcp_keepalive+0x74>)
 8015664:	f640 0224 	movw	r2, #2084	; 0x824
 8015668:	4917      	ldr	r1, [pc, #92]	; (80156c8 <tcp_keepalive+0x78>)
 801566a:	4818      	ldr	r0, [pc, #96]	; (80156cc <tcp_keepalive+0x7c>)
 801566c:	f005 fdf6 	bl	801b25c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015670:	7dfb      	ldrb	r3, [r7, #23]
 8015672:	b29c      	uxth	r4, r3
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015678:	3b01      	subs	r3, #1
 801567a:	4618      	mov	r0, r3
 801567c:	f7f8 fa6b 	bl	800db56 <lwip_htonl>
 8015680:	4603      	mov	r3, r0
 8015682:	2200      	movs	r2, #0
 8015684:	4621      	mov	r1, r4
 8015686:	6878      	ldr	r0, [r7, #4]
 8015688:	f7ff fe66 	bl	8015358 <tcp_output_alloc_header>
 801568c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d102      	bne.n	801569a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015694:	f04f 33ff 	mov.w	r3, #4294967295
 8015698:	e010      	b.n	80156bc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801569a:	7dfb      	ldrb	r3, [r7, #23]
 801569c:	2200      	movs	r2, #0
 801569e:	6939      	ldr	r1, [r7, #16]
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f7ff fe97 	bl	80153d4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80156a6:	687a      	ldr	r2, [r7, #4]
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	3304      	adds	r3, #4
 80156ac:	6939      	ldr	r1, [r7, #16]
 80156ae:	6878      	ldr	r0, [r7, #4]
 80156b0:	f7ff fed0 	bl	8015454 <tcp_output_control_segment>
 80156b4:	4603      	mov	r3, r0
 80156b6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80156b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156bc:	4618      	mov	r0, r3
 80156be:	371c      	adds	r7, #28
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd90      	pop	{r4, r7, pc}
 80156c4:	0801e780 	.word	0x0801e780
 80156c8:	0801ef5c 	.word	0x0801ef5c
 80156cc:	0801e7d4 	.word	0x0801e7d4

080156d0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80156d0:	b590      	push	{r4, r7, lr}
 80156d2:	b08b      	sub	sp, #44	; 0x2c
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80156d8:	2300      	movs	r3, #0
 80156da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d106      	bne.n	80156f2 <tcp_zero_window_probe+0x22>
 80156e4:	4b4c      	ldr	r3, [pc, #304]	; (8015818 <tcp_zero_window_probe+0x148>)
 80156e6:	f640 024f 	movw	r2, #2127	; 0x84f
 80156ea:	494c      	ldr	r1, [pc, #304]	; (801581c <tcp_zero_window_probe+0x14c>)
 80156ec:	484c      	ldr	r0, [pc, #304]	; (8015820 <tcp_zero_window_probe+0x150>)
 80156ee:	f005 fdb5 	bl	801b25c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156f6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80156f8:	6a3b      	ldr	r3, [r7, #32]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d101      	bne.n	8015702 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80156fe:	2300      	movs	r3, #0
 8015700:	e086      	b.n	8015810 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015708:	2bff      	cmp	r3, #255	; 0xff
 801570a:	d007      	beq.n	801571c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015712:	3301      	adds	r3, #1
 8015714:	b2da      	uxtb	r2, r3
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801571c:	6a3b      	ldr	r3, [r7, #32]
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	899b      	ldrh	r3, [r3, #12]
 8015722:	b29b      	uxth	r3, r3
 8015724:	4618      	mov	r0, r3
 8015726:	f7f8 fa01 	bl	800db2c <lwip_htons>
 801572a:	4603      	mov	r3, r0
 801572c:	b2db      	uxtb	r3, r3
 801572e:	f003 0301 	and.w	r3, r3, #1
 8015732:	2b00      	cmp	r3, #0
 8015734:	d005      	beq.n	8015742 <tcp_zero_window_probe+0x72>
 8015736:	6a3b      	ldr	r3, [r7, #32]
 8015738:	891b      	ldrh	r3, [r3, #8]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d101      	bne.n	8015742 <tcp_zero_window_probe+0x72>
 801573e:	2301      	movs	r3, #1
 8015740:	e000      	b.n	8015744 <tcp_zero_window_probe+0x74>
 8015742:	2300      	movs	r3, #0
 8015744:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015746:	7ffb      	ldrb	r3, [r7, #31]
 8015748:	2b00      	cmp	r3, #0
 801574a:	bf0c      	ite	eq
 801574c:	2301      	moveq	r3, #1
 801574e:	2300      	movne	r3, #0
 8015750:	b2db      	uxtb	r3, r3
 8015752:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015758:	b299      	uxth	r1, r3
 801575a:	6a3b      	ldr	r3, [r7, #32]
 801575c:	68db      	ldr	r3, [r3, #12]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	8bba      	ldrh	r2, [r7, #28]
 8015762:	6878      	ldr	r0, [r7, #4]
 8015764:	f7ff fdf8 	bl	8015358 <tcp_output_alloc_header>
 8015768:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801576a:	69bb      	ldr	r3, [r7, #24]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d102      	bne.n	8015776 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015770:	f04f 33ff 	mov.w	r3, #4294967295
 8015774:	e04c      	b.n	8015810 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015776:	69bb      	ldr	r3, [r7, #24]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801577c:	7ffb      	ldrb	r3, [r7, #31]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d011      	beq.n	80157a6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	899b      	ldrh	r3, [r3, #12]
 8015786:	b29b      	uxth	r3, r3
 8015788:	b21b      	sxth	r3, r3
 801578a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801578e:	b21c      	sxth	r4, r3
 8015790:	2011      	movs	r0, #17
 8015792:	f7f8 f9cb 	bl	800db2c <lwip_htons>
 8015796:	4603      	mov	r3, r0
 8015798:	b21b      	sxth	r3, r3
 801579a:	4323      	orrs	r3, r4
 801579c:	b21b      	sxth	r3, r3
 801579e:	b29a      	uxth	r2, r3
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	819a      	strh	r2, [r3, #12]
 80157a4:	e010      	b.n	80157c8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	685b      	ldr	r3, [r3, #4]
 80157aa:	3314      	adds	r3, #20
 80157ac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80157ae:	6a3b      	ldr	r3, [r7, #32]
 80157b0:	6858      	ldr	r0, [r3, #4]
 80157b2:	6a3b      	ldr	r3, [r7, #32]
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	891a      	ldrh	r2, [r3, #8]
 80157b8:	6a3b      	ldr	r3, [r7, #32]
 80157ba:	891b      	ldrh	r3, [r3, #8]
 80157bc:	1ad3      	subs	r3, r2, r3
 80157be:	b29b      	uxth	r3, r3
 80157c0:	2201      	movs	r2, #1
 80157c2:	6939      	ldr	r1, [r7, #16]
 80157c4:	f7f9 ff64 	bl	800f690 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80157c8:	6a3b      	ldr	r3, [r7, #32]
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	685b      	ldr	r3, [r3, #4]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7f8 f9c1 	bl	800db56 <lwip_htonl>
 80157d4:	4603      	mov	r3, r0
 80157d6:	3301      	adds	r3, #1
 80157d8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	1ad3      	subs	r3, r2, r3
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	da02      	bge.n	80157ec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	68fa      	ldr	r2, [r7, #12]
 80157ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80157ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157f0:	2200      	movs	r2, #0
 80157f2:	69b9      	ldr	r1, [r7, #24]
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f7ff fded 	bl	80153d4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80157fa:	687a      	ldr	r2, [r7, #4]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	3304      	adds	r3, #4
 8015800:	69b9      	ldr	r1, [r7, #24]
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f7ff fe26 	bl	8015454 <tcp_output_control_segment>
 8015808:	4603      	mov	r3, r0
 801580a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801580c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015810:	4618      	mov	r0, r3
 8015812:	372c      	adds	r7, #44	; 0x2c
 8015814:	46bd      	mov	sp, r7
 8015816:	bd90      	pop	{r4, r7, pc}
 8015818:	0801e780 	.word	0x0801e780
 801581c:	0801ef78 	.word	0x0801ef78
 8015820:	0801e7d4 	.word	0x0801e7d4

08015824 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801582c:	f7fa f8b0 	bl	800f990 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015830:	4b0a      	ldr	r3, [pc, #40]	; (801585c <tcpip_tcp_timer+0x38>)
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d103      	bne.n	8015840 <tcpip_tcp_timer+0x1c>
 8015838:	4b09      	ldr	r3, [pc, #36]	; (8015860 <tcpip_tcp_timer+0x3c>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d005      	beq.n	801584c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015840:	2200      	movs	r2, #0
 8015842:	4908      	ldr	r1, [pc, #32]	; (8015864 <tcpip_tcp_timer+0x40>)
 8015844:	20fa      	movs	r0, #250	; 0xfa
 8015846:	f000 f8f3 	bl	8015a30 <sys_timeout>
 801584a:	e003      	b.n	8015854 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801584c:	4b06      	ldr	r3, [pc, #24]	; (8015868 <tcpip_tcp_timer+0x44>)
 801584e:	2200      	movs	r2, #0
 8015850:	601a      	str	r2, [r3, #0]
  }
}
 8015852:	bf00      	nop
 8015854:	bf00      	nop
 8015856:	3708      	adds	r7, #8
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}
 801585c:	20011050 	.word	0x20011050
 8015860:	20011060 	.word	0x20011060
 8015864:	08015825 	.word	0x08015825
 8015868:	20004ba8 	.word	0x20004ba8

0801586c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015870:	4b0a      	ldr	r3, [pc, #40]	; (801589c <tcp_timer_needed+0x30>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d10f      	bne.n	8015898 <tcp_timer_needed+0x2c>
 8015878:	4b09      	ldr	r3, [pc, #36]	; (80158a0 <tcp_timer_needed+0x34>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d103      	bne.n	8015888 <tcp_timer_needed+0x1c>
 8015880:	4b08      	ldr	r3, [pc, #32]	; (80158a4 <tcp_timer_needed+0x38>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d007      	beq.n	8015898 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015888:	4b04      	ldr	r3, [pc, #16]	; (801589c <tcp_timer_needed+0x30>)
 801588a:	2201      	movs	r2, #1
 801588c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801588e:	2200      	movs	r2, #0
 8015890:	4905      	ldr	r1, [pc, #20]	; (80158a8 <tcp_timer_needed+0x3c>)
 8015892:	20fa      	movs	r0, #250	; 0xfa
 8015894:	f000 f8cc 	bl	8015a30 <sys_timeout>
  }
}
 8015898:	bf00      	nop
 801589a:	bd80      	pop	{r7, pc}
 801589c:	20004ba8 	.word	0x20004ba8
 80158a0:	20011050 	.word	0x20011050
 80158a4:	20011060 	.word	0x20011060
 80158a8:	08015825 	.word	0x08015825

080158ac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b086      	sub	sp, #24
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80158b8:	200a      	movs	r0, #10
 80158ba:	f7f8 fded 	bl	800e498 <memp_malloc>
 80158be:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80158c0:	693b      	ldr	r3, [r7, #16]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d109      	bne.n	80158da <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d151      	bne.n	8015970 <sys_timeout_abs+0xc4>
 80158cc:	4b2a      	ldr	r3, [pc, #168]	; (8015978 <sys_timeout_abs+0xcc>)
 80158ce:	22be      	movs	r2, #190	; 0xbe
 80158d0:	492a      	ldr	r1, [pc, #168]	; (801597c <sys_timeout_abs+0xd0>)
 80158d2:	482b      	ldr	r0, [pc, #172]	; (8015980 <sys_timeout_abs+0xd4>)
 80158d4:	f005 fcc2 	bl	801b25c <iprintf>
    return;
 80158d8:	e04a      	b.n	8015970 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	2200      	movs	r2, #0
 80158de:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80158e0:	693b      	ldr	r3, [r7, #16]
 80158e2:	68ba      	ldr	r2, [r7, #8]
 80158e4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	68fa      	ldr	r2, [r7, #12]
 80158f0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80158f2:	4b24      	ldr	r3, [pc, #144]	; (8015984 <sys_timeout_abs+0xd8>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d103      	bne.n	8015902 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80158fa:	4a22      	ldr	r2, [pc, #136]	; (8015984 <sys_timeout_abs+0xd8>)
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	6013      	str	r3, [r2, #0]
    return;
 8015900:	e037      	b.n	8015972 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	685a      	ldr	r2, [r3, #4]
 8015906:	4b1f      	ldr	r3, [pc, #124]	; (8015984 <sys_timeout_abs+0xd8>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	1ad3      	subs	r3, r2, r3
 801590e:	0fdb      	lsrs	r3, r3, #31
 8015910:	f003 0301 	and.w	r3, r3, #1
 8015914:	b2db      	uxtb	r3, r3
 8015916:	2b00      	cmp	r3, #0
 8015918:	d007      	beq.n	801592a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801591a:	4b1a      	ldr	r3, [pc, #104]	; (8015984 <sys_timeout_abs+0xd8>)
 801591c:	681a      	ldr	r2, [r3, #0]
 801591e:	693b      	ldr	r3, [r7, #16]
 8015920:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015922:	4a18      	ldr	r2, [pc, #96]	; (8015984 <sys_timeout_abs+0xd8>)
 8015924:	693b      	ldr	r3, [r7, #16]
 8015926:	6013      	str	r3, [r2, #0]
 8015928:	e023      	b.n	8015972 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801592a:	4b16      	ldr	r3, [pc, #88]	; (8015984 <sys_timeout_abs+0xd8>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	617b      	str	r3, [r7, #20]
 8015930:	e01a      	b.n	8015968 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015932:	697b      	ldr	r3, [r7, #20]
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d00b      	beq.n	8015952 <sys_timeout_abs+0xa6>
 801593a:	693b      	ldr	r3, [r7, #16]
 801593c:	685a      	ldr	r2, [r3, #4]
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	685b      	ldr	r3, [r3, #4]
 8015944:	1ad3      	subs	r3, r2, r3
 8015946:	0fdb      	lsrs	r3, r3, #31
 8015948:	f003 0301 	and.w	r3, r3, #1
 801594c:	b2db      	uxtb	r3, r3
 801594e:	2b00      	cmp	r3, #0
 8015950:	d007      	beq.n	8015962 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	681a      	ldr	r2, [r3, #0]
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	693a      	ldr	r2, [r7, #16]
 801595e:	601a      	str	r2, [r3, #0]
        break;
 8015960:	e007      	b.n	8015972 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	617b      	str	r3, [r7, #20]
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d1e1      	bne.n	8015932 <sys_timeout_abs+0x86>
 801596e:	e000      	b.n	8015972 <sys_timeout_abs+0xc6>
    return;
 8015970:	bf00      	nop
      }
    }
  }
}
 8015972:	3718      	adds	r7, #24
 8015974:	46bd      	mov	sp, r7
 8015976:	bd80      	pop	{r7, pc}
 8015978:	0801ef9c 	.word	0x0801ef9c
 801597c:	0801efd0 	.word	0x0801efd0
 8015980:	0801f010 	.word	0x0801f010
 8015984:	20004ba0 	.word	0x20004ba0

08015988 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b086      	sub	sp, #24
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	4798      	blx	r3

  now = sys_now();
 801599a:	f7f2 f8cd 	bl	8007b38 <sys_now>
 801599e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	681a      	ldr	r2, [r3, #0]
 80159a4:	4b0f      	ldr	r3, [pc, #60]	; (80159e4 <lwip_cyclic_timer+0x5c>)
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	4413      	add	r3, r2
 80159aa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80159ac:	68fa      	ldr	r2, [r7, #12]
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	1ad3      	subs	r3, r2, r3
 80159b2:	0fdb      	lsrs	r3, r3, #31
 80159b4:	f003 0301 	and.w	r3, r3, #1
 80159b8:	b2db      	uxtb	r3, r3
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d009      	beq.n	80159d2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	693b      	ldr	r3, [r7, #16]
 80159c4:	4413      	add	r3, r2
 80159c6:	687a      	ldr	r2, [r7, #4]
 80159c8:	4907      	ldr	r1, [pc, #28]	; (80159e8 <lwip_cyclic_timer+0x60>)
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7ff ff6e 	bl	80158ac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80159d0:	e004      	b.n	80159dc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80159d2:	687a      	ldr	r2, [r7, #4]
 80159d4:	4904      	ldr	r1, [pc, #16]	; (80159e8 <lwip_cyclic_timer+0x60>)
 80159d6:	68f8      	ldr	r0, [r7, #12]
 80159d8:	f7ff ff68 	bl	80158ac <sys_timeout_abs>
}
 80159dc:	bf00      	nop
 80159de:	3718      	adds	r7, #24
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}
 80159e4:	20004ba4 	.word	0x20004ba4
 80159e8:	08015989 	.word	0x08015989

080159ec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b082      	sub	sp, #8
 80159f0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80159f2:	2301      	movs	r3, #1
 80159f4:	607b      	str	r3, [r7, #4]
 80159f6:	e00e      	b.n	8015a16 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80159f8:	4a0b      	ldr	r2, [pc, #44]	; (8015a28 <sys_timeouts_init+0x3c>)
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	00db      	lsls	r3, r3, #3
 8015a04:	4a08      	ldr	r2, [pc, #32]	; (8015a28 <sys_timeouts_init+0x3c>)
 8015a06:	4413      	add	r3, r2
 8015a08:	461a      	mov	r2, r3
 8015a0a:	4908      	ldr	r1, [pc, #32]	; (8015a2c <sys_timeouts_init+0x40>)
 8015a0c:	f000 f810 	bl	8015a30 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	3301      	adds	r3, #1
 8015a14:	607b      	str	r3, [r7, #4]
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	2b02      	cmp	r3, #2
 8015a1a:	d9ed      	bls.n	80159f8 <sys_timeouts_init+0xc>
  }
}
 8015a1c:	bf00      	nop
 8015a1e:	bf00      	nop
 8015a20:	3708      	adds	r7, #8
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}
 8015a26:	bf00      	nop
 8015a28:	0801fddc 	.word	0x0801fddc
 8015a2c:	08015989 	.word	0x08015989

08015a30 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b086      	sub	sp, #24
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	60f8      	str	r0, [r7, #12]
 8015a38:	60b9      	str	r1, [r7, #8]
 8015a3a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015a42:	d306      	bcc.n	8015a52 <sys_timeout+0x22>
 8015a44:	4b0a      	ldr	r3, [pc, #40]	; (8015a70 <sys_timeout+0x40>)
 8015a46:	f240 1229 	movw	r2, #297	; 0x129
 8015a4a:	490a      	ldr	r1, [pc, #40]	; (8015a74 <sys_timeout+0x44>)
 8015a4c:	480a      	ldr	r0, [pc, #40]	; (8015a78 <sys_timeout+0x48>)
 8015a4e:	f005 fc05 	bl	801b25c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015a52:	f7f2 f871 	bl	8007b38 <sys_now>
 8015a56:	4602      	mov	r2, r0
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	4413      	add	r3, r2
 8015a5c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015a5e:	687a      	ldr	r2, [r7, #4]
 8015a60:	68b9      	ldr	r1, [r7, #8]
 8015a62:	6978      	ldr	r0, [r7, #20]
 8015a64:	f7ff ff22 	bl	80158ac <sys_timeout_abs>
#endif
}
 8015a68:	bf00      	nop
 8015a6a:	3718      	adds	r7, #24
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	bd80      	pop	{r7, pc}
 8015a70:	0801ef9c 	.word	0x0801ef9c
 8015a74:	0801f038 	.word	0x0801f038
 8015a78:	0801f010 	.word	0x0801f010

08015a7c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b084      	sub	sp, #16
 8015a80:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015a82:	f7f2 f859 	bl	8007b38 <sys_now>
 8015a86:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015a88:	4b17      	ldr	r3, [pc, #92]	; (8015ae8 <sys_check_timeouts+0x6c>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015a8e:	68bb      	ldr	r3, [r7, #8]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d022      	beq.n	8015ada <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	685b      	ldr	r3, [r3, #4]
 8015a98:	68fa      	ldr	r2, [r7, #12]
 8015a9a:	1ad3      	subs	r3, r2, r3
 8015a9c:	0fdb      	lsrs	r3, r3, #31
 8015a9e:	f003 0301 	and.w	r3, r3, #1
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d11a      	bne.n	8015ade <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015aa8:	68bb      	ldr	r3, [r7, #8]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	4a0e      	ldr	r2, [pc, #56]	; (8015ae8 <sys_check_timeouts+0x6c>)
 8015aae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	689b      	ldr	r3, [r3, #8]
 8015ab4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	68db      	ldr	r3, [r3, #12]
 8015aba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015abc:	68bb      	ldr	r3, [r7, #8]
 8015abe:	685b      	ldr	r3, [r3, #4]
 8015ac0:	4a0a      	ldr	r2, [pc, #40]	; (8015aec <sys_check_timeouts+0x70>)
 8015ac2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015ac4:	68b9      	ldr	r1, [r7, #8]
 8015ac6:	200a      	movs	r0, #10
 8015ac8:	f7f8 fd38 	bl	800e53c <memp_free>
    if (handler != NULL) {
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d0da      	beq.n	8015a88 <sys_check_timeouts+0xc>
      handler(arg);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	6838      	ldr	r0, [r7, #0]
 8015ad6:	4798      	blx	r3
  do {
 8015ad8:	e7d6      	b.n	8015a88 <sys_check_timeouts+0xc>
      return;
 8015ada:	bf00      	nop
 8015adc:	e000      	b.n	8015ae0 <sys_check_timeouts+0x64>
      return;
 8015ade:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015ae0:	3710      	adds	r7, #16
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}
 8015ae6:	bf00      	nop
 8015ae8:	20004ba0 	.word	0x20004ba0
 8015aec:	20004ba4 	.word	0x20004ba4

08015af0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b082      	sub	sp, #8
 8015af4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015af6:	4b16      	ldr	r3, [pc, #88]	; (8015b50 <sys_timeouts_sleeptime+0x60>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d102      	bne.n	8015b04 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015afe:	f04f 33ff 	mov.w	r3, #4294967295
 8015b02:	e020      	b.n	8015b46 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015b04:	f7f2 f818 	bl	8007b38 <sys_now>
 8015b08:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015b0a:	4b11      	ldr	r3, [pc, #68]	; (8015b50 <sys_timeouts_sleeptime+0x60>)
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	685a      	ldr	r2, [r3, #4]
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	1ad3      	subs	r3, r2, r3
 8015b14:	0fdb      	lsrs	r3, r3, #31
 8015b16:	f003 0301 	and.w	r3, r3, #1
 8015b1a:	b2db      	uxtb	r3, r3
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d001      	beq.n	8015b24 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015b20:	2300      	movs	r3, #0
 8015b22:	e010      	b.n	8015b46 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015b24:	4b0a      	ldr	r3, [pc, #40]	; (8015b50 <sys_timeouts_sleeptime+0x60>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	685a      	ldr	r2, [r3, #4]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	1ad3      	subs	r3, r2, r3
 8015b2e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015b30:	683b      	ldr	r3, [r7, #0]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	da06      	bge.n	8015b44 <sys_timeouts_sleeptime+0x54>
 8015b36:	4b07      	ldr	r3, [pc, #28]	; (8015b54 <sys_timeouts_sleeptime+0x64>)
 8015b38:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015b3c:	4906      	ldr	r1, [pc, #24]	; (8015b58 <sys_timeouts_sleeptime+0x68>)
 8015b3e:	4807      	ldr	r0, [pc, #28]	; (8015b5c <sys_timeouts_sleeptime+0x6c>)
 8015b40:	f005 fb8c 	bl	801b25c <iprintf>
    return ret;
 8015b44:	683b      	ldr	r3, [r7, #0]
  }
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3708      	adds	r7, #8
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	20004ba0 	.word	0x20004ba0
 8015b54:	0801ef9c 	.word	0x0801ef9c
 8015b58:	0801f070 	.word	0x0801f070
 8015b5c:	0801f010 	.word	0x0801f010

08015b60 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015b60:	b580      	push	{r7, lr}
 8015b62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015b64:	f005 fb92 	bl	801b28c <rand>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015b70:	b29b      	uxth	r3, r3
 8015b72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015b76:	b29a      	uxth	r2, r3
 8015b78:	4b01      	ldr	r3, [pc, #4]	; (8015b80 <udp_init+0x20>)
 8015b7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015b7c:	bf00      	nop
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	20000018 	.word	0x20000018

08015b84 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015b84:	b480      	push	{r7}
 8015b86:	b083      	sub	sp, #12
 8015b88:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015b8e:	4b17      	ldr	r3, [pc, #92]	; (8015bec <udp_new_port+0x68>)
 8015b90:	881b      	ldrh	r3, [r3, #0]
 8015b92:	1c5a      	adds	r2, r3, #1
 8015b94:	b291      	uxth	r1, r2
 8015b96:	4a15      	ldr	r2, [pc, #84]	; (8015bec <udp_new_port+0x68>)
 8015b98:	8011      	strh	r1, [r2, #0]
 8015b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	d103      	bne.n	8015baa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015ba2:	4b12      	ldr	r3, [pc, #72]	; (8015bec <udp_new_port+0x68>)
 8015ba4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015ba8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015baa:	4b11      	ldr	r3, [pc, #68]	; (8015bf0 <udp_new_port+0x6c>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	603b      	str	r3, [r7, #0]
 8015bb0:	e011      	b.n	8015bd6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	8a5a      	ldrh	r2, [r3, #18]
 8015bb6:	4b0d      	ldr	r3, [pc, #52]	; (8015bec <udp_new_port+0x68>)
 8015bb8:	881b      	ldrh	r3, [r3, #0]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d108      	bne.n	8015bd0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015bbe:	88fb      	ldrh	r3, [r7, #6]
 8015bc0:	3301      	adds	r3, #1
 8015bc2:	80fb      	strh	r3, [r7, #6]
 8015bc4:	88fb      	ldrh	r3, [r7, #6]
 8015bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015bca:	d3e0      	bcc.n	8015b8e <udp_new_port+0xa>
        return 0;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	e007      	b.n	8015be0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	68db      	ldr	r3, [r3, #12]
 8015bd4:	603b      	str	r3, [r7, #0]
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d1ea      	bne.n	8015bb2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015bdc:	4b03      	ldr	r3, [pc, #12]	; (8015bec <udp_new_port+0x68>)
 8015bde:	881b      	ldrh	r3, [r3, #0]
}
 8015be0:	4618      	mov	r0, r3
 8015be2:	370c      	adds	r7, #12
 8015be4:	46bd      	mov	sp, r7
 8015be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bea:	4770      	bx	lr
 8015bec:	20000018 	.word	0x20000018
 8015bf0:	20011068 	.word	0x20011068

08015bf4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b084      	sub	sp, #16
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	60b9      	str	r1, [r7, #8]
 8015bfe:	4613      	mov	r3, r2
 8015c00:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d105      	bne.n	8015c14 <udp_input_local_match+0x20>
 8015c08:	4b27      	ldr	r3, [pc, #156]	; (8015ca8 <udp_input_local_match+0xb4>)
 8015c0a:	2287      	movs	r2, #135	; 0x87
 8015c0c:	4927      	ldr	r1, [pc, #156]	; (8015cac <udp_input_local_match+0xb8>)
 8015c0e:	4828      	ldr	r0, [pc, #160]	; (8015cb0 <udp_input_local_match+0xbc>)
 8015c10:	f005 fb24 	bl	801b25c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d105      	bne.n	8015c26 <udp_input_local_match+0x32>
 8015c1a:	4b23      	ldr	r3, [pc, #140]	; (8015ca8 <udp_input_local_match+0xb4>)
 8015c1c:	2288      	movs	r2, #136	; 0x88
 8015c1e:	4925      	ldr	r1, [pc, #148]	; (8015cb4 <udp_input_local_match+0xc0>)
 8015c20:	4823      	ldr	r0, [pc, #140]	; (8015cb0 <udp_input_local_match+0xbc>)
 8015c22:	f005 fb1b 	bl	801b25c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	7a1b      	ldrb	r3, [r3, #8]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d00b      	beq.n	8015c46 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	7a1a      	ldrb	r2, [r3, #8]
 8015c32:	4b21      	ldr	r3, [pc, #132]	; (8015cb8 <udp_input_local_match+0xc4>)
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015c3a:	3301      	adds	r3, #1
 8015c3c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d001      	beq.n	8015c46 <udp_input_local_match+0x52>
    return 0;
 8015c42:	2300      	movs	r3, #0
 8015c44:	e02b      	b.n	8015c9e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015c46:	79fb      	ldrb	r3, [r7, #7]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d018      	beq.n	8015c7e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d013      	beq.n	8015c7a <udp_input_local_match+0x86>
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d00f      	beq.n	8015c7a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015c5a:	4b17      	ldr	r3, [pc, #92]	; (8015cb8 <udp_input_local_match+0xc4>)
 8015c5c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c62:	d00a      	beq.n	8015c7a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	681a      	ldr	r2, [r3, #0]
 8015c68:	4b13      	ldr	r3, [pc, #76]	; (8015cb8 <udp_input_local_match+0xc4>)
 8015c6a:	695b      	ldr	r3, [r3, #20]
 8015c6c:	405a      	eors	r2, r3
 8015c6e:	68bb      	ldr	r3, [r7, #8]
 8015c70:	3308      	adds	r3, #8
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d110      	bne.n	8015c9c <udp_input_local_match+0xa8>
          return 1;
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	e00f      	b.n	8015c9e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015c7e:	68fb      	ldr	r3, [r7, #12]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d009      	beq.n	8015c98 <udp_input_local_match+0xa4>
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d005      	beq.n	8015c98 <udp_input_local_match+0xa4>
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	681a      	ldr	r2, [r3, #0]
 8015c90:	4b09      	ldr	r3, [pc, #36]	; (8015cb8 <udp_input_local_match+0xc4>)
 8015c92:	695b      	ldr	r3, [r3, #20]
 8015c94:	429a      	cmp	r2, r3
 8015c96:	d101      	bne.n	8015c9c <udp_input_local_match+0xa8>
        return 1;
 8015c98:	2301      	movs	r3, #1
 8015c9a:	e000      	b.n	8015c9e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015c9c:	2300      	movs	r3, #0
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3710      	adds	r7, #16
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	bd80      	pop	{r7, pc}
 8015ca6:	bf00      	nop
 8015ca8:	0801f084 	.word	0x0801f084
 8015cac:	0801f0b4 	.word	0x0801f0b4
 8015cb0:	0801f0d8 	.word	0x0801f0d8
 8015cb4:	0801f100 	.word	0x0801f100
 8015cb8:	2000d93c 	.word	0x2000d93c

08015cbc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015cbc:	b590      	push	{r4, r7, lr}
 8015cbe:	b08d      	sub	sp, #52	; 0x34
 8015cc0:	af02      	add	r7, sp, #8
 8015cc2:	6078      	str	r0, [r7, #4]
 8015cc4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d105      	bne.n	8015cdc <udp_input+0x20>
 8015cd0:	4b7c      	ldr	r3, [pc, #496]	; (8015ec4 <udp_input+0x208>)
 8015cd2:	22cf      	movs	r2, #207	; 0xcf
 8015cd4:	497c      	ldr	r1, [pc, #496]	; (8015ec8 <udp_input+0x20c>)
 8015cd6:	487d      	ldr	r0, [pc, #500]	; (8015ecc <udp_input+0x210>)
 8015cd8:	f005 fac0 	bl	801b25c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015cdc:	683b      	ldr	r3, [r7, #0]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d105      	bne.n	8015cee <udp_input+0x32>
 8015ce2:	4b78      	ldr	r3, [pc, #480]	; (8015ec4 <udp_input+0x208>)
 8015ce4:	22d0      	movs	r2, #208	; 0xd0
 8015ce6:	497a      	ldr	r1, [pc, #488]	; (8015ed0 <udp_input+0x214>)
 8015ce8:	4878      	ldr	r0, [pc, #480]	; (8015ecc <udp_input+0x210>)
 8015cea:	f005 fab7 	bl	801b25c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	895b      	ldrh	r3, [r3, #10]
 8015cf2:	2b07      	cmp	r3, #7
 8015cf4:	d803      	bhi.n	8015cfe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	f7f9 fac4 	bl	800f284 <pbuf_free>
    goto end;
 8015cfc:	e0de      	b.n	8015ebc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	685b      	ldr	r3, [r3, #4]
 8015d02:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015d04:	4b73      	ldr	r3, [pc, #460]	; (8015ed4 <udp_input+0x218>)
 8015d06:	695b      	ldr	r3, [r3, #20]
 8015d08:	4a72      	ldr	r2, [pc, #456]	; (8015ed4 <udp_input+0x218>)
 8015d0a:	6812      	ldr	r2, [r2, #0]
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f001 ff3e 	bl	8017b90 <ip4_addr_isbroadcast_u32>
 8015d14:	4603      	mov	r3, r0
 8015d16:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015d18:	697b      	ldr	r3, [r7, #20]
 8015d1a:	881b      	ldrh	r3, [r3, #0]
 8015d1c:	b29b      	uxth	r3, r3
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7f7 ff04 	bl	800db2c <lwip_htons>
 8015d24:	4603      	mov	r3, r0
 8015d26:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015d28:	697b      	ldr	r3, [r7, #20]
 8015d2a:	885b      	ldrh	r3, [r3, #2]
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7f7 fefc 	bl	800db2c <lwip_htons>
 8015d34:	4603      	mov	r3, r0
 8015d36:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015d38:	2300      	movs	r3, #0
 8015d3a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015d40:	2300      	movs	r3, #0
 8015d42:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d44:	4b64      	ldr	r3, [pc, #400]	; (8015ed8 <udp_input+0x21c>)
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	627b      	str	r3, [r7, #36]	; 0x24
 8015d4a:	e054      	b.n	8015df6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d4e:	8a5b      	ldrh	r3, [r3, #18]
 8015d50:	89fa      	ldrh	r2, [r7, #14]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d14a      	bne.n	8015dec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015d56:	7cfb      	ldrb	r3, [r7, #19]
 8015d58:	461a      	mov	r2, r3
 8015d5a:	6839      	ldr	r1, [r7, #0]
 8015d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d5e:	f7ff ff49 	bl	8015bf4 <udp_input_local_match>
 8015d62:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d041      	beq.n	8015dec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d6a:	7c1b      	ldrb	r3, [r3, #16]
 8015d6c:	f003 0304 	and.w	r3, r3, #4
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d11d      	bne.n	8015db0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015d74:	69fb      	ldr	r3, [r7, #28]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d102      	bne.n	8015d80 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7c:	61fb      	str	r3, [r7, #28]
 8015d7e:	e017      	b.n	8015db0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015d80:	7cfb      	ldrb	r3, [r7, #19]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d014      	beq.n	8015db0 <udp_input+0xf4>
 8015d86:	4b53      	ldr	r3, [pc, #332]	; (8015ed4 <udp_input+0x218>)
 8015d88:	695b      	ldr	r3, [r3, #20]
 8015d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d8e:	d10f      	bne.n	8015db0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015d90:	69fb      	ldr	r3, [r7, #28]
 8015d92:	681a      	ldr	r2, [r3, #0]
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	3304      	adds	r3, #4
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d008      	beq.n	8015db0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da0:	681a      	ldr	r2, [r3, #0]
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	3304      	adds	r3, #4
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	429a      	cmp	r2, r3
 8015daa:	d101      	bne.n	8015db0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db2:	8a9b      	ldrh	r3, [r3, #20]
 8015db4:	8a3a      	ldrh	r2, [r7, #16]
 8015db6:	429a      	cmp	r2, r3
 8015db8:	d118      	bne.n	8015dec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dbc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d005      	beq.n	8015dce <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc4:	685a      	ldr	r2, [r3, #4]
 8015dc6:	4b43      	ldr	r3, [pc, #268]	; (8015ed4 <udp_input+0x218>)
 8015dc8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d10e      	bne.n	8015dec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015dce:	6a3b      	ldr	r3, [r7, #32]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d014      	beq.n	8015dfe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd6:	68da      	ldr	r2, [r3, #12]
 8015dd8:	6a3b      	ldr	r3, [r7, #32]
 8015dda:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015ddc:	4b3e      	ldr	r3, [pc, #248]	; (8015ed8 <udp_input+0x21c>)
 8015dde:	681a      	ldr	r2, [r3, #0]
 8015de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015de4:	4a3c      	ldr	r2, [pc, #240]	; (8015ed8 <udp_input+0x21c>)
 8015de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015dea:	e008      	b.n	8015dfe <udp_input+0x142>
      }
    }

    prev = pcb;
 8015dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df2:	68db      	ldr	r3, [r3, #12]
 8015df4:	627b      	str	r3, [r7, #36]	; 0x24
 8015df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d1a7      	bne.n	8015d4c <udp_input+0x90>
 8015dfc:	e000      	b.n	8015e00 <udp_input+0x144>
        break;
 8015dfe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d101      	bne.n	8015e0a <udp_input+0x14e>
    pcb = uncon_pcb;
 8015e06:	69fb      	ldr	r3, [r7, #28]
 8015e08:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d002      	beq.n	8015e16 <udp_input+0x15a>
    for_us = 1;
 8015e10:	2301      	movs	r3, #1
 8015e12:	76fb      	strb	r3, [r7, #27]
 8015e14:	e00a      	b.n	8015e2c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	3304      	adds	r3, #4
 8015e1a:	681a      	ldr	r2, [r3, #0]
 8015e1c:	4b2d      	ldr	r3, [pc, #180]	; (8015ed4 <udp_input+0x218>)
 8015e1e:	695b      	ldr	r3, [r3, #20]
 8015e20:	429a      	cmp	r2, r3
 8015e22:	bf0c      	ite	eq
 8015e24:	2301      	moveq	r3, #1
 8015e26:	2300      	movne	r3, #0
 8015e28:	b2db      	uxtb	r3, r3
 8015e2a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015e2c:	7efb      	ldrb	r3, [r7, #27]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d041      	beq.n	8015eb6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015e32:	2108      	movs	r1, #8
 8015e34:	6878      	ldr	r0, [r7, #4]
 8015e36:	f7f9 f99f 	bl	800f178 <pbuf_remove_header>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d00a      	beq.n	8015e56 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015e40:	4b20      	ldr	r3, [pc, #128]	; (8015ec4 <udp_input+0x208>)
 8015e42:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015e46:	4925      	ldr	r1, [pc, #148]	; (8015edc <udp_input+0x220>)
 8015e48:	4820      	ldr	r0, [pc, #128]	; (8015ecc <udp_input+0x210>)
 8015e4a:	f005 fa07 	bl	801b25c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f7f9 fa18 	bl	800f284 <pbuf_free>
      goto end;
 8015e54:	e032      	b.n	8015ebc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d012      	beq.n	8015e82 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e5e:	699b      	ldr	r3, [r3, #24]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d00a      	beq.n	8015e7a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e66:	699c      	ldr	r4, [r3, #24]
 8015e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e6a:	69d8      	ldr	r0, [r3, #28]
 8015e6c:	8a3b      	ldrh	r3, [r7, #16]
 8015e6e:	9300      	str	r3, [sp, #0]
 8015e70:	4b1b      	ldr	r3, [pc, #108]	; (8015ee0 <udp_input+0x224>)
 8015e72:	687a      	ldr	r2, [r7, #4]
 8015e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015e76:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015e78:	e021      	b.n	8015ebe <udp_input+0x202>
        pbuf_free(p);
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	f7f9 fa02 	bl	800f284 <pbuf_free>
        goto end;
 8015e80:	e01c      	b.n	8015ebc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015e82:	7cfb      	ldrb	r3, [r7, #19]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d112      	bne.n	8015eae <udp_input+0x1f2>
 8015e88:	4b12      	ldr	r3, [pc, #72]	; (8015ed4 <udp_input+0x218>)
 8015e8a:	695b      	ldr	r3, [r3, #20]
 8015e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e90:	2be0      	cmp	r3, #224	; 0xe0
 8015e92:	d00c      	beq.n	8015eae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015e94:	4b0f      	ldr	r3, [pc, #60]	; (8015ed4 <udp_input+0x218>)
 8015e96:	899b      	ldrh	r3, [r3, #12]
 8015e98:	3308      	adds	r3, #8
 8015e9a:	b29b      	uxth	r3, r3
 8015e9c:	b21b      	sxth	r3, r3
 8015e9e:	4619      	mov	r1, r3
 8015ea0:	6878      	ldr	r0, [r7, #4]
 8015ea2:	f7f9 f9dc 	bl	800f25e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015ea6:	2103      	movs	r1, #3
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f001 fb51 	bl	8017550 <icmp_dest_unreach>
      pbuf_free(p);
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f7f9 f9e8 	bl	800f284 <pbuf_free>
  return;
 8015eb4:	e003      	b.n	8015ebe <udp_input+0x202>
    pbuf_free(p);
 8015eb6:	6878      	ldr	r0, [r7, #4]
 8015eb8:	f7f9 f9e4 	bl	800f284 <pbuf_free>
  return;
 8015ebc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015ebe:	372c      	adds	r7, #44	; 0x2c
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd90      	pop	{r4, r7, pc}
 8015ec4:	0801f084 	.word	0x0801f084
 8015ec8:	0801f128 	.word	0x0801f128
 8015ecc:	0801f0d8 	.word	0x0801f0d8
 8015ed0:	0801f140 	.word	0x0801f140
 8015ed4:	2000d93c 	.word	0x2000d93c
 8015ed8:	20011068 	.word	0x20011068
 8015edc:	0801f15c 	.word	0x0801f15c
 8015ee0:	2000d94c 	.word	0x2000d94c

08015ee4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b082      	sub	sp, #8
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
 8015eec:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d109      	bne.n	8015f08 <udp_send+0x24>
 8015ef4:	4b11      	ldr	r3, [pc, #68]	; (8015f3c <udp_send+0x58>)
 8015ef6:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015efa:	4911      	ldr	r1, [pc, #68]	; (8015f40 <udp_send+0x5c>)
 8015efc:	4811      	ldr	r0, [pc, #68]	; (8015f44 <udp_send+0x60>)
 8015efe:	f005 f9ad 	bl	801b25c <iprintf>
 8015f02:	f06f 030f 	mvn.w	r3, #15
 8015f06:	e015      	b.n	8015f34 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d109      	bne.n	8015f22 <udp_send+0x3e>
 8015f0e:	4b0b      	ldr	r3, [pc, #44]	; (8015f3c <udp_send+0x58>)
 8015f10:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015f14:	490c      	ldr	r1, [pc, #48]	; (8015f48 <udp_send+0x64>)
 8015f16:	480b      	ldr	r0, [pc, #44]	; (8015f44 <udp_send+0x60>)
 8015f18:	f005 f9a0 	bl	801b25c <iprintf>
 8015f1c:	f06f 030f 	mvn.w	r3, #15
 8015f20:	e008      	b.n	8015f34 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	1d1a      	adds	r2, r3, #4
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	8a9b      	ldrh	r3, [r3, #20]
 8015f2a:	6839      	ldr	r1, [r7, #0]
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f000 f80d 	bl	8015f4c <udp_sendto>
 8015f32:	4603      	mov	r3, r0
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3708      	adds	r7, #8
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	0801f084 	.word	0x0801f084
 8015f40:	0801f178 	.word	0x0801f178
 8015f44:	0801f0d8 	.word	0x0801f0d8
 8015f48:	0801f190 	.word	0x0801f190

08015f4c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b088      	sub	sp, #32
 8015f50:	af02      	add	r7, sp, #8
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	60b9      	str	r1, [r7, #8]
 8015f56:	607a      	str	r2, [r7, #4]
 8015f58:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d109      	bne.n	8015f74 <udp_sendto+0x28>
 8015f60:	4b23      	ldr	r3, [pc, #140]	; (8015ff0 <udp_sendto+0xa4>)
 8015f62:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015f66:	4923      	ldr	r1, [pc, #140]	; (8015ff4 <udp_sendto+0xa8>)
 8015f68:	4823      	ldr	r0, [pc, #140]	; (8015ff8 <udp_sendto+0xac>)
 8015f6a:	f005 f977 	bl	801b25c <iprintf>
 8015f6e:	f06f 030f 	mvn.w	r3, #15
 8015f72:	e038      	b.n	8015fe6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015f74:	68bb      	ldr	r3, [r7, #8]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d109      	bne.n	8015f8e <udp_sendto+0x42>
 8015f7a:	4b1d      	ldr	r3, [pc, #116]	; (8015ff0 <udp_sendto+0xa4>)
 8015f7c:	f240 2219 	movw	r2, #537	; 0x219
 8015f80:	491e      	ldr	r1, [pc, #120]	; (8015ffc <udp_sendto+0xb0>)
 8015f82:	481d      	ldr	r0, [pc, #116]	; (8015ff8 <udp_sendto+0xac>)
 8015f84:	f005 f96a 	bl	801b25c <iprintf>
 8015f88:	f06f 030f 	mvn.w	r3, #15
 8015f8c:	e02b      	b.n	8015fe6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d109      	bne.n	8015fa8 <udp_sendto+0x5c>
 8015f94:	4b16      	ldr	r3, [pc, #88]	; (8015ff0 <udp_sendto+0xa4>)
 8015f96:	f240 221a 	movw	r2, #538	; 0x21a
 8015f9a:	4919      	ldr	r1, [pc, #100]	; (8016000 <udp_sendto+0xb4>)
 8015f9c:	4816      	ldr	r0, [pc, #88]	; (8015ff8 <udp_sendto+0xac>)
 8015f9e:	f005 f95d 	bl	801b25c <iprintf>
 8015fa2:	f06f 030f 	mvn.w	r3, #15
 8015fa6:	e01e      	b.n	8015fe6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	7a1b      	ldrb	r3, [r3, #8]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d006      	beq.n	8015fbe <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	7a1b      	ldrb	r3, [r3, #8]
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	f7f8 fdd7 	bl	800eb68 <netif_get_by_index>
 8015fba:	6178      	str	r0, [r7, #20]
 8015fbc:	e003      	b.n	8015fc6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015fbe:	6878      	ldr	r0, [r7, #4]
 8015fc0:	f001 fb50 	bl	8017664 <ip4_route>
 8015fc4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d102      	bne.n	8015fd2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015fcc:	f06f 0303 	mvn.w	r3, #3
 8015fd0:	e009      	b.n	8015fe6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015fd2:	887a      	ldrh	r2, [r7, #2]
 8015fd4:	697b      	ldr	r3, [r7, #20]
 8015fd6:	9300      	str	r3, [sp, #0]
 8015fd8:	4613      	mov	r3, r2
 8015fda:	687a      	ldr	r2, [r7, #4]
 8015fdc:	68b9      	ldr	r1, [r7, #8]
 8015fde:	68f8      	ldr	r0, [r7, #12]
 8015fe0:	f000 f810 	bl	8016004 <udp_sendto_if>
 8015fe4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3718      	adds	r7, #24
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop
 8015ff0:	0801f084 	.word	0x0801f084
 8015ff4:	0801f1a8 	.word	0x0801f1a8
 8015ff8:	0801f0d8 	.word	0x0801f0d8
 8015ffc:	0801f1c0 	.word	0x0801f1c0
 8016000:	0801f1dc 	.word	0x0801f1dc

08016004 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b088      	sub	sp, #32
 8016008:	af02      	add	r7, sp, #8
 801600a:	60f8      	str	r0, [r7, #12]
 801600c:	60b9      	str	r1, [r7, #8]
 801600e:	607a      	str	r2, [r7, #4]
 8016010:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d109      	bne.n	801602c <udp_sendto_if+0x28>
 8016018:	4b2e      	ldr	r3, [pc, #184]	; (80160d4 <udp_sendto_if+0xd0>)
 801601a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801601e:	492e      	ldr	r1, [pc, #184]	; (80160d8 <udp_sendto_if+0xd4>)
 8016020:	482e      	ldr	r0, [pc, #184]	; (80160dc <udp_sendto_if+0xd8>)
 8016022:	f005 f91b 	bl	801b25c <iprintf>
 8016026:	f06f 030f 	mvn.w	r3, #15
 801602a:	e04f      	b.n	80160cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d109      	bne.n	8016046 <udp_sendto_if+0x42>
 8016032:	4b28      	ldr	r3, [pc, #160]	; (80160d4 <udp_sendto_if+0xd0>)
 8016034:	f240 2281 	movw	r2, #641	; 0x281
 8016038:	4929      	ldr	r1, [pc, #164]	; (80160e0 <udp_sendto_if+0xdc>)
 801603a:	4828      	ldr	r0, [pc, #160]	; (80160dc <udp_sendto_if+0xd8>)
 801603c:	f005 f90e 	bl	801b25c <iprintf>
 8016040:	f06f 030f 	mvn.w	r3, #15
 8016044:	e042      	b.n	80160cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d109      	bne.n	8016060 <udp_sendto_if+0x5c>
 801604c:	4b21      	ldr	r3, [pc, #132]	; (80160d4 <udp_sendto_if+0xd0>)
 801604e:	f240 2282 	movw	r2, #642	; 0x282
 8016052:	4924      	ldr	r1, [pc, #144]	; (80160e4 <udp_sendto_if+0xe0>)
 8016054:	4821      	ldr	r0, [pc, #132]	; (80160dc <udp_sendto_if+0xd8>)
 8016056:	f005 f901 	bl	801b25c <iprintf>
 801605a:	f06f 030f 	mvn.w	r3, #15
 801605e:	e035      	b.n	80160cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8016060:	6a3b      	ldr	r3, [r7, #32]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d109      	bne.n	801607a <udp_sendto_if+0x76>
 8016066:	4b1b      	ldr	r3, [pc, #108]	; (80160d4 <udp_sendto_if+0xd0>)
 8016068:	f240 2283 	movw	r2, #643	; 0x283
 801606c:	491e      	ldr	r1, [pc, #120]	; (80160e8 <udp_sendto_if+0xe4>)
 801606e:	481b      	ldr	r0, [pc, #108]	; (80160dc <udp_sendto_if+0xd8>)
 8016070:	f005 f8f4 	bl	801b25c <iprintf>
 8016074:	f06f 030f 	mvn.w	r3, #15
 8016078:	e028      	b.n	80160cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d009      	beq.n	8016094 <udp_sendto_if+0x90>
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d005      	beq.n	8016094 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016090:	2be0      	cmp	r3, #224	; 0xe0
 8016092:	d103      	bne.n	801609c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016094:	6a3b      	ldr	r3, [r7, #32]
 8016096:	3304      	adds	r3, #4
 8016098:	617b      	str	r3, [r7, #20]
 801609a:	e00b      	b.n	80160b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681a      	ldr	r2, [r3, #0]
 80160a0:	6a3b      	ldr	r3, [r7, #32]
 80160a2:	3304      	adds	r3, #4
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	429a      	cmp	r2, r3
 80160a8:	d002      	beq.n	80160b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80160aa:	f06f 0303 	mvn.w	r3, #3
 80160ae:	e00d      	b.n	80160cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80160b4:	887a      	ldrh	r2, [r7, #2]
 80160b6:	697b      	ldr	r3, [r7, #20]
 80160b8:	9301      	str	r3, [sp, #4]
 80160ba:	6a3b      	ldr	r3, [r7, #32]
 80160bc:	9300      	str	r3, [sp, #0]
 80160be:	4613      	mov	r3, r2
 80160c0:	687a      	ldr	r2, [r7, #4]
 80160c2:	68b9      	ldr	r1, [r7, #8]
 80160c4:	68f8      	ldr	r0, [r7, #12]
 80160c6:	f000 f811 	bl	80160ec <udp_sendto_if_src>
 80160ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	3718      	adds	r7, #24
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	0801f084 	.word	0x0801f084
 80160d8:	0801f1f8 	.word	0x0801f1f8
 80160dc:	0801f0d8 	.word	0x0801f0d8
 80160e0:	0801f214 	.word	0x0801f214
 80160e4:	0801f230 	.word	0x0801f230
 80160e8:	0801f250 	.word	0x0801f250

080160ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b08c      	sub	sp, #48	; 0x30
 80160f0:	af04      	add	r7, sp, #16
 80160f2:	60f8      	str	r0, [r7, #12]
 80160f4:	60b9      	str	r1, [r7, #8]
 80160f6:	607a      	str	r2, [r7, #4]
 80160f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d109      	bne.n	8016114 <udp_sendto_if_src+0x28>
 8016100:	4b65      	ldr	r3, [pc, #404]	; (8016298 <udp_sendto_if_src+0x1ac>)
 8016102:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016106:	4965      	ldr	r1, [pc, #404]	; (801629c <udp_sendto_if_src+0x1b0>)
 8016108:	4865      	ldr	r0, [pc, #404]	; (80162a0 <udp_sendto_if_src+0x1b4>)
 801610a:	f005 f8a7 	bl	801b25c <iprintf>
 801610e:	f06f 030f 	mvn.w	r3, #15
 8016112:	e0bc      	b.n	801628e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016114:	68bb      	ldr	r3, [r7, #8]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d109      	bne.n	801612e <udp_sendto_if_src+0x42>
 801611a:	4b5f      	ldr	r3, [pc, #380]	; (8016298 <udp_sendto_if_src+0x1ac>)
 801611c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016120:	4960      	ldr	r1, [pc, #384]	; (80162a4 <udp_sendto_if_src+0x1b8>)
 8016122:	485f      	ldr	r0, [pc, #380]	; (80162a0 <udp_sendto_if_src+0x1b4>)
 8016124:	f005 f89a 	bl	801b25c <iprintf>
 8016128:	f06f 030f 	mvn.w	r3, #15
 801612c:	e0af      	b.n	801628e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d109      	bne.n	8016148 <udp_sendto_if_src+0x5c>
 8016134:	4b58      	ldr	r3, [pc, #352]	; (8016298 <udp_sendto_if_src+0x1ac>)
 8016136:	f240 22d3 	movw	r2, #723	; 0x2d3
 801613a:	495b      	ldr	r1, [pc, #364]	; (80162a8 <udp_sendto_if_src+0x1bc>)
 801613c:	4858      	ldr	r0, [pc, #352]	; (80162a0 <udp_sendto_if_src+0x1b4>)
 801613e:	f005 f88d 	bl	801b25c <iprintf>
 8016142:	f06f 030f 	mvn.w	r3, #15
 8016146:	e0a2      	b.n	801628e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614a:	2b00      	cmp	r3, #0
 801614c:	d109      	bne.n	8016162 <udp_sendto_if_src+0x76>
 801614e:	4b52      	ldr	r3, [pc, #328]	; (8016298 <udp_sendto_if_src+0x1ac>)
 8016150:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016154:	4955      	ldr	r1, [pc, #340]	; (80162ac <udp_sendto_if_src+0x1c0>)
 8016156:	4852      	ldr	r0, [pc, #328]	; (80162a0 <udp_sendto_if_src+0x1b4>)
 8016158:	f005 f880 	bl	801b25c <iprintf>
 801615c:	f06f 030f 	mvn.w	r3, #15
 8016160:	e095      	b.n	801628e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8016162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016164:	2b00      	cmp	r3, #0
 8016166:	d109      	bne.n	801617c <udp_sendto_if_src+0x90>
 8016168:	4b4b      	ldr	r3, [pc, #300]	; (8016298 <udp_sendto_if_src+0x1ac>)
 801616a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801616e:	4950      	ldr	r1, [pc, #320]	; (80162b0 <udp_sendto_if_src+0x1c4>)
 8016170:	484b      	ldr	r0, [pc, #300]	; (80162a0 <udp_sendto_if_src+0x1b4>)
 8016172:	f005 f873 	bl	801b25c <iprintf>
 8016176:	f06f 030f 	mvn.w	r3, #15
 801617a:	e088      	b.n	801628e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	8a5b      	ldrh	r3, [r3, #18]
 8016180:	2b00      	cmp	r3, #0
 8016182:	d10f      	bne.n	80161a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016184:	68f9      	ldr	r1, [r7, #12]
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	8a5b      	ldrh	r3, [r3, #18]
 801618a:	461a      	mov	r2, r3
 801618c:	68f8      	ldr	r0, [r7, #12]
 801618e:	f000 f893 	bl	80162b8 <udp_bind>
 8016192:	4603      	mov	r3, r0
 8016194:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016196:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d002      	beq.n	80161a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801619e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80161a2:	e074      	b.n	801628e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	891b      	ldrh	r3, [r3, #8]
 80161a8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80161ac:	4293      	cmp	r3, r2
 80161ae:	d902      	bls.n	80161b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80161b0:	f04f 33ff 	mov.w	r3, #4294967295
 80161b4:	e06b      	b.n	801628e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80161b6:	2108      	movs	r1, #8
 80161b8:	68b8      	ldr	r0, [r7, #8]
 80161ba:	f7f8 ffcd 	bl	800f158 <pbuf_add_header>
 80161be:	4603      	mov	r3, r0
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d015      	beq.n	80161f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80161c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161c8:	2108      	movs	r1, #8
 80161ca:	2022      	movs	r0, #34	; 0x22
 80161cc:	f7f8 fd76 	bl	800ecbc <pbuf_alloc>
 80161d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80161d2:	69fb      	ldr	r3, [r7, #28]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d102      	bne.n	80161de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80161d8:	f04f 33ff 	mov.w	r3, #4294967295
 80161dc:	e057      	b.n	801628e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80161de:	68bb      	ldr	r3, [r7, #8]
 80161e0:	891b      	ldrh	r3, [r3, #8]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d006      	beq.n	80161f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80161e6:	68b9      	ldr	r1, [r7, #8]
 80161e8:	69f8      	ldr	r0, [r7, #28]
 80161ea:	f7f9 f96f 	bl	800f4cc <pbuf_chain>
 80161ee:	e001      	b.n	80161f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80161f0:	68bb      	ldr	r3, [r7, #8]
 80161f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	895b      	ldrh	r3, [r3, #10]
 80161f8:	2b07      	cmp	r3, #7
 80161fa:	d806      	bhi.n	801620a <udp_sendto_if_src+0x11e>
 80161fc:	4b26      	ldr	r3, [pc, #152]	; (8016298 <udp_sendto_if_src+0x1ac>)
 80161fe:	f240 320d 	movw	r2, #781	; 0x30d
 8016202:	492c      	ldr	r1, [pc, #176]	; (80162b4 <udp_sendto_if_src+0x1c8>)
 8016204:	4826      	ldr	r0, [pc, #152]	; (80162a0 <udp_sendto_if_src+0x1b4>)
 8016206:	f005 f829 	bl	801b25c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801620a:	69fb      	ldr	r3, [r7, #28]
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	8a5b      	ldrh	r3, [r3, #18]
 8016214:	4618      	mov	r0, r3
 8016216:	f7f7 fc89 	bl	800db2c <lwip_htons>
 801621a:	4603      	mov	r3, r0
 801621c:	461a      	mov	r2, r3
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8016222:	887b      	ldrh	r3, [r7, #2]
 8016224:	4618      	mov	r0, r3
 8016226:	f7f7 fc81 	bl	800db2c <lwip_htons>
 801622a:	4603      	mov	r3, r0
 801622c:	461a      	mov	r2, r3
 801622e:	697b      	ldr	r3, [r7, #20]
 8016230:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8016232:	697b      	ldr	r3, [r7, #20]
 8016234:	2200      	movs	r2, #0
 8016236:	719a      	strb	r2, [r3, #6]
 8016238:	2200      	movs	r2, #0
 801623a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801623c:	69fb      	ldr	r3, [r7, #28]
 801623e:	891b      	ldrh	r3, [r3, #8]
 8016240:	4618      	mov	r0, r3
 8016242:	f7f7 fc73 	bl	800db2c <lwip_htons>
 8016246:	4603      	mov	r3, r0
 8016248:	461a      	mov	r2, r3
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801624e:	2311      	movs	r3, #17
 8016250:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	7adb      	ldrb	r3, [r3, #11]
 8016256:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	7a9b      	ldrb	r3, [r3, #10]
 801625c:	7cb9      	ldrb	r1, [r7, #18]
 801625e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016260:	9202      	str	r2, [sp, #8]
 8016262:	7cfa      	ldrb	r2, [r7, #19]
 8016264:	9201      	str	r2, [sp, #4]
 8016266:	9300      	str	r3, [sp, #0]
 8016268:	460b      	mov	r3, r1
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801626e:	69f8      	ldr	r0, [r7, #28]
 8016270:	f001 fbe0 	bl	8017a34 <ip4_output_if_src>
 8016274:	4603      	mov	r3, r0
 8016276:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016278:	69fa      	ldr	r2, [r7, #28]
 801627a:	68bb      	ldr	r3, [r7, #8]
 801627c:	429a      	cmp	r2, r3
 801627e:	d004      	beq.n	801628a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016280:	69f8      	ldr	r0, [r7, #28]
 8016282:	f7f8 ffff 	bl	800f284 <pbuf_free>
    q = NULL;
 8016286:	2300      	movs	r3, #0
 8016288:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801628a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801628e:	4618      	mov	r0, r3
 8016290:	3720      	adds	r7, #32
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}
 8016296:	bf00      	nop
 8016298:	0801f084 	.word	0x0801f084
 801629c:	0801f270 	.word	0x0801f270
 80162a0:	0801f0d8 	.word	0x0801f0d8
 80162a4:	0801f290 	.word	0x0801f290
 80162a8:	0801f2b0 	.word	0x0801f2b0
 80162ac:	0801f2d4 	.word	0x0801f2d4
 80162b0:	0801f2f8 	.word	0x0801f2f8
 80162b4:	0801f31c 	.word	0x0801f31c

080162b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b086      	sub	sp, #24
 80162bc:	af00      	add	r7, sp, #0
 80162be:	60f8      	str	r0, [r7, #12]
 80162c0:	60b9      	str	r1, [r7, #8]
 80162c2:	4613      	mov	r3, r2
 80162c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d101      	bne.n	80162d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80162cc:	4b39      	ldr	r3, [pc, #228]	; (80163b4 <udp_bind+0xfc>)
 80162ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d109      	bne.n	80162ea <udp_bind+0x32>
 80162d6:	4b38      	ldr	r3, [pc, #224]	; (80163b8 <udp_bind+0x100>)
 80162d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80162dc:	4937      	ldr	r1, [pc, #220]	; (80163bc <udp_bind+0x104>)
 80162de:	4838      	ldr	r0, [pc, #224]	; (80163c0 <udp_bind+0x108>)
 80162e0:	f004 ffbc 	bl	801b25c <iprintf>
 80162e4:	f06f 030f 	mvn.w	r3, #15
 80162e8:	e060      	b.n	80163ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80162ea:	2300      	movs	r3, #0
 80162ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80162ee:	4b35      	ldr	r3, [pc, #212]	; (80163c4 <udp_bind+0x10c>)
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	617b      	str	r3, [r7, #20]
 80162f4:	e009      	b.n	801630a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80162f6:	68fa      	ldr	r2, [r7, #12]
 80162f8:	697b      	ldr	r3, [r7, #20]
 80162fa:	429a      	cmp	r2, r3
 80162fc:	d102      	bne.n	8016304 <udp_bind+0x4c>
      rebind = 1;
 80162fe:	2301      	movs	r3, #1
 8016300:	74fb      	strb	r3, [r7, #19]
      break;
 8016302:	e005      	b.n	8016310 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016304:	697b      	ldr	r3, [r7, #20]
 8016306:	68db      	ldr	r3, [r3, #12]
 8016308:	617b      	str	r3, [r7, #20]
 801630a:	697b      	ldr	r3, [r7, #20]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d1f2      	bne.n	80162f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016310:	88fb      	ldrh	r3, [r7, #6]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d109      	bne.n	801632a <udp_bind+0x72>
    port = udp_new_port();
 8016316:	f7ff fc35 	bl	8015b84 <udp_new_port>
 801631a:	4603      	mov	r3, r0
 801631c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801631e:	88fb      	ldrh	r3, [r7, #6]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d12c      	bne.n	801637e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016324:	f06f 0307 	mvn.w	r3, #7
 8016328:	e040      	b.n	80163ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801632a:	4b26      	ldr	r3, [pc, #152]	; (80163c4 <udp_bind+0x10c>)
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	617b      	str	r3, [r7, #20]
 8016330:	e022      	b.n	8016378 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8016332:	68fa      	ldr	r2, [r7, #12]
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	429a      	cmp	r2, r3
 8016338:	d01b      	beq.n	8016372 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	8a5b      	ldrh	r3, [r3, #18]
 801633e:	88fa      	ldrh	r2, [r7, #6]
 8016340:	429a      	cmp	r2, r3
 8016342:	d116      	bne.n	8016372 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	681a      	ldr	r2, [r3, #0]
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801634c:	429a      	cmp	r2, r3
 801634e:	d00d      	beq.n	801636c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d00a      	beq.n	801636c <udp_bind+0xb4>
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d006      	beq.n	801636c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801635e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016360:	2b00      	cmp	r3, #0
 8016362:	d003      	beq.n	801636c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016364:	697b      	ldr	r3, [r7, #20]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d102      	bne.n	8016372 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801636c:	f06f 0307 	mvn.w	r3, #7
 8016370:	e01c      	b.n	80163ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	68db      	ldr	r3, [r3, #12]
 8016376:	617b      	str	r3, [r7, #20]
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d1d9      	bne.n	8016332 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d002      	beq.n	801638a <udp_bind+0xd2>
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	e000      	b.n	801638c <udp_bind+0xd4>
 801638a:	2300      	movs	r3, #0
 801638c:	68fa      	ldr	r2, [r7, #12]
 801638e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	88fa      	ldrh	r2, [r7, #6]
 8016394:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016396:	7cfb      	ldrb	r3, [r7, #19]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d106      	bne.n	80163aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801639c:	4b09      	ldr	r3, [pc, #36]	; (80163c4 <udp_bind+0x10c>)
 801639e:	681a      	ldr	r2, [r3, #0]
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80163a4:	4a07      	ldr	r2, [pc, #28]	; (80163c4 <udp_bind+0x10c>)
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80163aa:	2300      	movs	r3, #0
}
 80163ac:	4618      	mov	r0, r3
 80163ae:	3718      	adds	r7, #24
 80163b0:	46bd      	mov	sp, r7
 80163b2:	bd80      	pop	{r7, pc}
 80163b4:	0801fdf4 	.word	0x0801fdf4
 80163b8:	0801f084 	.word	0x0801f084
 80163bc:	0801f34c 	.word	0x0801f34c
 80163c0:	0801f0d8 	.word	0x0801f0d8
 80163c4:	20011068 	.word	0x20011068

080163c8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80163c8:	b580      	push	{r7, lr}
 80163ca:	b084      	sub	sp, #16
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	60f8      	str	r0, [r7, #12]
 80163d0:	60b9      	str	r1, [r7, #8]
 80163d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d107      	bne.n	80163ea <udp_recv+0x22>
 80163da:	4b08      	ldr	r3, [pc, #32]	; (80163fc <udp_recv+0x34>)
 80163dc:	f240 428a 	movw	r2, #1162	; 0x48a
 80163e0:	4907      	ldr	r1, [pc, #28]	; (8016400 <udp_recv+0x38>)
 80163e2:	4808      	ldr	r0, [pc, #32]	; (8016404 <udp_recv+0x3c>)
 80163e4:	f004 ff3a 	bl	801b25c <iprintf>
 80163e8:	e005      	b.n	80163f6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	68ba      	ldr	r2, [r7, #8]
 80163ee:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	687a      	ldr	r2, [r7, #4]
 80163f4:	61da      	str	r2, [r3, #28]
}
 80163f6:	3710      	adds	r7, #16
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}
 80163fc:	0801f084 	.word	0x0801f084
 8016400:	0801f3b8 	.word	0x0801f3b8
 8016404:	0801f0d8 	.word	0x0801f0d8

08016408 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b082      	sub	sp, #8
 801640c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801640e:	2000      	movs	r0, #0
 8016410:	f7f8 f842 	bl	800e498 <memp_malloc>
 8016414:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d007      	beq.n	801642c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801641c:	2220      	movs	r2, #32
 801641e:	2100      	movs	r1, #0
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	f004 fe69 	bl	801b0f8 <memset>
    pcb->ttl = UDP_TTL;
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	22ff      	movs	r2, #255	; 0xff
 801642a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801642c:	687b      	ldr	r3, [r7, #4]
}
 801642e:	4618      	mov	r0, r3
 8016430:	3708      	adds	r7, #8
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}

08016436 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016436:	b580      	push	{r7, lr}
 8016438:	b084      	sub	sp, #16
 801643a:	af00      	add	r7, sp, #0
 801643c:	4603      	mov	r3, r0
 801643e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8016440:	f7ff ffe2 	bl	8016408 <udp_new>
 8016444:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016446:	68fb      	ldr	r3, [r7, #12]
}
 8016448:	4618      	mov	r0, r3
 801644a:	3710      	adds	r7, #16
 801644c:	46bd      	mov	sp, r7
 801644e:	bd80      	pop	{r7, pc}

08016450 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016450:	b480      	push	{r7}
 8016452:	b085      	sub	sp, #20
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
 8016458:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d01e      	beq.n	801649e <udp_netif_ip_addr_changed+0x4e>
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d01a      	beq.n	801649e <udp_netif_ip_addr_changed+0x4e>
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d017      	beq.n	801649e <udp_netif_ip_addr_changed+0x4e>
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d013      	beq.n	801649e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016476:	4b0d      	ldr	r3, [pc, #52]	; (80164ac <udp_netif_ip_addr_changed+0x5c>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	60fb      	str	r3, [r7, #12]
 801647c:	e00c      	b.n	8016498 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	681a      	ldr	r2, [r3, #0]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	429a      	cmp	r2, r3
 8016488:	d103      	bne.n	8016492 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801648a:	683b      	ldr	r3, [r7, #0]
 801648c:	681a      	ldr	r2, [r3, #0]
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	68db      	ldr	r3, [r3, #12]
 8016496:	60fb      	str	r3, [r7, #12]
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d1ef      	bne.n	801647e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801649e:	bf00      	nop
 80164a0:	3714      	adds	r7, #20
 80164a2:	46bd      	mov	sp, r7
 80164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a8:	4770      	bx	lr
 80164aa:	bf00      	nop
 80164ac:	20011068 	.word	0x20011068

080164b0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b082      	sub	sp, #8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80164b8:	4915      	ldr	r1, [pc, #84]	; (8016510 <etharp_free_entry+0x60>)
 80164ba:	687a      	ldr	r2, [r7, #4]
 80164bc:	4613      	mov	r3, r2
 80164be:	005b      	lsls	r3, r3, #1
 80164c0:	4413      	add	r3, r2
 80164c2:	00db      	lsls	r3, r3, #3
 80164c4:	440b      	add	r3, r1
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d013      	beq.n	80164f4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80164cc:	4910      	ldr	r1, [pc, #64]	; (8016510 <etharp_free_entry+0x60>)
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	4613      	mov	r3, r2
 80164d2:	005b      	lsls	r3, r3, #1
 80164d4:	4413      	add	r3, r2
 80164d6:	00db      	lsls	r3, r3, #3
 80164d8:	440b      	add	r3, r1
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	4618      	mov	r0, r3
 80164de:	f7f8 fed1 	bl	800f284 <pbuf_free>
    arp_table[i].q = NULL;
 80164e2:	490b      	ldr	r1, [pc, #44]	; (8016510 <etharp_free_entry+0x60>)
 80164e4:	687a      	ldr	r2, [r7, #4]
 80164e6:	4613      	mov	r3, r2
 80164e8:	005b      	lsls	r3, r3, #1
 80164ea:	4413      	add	r3, r2
 80164ec:	00db      	lsls	r3, r3, #3
 80164ee:	440b      	add	r3, r1
 80164f0:	2200      	movs	r2, #0
 80164f2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80164f4:	4906      	ldr	r1, [pc, #24]	; (8016510 <etharp_free_entry+0x60>)
 80164f6:	687a      	ldr	r2, [r7, #4]
 80164f8:	4613      	mov	r3, r2
 80164fa:	005b      	lsls	r3, r3, #1
 80164fc:	4413      	add	r3, r2
 80164fe:	00db      	lsls	r3, r3, #3
 8016500:	440b      	add	r3, r1
 8016502:	3314      	adds	r3, #20
 8016504:	2200      	movs	r2, #0
 8016506:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016508:	bf00      	nop
 801650a:	3708      	adds	r7, #8
 801650c:	46bd      	mov	sp, r7
 801650e:	bd80      	pop	{r7, pc}
 8016510:	20004bac 	.word	0x20004bac

08016514 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b082      	sub	sp, #8
 8016518:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801651a:	2300      	movs	r3, #0
 801651c:	607b      	str	r3, [r7, #4]
 801651e:	e096      	b.n	801664e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016520:	494f      	ldr	r1, [pc, #316]	; (8016660 <etharp_tmr+0x14c>)
 8016522:	687a      	ldr	r2, [r7, #4]
 8016524:	4613      	mov	r3, r2
 8016526:	005b      	lsls	r3, r3, #1
 8016528:	4413      	add	r3, r2
 801652a:	00db      	lsls	r3, r3, #3
 801652c:	440b      	add	r3, r1
 801652e:	3314      	adds	r3, #20
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016534:	78fb      	ldrb	r3, [r7, #3]
 8016536:	2b00      	cmp	r3, #0
 8016538:	f000 8086 	beq.w	8016648 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801653c:	4948      	ldr	r1, [pc, #288]	; (8016660 <etharp_tmr+0x14c>)
 801653e:	687a      	ldr	r2, [r7, #4]
 8016540:	4613      	mov	r3, r2
 8016542:	005b      	lsls	r3, r3, #1
 8016544:	4413      	add	r3, r2
 8016546:	00db      	lsls	r3, r3, #3
 8016548:	440b      	add	r3, r1
 801654a:	3312      	adds	r3, #18
 801654c:	881b      	ldrh	r3, [r3, #0]
 801654e:	3301      	adds	r3, #1
 8016550:	b298      	uxth	r0, r3
 8016552:	4943      	ldr	r1, [pc, #268]	; (8016660 <etharp_tmr+0x14c>)
 8016554:	687a      	ldr	r2, [r7, #4]
 8016556:	4613      	mov	r3, r2
 8016558:	005b      	lsls	r3, r3, #1
 801655a:	4413      	add	r3, r2
 801655c:	00db      	lsls	r3, r3, #3
 801655e:	440b      	add	r3, r1
 8016560:	3312      	adds	r3, #18
 8016562:	4602      	mov	r2, r0
 8016564:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016566:	493e      	ldr	r1, [pc, #248]	; (8016660 <etharp_tmr+0x14c>)
 8016568:	687a      	ldr	r2, [r7, #4]
 801656a:	4613      	mov	r3, r2
 801656c:	005b      	lsls	r3, r3, #1
 801656e:	4413      	add	r3, r2
 8016570:	00db      	lsls	r3, r3, #3
 8016572:	440b      	add	r3, r1
 8016574:	3312      	adds	r3, #18
 8016576:	881b      	ldrh	r3, [r3, #0]
 8016578:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801657c:	d215      	bcs.n	80165aa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801657e:	4938      	ldr	r1, [pc, #224]	; (8016660 <etharp_tmr+0x14c>)
 8016580:	687a      	ldr	r2, [r7, #4]
 8016582:	4613      	mov	r3, r2
 8016584:	005b      	lsls	r3, r3, #1
 8016586:	4413      	add	r3, r2
 8016588:	00db      	lsls	r3, r3, #3
 801658a:	440b      	add	r3, r1
 801658c:	3314      	adds	r3, #20
 801658e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016590:	2b01      	cmp	r3, #1
 8016592:	d10e      	bne.n	80165b2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016594:	4932      	ldr	r1, [pc, #200]	; (8016660 <etharp_tmr+0x14c>)
 8016596:	687a      	ldr	r2, [r7, #4]
 8016598:	4613      	mov	r3, r2
 801659a:	005b      	lsls	r3, r3, #1
 801659c:	4413      	add	r3, r2
 801659e:	00db      	lsls	r3, r3, #3
 80165a0:	440b      	add	r3, r1
 80165a2:	3312      	adds	r3, #18
 80165a4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80165a6:	2b04      	cmp	r3, #4
 80165a8:	d903      	bls.n	80165b2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	f7ff ff80 	bl	80164b0 <etharp_free_entry>
 80165b0:	e04a      	b.n	8016648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80165b2:	492b      	ldr	r1, [pc, #172]	; (8016660 <etharp_tmr+0x14c>)
 80165b4:	687a      	ldr	r2, [r7, #4]
 80165b6:	4613      	mov	r3, r2
 80165b8:	005b      	lsls	r3, r3, #1
 80165ba:	4413      	add	r3, r2
 80165bc:	00db      	lsls	r3, r3, #3
 80165be:	440b      	add	r3, r1
 80165c0:	3314      	adds	r3, #20
 80165c2:	781b      	ldrb	r3, [r3, #0]
 80165c4:	2b03      	cmp	r3, #3
 80165c6:	d10a      	bne.n	80165de <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80165c8:	4925      	ldr	r1, [pc, #148]	; (8016660 <etharp_tmr+0x14c>)
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	4613      	mov	r3, r2
 80165ce:	005b      	lsls	r3, r3, #1
 80165d0:	4413      	add	r3, r2
 80165d2:	00db      	lsls	r3, r3, #3
 80165d4:	440b      	add	r3, r1
 80165d6:	3314      	adds	r3, #20
 80165d8:	2204      	movs	r2, #4
 80165da:	701a      	strb	r2, [r3, #0]
 80165dc:	e034      	b.n	8016648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80165de:	4920      	ldr	r1, [pc, #128]	; (8016660 <etharp_tmr+0x14c>)
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	4613      	mov	r3, r2
 80165e4:	005b      	lsls	r3, r3, #1
 80165e6:	4413      	add	r3, r2
 80165e8:	00db      	lsls	r3, r3, #3
 80165ea:	440b      	add	r3, r1
 80165ec:	3314      	adds	r3, #20
 80165ee:	781b      	ldrb	r3, [r3, #0]
 80165f0:	2b04      	cmp	r3, #4
 80165f2:	d10a      	bne.n	801660a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80165f4:	491a      	ldr	r1, [pc, #104]	; (8016660 <etharp_tmr+0x14c>)
 80165f6:	687a      	ldr	r2, [r7, #4]
 80165f8:	4613      	mov	r3, r2
 80165fa:	005b      	lsls	r3, r3, #1
 80165fc:	4413      	add	r3, r2
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	440b      	add	r3, r1
 8016602:	3314      	adds	r3, #20
 8016604:	2202      	movs	r2, #2
 8016606:	701a      	strb	r2, [r3, #0]
 8016608:	e01e      	b.n	8016648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801660a:	4915      	ldr	r1, [pc, #84]	; (8016660 <etharp_tmr+0x14c>)
 801660c:	687a      	ldr	r2, [r7, #4]
 801660e:	4613      	mov	r3, r2
 8016610:	005b      	lsls	r3, r3, #1
 8016612:	4413      	add	r3, r2
 8016614:	00db      	lsls	r3, r3, #3
 8016616:	440b      	add	r3, r1
 8016618:	3314      	adds	r3, #20
 801661a:	781b      	ldrb	r3, [r3, #0]
 801661c:	2b01      	cmp	r3, #1
 801661e:	d113      	bne.n	8016648 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016620:	490f      	ldr	r1, [pc, #60]	; (8016660 <etharp_tmr+0x14c>)
 8016622:	687a      	ldr	r2, [r7, #4]
 8016624:	4613      	mov	r3, r2
 8016626:	005b      	lsls	r3, r3, #1
 8016628:	4413      	add	r3, r2
 801662a:	00db      	lsls	r3, r3, #3
 801662c:	440b      	add	r3, r1
 801662e:	3308      	adds	r3, #8
 8016630:	6818      	ldr	r0, [r3, #0]
 8016632:	687a      	ldr	r2, [r7, #4]
 8016634:	4613      	mov	r3, r2
 8016636:	005b      	lsls	r3, r3, #1
 8016638:	4413      	add	r3, r2
 801663a:	00db      	lsls	r3, r3, #3
 801663c:	4a08      	ldr	r2, [pc, #32]	; (8016660 <etharp_tmr+0x14c>)
 801663e:	4413      	add	r3, r2
 8016640:	3304      	adds	r3, #4
 8016642:	4619      	mov	r1, r3
 8016644:	f000 fe6e 	bl	8017324 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	3301      	adds	r3, #1
 801664c:	607b      	str	r3, [r7, #4]
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2b09      	cmp	r3, #9
 8016652:	f77f af65 	ble.w	8016520 <etharp_tmr+0xc>
      }
    }
  }
}
 8016656:	bf00      	nop
 8016658:	bf00      	nop
 801665a:	3708      	adds	r7, #8
 801665c:	46bd      	mov	sp, r7
 801665e:	bd80      	pop	{r7, pc}
 8016660:	20004bac 	.word	0x20004bac

08016664 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b08a      	sub	sp, #40	; 0x28
 8016668:	af00      	add	r7, sp, #0
 801666a:	60f8      	str	r0, [r7, #12]
 801666c:	460b      	mov	r3, r1
 801666e:	607a      	str	r2, [r7, #4]
 8016670:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016672:	230a      	movs	r3, #10
 8016674:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016676:	230a      	movs	r3, #10
 8016678:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801667a:	230a      	movs	r3, #10
 801667c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801667e:	2300      	movs	r3, #0
 8016680:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016682:	230a      	movs	r3, #10
 8016684:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016686:	2300      	movs	r3, #0
 8016688:	83bb      	strh	r3, [r7, #28]
 801668a:	2300      	movs	r3, #0
 801668c:	837b      	strh	r3, [r7, #26]
 801668e:	2300      	movs	r3, #0
 8016690:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016692:	2300      	movs	r3, #0
 8016694:	843b      	strh	r3, [r7, #32]
 8016696:	e0ae      	b.n	80167f6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016698:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801669c:	49a6      	ldr	r1, [pc, #664]	; (8016938 <etharp_find_entry+0x2d4>)
 801669e:	4613      	mov	r3, r2
 80166a0:	005b      	lsls	r3, r3, #1
 80166a2:	4413      	add	r3, r2
 80166a4:	00db      	lsls	r3, r3, #3
 80166a6:	440b      	add	r3, r1
 80166a8:	3314      	adds	r3, #20
 80166aa:	781b      	ldrb	r3, [r3, #0]
 80166ac:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80166ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80166b2:	2b0a      	cmp	r3, #10
 80166b4:	d105      	bne.n	80166c2 <etharp_find_entry+0x5e>
 80166b6:	7dfb      	ldrb	r3, [r7, #23]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d102      	bne.n	80166c2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80166bc:	8c3b      	ldrh	r3, [r7, #32]
 80166be:	847b      	strh	r3, [r7, #34]	; 0x22
 80166c0:	e095      	b.n	80167ee <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80166c2:	7dfb      	ldrb	r3, [r7, #23]
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	f000 8092 	beq.w	80167ee <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80166ca:	7dfb      	ldrb	r3, [r7, #23]
 80166cc:	2b01      	cmp	r3, #1
 80166ce:	d009      	beq.n	80166e4 <etharp_find_entry+0x80>
 80166d0:	7dfb      	ldrb	r3, [r7, #23]
 80166d2:	2b01      	cmp	r3, #1
 80166d4:	d806      	bhi.n	80166e4 <etharp_find_entry+0x80>
 80166d6:	4b99      	ldr	r3, [pc, #612]	; (801693c <etharp_find_entry+0x2d8>)
 80166d8:	f240 1223 	movw	r2, #291	; 0x123
 80166dc:	4998      	ldr	r1, [pc, #608]	; (8016940 <etharp_find_entry+0x2dc>)
 80166de:	4899      	ldr	r0, [pc, #612]	; (8016944 <etharp_find_entry+0x2e0>)
 80166e0:	f004 fdbc 	bl	801b25c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d020      	beq.n	801672c <etharp_find_entry+0xc8>
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	6819      	ldr	r1, [r3, #0]
 80166ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166f2:	4891      	ldr	r0, [pc, #580]	; (8016938 <etharp_find_entry+0x2d4>)
 80166f4:	4613      	mov	r3, r2
 80166f6:	005b      	lsls	r3, r3, #1
 80166f8:	4413      	add	r3, r2
 80166fa:	00db      	lsls	r3, r3, #3
 80166fc:	4403      	add	r3, r0
 80166fe:	3304      	adds	r3, #4
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	4299      	cmp	r1, r3
 8016704:	d112      	bne.n	801672c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d00c      	beq.n	8016726 <etharp_find_entry+0xc2>
 801670c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016710:	4989      	ldr	r1, [pc, #548]	; (8016938 <etharp_find_entry+0x2d4>)
 8016712:	4613      	mov	r3, r2
 8016714:	005b      	lsls	r3, r3, #1
 8016716:	4413      	add	r3, r2
 8016718:	00db      	lsls	r3, r3, #3
 801671a:	440b      	add	r3, r1
 801671c:	3308      	adds	r3, #8
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	687a      	ldr	r2, [r7, #4]
 8016722:	429a      	cmp	r2, r3
 8016724:	d102      	bne.n	801672c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016726:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801672a:	e100      	b.n	801692e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801672c:	7dfb      	ldrb	r3, [r7, #23]
 801672e:	2b01      	cmp	r3, #1
 8016730:	d140      	bne.n	80167b4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016732:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016736:	4980      	ldr	r1, [pc, #512]	; (8016938 <etharp_find_entry+0x2d4>)
 8016738:	4613      	mov	r3, r2
 801673a:	005b      	lsls	r3, r3, #1
 801673c:	4413      	add	r3, r2
 801673e:	00db      	lsls	r3, r3, #3
 8016740:	440b      	add	r3, r1
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d01a      	beq.n	801677e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801674c:	497a      	ldr	r1, [pc, #488]	; (8016938 <etharp_find_entry+0x2d4>)
 801674e:	4613      	mov	r3, r2
 8016750:	005b      	lsls	r3, r3, #1
 8016752:	4413      	add	r3, r2
 8016754:	00db      	lsls	r3, r3, #3
 8016756:	440b      	add	r3, r1
 8016758:	3312      	adds	r3, #18
 801675a:	881b      	ldrh	r3, [r3, #0]
 801675c:	8bba      	ldrh	r2, [r7, #28]
 801675e:	429a      	cmp	r2, r3
 8016760:	d845      	bhi.n	80167ee <etharp_find_entry+0x18a>
            old_queue = i;
 8016762:	8c3b      	ldrh	r3, [r7, #32]
 8016764:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801676a:	4973      	ldr	r1, [pc, #460]	; (8016938 <etharp_find_entry+0x2d4>)
 801676c:	4613      	mov	r3, r2
 801676e:	005b      	lsls	r3, r3, #1
 8016770:	4413      	add	r3, r2
 8016772:	00db      	lsls	r3, r3, #3
 8016774:	440b      	add	r3, r1
 8016776:	3312      	adds	r3, #18
 8016778:	881b      	ldrh	r3, [r3, #0]
 801677a:	83bb      	strh	r3, [r7, #28]
 801677c:	e037      	b.n	80167ee <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801677e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016782:	496d      	ldr	r1, [pc, #436]	; (8016938 <etharp_find_entry+0x2d4>)
 8016784:	4613      	mov	r3, r2
 8016786:	005b      	lsls	r3, r3, #1
 8016788:	4413      	add	r3, r2
 801678a:	00db      	lsls	r3, r3, #3
 801678c:	440b      	add	r3, r1
 801678e:	3312      	adds	r3, #18
 8016790:	881b      	ldrh	r3, [r3, #0]
 8016792:	8b7a      	ldrh	r2, [r7, #26]
 8016794:	429a      	cmp	r2, r3
 8016796:	d82a      	bhi.n	80167ee <etharp_find_entry+0x18a>
            old_pending = i;
 8016798:	8c3b      	ldrh	r3, [r7, #32]
 801679a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801679c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167a0:	4965      	ldr	r1, [pc, #404]	; (8016938 <etharp_find_entry+0x2d4>)
 80167a2:	4613      	mov	r3, r2
 80167a4:	005b      	lsls	r3, r3, #1
 80167a6:	4413      	add	r3, r2
 80167a8:	00db      	lsls	r3, r3, #3
 80167aa:	440b      	add	r3, r1
 80167ac:	3312      	adds	r3, #18
 80167ae:	881b      	ldrh	r3, [r3, #0]
 80167b0:	837b      	strh	r3, [r7, #26]
 80167b2:	e01c      	b.n	80167ee <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80167b4:	7dfb      	ldrb	r3, [r7, #23]
 80167b6:	2b01      	cmp	r3, #1
 80167b8:	d919      	bls.n	80167ee <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80167ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167be:	495e      	ldr	r1, [pc, #376]	; (8016938 <etharp_find_entry+0x2d4>)
 80167c0:	4613      	mov	r3, r2
 80167c2:	005b      	lsls	r3, r3, #1
 80167c4:	4413      	add	r3, r2
 80167c6:	00db      	lsls	r3, r3, #3
 80167c8:	440b      	add	r3, r1
 80167ca:	3312      	adds	r3, #18
 80167cc:	881b      	ldrh	r3, [r3, #0]
 80167ce:	8b3a      	ldrh	r2, [r7, #24]
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d80c      	bhi.n	80167ee <etharp_find_entry+0x18a>
            old_stable = i;
 80167d4:	8c3b      	ldrh	r3, [r7, #32]
 80167d6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80167d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167dc:	4956      	ldr	r1, [pc, #344]	; (8016938 <etharp_find_entry+0x2d4>)
 80167de:	4613      	mov	r3, r2
 80167e0:	005b      	lsls	r3, r3, #1
 80167e2:	4413      	add	r3, r2
 80167e4:	00db      	lsls	r3, r3, #3
 80167e6:	440b      	add	r3, r1
 80167e8:	3312      	adds	r3, #18
 80167ea:	881b      	ldrh	r3, [r3, #0]
 80167ec:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80167ee:	8c3b      	ldrh	r3, [r7, #32]
 80167f0:	3301      	adds	r3, #1
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	843b      	strh	r3, [r7, #32]
 80167f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80167fa:	2b09      	cmp	r3, #9
 80167fc:	f77f af4c 	ble.w	8016698 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016800:	7afb      	ldrb	r3, [r7, #11]
 8016802:	f003 0302 	and.w	r3, r3, #2
 8016806:	2b00      	cmp	r3, #0
 8016808:	d108      	bne.n	801681c <etharp_find_entry+0x1b8>
 801680a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801680e:	2b0a      	cmp	r3, #10
 8016810:	d107      	bne.n	8016822 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016812:	7afb      	ldrb	r3, [r7, #11]
 8016814:	f003 0301 	and.w	r3, r3, #1
 8016818:	2b00      	cmp	r3, #0
 801681a:	d102      	bne.n	8016822 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801681c:	f04f 33ff 	mov.w	r3, #4294967295
 8016820:	e085      	b.n	801692e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016822:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016826:	2b09      	cmp	r3, #9
 8016828:	dc02      	bgt.n	8016830 <etharp_find_entry+0x1cc>
    i = empty;
 801682a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801682c:	843b      	strh	r3, [r7, #32]
 801682e:	e039      	b.n	80168a4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016830:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016834:	2b09      	cmp	r3, #9
 8016836:	dc14      	bgt.n	8016862 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801683a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801683c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016840:	493d      	ldr	r1, [pc, #244]	; (8016938 <etharp_find_entry+0x2d4>)
 8016842:	4613      	mov	r3, r2
 8016844:	005b      	lsls	r3, r3, #1
 8016846:	4413      	add	r3, r2
 8016848:	00db      	lsls	r3, r3, #3
 801684a:	440b      	add	r3, r1
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d018      	beq.n	8016884 <etharp_find_entry+0x220>
 8016852:	4b3a      	ldr	r3, [pc, #232]	; (801693c <etharp_find_entry+0x2d8>)
 8016854:	f240 126d 	movw	r2, #365	; 0x16d
 8016858:	493b      	ldr	r1, [pc, #236]	; (8016948 <etharp_find_entry+0x2e4>)
 801685a:	483a      	ldr	r0, [pc, #232]	; (8016944 <etharp_find_entry+0x2e0>)
 801685c:	f004 fcfe 	bl	801b25c <iprintf>
 8016860:	e010      	b.n	8016884 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016862:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016866:	2b09      	cmp	r3, #9
 8016868:	dc02      	bgt.n	8016870 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801686a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801686c:	843b      	strh	r3, [r7, #32]
 801686e:	e009      	b.n	8016884 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016870:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016874:	2b09      	cmp	r3, #9
 8016876:	dc02      	bgt.n	801687e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016878:	8bfb      	ldrh	r3, [r7, #30]
 801687a:	843b      	strh	r3, [r7, #32]
 801687c:	e002      	b.n	8016884 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801687e:	f04f 33ff 	mov.w	r3, #4294967295
 8016882:	e054      	b.n	801692e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016884:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016888:	2b09      	cmp	r3, #9
 801688a:	dd06      	ble.n	801689a <etharp_find_entry+0x236>
 801688c:	4b2b      	ldr	r3, [pc, #172]	; (801693c <etharp_find_entry+0x2d8>)
 801688e:	f240 127f 	movw	r2, #383	; 0x17f
 8016892:	492e      	ldr	r1, [pc, #184]	; (801694c <etharp_find_entry+0x2e8>)
 8016894:	482b      	ldr	r0, [pc, #172]	; (8016944 <etharp_find_entry+0x2e0>)
 8016896:	f004 fce1 	bl	801b25c <iprintf>
    etharp_free_entry(i);
 801689a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801689e:	4618      	mov	r0, r3
 80168a0:	f7ff fe06 	bl	80164b0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80168a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80168a8:	2b09      	cmp	r3, #9
 80168aa:	dd06      	ble.n	80168ba <etharp_find_entry+0x256>
 80168ac:	4b23      	ldr	r3, [pc, #140]	; (801693c <etharp_find_entry+0x2d8>)
 80168ae:	f240 1283 	movw	r2, #387	; 0x183
 80168b2:	4926      	ldr	r1, [pc, #152]	; (801694c <etharp_find_entry+0x2e8>)
 80168b4:	4823      	ldr	r0, [pc, #140]	; (8016944 <etharp_find_entry+0x2e0>)
 80168b6:	f004 fcd1 	bl	801b25c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80168ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168be:	491e      	ldr	r1, [pc, #120]	; (8016938 <etharp_find_entry+0x2d4>)
 80168c0:	4613      	mov	r3, r2
 80168c2:	005b      	lsls	r3, r3, #1
 80168c4:	4413      	add	r3, r2
 80168c6:	00db      	lsls	r3, r3, #3
 80168c8:	440b      	add	r3, r1
 80168ca:	3314      	adds	r3, #20
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d006      	beq.n	80168e0 <etharp_find_entry+0x27c>
 80168d2:	4b1a      	ldr	r3, [pc, #104]	; (801693c <etharp_find_entry+0x2d8>)
 80168d4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80168d8:	491d      	ldr	r1, [pc, #116]	; (8016950 <etharp_find_entry+0x2ec>)
 80168da:	481a      	ldr	r0, [pc, #104]	; (8016944 <etharp_find_entry+0x2e0>)
 80168dc:	f004 fcbe 	bl	801b25c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d00b      	beq.n	80168fe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80168e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	6819      	ldr	r1, [r3, #0]
 80168ee:	4812      	ldr	r0, [pc, #72]	; (8016938 <etharp_find_entry+0x2d4>)
 80168f0:	4613      	mov	r3, r2
 80168f2:	005b      	lsls	r3, r3, #1
 80168f4:	4413      	add	r3, r2
 80168f6:	00db      	lsls	r3, r3, #3
 80168f8:	4403      	add	r3, r0
 80168fa:	3304      	adds	r3, #4
 80168fc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80168fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016902:	490d      	ldr	r1, [pc, #52]	; (8016938 <etharp_find_entry+0x2d4>)
 8016904:	4613      	mov	r3, r2
 8016906:	005b      	lsls	r3, r3, #1
 8016908:	4413      	add	r3, r2
 801690a:	00db      	lsls	r3, r3, #3
 801690c:	440b      	add	r3, r1
 801690e:	3312      	adds	r3, #18
 8016910:	2200      	movs	r2, #0
 8016912:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016918:	4907      	ldr	r1, [pc, #28]	; (8016938 <etharp_find_entry+0x2d4>)
 801691a:	4613      	mov	r3, r2
 801691c:	005b      	lsls	r3, r3, #1
 801691e:	4413      	add	r3, r2
 8016920:	00db      	lsls	r3, r3, #3
 8016922:	440b      	add	r3, r1
 8016924:	3308      	adds	r3, #8
 8016926:	687a      	ldr	r2, [r7, #4]
 8016928:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801692a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801692e:	4618      	mov	r0, r3
 8016930:	3728      	adds	r7, #40	; 0x28
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}
 8016936:	bf00      	nop
 8016938:	20004bac 	.word	0x20004bac
 801693c:	0801f3e8 	.word	0x0801f3e8
 8016940:	0801f420 	.word	0x0801f420
 8016944:	0801f460 	.word	0x0801f460
 8016948:	0801f488 	.word	0x0801f488
 801694c:	0801f4a0 	.word	0x0801f4a0
 8016950:	0801f4b4 	.word	0x0801f4b4

08016954 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b088      	sub	sp, #32
 8016958:	af02      	add	r7, sp, #8
 801695a:	60f8      	str	r0, [r7, #12]
 801695c:	60b9      	str	r1, [r7, #8]
 801695e:	607a      	str	r2, [r7, #4]
 8016960:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016968:	2b06      	cmp	r3, #6
 801696a:	d006      	beq.n	801697a <etharp_update_arp_entry+0x26>
 801696c:	4b48      	ldr	r3, [pc, #288]	; (8016a90 <etharp_update_arp_entry+0x13c>)
 801696e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016972:	4948      	ldr	r1, [pc, #288]	; (8016a94 <etharp_update_arp_entry+0x140>)
 8016974:	4848      	ldr	r0, [pc, #288]	; (8016a98 <etharp_update_arp_entry+0x144>)
 8016976:	f004 fc71 	bl	801b25c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801697a:	68bb      	ldr	r3, [r7, #8]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d012      	beq.n	80169a6 <etharp_update_arp_entry+0x52>
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d00e      	beq.n	80169a6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	68f9      	ldr	r1, [r7, #12]
 801698e:	4618      	mov	r0, r3
 8016990:	f001 f8fe 	bl	8017b90 <ip4_addr_isbroadcast_u32>
 8016994:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016996:	2b00      	cmp	r3, #0
 8016998:	d105      	bne.n	80169a6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80169a2:	2be0      	cmp	r3, #224	; 0xe0
 80169a4:	d102      	bne.n	80169ac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80169a6:	f06f 030f 	mvn.w	r3, #15
 80169aa:	e06c      	b.n	8016a86 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80169ac:	78fb      	ldrb	r3, [r7, #3]
 80169ae:	68fa      	ldr	r2, [r7, #12]
 80169b0:	4619      	mov	r1, r3
 80169b2:	68b8      	ldr	r0, [r7, #8]
 80169b4:	f7ff fe56 	bl	8016664 <etharp_find_entry>
 80169b8:	4603      	mov	r3, r0
 80169ba:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80169bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	da02      	bge.n	80169ca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80169c4:	8afb      	ldrh	r3, [r7, #22]
 80169c6:	b25b      	sxtb	r3, r3
 80169c8:	e05d      	b.n	8016a86 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80169ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80169ce:	4933      	ldr	r1, [pc, #204]	; (8016a9c <etharp_update_arp_entry+0x148>)
 80169d0:	4613      	mov	r3, r2
 80169d2:	005b      	lsls	r3, r3, #1
 80169d4:	4413      	add	r3, r2
 80169d6:	00db      	lsls	r3, r3, #3
 80169d8:	440b      	add	r3, r1
 80169da:	3314      	adds	r3, #20
 80169dc:	2202      	movs	r2, #2
 80169de:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80169e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80169e4:	492d      	ldr	r1, [pc, #180]	; (8016a9c <etharp_update_arp_entry+0x148>)
 80169e6:	4613      	mov	r3, r2
 80169e8:	005b      	lsls	r3, r3, #1
 80169ea:	4413      	add	r3, r2
 80169ec:	00db      	lsls	r3, r3, #3
 80169ee:	440b      	add	r3, r1
 80169f0:	3308      	adds	r3, #8
 80169f2:	68fa      	ldr	r2, [r7, #12]
 80169f4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80169f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80169fa:	4613      	mov	r3, r2
 80169fc:	005b      	lsls	r3, r3, #1
 80169fe:	4413      	add	r3, r2
 8016a00:	00db      	lsls	r3, r3, #3
 8016a02:	3308      	adds	r3, #8
 8016a04:	4a25      	ldr	r2, [pc, #148]	; (8016a9c <etharp_update_arp_entry+0x148>)
 8016a06:	4413      	add	r3, r2
 8016a08:	3304      	adds	r3, #4
 8016a0a:	2206      	movs	r2, #6
 8016a0c:	6879      	ldr	r1, [r7, #4]
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f004 fb64 	bl	801b0dc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016a14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a18:	4920      	ldr	r1, [pc, #128]	; (8016a9c <etharp_update_arp_entry+0x148>)
 8016a1a:	4613      	mov	r3, r2
 8016a1c:	005b      	lsls	r3, r3, #1
 8016a1e:	4413      	add	r3, r2
 8016a20:	00db      	lsls	r3, r3, #3
 8016a22:	440b      	add	r3, r1
 8016a24:	3312      	adds	r3, #18
 8016a26:	2200      	movs	r2, #0
 8016a28:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016a2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a2e:	491b      	ldr	r1, [pc, #108]	; (8016a9c <etharp_update_arp_entry+0x148>)
 8016a30:	4613      	mov	r3, r2
 8016a32:	005b      	lsls	r3, r3, #1
 8016a34:	4413      	add	r3, r2
 8016a36:	00db      	lsls	r3, r3, #3
 8016a38:	440b      	add	r3, r1
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d021      	beq.n	8016a84 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016a40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a44:	4915      	ldr	r1, [pc, #84]	; (8016a9c <etharp_update_arp_entry+0x148>)
 8016a46:	4613      	mov	r3, r2
 8016a48:	005b      	lsls	r3, r3, #1
 8016a4a:	4413      	add	r3, r2
 8016a4c:	00db      	lsls	r3, r3, #3
 8016a4e:	440b      	add	r3, r1
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016a54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a58:	4910      	ldr	r1, [pc, #64]	; (8016a9c <etharp_update_arp_entry+0x148>)
 8016a5a:	4613      	mov	r3, r2
 8016a5c:	005b      	lsls	r3, r3, #1
 8016a5e:	4413      	add	r3, r2
 8016a60:	00db      	lsls	r3, r3, #3
 8016a62:	440b      	add	r3, r1
 8016a64:	2200      	movs	r2, #0
 8016a66:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a72:	9300      	str	r3, [sp, #0]
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	6939      	ldr	r1, [r7, #16]
 8016a78:	68f8      	ldr	r0, [r7, #12]
 8016a7a:	f001 ff91 	bl	80189a0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016a7e:	6938      	ldr	r0, [r7, #16]
 8016a80:	f7f8 fc00 	bl	800f284 <pbuf_free>
  }
  return ERR_OK;
 8016a84:	2300      	movs	r3, #0
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3718      	adds	r7, #24
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}
 8016a8e:	bf00      	nop
 8016a90:	0801f3e8 	.word	0x0801f3e8
 8016a94:	0801f4e0 	.word	0x0801f4e0
 8016a98:	0801f460 	.word	0x0801f460
 8016a9c:	20004bac 	.word	0x20004bac

08016aa0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b084      	sub	sp, #16
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	60fb      	str	r3, [r7, #12]
 8016aac:	e01e      	b.n	8016aec <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016aae:	4913      	ldr	r1, [pc, #76]	; (8016afc <etharp_cleanup_netif+0x5c>)
 8016ab0:	68fa      	ldr	r2, [r7, #12]
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	005b      	lsls	r3, r3, #1
 8016ab6:	4413      	add	r3, r2
 8016ab8:	00db      	lsls	r3, r3, #3
 8016aba:	440b      	add	r3, r1
 8016abc:	3314      	adds	r3, #20
 8016abe:	781b      	ldrb	r3, [r3, #0]
 8016ac0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016ac2:	7afb      	ldrb	r3, [r7, #11]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d00e      	beq.n	8016ae6 <etharp_cleanup_netif+0x46>
 8016ac8:	490c      	ldr	r1, [pc, #48]	; (8016afc <etharp_cleanup_netif+0x5c>)
 8016aca:	68fa      	ldr	r2, [r7, #12]
 8016acc:	4613      	mov	r3, r2
 8016ace:	005b      	lsls	r3, r3, #1
 8016ad0:	4413      	add	r3, r2
 8016ad2:	00db      	lsls	r3, r3, #3
 8016ad4:	440b      	add	r3, r1
 8016ad6:	3308      	adds	r3, #8
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	687a      	ldr	r2, [r7, #4]
 8016adc:	429a      	cmp	r2, r3
 8016ade:	d102      	bne.n	8016ae6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016ae0:	68f8      	ldr	r0, [r7, #12]
 8016ae2:	f7ff fce5 	bl	80164b0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	3301      	adds	r3, #1
 8016aea:	60fb      	str	r3, [r7, #12]
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	2b09      	cmp	r3, #9
 8016af0:	dddd      	ble.n	8016aae <etharp_cleanup_netif+0xe>
    }
  }
}
 8016af2:	bf00      	nop
 8016af4:	bf00      	nop
 8016af6:	3710      	adds	r7, #16
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}
 8016afc:	20004bac 	.word	0x20004bac

08016b00 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016b00:	b5b0      	push	{r4, r5, r7, lr}
 8016b02:	b08a      	sub	sp, #40	; 0x28
 8016b04:	af04      	add	r7, sp, #16
 8016b06:	6078      	str	r0, [r7, #4]
 8016b08:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016b0a:	683b      	ldr	r3, [r7, #0]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d107      	bne.n	8016b20 <etharp_input+0x20>
 8016b10:	4b3d      	ldr	r3, [pc, #244]	; (8016c08 <etharp_input+0x108>)
 8016b12:	f240 228a 	movw	r2, #650	; 0x28a
 8016b16:	493d      	ldr	r1, [pc, #244]	; (8016c0c <etharp_input+0x10c>)
 8016b18:	483d      	ldr	r0, [pc, #244]	; (8016c10 <etharp_input+0x110>)
 8016b1a:	f004 fb9f 	bl	801b25c <iprintf>
 8016b1e:	e06f      	b.n	8016c00 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	685b      	ldr	r3, [r3, #4]
 8016b24:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	881b      	ldrh	r3, [r3, #0]
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b30:	d10c      	bne.n	8016b4c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016b36:	2b06      	cmp	r3, #6
 8016b38:	d108      	bne.n	8016b4c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b3a:	693b      	ldr	r3, [r7, #16]
 8016b3c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b3e:	2b04      	cmp	r3, #4
 8016b40:	d104      	bne.n	8016b4c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016b42:	693b      	ldr	r3, [r7, #16]
 8016b44:	885b      	ldrh	r3, [r3, #2]
 8016b46:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b48:	2b08      	cmp	r3, #8
 8016b4a:	d003      	beq.n	8016b54 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016b4c:	6878      	ldr	r0, [r7, #4]
 8016b4e:	f7f8 fb99 	bl	800f284 <pbuf_free>
    return;
 8016b52:	e055      	b.n	8016c00 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016b54:	693b      	ldr	r3, [r7, #16]
 8016b56:	330e      	adds	r3, #14
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016b5c:	693b      	ldr	r3, [r7, #16]
 8016b5e:	3318      	adds	r3, #24
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016b64:	683b      	ldr	r3, [r7, #0]
 8016b66:	3304      	adds	r3, #4
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d102      	bne.n	8016b74 <etharp_input+0x74>
    for_us = 0;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	75fb      	strb	r3, [r7, #23]
 8016b72:	e009      	b.n	8016b88 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016b74:	68ba      	ldr	r2, [r7, #8]
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	3304      	adds	r3, #4
 8016b7a:	681b      	ldr	r3, [r3, #0]
 8016b7c:	429a      	cmp	r2, r3
 8016b7e:	bf0c      	ite	eq
 8016b80:	2301      	moveq	r3, #1
 8016b82:	2300      	movne	r3, #0
 8016b84:	b2db      	uxtb	r3, r3
 8016b86:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	f103 0208 	add.w	r2, r3, #8
 8016b8e:	7dfb      	ldrb	r3, [r7, #23]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d001      	beq.n	8016b98 <etharp_input+0x98>
 8016b94:	2301      	movs	r3, #1
 8016b96:	e000      	b.n	8016b9a <etharp_input+0x9a>
 8016b98:	2302      	movs	r3, #2
 8016b9a:	f107 010c 	add.w	r1, r7, #12
 8016b9e:	6838      	ldr	r0, [r7, #0]
 8016ba0:	f7ff fed8 	bl	8016954 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	88db      	ldrh	r3, [r3, #6]
 8016ba8:	b29b      	uxth	r3, r3
 8016baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016bae:	d003      	beq.n	8016bb8 <etharp_input+0xb8>
 8016bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016bb4:	d01e      	beq.n	8016bf4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016bb6:	e020      	b.n	8016bfa <etharp_input+0xfa>
      if (for_us) {
 8016bb8:	7dfb      	ldrb	r3, [r7, #23]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d01c      	beq.n	8016bf8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016bc4:	693b      	ldr	r3, [r7, #16]
 8016bc6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016bca:	683b      	ldr	r3, [r7, #0]
 8016bcc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016bd0:	683b      	ldr	r3, [r7, #0]
 8016bd2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016bd4:	693a      	ldr	r2, [r7, #16]
 8016bd6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016bd8:	2102      	movs	r1, #2
 8016bda:	9103      	str	r1, [sp, #12]
 8016bdc:	f107 010c 	add.w	r1, r7, #12
 8016be0:	9102      	str	r1, [sp, #8]
 8016be2:	9201      	str	r2, [sp, #4]
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	462b      	mov	r3, r5
 8016be8:	4622      	mov	r2, r4
 8016bea:	4601      	mov	r1, r0
 8016bec:	6838      	ldr	r0, [r7, #0]
 8016bee:	f000 faeb 	bl	80171c8 <etharp_raw>
      break;
 8016bf2:	e001      	b.n	8016bf8 <etharp_input+0xf8>
      break;
 8016bf4:	bf00      	nop
 8016bf6:	e000      	b.n	8016bfa <etharp_input+0xfa>
      break;
 8016bf8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016bfa:	6878      	ldr	r0, [r7, #4]
 8016bfc:	f7f8 fb42 	bl	800f284 <pbuf_free>
}
 8016c00:	3718      	adds	r7, #24
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bdb0      	pop	{r4, r5, r7, pc}
 8016c06:	bf00      	nop
 8016c08:	0801f3e8 	.word	0x0801f3e8
 8016c0c:	0801f538 	.word	0x0801f538
 8016c10:	0801f460 	.word	0x0801f460

08016c14 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016c14:	b580      	push	{r7, lr}
 8016c16:	b086      	sub	sp, #24
 8016c18:	af02      	add	r7, sp, #8
 8016c1a:	60f8      	str	r0, [r7, #12]
 8016c1c:	60b9      	str	r1, [r7, #8]
 8016c1e:	4613      	mov	r3, r2
 8016c20:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016c22:	79fa      	ldrb	r2, [r7, #7]
 8016c24:	4944      	ldr	r1, [pc, #272]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016c26:	4613      	mov	r3, r2
 8016c28:	005b      	lsls	r3, r3, #1
 8016c2a:	4413      	add	r3, r2
 8016c2c:	00db      	lsls	r3, r3, #3
 8016c2e:	440b      	add	r3, r1
 8016c30:	3314      	adds	r3, #20
 8016c32:	781b      	ldrb	r3, [r3, #0]
 8016c34:	2b01      	cmp	r3, #1
 8016c36:	d806      	bhi.n	8016c46 <etharp_output_to_arp_index+0x32>
 8016c38:	4b40      	ldr	r3, [pc, #256]	; (8016d3c <etharp_output_to_arp_index+0x128>)
 8016c3a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016c3e:	4940      	ldr	r1, [pc, #256]	; (8016d40 <etharp_output_to_arp_index+0x12c>)
 8016c40:	4840      	ldr	r0, [pc, #256]	; (8016d44 <etharp_output_to_arp_index+0x130>)
 8016c42:	f004 fb0b 	bl	801b25c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016c46:	79fa      	ldrb	r2, [r7, #7]
 8016c48:	493b      	ldr	r1, [pc, #236]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016c4a:	4613      	mov	r3, r2
 8016c4c:	005b      	lsls	r3, r3, #1
 8016c4e:	4413      	add	r3, r2
 8016c50:	00db      	lsls	r3, r3, #3
 8016c52:	440b      	add	r3, r1
 8016c54:	3314      	adds	r3, #20
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	2b02      	cmp	r3, #2
 8016c5a:	d153      	bne.n	8016d04 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016c5c:	79fa      	ldrb	r2, [r7, #7]
 8016c5e:	4936      	ldr	r1, [pc, #216]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016c60:	4613      	mov	r3, r2
 8016c62:	005b      	lsls	r3, r3, #1
 8016c64:	4413      	add	r3, r2
 8016c66:	00db      	lsls	r3, r3, #3
 8016c68:	440b      	add	r3, r1
 8016c6a:	3312      	adds	r3, #18
 8016c6c:	881b      	ldrh	r3, [r3, #0]
 8016c6e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016c72:	d919      	bls.n	8016ca8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016c74:	79fa      	ldrb	r2, [r7, #7]
 8016c76:	4613      	mov	r3, r2
 8016c78:	005b      	lsls	r3, r3, #1
 8016c7a:	4413      	add	r3, r2
 8016c7c:	00db      	lsls	r3, r3, #3
 8016c7e:	4a2e      	ldr	r2, [pc, #184]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016c80:	4413      	add	r3, r2
 8016c82:	3304      	adds	r3, #4
 8016c84:	4619      	mov	r1, r3
 8016c86:	68f8      	ldr	r0, [r7, #12]
 8016c88:	f000 fb4c 	bl	8017324 <etharp_request>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d138      	bne.n	8016d04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016c92:	79fa      	ldrb	r2, [r7, #7]
 8016c94:	4928      	ldr	r1, [pc, #160]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016c96:	4613      	mov	r3, r2
 8016c98:	005b      	lsls	r3, r3, #1
 8016c9a:	4413      	add	r3, r2
 8016c9c:	00db      	lsls	r3, r3, #3
 8016c9e:	440b      	add	r3, r1
 8016ca0:	3314      	adds	r3, #20
 8016ca2:	2203      	movs	r2, #3
 8016ca4:	701a      	strb	r2, [r3, #0]
 8016ca6:	e02d      	b.n	8016d04 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016ca8:	79fa      	ldrb	r2, [r7, #7]
 8016caa:	4923      	ldr	r1, [pc, #140]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016cac:	4613      	mov	r3, r2
 8016cae:	005b      	lsls	r3, r3, #1
 8016cb0:	4413      	add	r3, r2
 8016cb2:	00db      	lsls	r3, r3, #3
 8016cb4:	440b      	add	r3, r1
 8016cb6:	3312      	adds	r3, #18
 8016cb8:	881b      	ldrh	r3, [r3, #0]
 8016cba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016cbe:	d321      	bcc.n	8016d04 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016cc0:	79fa      	ldrb	r2, [r7, #7]
 8016cc2:	4613      	mov	r3, r2
 8016cc4:	005b      	lsls	r3, r3, #1
 8016cc6:	4413      	add	r3, r2
 8016cc8:	00db      	lsls	r3, r3, #3
 8016cca:	4a1b      	ldr	r2, [pc, #108]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016ccc:	4413      	add	r3, r2
 8016cce:	1d19      	adds	r1, r3, #4
 8016cd0:	79fa      	ldrb	r2, [r7, #7]
 8016cd2:	4613      	mov	r3, r2
 8016cd4:	005b      	lsls	r3, r3, #1
 8016cd6:	4413      	add	r3, r2
 8016cd8:	00db      	lsls	r3, r3, #3
 8016cda:	3308      	adds	r3, #8
 8016cdc:	4a16      	ldr	r2, [pc, #88]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016cde:	4413      	add	r3, r2
 8016ce0:	3304      	adds	r3, #4
 8016ce2:	461a      	mov	r2, r3
 8016ce4:	68f8      	ldr	r0, [r7, #12]
 8016ce6:	f000 fafb 	bl	80172e0 <etharp_request_dst>
 8016cea:	4603      	mov	r3, r0
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d109      	bne.n	8016d04 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016cf0:	79fa      	ldrb	r2, [r7, #7]
 8016cf2:	4911      	ldr	r1, [pc, #68]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016cf4:	4613      	mov	r3, r2
 8016cf6:	005b      	lsls	r3, r3, #1
 8016cf8:	4413      	add	r3, r2
 8016cfa:	00db      	lsls	r3, r3, #3
 8016cfc:	440b      	add	r3, r1
 8016cfe:	3314      	adds	r3, #20
 8016d00:	2203      	movs	r2, #3
 8016d02:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016d0a:	79fa      	ldrb	r2, [r7, #7]
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	4413      	add	r3, r2
 8016d12:	00db      	lsls	r3, r3, #3
 8016d14:	3308      	adds	r3, #8
 8016d16:	4a08      	ldr	r2, [pc, #32]	; (8016d38 <etharp_output_to_arp_index+0x124>)
 8016d18:	4413      	add	r3, r2
 8016d1a:	3304      	adds	r3, #4
 8016d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016d20:	9200      	str	r2, [sp, #0]
 8016d22:	460a      	mov	r2, r1
 8016d24:	68b9      	ldr	r1, [r7, #8]
 8016d26:	68f8      	ldr	r0, [r7, #12]
 8016d28:	f001 fe3a 	bl	80189a0 <ethernet_output>
 8016d2c:	4603      	mov	r3, r0
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3710      	adds	r7, #16
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}
 8016d36:	bf00      	nop
 8016d38:	20004bac 	.word	0x20004bac
 8016d3c:	0801f3e8 	.word	0x0801f3e8
 8016d40:	0801f558 	.word	0x0801f558
 8016d44:	0801f460 	.word	0x0801f460

08016d48 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b08a      	sub	sp, #40	; 0x28
 8016d4c:	af02      	add	r7, sp, #8
 8016d4e:	60f8      	str	r0, [r7, #12]
 8016d50:	60b9      	str	r1, [r7, #8]
 8016d52:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d106      	bne.n	8016d6c <etharp_output+0x24>
 8016d5e:	4b73      	ldr	r3, [pc, #460]	; (8016f2c <etharp_output+0x1e4>)
 8016d60:	f240 321e 	movw	r2, #798	; 0x31e
 8016d64:	4972      	ldr	r1, [pc, #456]	; (8016f30 <etharp_output+0x1e8>)
 8016d66:	4873      	ldr	r0, [pc, #460]	; (8016f34 <etharp_output+0x1ec>)
 8016d68:	f004 fa78 	bl	801b25c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016d6c:	68bb      	ldr	r3, [r7, #8]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d106      	bne.n	8016d80 <etharp_output+0x38>
 8016d72:	4b6e      	ldr	r3, [pc, #440]	; (8016f2c <etharp_output+0x1e4>)
 8016d74:	f240 321f 	movw	r2, #799	; 0x31f
 8016d78:	496f      	ldr	r1, [pc, #444]	; (8016f38 <etharp_output+0x1f0>)
 8016d7a:	486e      	ldr	r0, [pc, #440]	; (8016f34 <etharp_output+0x1ec>)
 8016d7c:	f004 fa6e 	bl	801b25c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d106      	bne.n	8016d94 <etharp_output+0x4c>
 8016d86:	4b69      	ldr	r3, [pc, #420]	; (8016f2c <etharp_output+0x1e4>)
 8016d88:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016d8c:	496b      	ldr	r1, [pc, #428]	; (8016f3c <etharp_output+0x1f4>)
 8016d8e:	4869      	ldr	r0, [pc, #420]	; (8016f34 <etharp_output+0x1ec>)
 8016d90:	f004 fa64 	bl	801b25c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	68f9      	ldr	r1, [r7, #12]
 8016d9a:	4618      	mov	r0, r3
 8016d9c:	f000 fef8 	bl	8017b90 <ip4_addr_isbroadcast_u32>
 8016da0:	4603      	mov	r3, r0
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d002      	beq.n	8016dac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016da6:	4b66      	ldr	r3, [pc, #408]	; (8016f40 <etharp_output+0x1f8>)
 8016da8:	61fb      	str	r3, [r7, #28]
 8016daa:	e0af      	b.n	8016f0c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016db4:	2be0      	cmp	r3, #224	; 0xe0
 8016db6:	d118      	bne.n	8016dea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016db8:	2301      	movs	r3, #1
 8016dba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016dbc:	2300      	movs	r3, #0
 8016dbe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016dc0:	235e      	movs	r3, #94	; 0x5e
 8016dc2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	3301      	adds	r3, #1
 8016dc8:	781b      	ldrb	r3, [r3, #0]
 8016dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016dce:	b2db      	uxtb	r3, r3
 8016dd0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	3302      	adds	r3, #2
 8016dd6:	781b      	ldrb	r3, [r3, #0]
 8016dd8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	3303      	adds	r3, #3
 8016dde:	781b      	ldrb	r3, [r3, #0]
 8016de0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016de2:	f107 0310 	add.w	r3, r7, #16
 8016de6:	61fb      	str	r3, [r7, #28]
 8016de8:	e090      	b.n	8016f0c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681a      	ldr	r2, [r3, #0]
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	3304      	adds	r3, #4
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	405a      	eors	r2, r3
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	3308      	adds	r3, #8
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	4013      	ands	r3, r2
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d012      	beq.n	8016e28 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016e08:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016e0c:	4293      	cmp	r3, r2
 8016e0e:	d00b      	beq.n	8016e28 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	330c      	adds	r3, #12
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d003      	beq.n	8016e22 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	330c      	adds	r3, #12
 8016e1e:	61bb      	str	r3, [r7, #24]
 8016e20:	e002      	b.n	8016e28 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016e22:	f06f 0303 	mvn.w	r3, #3
 8016e26:	e07d      	b.n	8016f24 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e28:	4b46      	ldr	r3, [pc, #280]	; (8016f44 <etharp_output+0x1fc>)
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	4619      	mov	r1, r3
 8016e2e:	4a46      	ldr	r2, [pc, #280]	; (8016f48 <etharp_output+0x200>)
 8016e30:	460b      	mov	r3, r1
 8016e32:	005b      	lsls	r3, r3, #1
 8016e34:	440b      	add	r3, r1
 8016e36:	00db      	lsls	r3, r3, #3
 8016e38:	4413      	add	r3, r2
 8016e3a:	3314      	adds	r3, #20
 8016e3c:	781b      	ldrb	r3, [r3, #0]
 8016e3e:	2b01      	cmp	r3, #1
 8016e40:	d925      	bls.n	8016e8e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016e42:	4b40      	ldr	r3, [pc, #256]	; (8016f44 <etharp_output+0x1fc>)
 8016e44:	781b      	ldrb	r3, [r3, #0]
 8016e46:	4619      	mov	r1, r3
 8016e48:	4a3f      	ldr	r2, [pc, #252]	; (8016f48 <etharp_output+0x200>)
 8016e4a:	460b      	mov	r3, r1
 8016e4c:	005b      	lsls	r3, r3, #1
 8016e4e:	440b      	add	r3, r1
 8016e50:	00db      	lsls	r3, r3, #3
 8016e52:	4413      	add	r3, r2
 8016e54:	3308      	adds	r3, #8
 8016e56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e58:	68fa      	ldr	r2, [r7, #12]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d117      	bne.n	8016e8e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016e5e:	69bb      	ldr	r3, [r7, #24]
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	4b38      	ldr	r3, [pc, #224]	; (8016f44 <etharp_output+0x1fc>)
 8016e64:	781b      	ldrb	r3, [r3, #0]
 8016e66:	4618      	mov	r0, r3
 8016e68:	4937      	ldr	r1, [pc, #220]	; (8016f48 <etharp_output+0x200>)
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	005b      	lsls	r3, r3, #1
 8016e6e:	4403      	add	r3, r0
 8016e70:	00db      	lsls	r3, r3, #3
 8016e72:	440b      	add	r3, r1
 8016e74:	3304      	adds	r3, #4
 8016e76:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016e78:	429a      	cmp	r2, r3
 8016e7a:	d108      	bne.n	8016e8e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016e7c:	4b31      	ldr	r3, [pc, #196]	; (8016f44 <etharp_output+0x1fc>)
 8016e7e:	781b      	ldrb	r3, [r3, #0]
 8016e80:	461a      	mov	r2, r3
 8016e82:	68b9      	ldr	r1, [r7, #8]
 8016e84:	68f8      	ldr	r0, [r7, #12]
 8016e86:	f7ff fec5 	bl	8016c14 <etharp_output_to_arp_index>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	e04a      	b.n	8016f24 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016e8e:	2300      	movs	r3, #0
 8016e90:	75fb      	strb	r3, [r7, #23]
 8016e92:	e031      	b.n	8016ef8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016e94:	7dfa      	ldrb	r2, [r7, #23]
 8016e96:	492c      	ldr	r1, [pc, #176]	; (8016f48 <etharp_output+0x200>)
 8016e98:	4613      	mov	r3, r2
 8016e9a:	005b      	lsls	r3, r3, #1
 8016e9c:	4413      	add	r3, r2
 8016e9e:	00db      	lsls	r3, r3, #3
 8016ea0:	440b      	add	r3, r1
 8016ea2:	3314      	adds	r3, #20
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	2b01      	cmp	r3, #1
 8016ea8:	d923      	bls.n	8016ef2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016eaa:	7dfa      	ldrb	r2, [r7, #23]
 8016eac:	4926      	ldr	r1, [pc, #152]	; (8016f48 <etharp_output+0x200>)
 8016eae:	4613      	mov	r3, r2
 8016eb0:	005b      	lsls	r3, r3, #1
 8016eb2:	4413      	add	r3, r2
 8016eb4:	00db      	lsls	r3, r3, #3
 8016eb6:	440b      	add	r3, r1
 8016eb8:	3308      	adds	r3, #8
 8016eba:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ebc:	68fa      	ldr	r2, [r7, #12]
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d117      	bne.n	8016ef2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016ec2:	69bb      	ldr	r3, [r7, #24]
 8016ec4:	6819      	ldr	r1, [r3, #0]
 8016ec6:	7dfa      	ldrb	r2, [r7, #23]
 8016ec8:	481f      	ldr	r0, [pc, #124]	; (8016f48 <etharp_output+0x200>)
 8016eca:	4613      	mov	r3, r2
 8016ecc:	005b      	lsls	r3, r3, #1
 8016ece:	4413      	add	r3, r2
 8016ed0:	00db      	lsls	r3, r3, #3
 8016ed2:	4403      	add	r3, r0
 8016ed4:	3304      	adds	r3, #4
 8016ed6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016ed8:	4299      	cmp	r1, r3
 8016eda:	d10a      	bne.n	8016ef2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016edc:	4a19      	ldr	r2, [pc, #100]	; (8016f44 <etharp_output+0x1fc>)
 8016ede:	7dfb      	ldrb	r3, [r7, #23]
 8016ee0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016ee2:	7dfb      	ldrb	r3, [r7, #23]
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	68b9      	ldr	r1, [r7, #8]
 8016ee8:	68f8      	ldr	r0, [r7, #12]
 8016eea:	f7ff fe93 	bl	8016c14 <etharp_output_to_arp_index>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	e018      	b.n	8016f24 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016ef2:	7dfb      	ldrb	r3, [r7, #23]
 8016ef4:	3301      	adds	r3, #1
 8016ef6:	75fb      	strb	r3, [r7, #23]
 8016ef8:	7dfb      	ldrb	r3, [r7, #23]
 8016efa:	2b09      	cmp	r3, #9
 8016efc:	d9ca      	bls.n	8016e94 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016efe:	68ba      	ldr	r2, [r7, #8]
 8016f00:	69b9      	ldr	r1, [r7, #24]
 8016f02:	68f8      	ldr	r0, [r7, #12]
 8016f04:	f000 f822 	bl	8016f4c <etharp_query>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	e00b      	b.n	8016f24 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f16:	9300      	str	r3, [sp, #0]
 8016f18:	69fb      	ldr	r3, [r7, #28]
 8016f1a:	68b9      	ldr	r1, [r7, #8]
 8016f1c:	68f8      	ldr	r0, [r7, #12]
 8016f1e:	f001 fd3f 	bl	80189a0 <ethernet_output>
 8016f22:	4603      	mov	r3, r0
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3720      	adds	r7, #32
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	0801f3e8 	.word	0x0801f3e8
 8016f30:	0801f538 	.word	0x0801f538
 8016f34:	0801f460 	.word	0x0801f460
 8016f38:	0801f588 	.word	0x0801f588
 8016f3c:	0801f528 	.word	0x0801f528
 8016f40:	0801fdf8 	.word	0x0801fdf8
 8016f44:	20004c9c 	.word	0x20004c9c
 8016f48:	20004bac 	.word	0x20004bac

08016f4c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b08c      	sub	sp, #48	; 0x30
 8016f50:	af02      	add	r7, sp, #8
 8016f52:	60f8      	str	r0, [r7, #12]
 8016f54:	60b9      	str	r1, [r7, #8]
 8016f56:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	3326      	adds	r3, #38	; 0x26
 8016f5c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016f5e:	23ff      	movs	r3, #255	; 0xff
 8016f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016f64:	2300      	movs	r3, #0
 8016f66:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	68f9      	ldr	r1, [r7, #12]
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f000 fe0e 	bl	8017b90 <ip4_addr_isbroadcast_u32>
 8016f74:	4603      	mov	r3, r0
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d10c      	bne.n	8016f94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016f7a:	68bb      	ldr	r3, [r7, #8]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f82:	2be0      	cmp	r3, #224	; 0xe0
 8016f84:	d006      	beq.n	8016f94 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016f86:	68bb      	ldr	r3, [r7, #8]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d003      	beq.n	8016f94 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016f8c:	68bb      	ldr	r3, [r7, #8]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d102      	bne.n	8016f9a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016f94:	f06f 030f 	mvn.w	r3, #15
 8016f98:	e101      	b.n	801719e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016f9a:	68fa      	ldr	r2, [r7, #12]
 8016f9c:	2101      	movs	r1, #1
 8016f9e:	68b8      	ldr	r0, [r7, #8]
 8016fa0:	f7ff fb60 	bl	8016664 <etharp_find_entry>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016fa8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	da02      	bge.n	8016fb6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016fb0:	8a7b      	ldrh	r3, [r7, #18]
 8016fb2:	b25b      	sxtb	r3, r3
 8016fb4:	e0f3      	b.n	801719e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016fb6:	8a7b      	ldrh	r3, [r7, #18]
 8016fb8:	2b7e      	cmp	r3, #126	; 0x7e
 8016fba:	d906      	bls.n	8016fca <etharp_query+0x7e>
 8016fbc:	4b7a      	ldr	r3, [pc, #488]	; (80171a8 <etharp_query+0x25c>)
 8016fbe:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016fc2:	497a      	ldr	r1, [pc, #488]	; (80171ac <etharp_query+0x260>)
 8016fc4:	487a      	ldr	r0, [pc, #488]	; (80171b0 <etharp_query+0x264>)
 8016fc6:	f004 f949 	bl	801b25c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016fca:	8a7b      	ldrh	r3, [r7, #18]
 8016fcc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016fce:	7c7a      	ldrb	r2, [r7, #17]
 8016fd0:	4978      	ldr	r1, [pc, #480]	; (80171b4 <etharp_query+0x268>)
 8016fd2:	4613      	mov	r3, r2
 8016fd4:	005b      	lsls	r3, r3, #1
 8016fd6:	4413      	add	r3, r2
 8016fd8:	00db      	lsls	r3, r3, #3
 8016fda:	440b      	add	r3, r1
 8016fdc:	3314      	adds	r3, #20
 8016fde:	781b      	ldrb	r3, [r3, #0]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d115      	bne.n	8017010 <etharp_query+0xc4>
    is_new_entry = 1;
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016fe8:	7c7a      	ldrb	r2, [r7, #17]
 8016fea:	4972      	ldr	r1, [pc, #456]	; (80171b4 <etharp_query+0x268>)
 8016fec:	4613      	mov	r3, r2
 8016fee:	005b      	lsls	r3, r3, #1
 8016ff0:	4413      	add	r3, r2
 8016ff2:	00db      	lsls	r3, r3, #3
 8016ff4:	440b      	add	r3, r1
 8016ff6:	3314      	adds	r3, #20
 8016ff8:	2201      	movs	r2, #1
 8016ffa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016ffc:	7c7a      	ldrb	r2, [r7, #17]
 8016ffe:	496d      	ldr	r1, [pc, #436]	; (80171b4 <etharp_query+0x268>)
 8017000:	4613      	mov	r3, r2
 8017002:	005b      	lsls	r3, r3, #1
 8017004:	4413      	add	r3, r2
 8017006:	00db      	lsls	r3, r3, #3
 8017008:	440b      	add	r3, r1
 801700a:	3308      	adds	r3, #8
 801700c:	68fa      	ldr	r2, [r7, #12]
 801700e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017010:	7c7a      	ldrb	r2, [r7, #17]
 8017012:	4968      	ldr	r1, [pc, #416]	; (80171b4 <etharp_query+0x268>)
 8017014:	4613      	mov	r3, r2
 8017016:	005b      	lsls	r3, r3, #1
 8017018:	4413      	add	r3, r2
 801701a:	00db      	lsls	r3, r3, #3
 801701c:	440b      	add	r3, r1
 801701e:	3314      	adds	r3, #20
 8017020:	781b      	ldrb	r3, [r3, #0]
 8017022:	2b01      	cmp	r3, #1
 8017024:	d011      	beq.n	801704a <etharp_query+0xfe>
 8017026:	7c7a      	ldrb	r2, [r7, #17]
 8017028:	4962      	ldr	r1, [pc, #392]	; (80171b4 <etharp_query+0x268>)
 801702a:	4613      	mov	r3, r2
 801702c:	005b      	lsls	r3, r3, #1
 801702e:	4413      	add	r3, r2
 8017030:	00db      	lsls	r3, r3, #3
 8017032:	440b      	add	r3, r1
 8017034:	3314      	adds	r3, #20
 8017036:	781b      	ldrb	r3, [r3, #0]
 8017038:	2b01      	cmp	r3, #1
 801703a:	d806      	bhi.n	801704a <etharp_query+0xfe>
 801703c:	4b5a      	ldr	r3, [pc, #360]	; (80171a8 <etharp_query+0x25c>)
 801703e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017042:	495d      	ldr	r1, [pc, #372]	; (80171b8 <etharp_query+0x26c>)
 8017044:	485a      	ldr	r0, [pc, #360]	; (80171b0 <etharp_query+0x264>)
 8017046:	f004 f909 	bl	801b25c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801704a:	6a3b      	ldr	r3, [r7, #32]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d102      	bne.n	8017056 <etharp_query+0x10a>
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d10c      	bne.n	8017070 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017056:	68b9      	ldr	r1, [r7, #8]
 8017058:	68f8      	ldr	r0, [r7, #12]
 801705a:	f000 f963 	bl	8017324 <etharp_request>
 801705e:	4603      	mov	r3, r0
 8017060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d102      	bne.n	8017070 <etharp_query+0x124>
      return result;
 801706a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801706e:	e096      	b.n	801719e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d106      	bne.n	8017084 <etharp_query+0x138>
 8017076:	4b4c      	ldr	r3, [pc, #304]	; (80171a8 <etharp_query+0x25c>)
 8017078:	f240 32e1 	movw	r2, #993	; 0x3e1
 801707c:	494f      	ldr	r1, [pc, #316]	; (80171bc <etharp_query+0x270>)
 801707e:	484c      	ldr	r0, [pc, #304]	; (80171b0 <etharp_query+0x264>)
 8017080:	f004 f8ec 	bl	801b25c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017084:	7c7a      	ldrb	r2, [r7, #17]
 8017086:	494b      	ldr	r1, [pc, #300]	; (80171b4 <etharp_query+0x268>)
 8017088:	4613      	mov	r3, r2
 801708a:	005b      	lsls	r3, r3, #1
 801708c:	4413      	add	r3, r2
 801708e:	00db      	lsls	r3, r3, #3
 8017090:	440b      	add	r3, r1
 8017092:	3314      	adds	r3, #20
 8017094:	781b      	ldrb	r3, [r3, #0]
 8017096:	2b01      	cmp	r3, #1
 8017098:	d917      	bls.n	80170ca <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801709a:	4a49      	ldr	r2, [pc, #292]	; (80171c0 <etharp_query+0x274>)
 801709c:	7c7b      	ldrb	r3, [r7, #17]
 801709e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80170a0:	7c7a      	ldrb	r2, [r7, #17]
 80170a2:	4613      	mov	r3, r2
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	4413      	add	r3, r2
 80170a8:	00db      	lsls	r3, r3, #3
 80170aa:	3308      	adds	r3, #8
 80170ac:	4a41      	ldr	r2, [pc, #260]	; (80171b4 <etharp_query+0x268>)
 80170ae:	4413      	add	r3, r2
 80170b0:	3304      	adds	r3, #4
 80170b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80170b6:	9200      	str	r2, [sp, #0]
 80170b8:	697a      	ldr	r2, [r7, #20]
 80170ba:	6879      	ldr	r1, [r7, #4]
 80170bc:	68f8      	ldr	r0, [r7, #12]
 80170be:	f001 fc6f 	bl	80189a0 <ethernet_output>
 80170c2:	4603      	mov	r3, r0
 80170c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80170c8:	e067      	b.n	801719a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80170ca:	7c7a      	ldrb	r2, [r7, #17]
 80170cc:	4939      	ldr	r1, [pc, #228]	; (80171b4 <etharp_query+0x268>)
 80170ce:	4613      	mov	r3, r2
 80170d0:	005b      	lsls	r3, r3, #1
 80170d2:	4413      	add	r3, r2
 80170d4:	00db      	lsls	r3, r3, #3
 80170d6:	440b      	add	r3, r1
 80170d8:	3314      	adds	r3, #20
 80170da:	781b      	ldrb	r3, [r3, #0]
 80170dc:	2b01      	cmp	r3, #1
 80170de:	d15c      	bne.n	801719a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80170e0:	2300      	movs	r3, #0
 80170e2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80170e8:	e01c      	b.n	8017124 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80170ea:	69fb      	ldr	r3, [r7, #28]
 80170ec:	895a      	ldrh	r2, [r3, #10]
 80170ee:	69fb      	ldr	r3, [r7, #28]
 80170f0:	891b      	ldrh	r3, [r3, #8]
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d10a      	bne.n	801710c <etharp_query+0x1c0>
 80170f6:	69fb      	ldr	r3, [r7, #28]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d006      	beq.n	801710c <etharp_query+0x1c0>
 80170fe:	4b2a      	ldr	r3, [pc, #168]	; (80171a8 <etharp_query+0x25c>)
 8017100:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017104:	492f      	ldr	r1, [pc, #188]	; (80171c4 <etharp_query+0x278>)
 8017106:	482a      	ldr	r0, [pc, #168]	; (80171b0 <etharp_query+0x264>)
 8017108:	f004 f8a8 	bl	801b25c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801710c:	69fb      	ldr	r3, [r7, #28]
 801710e:	7b1b      	ldrb	r3, [r3, #12]
 8017110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017114:	2b00      	cmp	r3, #0
 8017116:	d002      	beq.n	801711e <etharp_query+0x1d2>
        copy_needed = 1;
 8017118:	2301      	movs	r3, #1
 801711a:	61bb      	str	r3, [r7, #24]
        break;
 801711c:	e005      	b.n	801712a <etharp_query+0x1de>
      }
      p = p->next;
 801711e:	69fb      	ldr	r3, [r7, #28]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017124:	69fb      	ldr	r3, [r7, #28]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d1df      	bne.n	80170ea <etharp_query+0x19e>
    }
    if (copy_needed) {
 801712a:	69bb      	ldr	r3, [r7, #24]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d007      	beq.n	8017140 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017130:	687a      	ldr	r2, [r7, #4]
 8017132:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017136:	200e      	movs	r0, #14
 8017138:	f7f8 fbae 	bl	800f898 <pbuf_clone>
 801713c:	61f8      	str	r0, [r7, #28]
 801713e:	e004      	b.n	801714a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017144:	69f8      	ldr	r0, [r7, #28]
 8017146:	f7f8 f943 	bl	800f3d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801714a:	69fb      	ldr	r3, [r7, #28]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d021      	beq.n	8017194 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017150:	7c7a      	ldrb	r2, [r7, #17]
 8017152:	4918      	ldr	r1, [pc, #96]	; (80171b4 <etharp_query+0x268>)
 8017154:	4613      	mov	r3, r2
 8017156:	005b      	lsls	r3, r3, #1
 8017158:	4413      	add	r3, r2
 801715a:	00db      	lsls	r3, r3, #3
 801715c:	440b      	add	r3, r1
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d00a      	beq.n	801717a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017164:	7c7a      	ldrb	r2, [r7, #17]
 8017166:	4913      	ldr	r1, [pc, #76]	; (80171b4 <etharp_query+0x268>)
 8017168:	4613      	mov	r3, r2
 801716a:	005b      	lsls	r3, r3, #1
 801716c:	4413      	add	r3, r2
 801716e:	00db      	lsls	r3, r3, #3
 8017170:	440b      	add	r3, r1
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	4618      	mov	r0, r3
 8017176:	f7f8 f885 	bl	800f284 <pbuf_free>
      }
      arp_table[i].q = p;
 801717a:	7c7a      	ldrb	r2, [r7, #17]
 801717c:	490d      	ldr	r1, [pc, #52]	; (80171b4 <etharp_query+0x268>)
 801717e:	4613      	mov	r3, r2
 8017180:	005b      	lsls	r3, r3, #1
 8017182:	4413      	add	r3, r2
 8017184:	00db      	lsls	r3, r3, #3
 8017186:	440b      	add	r3, r1
 8017188:	69fa      	ldr	r2, [r7, #28]
 801718a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801718c:	2300      	movs	r3, #0
 801718e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017192:	e002      	b.n	801719a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017194:	23ff      	movs	r3, #255	; 0xff
 8017196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801719a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801719e:	4618      	mov	r0, r3
 80171a0:	3728      	adds	r7, #40	; 0x28
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bd80      	pop	{r7, pc}
 80171a6:	bf00      	nop
 80171a8:	0801f3e8 	.word	0x0801f3e8
 80171ac:	0801f594 	.word	0x0801f594
 80171b0:	0801f460 	.word	0x0801f460
 80171b4:	20004bac 	.word	0x20004bac
 80171b8:	0801f5a4 	.word	0x0801f5a4
 80171bc:	0801f588 	.word	0x0801f588
 80171c0:	20004c9c 	.word	0x20004c9c
 80171c4:	0801f5cc 	.word	0x0801f5cc

080171c8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b08a      	sub	sp, #40	; 0x28
 80171cc:	af02      	add	r7, sp, #8
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	60b9      	str	r1, [r7, #8]
 80171d2:	607a      	str	r2, [r7, #4]
 80171d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80171d6:	2300      	movs	r3, #0
 80171d8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d106      	bne.n	80171ee <etharp_raw+0x26>
 80171e0:	4b3a      	ldr	r3, [pc, #232]	; (80172cc <etharp_raw+0x104>)
 80171e2:	f240 4257 	movw	r2, #1111	; 0x457
 80171e6:	493a      	ldr	r1, [pc, #232]	; (80172d0 <etharp_raw+0x108>)
 80171e8:	483a      	ldr	r0, [pc, #232]	; (80172d4 <etharp_raw+0x10c>)
 80171ea:	f004 f837 	bl	801b25c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80171ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80171f2:	211c      	movs	r1, #28
 80171f4:	200e      	movs	r0, #14
 80171f6:	f7f7 fd61 	bl	800ecbc <pbuf_alloc>
 80171fa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80171fc:	69bb      	ldr	r3, [r7, #24]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d102      	bne.n	8017208 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017202:	f04f 33ff 	mov.w	r3, #4294967295
 8017206:	e05d      	b.n	80172c4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017208:	69bb      	ldr	r3, [r7, #24]
 801720a:	895b      	ldrh	r3, [r3, #10]
 801720c:	2b1b      	cmp	r3, #27
 801720e:	d806      	bhi.n	801721e <etharp_raw+0x56>
 8017210:	4b2e      	ldr	r3, [pc, #184]	; (80172cc <etharp_raw+0x104>)
 8017212:	f240 4262 	movw	r2, #1122	; 0x462
 8017216:	4930      	ldr	r1, [pc, #192]	; (80172d8 <etharp_raw+0x110>)
 8017218:	482e      	ldr	r0, [pc, #184]	; (80172d4 <etharp_raw+0x10c>)
 801721a:	f004 f81f 	bl	801b25c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801721e:	69bb      	ldr	r3, [r7, #24]
 8017220:	685b      	ldr	r3, [r3, #4]
 8017222:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017224:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017226:	4618      	mov	r0, r3
 8017228:	f7f6 fc80 	bl	800db2c <lwip_htons>
 801722c:	4603      	mov	r3, r0
 801722e:	461a      	mov	r2, r3
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801723a:	2b06      	cmp	r3, #6
 801723c:	d006      	beq.n	801724c <etharp_raw+0x84>
 801723e:	4b23      	ldr	r3, [pc, #140]	; (80172cc <etharp_raw+0x104>)
 8017240:	f240 4269 	movw	r2, #1129	; 0x469
 8017244:	4925      	ldr	r1, [pc, #148]	; (80172dc <etharp_raw+0x114>)
 8017246:	4823      	ldr	r0, [pc, #140]	; (80172d4 <etharp_raw+0x10c>)
 8017248:	f004 f808 	bl	801b25c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801724c:	697b      	ldr	r3, [r7, #20]
 801724e:	3308      	adds	r3, #8
 8017250:	2206      	movs	r2, #6
 8017252:	6839      	ldr	r1, [r7, #0]
 8017254:	4618      	mov	r0, r3
 8017256:	f003 ff41 	bl	801b0dc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801725a:	697b      	ldr	r3, [r7, #20]
 801725c:	3312      	adds	r3, #18
 801725e:	2206      	movs	r2, #6
 8017260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017262:	4618      	mov	r0, r3
 8017264:	f003 ff3a 	bl	801b0dc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	330e      	adds	r3, #14
 801726c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801726e:	6812      	ldr	r2, [r2, #0]
 8017270:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017272:	697b      	ldr	r3, [r7, #20]
 8017274:	3318      	adds	r3, #24
 8017276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017278:	6812      	ldr	r2, [r2, #0]
 801727a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801727c:	697b      	ldr	r3, [r7, #20]
 801727e:	2200      	movs	r2, #0
 8017280:	701a      	strb	r2, [r3, #0]
 8017282:	2200      	movs	r2, #0
 8017284:	f042 0201 	orr.w	r2, r2, #1
 8017288:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	2200      	movs	r2, #0
 801728e:	f042 0208 	orr.w	r2, r2, #8
 8017292:	709a      	strb	r2, [r3, #2]
 8017294:	2200      	movs	r2, #0
 8017296:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	2206      	movs	r2, #6
 801729c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801729e:	697b      	ldr	r3, [r7, #20]
 80172a0:	2204      	movs	r2, #4
 80172a2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80172a4:	f640 0306 	movw	r3, #2054	; 0x806
 80172a8:	9300      	str	r3, [sp, #0]
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	68ba      	ldr	r2, [r7, #8]
 80172ae:	69b9      	ldr	r1, [r7, #24]
 80172b0:	68f8      	ldr	r0, [r7, #12]
 80172b2:	f001 fb75 	bl	80189a0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80172b6:	69b8      	ldr	r0, [r7, #24]
 80172b8:	f7f7 ffe4 	bl	800f284 <pbuf_free>
  p = NULL;
 80172bc:	2300      	movs	r3, #0
 80172be:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80172c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80172c4:	4618      	mov	r0, r3
 80172c6:	3720      	adds	r7, #32
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd80      	pop	{r7, pc}
 80172cc:	0801f3e8 	.word	0x0801f3e8
 80172d0:	0801f538 	.word	0x0801f538
 80172d4:	0801f460 	.word	0x0801f460
 80172d8:	0801f5e8 	.word	0x0801f5e8
 80172dc:	0801f61c 	.word	0x0801f61c

080172e0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b088      	sub	sp, #32
 80172e4:	af04      	add	r7, sp, #16
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80172fc:	2201      	movs	r2, #1
 80172fe:	9203      	str	r2, [sp, #12]
 8017300:	68ba      	ldr	r2, [r7, #8]
 8017302:	9202      	str	r2, [sp, #8]
 8017304:	4a06      	ldr	r2, [pc, #24]	; (8017320 <etharp_request_dst+0x40>)
 8017306:	9201      	str	r2, [sp, #4]
 8017308:	9300      	str	r3, [sp, #0]
 801730a:	4603      	mov	r3, r0
 801730c:	687a      	ldr	r2, [r7, #4]
 801730e:	68f8      	ldr	r0, [r7, #12]
 8017310:	f7ff ff5a 	bl	80171c8 <etharp_raw>
 8017314:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017316:	4618      	mov	r0, r3
 8017318:	3710      	adds	r7, #16
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}
 801731e:	bf00      	nop
 8017320:	0801fe00 	.word	0x0801fe00

08017324 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b082      	sub	sp, #8
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
 801732c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801732e:	4a05      	ldr	r2, [pc, #20]	; (8017344 <etharp_request+0x20>)
 8017330:	6839      	ldr	r1, [r7, #0]
 8017332:	6878      	ldr	r0, [r7, #4]
 8017334:	f7ff ffd4 	bl	80172e0 <etharp_request_dst>
 8017338:	4603      	mov	r3, r0
}
 801733a:	4618      	mov	r0, r3
 801733c:	3708      	adds	r7, #8
 801733e:	46bd      	mov	sp, r7
 8017340:	bd80      	pop	{r7, pc}
 8017342:	bf00      	nop
 8017344:	0801fdf8 	.word	0x0801fdf8

08017348 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b08e      	sub	sp, #56	; 0x38
 801734c:	af04      	add	r7, sp, #16
 801734e:	6078      	str	r0, [r7, #4]
 8017350:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017352:	4b79      	ldr	r3, [pc, #484]	; (8017538 <icmp_input+0x1f0>)
 8017354:	689b      	ldr	r3, [r3, #8]
 8017356:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801735a:	781b      	ldrb	r3, [r3, #0]
 801735c:	f003 030f 	and.w	r3, r3, #15
 8017360:	b2db      	uxtb	r3, r3
 8017362:	009b      	lsls	r3, r3, #2
 8017364:	b2db      	uxtb	r3, r3
 8017366:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017368:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801736a:	2b13      	cmp	r3, #19
 801736c:	f240 80cd 	bls.w	801750a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	895b      	ldrh	r3, [r3, #10]
 8017374:	2b03      	cmp	r3, #3
 8017376:	f240 80ca 	bls.w	801750e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	685b      	ldr	r3, [r3, #4]
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017384:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017388:	2b00      	cmp	r3, #0
 801738a:	f000 80b7 	beq.w	80174fc <icmp_input+0x1b4>
 801738e:	2b08      	cmp	r3, #8
 8017390:	f040 80b7 	bne.w	8017502 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017394:	4b69      	ldr	r3, [pc, #420]	; (801753c <icmp_input+0x1f4>)
 8017396:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017398:	4b67      	ldr	r3, [pc, #412]	; (8017538 <icmp_input+0x1f0>)
 801739a:	695b      	ldr	r3, [r3, #20]
 801739c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173a0:	2be0      	cmp	r3, #224	; 0xe0
 80173a2:	f000 80bb 	beq.w	801751c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80173a6:	4b64      	ldr	r3, [pc, #400]	; (8017538 <icmp_input+0x1f0>)
 80173a8:	695b      	ldr	r3, [r3, #20]
 80173aa:	4a63      	ldr	r2, [pc, #396]	; (8017538 <icmp_input+0x1f0>)
 80173ac:	6812      	ldr	r2, [r2, #0]
 80173ae:	4611      	mov	r1, r2
 80173b0:	4618      	mov	r0, r3
 80173b2:	f000 fbed 	bl	8017b90 <ip4_addr_isbroadcast_u32>
 80173b6:	4603      	mov	r3, r0
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	f040 80b1 	bne.w	8017520 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	891b      	ldrh	r3, [r3, #8]
 80173c2:	2b07      	cmp	r3, #7
 80173c4:	f240 80a5 	bls.w	8017512 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80173c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173ca:	330e      	adds	r3, #14
 80173cc:	4619      	mov	r1, r3
 80173ce:	6878      	ldr	r0, [r7, #4]
 80173d0:	f7f7 fec2 	bl	800f158 <pbuf_add_header>
 80173d4:	4603      	mov	r3, r0
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d04b      	beq.n	8017472 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	891a      	ldrh	r2, [r3, #8]
 80173de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173e0:	4413      	add	r3, r2
 80173e2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	891b      	ldrh	r3, [r3, #8]
 80173e8:	8b7a      	ldrh	r2, [r7, #26]
 80173ea:	429a      	cmp	r2, r3
 80173ec:	f0c0 809a 	bcc.w	8017524 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80173f0:	8b7b      	ldrh	r3, [r7, #26]
 80173f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173f6:	4619      	mov	r1, r3
 80173f8:	200e      	movs	r0, #14
 80173fa:	f7f7 fc5f 	bl	800ecbc <pbuf_alloc>
 80173fe:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017400:	697b      	ldr	r3, [r7, #20]
 8017402:	2b00      	cmp	r3, #0
 8017404:	f000 8090 	beq.w	8017528 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017408:	697b      	ldr	r3, [r7, #20]
 801740a:	895b      	ldrh	r3, [r3, #10]
 801740c:	461a      	mov	r2, r3
 801740e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017410:	3308      	adds	r3, #8
 8017412:	429a      	cmp	r2, r3
 8017414:	d203      	bcs.n	801741e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017416:	6978      	ldr	r0, [r7, #20]
 8017418:	f7f7 ff34 	bl	800f284 <pbuf_free>
          goto icmperr;
 801741c:	e085      	b.n	801752a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801741e:	697b      	ldr	r3, [r7, #20]
 8017420:	685b      	ldr	r3, [r3, #4]
 8017422:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017426:	4618      	mov	r0, r3
 8017428:	f003 fe58 	bl	801b0dc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801742c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801742e:	4619      	mov	r1, r3
 8017430:	6978      	ldr	r0, [r7, #20]
 8017432:	f7f7 fea1 	bl	800f178 <pbuf_remove_header>
 8017436:	4603      	mov	r3, r0
 8017438:	2b00      	cmp	r3, #0
 801743a:	d009      	beq.n	8017450 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801743c:	4b40      	ldr	r3, [pc, #256]	; (8017540 <icmp_input+0x1f8>)
 801743e:	22b6      	movs	r2, #182	; 0xb6
 8017440:	4940      	ldr	r1, [pc, #256]	; (8017544 <icmp_input+0x1fc>)
 8017442:	4841      	ldr	r0, [pc, #260]	; (8017548 <icmp_input+0x200>)
 8017444:	f003 ff0a 	bl	801b25c <iprintf>
          pbuf_free(r);
 8017448:	6978      	ldr	r0, [r7, #20]
 801744a:	f7f7 ff1b 	bl	800f284 <pbuf_free>
          goto icmperr;
 801744e:	e06c      	b.n	801752a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017450:	6879      	ldr	r1, [r7, #4]
 8017452:	6978      	ldr	r0, [r7, #20]
 8017454:	f7f8 f84a 	bl	800f4ec <pbuf_copy>
 8017458:	4603      	mov	r3, r0
 801745a:	2b00      	cmp	r3, #0
 801745c:	d003      	beq.n	8017466 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801745e:	6978      	ldr	r0, [r7, #20]
 8017460:	f7f7 ff10 	bl	800f284 <pbuf_free>
          goto icmperr;
 8017464:	e061      	b.n	801752a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f7f7 ff0c 	bl	800f284 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801746c:	697b      	ldr	r3, [r7, #20]
 801746e:	607b      	str	r3, [r7, #4]
 8017470:	e00f      	b.n	8017492 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017474:	330e      	adds	r3, #14
 8017476:	4619      	mov	r1, r3
 8017478:	6878      	ldr	r0, [r7, #4]
 801747a:	f7f7 fe7d 	bl	800f178 <pbuf_remove_header>
 801747e:	4603      	mov	r3, r0
 8017480:	2b00      	cmp	r3, #0
 8017482:	d006      	beq.n	8017492 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017484:	4b2e      	ldr	r3, [pc, #184]	; (8017540 <icmp_input+0x1f8>)
 8017486:	22c7      	movs	r2, #199	; 0xc7
 8017488:	4930      	ldr	r1, [pc, #192]	; (801754c <icmp_input+0x204>)
 801748a:	482f      	ldr	r0, [pc, #188]	; (8017548 <icmp_input+0x200>)
 801748c:	f003 fee6 	bl	801b25c <iprintf>
          goto icmperr;
 8017490:	e04b      	b.n	801752a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	685b      	ldr	r3, [r3, #4]
 8017496:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801749a:	4619      	mov	r1, r3
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f7f7 fe5b 	bl	800f158 <pbuf_add_header>
 80174a2:	4603      	mov	r3, r0
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d12b      	bne.n	8017500 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	685b      	ldr	r3, [r3, #4]
 80174ac:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80174ae:	69fb      	ldr	r3, [r7, #28]
 80174b0:	681a      	ldr	r2, [r3, #0]
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80174b6:	4b20      	ldr	r3, [pc, #128]	; (8017538 <icmp_input+0x1f0>)
 80174b8:	691a      	ldr	r2, [r3, #16]
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80174be:	693b      	ldr	r3, [r7, #16]
 80174c0:	2200      	movs	r2, #0
 80174c2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	2200      	movs	r2, #0
 80174c8:	709a      	strb	r2, [r3, #2]
 80174ca:	2200      	movs	r2, #0
 80174cc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	22ff      	movs	r2, #255	; 0xff
 80174d2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	2200      	movs	r2, #0
 80174d8:	729a      	strb	r2, [r3, #10]
 80174da:	2200      	movs	r2, #0
 80174dc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80174de:	683b      	ldr	r3, [r7, #0]
 80174e0:	9302      	str	r3, [sp, #8]
 80174e2:	2301      	movs	r3, #1
 80174e4:	9301      	str	r3, [sp, #4]
 80174e6:	2300      	movs	r3, #0
 80174e8:	9300      	str	r3, [sp, #0]
 80174ea:	23ff      	movs	r3, #255	; 0xff
 80174ec:	2200      	movs	r2, #0
 80174ee:	69f9      	ldr	r1, [r7, #28]
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f000 fa75 	bl	80179e0 <ip4_output_if>
 80174f6:	4603      	mov	r3, r0
 80174f8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80174fa:	e001      	b.n	8017500 <icmp_input+0x1b8>
      break;
 80174fc:	bf00      	nop
 80174fe:	e000      	b.n	8017502 <icmp_input+0x1ba>
      break;
 8017500:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017502:	6878      	ldr	r0, [r7, #4]
 8017504:	f7f7 febe 	bl	800f284 <pbuf_free>
  return;
 8017508:	e013      	b.n	8017532 <icmp_input+0x1ea>
    goto lenerr;
 801750a:	bf00      	nop
 801750c:	e002      	b.n	8017514 <icmp_input+0x1cc>
    goto lenerr;
 801750e:	bf00      	nop
 8017510:	e000      	b.n	8017514 <icmp_input+0x1cc>
        goto lenerr;
 8017512:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017514:	6878      	ldr	r0, [r7, #4]
 8017516:	f7f7 feb5 	bl	800f284 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801751a:	e00a      	b.n	8017532 <icmp_input+0x1ea>
        goto icmperr;
 801751c:	bf00      	nop
 801751e:	e004      	b.n	801752a <icmp_input+0x1e2>
        goto icmperr;
 8017520:	bf00      	nop
 8017522:	e002      	b.n	801752a <icmp_input+0x1e2>
          goto icmperr;
 8017524:	bf00      	nop
 8017526:	e000      	b.n	801752a <icmp_input+0x1e2>
          goto icmperr;
 8017528:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f7f7 feaa 	bl	800f284 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017530:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017532:	3728      	adds	r7, #40	; 0x28
 8017534:	46bd      	mov	sp, r7
 8017536:	bd80      	pop	{r7, pc}
 8017538:	2000d93c 	.word	0x2000d93c
 801753c:	2000d950 	.word	0x2000d950
 8017540:	0801f660 	.word	0x0801f660
 8017544:	0801f698 	.word	0x0801f698
 8017548:	0801f6d0 	.word	0x0801f6d0
 801754c:	0801f6f8 	.word	0x0801f6f8

08017550 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b082      	sub	sp, #8
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
 8017558:	460b      	mov	r3, r1
 801755a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801755c:	78fb      	ldrb	r3, [r7, #3]
 801755e:	461a      	mov	r2, r3
 8017560:	2103      	movs	r1, #3
 8017562:	6878      	ldr	r0, [r7, #4]
 8017564:	f000 f814 	bl	8017590 <icmp_send_response>
}
 8017568:	bf00      	nop
 801756a:	3708      	adds	r7, #8
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}

08017570 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b082      	sub	sp, #8
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	460b      	mov	r3, r1
 801757a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801757c:	78fb      	ldrb	r3, [r7, #3]
 801757e:	461a      	mov	r2, r3
 8017580:	210b      	movs	r1, #11
 8017582:	6878      	ldr	r0, [r7, #4]
 8017584:	f000 f804 	bl	8017590 <icmp_send_response>
}
 8017588:	bf00      	nop
 801758a:	3708      	adds	r7, #8
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b08c      	sub	sp, #48	; 0x30
 8017594:	af04      	add	r7, sp, #16
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	460b      	mov	r3, r1
 801759a:	70fb      	strb	r3, [r7, #3]
 801759c:	4613      	mov	r3, r2
 801759e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80175a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175a4:	2124      	movs	r1, #36	; 0x24
 80175a6:	2022      	movs	r0, #34	; 0x22
 80175a8:	f7f7 fb88 	bl	800ecbc <pbuf_alloc>
 80175ac:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80175ae:	69fb      	ldr	r3, [r7, #28]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d04c      	beq.n	801764e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80175b4:	69fb      	ldr	r3, [r7, #28]
 80175b6:	895b      	ldrh	r3, [r3, #10]
 80175b8:	2b23      	cmp	r3, #35	; 0x23
 80175ba:	d806      	bhi.n	80175ca <icmp_send_response+0x3a>
 80175bc:	4b26      	ldr	r3, [pc, #152]	; (8017658 <icmp_send_response+0xc8>)
 80175be:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80175c2:	4926      	ldr	r1, [pc, #152]	; (801765c <icmp_send_response+0xcc>)
 80175c4:	4826      	ldr	r0, [pc, #152]	; (8017660 <icmp_send_response+0xd0>)
 80175c6:	f003 fe49 	bl	801b25c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	685b      	ldr	r3, [r3, #4]
 80175ce:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80175d0:	69fb      	ldr	r3, [r7, #28]
 80175d2:	685b      	ldr	r3, [r3, #4]
 80175d4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80175d6:	697b      	ldr	r3, [r7, #20]
 80175d8:	78fa      	ldrb	r2, [r7, #3]
 80175da:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80175dc:	697b      	ldr	r3, [r7, #20]
 80175de:	78ba      	ldrb	r2, [r7, #2]
 80175e0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80175e2:	697b      	ldr	r3, [r7, #20]
 80175e4:	2200      	movs	r2, #0
 80175e6:	711a      	strb	r2, [r3, #4]
 80175e8:	2200      	movs	r2, #0
 80175ea:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80175ec:	697b      	ldr	r3, [r7, #20]
 80175ee:	2200      	movs	r2, #0
 80175f0:	719a      	strb	r2, [r3, #6]
 80175f2:	2200      	movs	r2, #0
 80175f4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80175f6:	69fb      	ldr	r3, [r7, #28]
 80175f8:	685b      	ldr	r3, [r3, #4]
 80175fa:	f103 0008 	add.w	r0, r3, #8
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	685b      	ldr	r3, [r3, #4]
 8017602:	221c      	movs	r2, #28
 8017604:	4619      	mov	r1, r3
 8017606:	f003 fd69 	bl	801b0dc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801760a:	69bb      	ldr	r3, [r7, #24]
 801760c:	68db      	ldr	r3, [r3, #12]
 801760e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017610:	f107 030c 	add.w	r3, r7, #12
 8017614:	4618      	mov	r0, r3
 8017616:	f000 f825 	bl	8017664 <ip4_route>
 801761a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801761c:	693b      	ldr	r3, [r7, #16]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d011      	beq.n	8017646 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017622:	697b      	ldr	r3, [r7, #20]
 8017624:	2200      	movs	r2, #0
 8017626:	709a      	strb	r2, [r3, #2]
 8017628:	2200      	movs	r2, #0
 801762a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801762c:	f107 020c 	add.w	r2, r7, #12
 8017630:	693b      	ldr	r3, [r7, #16]
 8017632:	9302      	str	r3, [sp, #8]
 8017634:	2301      	movs	r3, #1
 8017636:	9301      	str	r3, [sp, #4]
 8017638:	2300      	movs	r3, #0
 801763a:	9300      	str	r3, [sp, #0]
 801763c:	23ff      	movs	r3, #255	; 0xff
 801763e:	2100      	movs	r1, #0
 8017640:	69f8      	ldr	r0, [r7, #28]
 8017642:	f000 f9cd 	bl	80179e0 <ip4_output_if>
  }
  pbuf_free(q);
 8017646:	69f8      	ldr	r0, [r7, #28]
 8017648:	f7f7 fe1c 	bl	800f284 <pbuf_free>
 801764c:	e000      	b.n	8017650 <icmp_send_response+0xc0>
    return;
 801764e:	bf00      	nop
}
 8017650:	3720      	adds	r7, #32
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}
 8017656:	bf00      	nop
 8017658:	0801f660 	.word	0x0801f660
 801765c:	0801f72c 	.word	0x0801f72c
 8017660:	0801f6d0 	.word	0x0801f6d0

08017664 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017664:	b480      	push	{r7}
 8017666:	b085      	sub	sp, #20
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801766c:	4b33      	ldr	r3, [pc, #204]	; (801773c <ip4_route+0xd8>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	60fb      	str	r3, [r7, #12]
 8017672:	e036      	b.n	80176e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801767a:	f003 0301 	and.w	r3, r3, #1
 801767e:	b2db      	uxtb	r3, r3
 8017680:	2b00      	cmp	r3, #0
 8017682:	d02b      	beq.n	80176dc <ip4_route+0x78>
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801768a:	089b      	lsrs	r3, r3, #2
 801768c:	f003 0301 	and.w	r3, r3, #1
 8017690:	b2db      	uxtb	r3, r3
 8017692:	2b00      	cmp	r3, #0
 8017694:	d022      	beq.n	80176dc <ip4_route+0x78>
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	3304      	adds	r3, #4
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d01d      	beq.n	80176dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681a      	ldr	r2, [r3, #0]
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	3304      	adds	r3, #4
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	405a      	eors	r2, r3
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	3308      	adds	r3, #8
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	4013      	ands	r3, r2
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d101      	bne.n	80176bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	e038      	b.n	801772e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176c2:	f003 0302 	and.w	r3, r3, #2
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d108      	bne.n	80176dc <ip4_route+0x78>
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	681a      	ldr	r2, [r3, #0]
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	330c      	adds	r3, #12
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d101      	bne.n	80176dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	e028      	b.n	801772e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	60fb      	str	r3, [r7, #12]
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d1c5      	bne.n	8017674 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80176e8:	4b15      	ldr	r3, [pc, #84]	; (8017740 <ip4_route+0xdc>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d01a      	beq.n	8017726 <ip4_route+0xc2>
 80176f0:	4b13      	ldr	r3, [pc, #76]	; (8017740 <ip4_route+0xdc>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176f8:	f003 0301 	and.w	r3, r3, #1
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d012      	beq.n	8017726 <ip4_route+0xc2>
 8017700:	4b0f      	ldr	r3, [pc, #60]	; (8017740 <ip4_route+0xdc>)
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017708:	f003 0304 	and.w	r3, r3, #4
 801770c:	2b00      	cmp	r3, #0
 801770e:	d00a      	beq.n	8017726 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017710:	4b0b      	ldr	r3, [pc, #44]	; (8017740 <ip4_route+0xdc>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	3304      	adds	r3, #4
 8017716:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017718:	2b00      	cmp	r3, #0
 801771a:	d004      	beq.n	8017726 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	b2db      	uxtb	r3, r3
 8017722:	2b7f      	cmp	r3, #127	; 0x7f
 8017724:	d101      	bne.n	801772a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017726:	2300      	movs	r3, #0
 8017728:	e001      	b.n	801772e <ip4_route+0xca>
  }

  return netif_default;
 801772a:	4b05      	ldr	r3, [pc, #20]	; (8017740 <ip4_route+0xdc>)
 801772c:	681b      	ldr	r3, [r3, #0]
}
 801772e:	4618      	mov	r0, r3
 8017730:	3714      	adds	r7, #20
 8017732:	46bd      	mov	sp, r7
 8017734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017738:	4770      	bx	lr
 801773a:	bf00      	nop
 801773c:	20011040 	.word	0x20011040
 8017740:	20011044 	.word	0x20011044

08017744 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017752:	f003 0301 	and.w	r3, r3, #1
 8017756:	b2db      	uxtb	r3, r3
 8017758:	2b00      	cmp	r3, #0
 801775a:	d016      	beq.n	801778a <ip4_input_accept+0x46>
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	3304      	adds	r3, #4
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d011      	beq.n	801778a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017766:	4b0b      	ldr	r3, [pc, #44]	; (8017794 <ip4_input_accept+0x50>)
 8017768:	695a      	ldr	r2, [r3, #20]
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	3304      	adds	r3, #4
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	429a      	cmp	r2, r3
 8017772:	d008      	beq.n	8017786 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017774:	4b07      	ldr	r3, [pc, #28]	; (8017794 <ip4_input_accept+0x50>)
 8017776:	695b      	ldr	r3, [r3, #20]
 8017778:	6879      	ldr	r1, [r7, #4]
 801777a:	4618      	mov	r0, r3
 801777c:	f000 fa08 	bl	8017b90 <ip4_addr_isbroadcast_u32>
 8017780:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017782:	2b00      	cmp	r3, #0
 8017784:	d001      	beq.n	801778a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017786:	2301      	movs	r3, #1
 8017788:	e000      	b.n	801778c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801778a:	2300      	movs	r3, #0
}
 801778c:	4618      	mov	r0, r3
 801778e:	3708      	adds	r7, #8
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}
 8017794:	2000d93c 	.word	0x2000d93c

08017798 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017798:	b580      	push	{r7, lr}
 801779a:	b086      	sub	sp, #24
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
 80177a0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	685b      	ldr	r3, [r3, #4]
 80177a6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80177a8:	697b      	ldr	r3, [r7, #20]
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	091b      	lsrs	r3, r3, #4
 80177ae:	b2db      	uxtb	r3, r3
 80177b0:	2b04      	cmp	r3, #4
 80177b2:	d004      	beq.n	80177be <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f7f7 fd65 	bl	800f284 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80177ba:	2300      	movs	r3, #0
 80177bc:	e107      	b.n	80179ce <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80177be:	697b      	ldr	r3, [r7, #20]
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	f003 030f 	and.w	r3, r3, #15
 80177c6:	b2db      	uxtb	r3, r3
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80177ce:	697b      	ldr	r3, [r7, #20]
 80177d0:	885b      	ldrh	r3, [r3, #2]
 80177d2:	b29b      	uxth	r3, r3
 80177d4:	4618      	mov	r0, r3
 80177d6:	f7f6 f9a9 	bl	800db2c <lwip_htons>
 80177da:	4603      	mov	r3, r0
 80177dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	891b      	ldrh	r3, [r3, #8]
 80177e2:	89ba      	ldrh	r2, [r7, #12]
 80177e4:	429a      	cmp	r2, r3
 80177e6:	d204      	bcs.n	80177f2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80177e8:	89bb      	ldrh	r3, [r7, #12]
 80177ea:	4619      	mov	r1, r3
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f7f7 fbc3 	bl	800ef78 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	895b      	ldrh	r3, [r3, #10]
 80177f6:	89fa      	ldrh	r2, [r7, #14]
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d807      	bhi.n	801780c <ip4_input+0x74>
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	891b      	ldrh	r3, [r3, #8]
 8017800:	89ba      	ldrh	r2, [r7, #12]
 8017802:	429a      	cmp	r2, r3
 8017804:	d802      	bhi.n	801780c <ip4_input+0x74>
 8017806:	89fb      	ldrh	r3, [r7, #14]
 8017808:	2b13      	cmp	r3, #19
 801780a:	d804      	bhi.n	8017816 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801780c:	6878      	ldr	r0, [r7, #4]
 801780e:	f7f7 fd39 	bl	800f284 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017812:	2300      	movs	r3, #0
 8017814:	e0db      	b.n	80179ce <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017816:	697b      	ldr	r3, [r7, #20]
 8017818:	691b      	ldr	r3, [r3, #16]
 801781a:	4a6f      	ldr	r2, [pc, #444]	; (80179d8 <ip4_input+0x240>)
 801781c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801781e:	697b      	ldr	r3, [r7, #20]
 8017820:	68db      	ldr	r3, [r3, #12]
 8017822:	4a6d      	ldr	r2, [pc, #436]	; (80179d8 <ip4_input+0x240>)
 8017824:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017826:	4b6c      	ldr	r3, [pc, #432]	; (80179d8 <ip4_input+0x240>)
 8017828:	695b      	ldr	r3, [r3, #20]
 801782a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801782e:	2be0      	cmp	r3, #224	; 0xe0
 8017830:	d112      	bne.n	8017858 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017832:	683b      	ldr	r3, [r7, #0]
 8017834:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017838:	f003 0301 	and.w	r3, r3, #1
 801783c:	b2db      	uxtb	r3, r3
 801783e:	2b00      	cmp	r3, #0
 8017840:	d007      	beq.n	8017852 <ip4_input+0xba>
 8017842:	683b      	ldr	r3, [r7, #0]
 8017844:	3304      	adds	r3, #4
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d002      	beq.n	8017852 <ip4_input+0xba>
      netif = inp;
 801784c:	683b      	ldr	r3, [r7, #0]
 801784e:	613b      	str	r3, [r7, #16]
 8017850:	e02a      	b.n	80178a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8017852:	2300      	movs	r3, #0
 8017854:	613b      	str	r3, [r7, #16]
 8017856:	e027      	b.n	80178a8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017858:	6838      	ldr	r0, [r7, #0]
 801785a:	f7ff ff73 	bl	8017744 <ip4_input_accept>
 801785e:	4603      	mov	r3, r0
 8017860:	2b00      	cmp	r3, #0
 8017862:	d002      	beq.n	801786a <ip4_input+0xd2>
      netif = inp;
 8017864:	683b      	ldr	r3, [r7, #0]
 8017866:	613b      	str	r3, [r7, #16]
 8017868:	e01e      	b.n	80178a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801786a:	2300      	movs	r3, #0
 801786c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801786e:	4b5a      	ldr	r3, [pc, #360]	; (80179d8 <ip4_input+0x240>)
 8017870:	695b      	ldr	r3, [r3, #20]
 8017872:	b2db      	uxtb	r3, r3
 8017874:	2b7f      	cmp	r3, #127	; 0x7f
 8017876:	d017      	beq.n	80178a8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017878:	4b58      	ldr	r3, [pc, #352]	; (80179dc <ip4_input+0x244>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	613b      	str	r3, [r7, #16]
 801787e:	e00e      	b.n	801789e <ip4_input+0x106>
          if (netif == inp) {
 8017880:	693a      	ldr	r2, [r7, #16]
 8017882:	683b      	ldr	r3, [r7, #0]
 8017884:	429a      	cmp	r2, r3
 8017886:	d006      	beq.n	8017896 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017888:	6938      	ldr	r0, [r7, #16]
 801788a:	f7ff ff5b 	bl	8017744 <ip4_input_accept>
 801788e:	4603      	mov	r3, r0
 8017890:	2b00      	cmp	r3, #0
 8017892:	d108      	bne.n	80178a6 <ip4_input+0x10e>
 8017894:	e000      	b.n	8017898 <ip4_input+0x100>
            continue;
 8017896:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017898:	693b      	ldr	r3, [r7, #16]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	613b      	str	r3, [r7, #16]
 801789e:	693b      	ldr	r3, [r7, #16]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d1ed      	bne.n	8017880 <ip4_input+0xe8>
 80178a4:	e000      	b.n	80178a8 <ip4_input+0x110>
            break;
 80178a6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80178a8:	4b4b      	ldr	r3, [pc, #300]	; (80179d8 <ip4_input+0x240>)
 80178aa:	691b      	ldr	r3, [r3, #16]
 80178ac:	6839      	ldr	r1, [r7, #0]
 80178ae:	4618      	mov	r0, r3
 80178b0:	f000 f96e 	bl	8017b90 <ip4_addr_isbroadcast_u32>
 80178b4:	4603      	mov	r3, r0
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d105      	bne.n	80178c6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80178ba:	4b47      	ldr	r3, [pc, #284]	; (80179d8 <ip4_input+0x240>)
 80178bc:	691b      	ldr	r3, [r3, #16]
 80178be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80178c2:	2be0      	cmp	r3, #224	; 0xe0
 80178c4:	d104      	bne.n	80178d0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80178c6:	6878      	ldr	r0, [r7, #4]
 80178c8:	f7f7 fcdc 	bl	800f284 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80178cc:	2300      	movs	r3, #0
 80178ce:	e07e      	b.n	80179ce <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80178d0:	693b      	ldr	r3, [r7, #16]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d104      	bne.n	80178e0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80178d6:	6878      	ldr	r0, [r7, #4]
 80178d8:	f7f7 fcd4 	bl	800f284 <pbuf_free>
    return ERR_OK;
 80178dc:	2300      	movs	r3, #0
 80178de:	e076      	b.n	80179ce <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80178e0:	697b      	ldr	r3, [r7, #20]
 80178e2:	88db      	ldrh	r3, [r3, #6]
 80178e4:	b29b      	uxth	r3, r3
 80178e6:	461a      	mov	r2, r3
 80178e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80178ec:	4013      	ands	r3, r2
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d00b      	beq.n	801790a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f000 fc92 	bl	801821c <ip4_reass>
 80178f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d101      	bne.n	8017904 <ip4_input+0x16c>
      return ERR_OK;
 8017900:	2300      	movs	r3, #0
 8017902:	e064      	b.n	80179ce <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	685b      	ldr	r3, [r3, #4]
 8017908:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801790a:	4a33      	ldr	r2, [pc, #204]	; (80179d8 <ip4_input+0x240>)
 801790c:	693b      	ldr	r3, [r7, #16]
 801790e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017910:	4a31      	ldr	r2, [pc, #196]	; (80179d8 <ip4_input+0x240>)
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017916:	4a30      	ldr	r2, [pc, #192]	; (80179d8 <ip4_input+0x240>)
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801791c:	697b      	ldr	r3, [r7, #20]
 801791e:	781b      	ldrb	r3, [r3, #0]
 8017920:	f003 030f 	and.w	r3, r3, #15
 8017924:	b2db      	uxtb	r3, r3
 8017926:	009b      	lsls	r3, r3, #2
 8017928:	b2db      	uxtb	r3, r3
 801792a:	b29a      	uxth	r2, r3
 801792c:	4b2a      	ldr	r3, [pc, #168]	; (80179d8 <ip4_input+0x240>)
 801792e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017930:	89fb      	ldrh	r3, [r7, #14]
 8017932:	4619      	mov	r1, r3
 8017934:	6878      	ldr	r0, [r7, #4]
 8017936:	f7f7 fc1f 	bl	800f178 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801793a:	697b      	ldr	r3, [r7, #20]
 801793c:	7a5b      	ldrb	r3, [r3, #9]
 801793e:	2b11      	cmp	r3, #17
 8017940:	d006      	beq.n	8017950 <ip4_input+0x1b8>
 8017942:	2b11      	cmp	r3, #17
 8017944:	dc13      	bgt.n	801796e <ip4_input+0x1d6>
 8017946:	2b01      	cmp	r3, #1
 8017948:	d00c      	beq.n	8017964 <ip4_input+0x1cc>
 801794a:	2b06      	cmp	r3, #6
 801794c:	d005      	beq.n	801795a <ip4_input+0x1c2>
 801794e:	e00e      	b.n	801796e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017950:	6839      	ldr	r1, [r7, #0]
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	f7fe f9b2 	bl	8015cbc <udp_input>
        break;
 8017958:	e026      	b.n	80179a8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801795a:	6839      	ldr	r1, [r7, #0]
 801795c:	6878      	ldr	r0, [r7, #4]
 801795e:	f7f9 fd6f 	bl	8011440 <tcp_input>
        break;
 8017962:	e021      	b.n	80179a8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017964:	6839      	ldr	r1, [r7, #0]
 8017966:	6878      	ldr	r0, [r7, #4]
 8017968:	f7ff fcee 	bl	8017348 <icmp_input>
        break;
 801796c:	e01c      	b.n	80179a8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801796e:	4b1a      	ldr	r3, [pc, #104]	; (80179d8 <ip4_input+0x240>)
 8017970:	695b      	ldr	r3, [r3, #20]
 8017972:	6939      	ldr	r1, [r7, #16]
 8017974:	4618      	mov	r0, r3
 8017976:	f000 f90b 	bl	8017b90 <ip4_addr_isbroadcast_u32>
 801797a:	4603      	mov	r3, r0
 801797c:	2b00      	cmp	r3, #0
 801797e:	d10f      	bne.n	80179a0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017980:	4b15      	ldr	r3, [pc, #84]	; (80179d8 <ip4_input+0x240>)
 8017982:	695b      	ldr	r3, [r3, #20]
 8017984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017988:	2be0      	cmp	r3, #224	; 0xe0
 801798a:	d009      	beq.n	80179a0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801798c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017990:	4619      	mov	r1, r3
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	f7f7 fc63 	bl	800f25e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017998:	2102      	movs	r1, #2
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	f7ff fdd8 	bl	8017550 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80179a0:	6878      	ldr	r0, [r7, #4]
 80179a2:	f7f7 fc6f 	bl	800f284 <pbuf_free>
        break;
 80179a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80179a8:	4b0b      	ldr	r3, [pc, #44]	; (80179d8 <ip4_input+0x240>)
 80179aa:	2200      	movs	r2, #0
 80179ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80179ae:	4b0a      	ldr	r3, [pc, #40]	; (80179d8 <ip4_input+0x240>)
 80179b0:	2200      	movs	r2, #0
 80179b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80179b4:	4b08      	ldr	r3, [pc, #32]	; (80179d8 <ip4_input+0x240>)
 80179b6:	2200      	movs	r2, #0
 80179b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80179ba:	4b07      	ldr	r3, [pc, #28]	; (80179d8 <ip4_input+0x240>)
 80179bc:	2200      	movs	r2, #0
 80179be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80179c0:	4b05      	ldr	r3, [pc, #20]	; (80179d8 <ip4_input+0x240>)
 80179c2:	2200      	movs	r2, #0
 80179c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80179c6:	4b04      	ldr	r3, [pc, #16]	; (80179d8 <ip4_input+0x240>)
 80179c8:	2200      	movs	r2, #0
 80179ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80179cc:	2300      	movs	r3, #0
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	3718      	adds	r7, #24
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}
 80179d6:	bf00      	nop
 80179d8:	2000d93c 	.word	0x2000d93c
 80179dc:	20011040 	.word	0x20011040

080179e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80179e0:	b580      	push	{r7, lr}
 80179e2:	b08a      	sub	sp, #40	; 0x28
 80179e4:	af04      	add	r7, sp, #16
 80179e6:	60f8      	str	r0, [r7, #12]
 80179e8:	60b9      	str	r1, [r7, #8]
 80179ea:	607a      	str	r2, [r7, #4]
 80179ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d009      	beq.n	8017a0c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80179f8:	68bb      	ldr	r3, [r7, #8]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d003      	beq.n	8017a06 <ip4_output_if+0x26>
 80179fe:	68bb      	ldr	r3, [r7, #8]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d102      	bne.n	8017a0c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a08:	3304      	adds	r3, #4
 8017a0a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017a0c:	78fa      	ldrb	r2, [r7, #3]
 8017a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a10:	9302      	str	r3, [sp, #8]
 8017a12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017a16:	9301      	str	r3, [sp, #4]
 8017a18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017a1c:	9300      	str	r3, [sp, #0]
 8017a1e:	4613      	mov	r3, r2
 8017a20:	687a      	ldr	r2, [r7, #4]
 8017a22:	6979      	ldr	r1, [r7, #20]
 8017a24:	68f8      	ldr	r0, [r7, #12]
 8017a26:	f000 f805 	bl	8017a34 <ip4_output_if_src>
 8017a2a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	3718      	adds	r7, #24
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}

08017a34 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b088      	sub	sp, #32
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	60f8      	str	r0, [r7, #12]
 8017a3c:	60b9      	str	r1, [r7, #8]
 8017a3e:	607a      	str	r2, [r7, #4]
 8017a40:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	7b9b      	ldrb	r3, [r3, #14]
 8017a46:	2b01      	cmp	r3, #1
 8017a48:	d006      	beq.n	8017a58 <ip4_output_if_src+0x24>
 8017a4a:	4b4b      	ldr	r3, [pc, #300]	; (8017b78 <ip4_output_if_src+0x144>)
 8017a4c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017a50:	494a      	ldr	r1, [pc, #296]	; (8017b7c <ip4_output_if_src+0x148>)
 8017a52:	484b      	ldr	r0, [pc, #300]	; (8017b80 <ip4_output_if_src+0x14c>)
 8017a54:	f003 fc02 	bl	801b25c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d060      	beq.n	8017b20 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017a5e:	2314      	movs	r3, #20
 8017a60:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017a62:	2114      	movs	r1, #20
 8017a64:	68f8      	ldr	r0, [r7, #12]
 8017a66:	f7f7 fb77 	bl	800f158 <pbuf_add_header>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d002      	beq.n	8017a76 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017a70:	f06f 0301 	mvn.w	r3, #1
 8017a74:	e07c      	b.n	8017b70 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	685b      	ldr	r3, [r3, #4]
 8017a7a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	895b      	ldrh	r3, [r3, #10]
 8017a80:	2b13      	cmp	r3, #19
 8017a82:	d806      	bhi.n	8017a92 <ip4_output_if_src+0x5e>
 8017a84:	4b3c      	ldr	r3, [pc, #240]	; (8017b78 <ip4_output_if_src+0x144>)
 8017a86:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017a8a:	493e      	ldr	r1, [pc, #248]	; (8017b84 <ip4_output_if_src+0x150>)
 8017a8c:	483c      	ldr	r0, [pc, #240]	; (8017b80 <ip4_output_if_src+0x14c>)
 8017a8e:	f003 fbe5 	bl	801b25c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017a92:	69fb      	ldr	r3, [r7, #28]
 8017a94:	78fa      	ldrb	r2, [r7, #3]
 8017a96:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017a98:	69fb      	ldr	r3, [r7, #28]
 8017a9a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017a9e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	681a      	ldr	r2, [r3, #0]
 8017aa4:	69fb      	ldr	r3, [r7, #28]
 8017aa6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017aa8:	8b7b      	ldrh	r3, [r7, #26]
 8017aaa:	089b      	lsrs	r3, r3, #2
 8017aac:	b29b      	uxth	r3, r3
 8017aae:	b2db      	uxtb	r3, r3
 8017ab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ab4:	b2da      	uxtb	r2, r3
 8017ab6:	69fb      	ldr	r3, [r7, #28]
 8017ab8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017aba:	69fb      	ldr	r3, [r7, #28]
 8017abc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017ac0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	891b      	ldrh	r3, [r3, #8]
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f7f6 f830 	bl	800db2c <lwip_htons>
 8017acc:	4603      	mov	r3, r0
 8017ace:	461a      	mov	r2, r3
 8017ad0:	69fb      	ldr	r3, [r7, #28]
 8017ad2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ad4:	69fb      	ldr	r3, [r7, #28]
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	719a      	strb	r2, [r3, #6]
 8017ada:	2200      	movs	r2, #0
 8017adc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017ade:	4b2a      	ldr	r3, [pc, #168]	; (8017b88 <ip4_output_if_src+0x154>)
 8017ae0:	881b      	ldrh	r3, [r3, #0]
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f7f6 f822 	bl	800db2c <lwip_htons>
 8017ae8:	4603      	mov	r3, r0
 8017aea:	461a      	mov	r2, r3
 8017aec:	69fb      	ldr	r3, [r7, #28]
 8017aee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017af0:	4b25      	ldr	r3, [pc, #148]	; (8017b88 <ip4_output_if_src+0x154>)
 8017af2:	881b      	ldrh	r3, [r3, #0]
 8017af4:	3301      	adds	r3, #1
 8017af6:	b29a      	uxth	r2, r3
 8017af8:	4b23      	ldr	r3, [pc, #140]	; (8017b88 <ip4_output_if_src+0x154>)
 8017afa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017afc:	68bb      	ldr	r3, [r7, #8]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d104      	bne.n	8017b0c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017b02:	4b22      	ldr	r3, [pc, #136]	; (8017b8c <ip4_output_if_src+0x158>)
 8017b04:	681a      	ldr	r2, [r3, #0]
 8017b06:	69fb      	ldr	r3, [r7, #28]
 8017b08:	60da      	str	r2, [r3, #12]
 8017b0a:	e003      	b.n	8017b14 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017b0c:	68bb      	ldr	r3, [r7, #8]
 8017b0e:	681a      	ldr	r2, [r3, #0]
 8017b10:	69fb      	ldr	r3, [r7, #28]
 8017b12:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017b14:	69fb      	ldr	r3, [r7, #28]
 8017b16:	2200      	movs	r2, #0
 8017b18:	729a      	strb	r2, [r3, #10]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	72da      	strb	r2, [r3, #11]
 8017b1e:	e00f      	b.n	8017b40 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	895b      	ldrh	r3, [r3, #10]
 8017b24:	2b13      	cmp	r3, #19
 8017b26:	d802      	bhi.n	8017b2e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017b28:	f06f 0301 	mvn.w	r3, #1
 8017b2c:	e020      	b.n	8017b70 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	685b      	ldr	r3, [r3, #4]
 8017b32:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	691b      	ldr	r3, [r3, #16]
 8017b38:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017b3a:	f107 0314 	add.w	r3, r7, #20
 8017b3e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d00c      	beq.n	8017b62 <ip4_output_if_src+0x12e>
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	891a      	ldrh	r2, [r3, #8]
 8017b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017b50:	429a      	cmp	r2, r3
 8017b52:	d906      	bls.n	8017b62 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017b54:	687a      	ldr	r2, [r7, #4]
 8017b56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017b58:	68f8      	ldr	r0, [r7, #12]
 8017b5a:	f000 fd4d 	bl	80185f8 <ip4_frag>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	e006      	b.n	8017b70 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b64:	695b      	ldr	r3, [r3, #20]
 8017b66:	687a      	ldr	r2, [r7, #4]
 8017b68:	68f9      	ldr	r1, [r7, #12]
 8017b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b6c:	4798      	blx	r3
 8017b6e:	4603      	mov	r3, r0
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	3720      	adds	r7, #32
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	0801f758 	.word	0x0801f758
 8017b7c:	0801f78c 	.word	0x0801f78c
 8017b80:	0801f798 	.word	0x0801f798
 8017b84:	0801f7c0 	.word	0x0801f7c0
 8017b88:	20004c9e 	.word	0x20004c9e
 8017b8c:	0801fdf4 	.word	0x0801fdf4

08017b90 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017b90:	b480      	push	{r7}
 8017b92:	b085      	sub	sp, #20
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
 8017b98:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ba4:	d002      	beq.n	8017bac <ip4_addr_isbroadcast_u32+0x1c>
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d101      	bne.n	8017bb0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017bac:	2301      	movs	r3, #1
 8017bae:	e02a      	b.n	8017c06 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bb6:	f003 0302 	and.w	r3, r3, #2
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d101      	bne.n	8017bc2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	e021      	b.n	8017c06 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017bc2:	683b      	ldr	r3, [r7, #0]
 8017bc4:	3304      	adds	r3, #4
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	687a      	ldr	r2, [r7, #4]
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d101      	bne.n	8017bd2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017bce:	2300      	movs	r3, #0
 8017bd0:	e019      	b.n	8017c06 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017bd2:	68fa      	ldr	r2, [r7, #12]
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	3304      	adds	r3, #4
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	405a      	eors	r2, r3
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	3308      	adds	r3, #8
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	4013      	ands	r3, r2
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d10d      	bne.n	8017c04 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017be8:	683b      	ldr	r3, [r7, #0]
 8017bea:	3308      	adds	r3, #8
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	43da      	mvns	r2, r3
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017bf4:	683b      	ldr	r3, [r7, #0]
 8017bf6:	3308      	adds	r3, #8
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017bfc:	429a      	cmp	r2, r3
 8017bfe:	d101      	bne.n	8017c04 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017c00:	2301      	movs	r3, #1
 8017c02:	e000      	b.n	8017c06 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017c04:	2300      	movs	r3, #0
  }
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	3714      	adds	r7, #20
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c10:	4770      	bx	lr
	...

08017c14 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b084      	sub	sp, #16
 8017c18:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017c1e:	4b12      	ldr	r3, [pc, #72]	; (8017c68 <ip_reass_tmr+0x54>)
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017c24:	e018      	b.n	8017c58 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	7fdb      	ldrb	r3, [r3, #31]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d00b      	beq.n	8017c46 <ip_reass_tmr+0x32>
      r->timer--;
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	7fdb      	ldrb	r3, [r3, #31]
 8017c32:	3b01      	subs	r3, #1
 8017c34:	b2da      	uxtb	r2, r3
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	60fb      	str	r3, [r7, #12]
 8017c44:	e008      	b.n	8017c58 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017c50:	68b9      	ldr	r1, [r7, #8]
 8017c52:	6878      	ldr	r0, [r7, #4]
 8017c54:	f000 f80a 	bl	8017c6c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d1e3      	bne.n	8017c26 <ip_reass_tmr+0x12>
    }
  }
}
 8017c5e:	bf00      	nop
 8017c60:	bf00      	nop
 8017c62:	3710      	adds	r7, #16
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}
 8017c68:	20004ca0 	.word	0x20004ca0

08017c6c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b088      	sub	sp, #32
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
 8017c74:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017c76:	2300      	movs	r3, #0
 8017c78:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017c7a:	683a      	ldr	r2, [r7, #0]
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d105      	bne.n	8017c8e <ip_reass_free_complete_datagram+0x22>
 8017c82:	4b45      	ldr	r3, [pc, #276]	; (8017d98 <ip_reass_free_complete_datagram+0x12c>)
 8017c84:	22ab      	movs	r2, #171	; 0xab
 8017c86:	4945      	ldr	r1, [pc, #276]	; (8017d9c <ip_reass_free_complete_datagram+0x130>)
 8017c88:	4845      	ldr	r0, [pc, #276]	; (8017da0 <ip_reass_free_complete_datagram+0x134>)
 8017c8a:	f003 fae7 	bl	801b25c <iprintf>
  if (prev != NULL) {
 8017c8e:	683b      	ldr	r3, [r7, #0]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d00a      	beq.n	8017caa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	687a      	ldr	r2, [r7, #4]
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	d005      	beq.n	8017caa <ip_reass_free_complete_datagram+0x3e>
 8017c9e:	4b3e      	ldr	r3, [pc, #248]	; (8017d98 <ip_reass_free_complete_datagram+0x12c>)
 8017ca0:	22ad      	movs	r2, #173	; 0xad
 8017ca2:	4940      	ldr	r1, [pc, #256]	; (8017da4 <ip_reass_free_complete_datagram+0x138>)
 8017ca4:	483e      	ldr	r0, [pc, #248]	; (8017da0 <ip_reass_free_complete_datagram+0x134>)
 8017ca6:	f003 fad9 	bl	801b25c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017cb2:	697b      	ldr	r3, [r7, #20]
 8017cb4:	889b      	ldrh	r3, [r3, #4]
 8017cb6:	b29b      	uxth	r3, r3
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d12a      	bne.n	8017d12 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	685b      	ldr	r3, [r3, #4]
 8017cc0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017cc2:	697b      	ldr	r3, [r7, #20]
 8017cc4:	681a      	ldr	r2, [r3, #0]
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017cca:	69bb      	ldr	r3, [r7, #24]
 8017ccc:	6858      	ldr	r0, [r3, #4]
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	3308      	adds	r3, #8
 8017cd2:	2214      	movs	r2, #20
 8017cd4:	4619      	mov	r1, r3
 8017cd6:	f003 fa01 	bl	801b0dc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017cda:	2101      	movs	r1, #1
 8017cdc:	69b8      	ldr	r0, [r7, #24]
 8017cde:	f7ff fc47 	bl	8017570 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017ce2:	69b8      	ldr	r0, [r7, #24]
 8017ce4:	f7f7 fb5c 	bl	800f3a0 <pbuf_clen>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017cec:	8bfa      	ldrh	r2, [r7, #30]
 8017cee:	8a7b      	ldrh	r3, [r7, #18]
 8017cf0:	4413      	add	r3, r2
 8017cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017cf6:	db05      	blt.n	8017d04 <ip_reass_free_complete_datagram+0x98>
 8017cf8:	4b27      	ldr	r3, [pc, #156]	; (8017d98 <ip_reass_free_complete_datagram+0x12c>)
 8017cfa:	22bc      	movs	r2, #188	; 0xbc
 8017cfc:	492a      	ldr	r1, [pc, #168]	; (8017da8 <ip_reass_free_complete_datagram+0x13c>)
 8017cfe:	4828      	ldr	r0, [pc, #160]	; (8017da0 <ip_reass_free_complete_datagram+0x134>)
 8017d00:	f003 faac 	bl	801b25c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017d04:	8bfa      	ldrh	r2, [r7, #30]
 8017d06:	8a7b      	ldrh	r3, [r7, #18]
 8017d08:	4413      	add	r3, r2
 8017d0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017d0c:	69b8      	ldr	r0, [r7, #24]
 8017d0e:	f7f7 fab9 	bl	800f284 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	685b      	ldr	r3, [r3, #4]
 8017d16:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017d18:	e01f      	b.n	8017d5a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017d1a:	69bb      	ldr	r3, [r7, #24]
 8017d1c:	685b      	ldr	r3, [r3, #4]
 8017d1e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017d20:	69bb      	ldr	r3, [r7, #24]
 8017d22:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017d24:	697b      	ldr	r3, [r7, #20]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017d2a:	68f8      	ldr	r0, [r7, #12]
 8017d2c:	f7f7 fb38 	bl	800f3a0 <pbuf_clen>
 8017d30:	4603      	mov	r3, r0
 8017d32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017d34:	8bfa      	ldrh	r2, [r7, #30]
 8017d36:	8a7b      	ldrh	r3, [r7, #18]
 8017d38:	4413      	add	r3, r2
 8017d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d3e:	db05      	blt.n	8017d4c <ip_reass_free_complete_datagram+0xe0>
 8017d40:	4b15      	ldr	r3, [pc, #84]	; (8017d98 <ip_reass_free_complete_datagram+0x12c>)
 8017d42:	22cc      	movs	r2, #204	; 0xcc
 8017d44:	4918      	ldr	r1, [pc, #96]	; (8017da8 <ip_reass_free_complete_datagram+0x13c>)
 8017d46:	4816      	ldr	r0, [pc, #88]	; (8017da0 <ip_reass_free_complete_datagram+0x134>)
 8017d48:	f003 fa88 	bl	801b25c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017d4c:	8bfa      	ldrh	r2, [r7, #30]
 8017d4e:	8a7b      	ldrh	r3, [r7, #18]
 8017d50:	4413      	add	r3, r2
 8017d52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017d54:	68f8      	ldr	r0, [r7, #12]
 8017d56:	f7f7 fa95 	bl	800f284 <pbuf_free>
  while (p != NULL) {
 8017d5a:	69bb      	ldr	r3, [r7, #24]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d1dc      	bne.n	8017d1a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017d60:	6839      	ldr	r1, [r7, #0]
 8017d62:	6878      	ldr	r0, [r7, #4]
 8017d64:	f000 f8c2 	bl	8017eec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017d68:	4b10      	ldr	r3, [pc, #64]	; (8017dac <ip_reass_free_complete_datagram+0x140>)
 8017d6a:	881b      	ldrh	r3, [r3, #0]
 8017d6c:	8bfa      	ldrh	r2, [r7, #30]
 8017d6e:	429a      	cmp	r2, r3
 8017d70:	d905      	bls.n	8017d7e <ip_reass_free_complete_datagram+0x112>
 8017d72:	4b09      	ldr	r3, [pc, #36]	; (8017d98 <ip_reass_free_complete_datagram+0x12c>)
 8017d74:	22d2      	movs	r2, #210	; 0xd2
 8017d76:	490e      	ldr	r1, [pc, #56]	; (8017db0 <ip_reass_free_complete_datagram+0x144>)
 8017d78:	4809      	ldr	r0, [pc, #36]	; (8017da0 <ip_reass_free_complete_datagram+0x134>)
 8017d7a:	f003 fa6f 	bl	801b25c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017d7e:	4b0b      	ldr	r3, [pc, #44]	; (8017dac <ip_reass_free_complete_datagram+0x140>)
 8017d80:	881a      	ldrh	r2, [r3, #0]
 8017d82:	8bfb      	ldrh	r3, [r7, #30]
 8017d84:	1ad3      	subs	r3, r2, r3
 8017d86:	b29a      	uxth	r2, r3
 8017d88:	4b08      	ldr	r3, [pc, #32]	; (8017dac <ip_reass_free_complete_datagram+0x140>)
 8017d8a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017d8c:	8bfb      	ldrh	r3, [r7, #30]
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3720      	adds	r7, #32
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}
 8017d96:	bf00      	nop
 8017d98:	0801f7f0 	.word	0x0801f7f0
 8017d9c:	0801f82c 	.word	0x0801f82c
 8017da0:	0801f838 	.word	0x0801f838
 8017da4:	0801f860 	.word	0x0801f860
 8017da8:	0801f874 	.word	0x0801f874
 8017dac:	20004ca4 	.word	0x20004ca4
 8017db0:	0801f894 	.word	0x0801f894

08017db4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b08a      	sub	sp, #40	; 0x28
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
 8017dbc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017dbe:	2300      	movs	r3, #0
 8017dc0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017dca:	2300      	movs	r3, #0
 8017dcc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017dce:	2300      	movs	r3, #0
 8017dd0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017dd2:	4b28      	ldr	r3, [pc, #160]	; (8017e74 <ip_reass_remove_oldest_datagram+0xc0>)
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017dd8:	e030      	b.n	8017e3c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ddc:	695a      	ldr	r2, [r3, #20]
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	68db      	ldr	r3, [r3, #12]
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d10c      	bne.n	8017e00 <ip_reass_remove_oldest_datagram+0x4c>
 8017de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017de8:	699a      	ldr	r2, [r3, #24]
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	691b      	ldr	r3, [r3, #16]
 8017dee:	429a      	cmp	r2, r3
 8017df0:	d106      	bne.n	8017e00 <ip_reass_remove_oldest_datagram+0x4c>
 8017df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017df4:	899a      	ldrh	r2, [r3, #12]
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	889b      	ldrh	r3, [r3, #4]
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	429a      	cmp	r2, r3
 8017dfe:	d014      	beq.n	8017e2a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017e00:	693b      	ldr	r3, [r7, #16]
 8017e02:	3301      	adds	r3, #1
 8017e04:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017e06:	6a3b      	ldr	r3, [r7, #32]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d104      	bne.n	8017e16 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e0e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017e10:	69fb      	ldr	r3, [r7, #28]
 8017e12:	61bb      	str	r3, [r7, #24]
 8017e14:	e009      	b.n	8017e2a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e18:	7fda      	ldrb	r2, [r3, #31]
 8017e1a:	6a3b      	ldr	r3, [r7, #32]
 8017e1c:	7fdb      	ldrb	r3, [r3, #31]
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	d803      	bhi.n	8017e2a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e24:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017e26:	69fb      	ldr	r3, [r7, #28]
 8017e28:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d001      	beq.n	8017e36 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e34:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e3e:	2b00      	cmp	r3, #0
 8017e40:	d1cb      	bne.n	8017dda <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017e42:	6a3b      	ldr	r3, [r7, #32]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d008      	beq.n	8017e5a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017e48:	69b9      	ldr	r1, [r7, #24]
 8017e4a:	6a38      	ldr	r0, [r7, #32]
 8017e4c:	f7ff ff0e 	bl	8017c6c <ip_reass_free_complete_datagram>
 8017e50:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017e52:	697a      	ldr	r2, [r7, #20]
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	4413      	add	r3, r2
 8017e58:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017e5a:	697a      	ldr	r2, [r7, #20]
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	429a      	cmp	r2, r3
 8017e60:	da02      	bge.n	8017e68 <ip_reass_remove_oldest_datagram+0xb4>
 8017e62:	693b      	ldr	r3, [r7, #16]
 8017e64:	2b01      	cmp	r3, #1
 8017e66:	dcac      	bgt.n	8017dc2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017e68:	697b      	ldr	r3, [r7, #20]
}
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	3728      	adds	r7, #40	; 0x28
 8017e6e:	46bd      	mov	sp, r7
 8017e70:	bd80      	pop	{r7, pc}
 8017e72:	bf00      	nop
 8017e74:	20004ca0 	.word	0x20004ca0

08017e78 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b084      	sub	sp, #16
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
 8017e80:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017e82:	2004      	movs	r0, #4
 8017e84:	f7f6 fb08 	bl	800e498 <memp_malloc>
 8017e88:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d110      	bne.n	8017eb2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017e90:	6839      	ldr	r1, [r7, #0]
 8017e92:	6878      	ldr	r0, [r7, #4]
 8017e94:	f7ff ff8e 	bl	8017db4 <ip_reass_remove_oldest_datagram>
 8017e98:	4602      	mov	r2, r0
 8017e9a:	683b      	ldr	r3, [r7, #0]
 8017e9c:	4293      	cmp	r3, r2
 8017e9e:	dc03      	bgt.n	8017ea8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017ea0:	2004      	movs	r0, #4
 8017ea2:	f7f6 faf9 	bl	800e498 <memp_malloc>
 8017ea6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d101      	bne.n	8017eb2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017eae:	2300      	movs	r3, #0
 8017eb0:	e016      	b.n	8017ee0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017eb2:	2220      	movs	r2, #32
 8017eb4:	2100      	movs	r1, #0
 8017eb6:	68f8      	ldr	r0, [r7, #12]
 8017eb8:	f003 f91e 	bl	801b0f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	220f      	movs	r2, #15
 8017ec0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017ec2:	4b09      	ldr	r3, [pc, #36]	; (8017ee8 <ip_reass_enqueue_new_datagram+0x70>)
 8017ec4:	681a      	ldr	r2, [r3, #0]
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017eca:	4a07      	ldr	r2, [pc, #28]	; (8017ee8 <ip_reass_enqueue_new_datagram+0x70>)
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	3308      	adds	r3, #8
 8017ed4:	2214      	movs	r2, #20
 8017ed6:	6879      	ldr	r1, [r7, #4]
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f003 f8ff 	bl	801b0dc <memcpy>
  return ipr;
 8017ede:	68fb      	ldr	r3, [r7, #12]
}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3710      	adds	r7, #16
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}
 8017ee8:	20004ca0 	.word	0x20004ca0

08017eec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b082      	sub	sp, #8
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
 8017ef4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017ef6:	4b10      	ldr	r3, [pc, #64]	; (8017f38 <ip_reass_dequeue_datagram+0x4c>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	687a      	ldr	r2, [r7, #4]
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d104      	bne.n	8017f0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	4a0c      	ldr	r2, [pc, #48]	; (8017f38 <ip_reass_dequeue_datagram+0x4c>)
 8017f06:	6013      	str	r3, [r2, #0]
 8017f08:	e00d      	b.n	8017f26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017f0a:	683b      	ldr	r3, [r7, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d106      	bne.n	8017f1e <ip_reass_dequeue_datagram+0x32>
 8017f10:	4b0a      	ldr	r3, [pc, #40]	; (8017f3c <ip_reass_dequeue_datagram+0x50>)
 8017f12:	f240 1245 	movw	r2, #325	; 0x145
 8017f16:	490a      	ldr	r1, [pc, #40]	; (8017f40 <ip_reass_dequeue_datagram+0x54>)
 8017f18:	480a      	ldr	r0, [pc, #40]	; (8017f44 <ip_reass_dequeue_datagram+0x58>)
 8017f1a:	f003 f99f 	bl	801b25c <iprintf>
    prev->next = ipr->next;
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	681a      	ldr	r2, [r3, #0]
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017f26:	6879      	ldr	r1, [r7, #4]
 8017f28:	2004      	movs	r0, #4
 8017f2a:	f7f6 fb07 	bl	800e53c <memp_free>
}
 8017f2e:	bf00      	nop
 8017f30:	3708      	adds	r7, #8
 8017f32:	46bd      	mov	sp, r7
 8017f34:	bd80      	pop	{r7, pc}
 8017f36:	bf00      	nop
 8017f38:	20004ca0 	.word	0x20004ca0
 8017f3c:	0801f7f0 	.word	0x0801f7f0
 8017f40:	0801f8b8 	.word	0x0801f8b8
 8017f44:	0801f838 	.word	0x0801f838

08017f48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b08c      	sub	sp, #48	; 0x30
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	60f8      	str	r0, [r7, #12]
 8017f50:	60b9      	str	r1, [r7, #8]
 8017f52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017f54:	2300      	movs	r3, #0
 8017f56:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017f58:	2301      	movs	r3, #1
 8017f5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017f5c:	68bb      	ldr	r3, [r7, #8]
 8017f5e:	685b      	ldr	r3, [r3, #4]
 8017f60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017f62:	69fb      	ldr	r3, [r7, #28]
 8017f64:	885b      	ldrh	r3, [r3, #2]
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f7f5 fddf 	bl	800db2c <lwip_htons>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017f72:	69fb      	ldr	r3, [r7, #28]
 8017f74:	781b      	ldrb	r3, [r3, #0]
 8017f76:	f003 030f 	and.w	r3, r3, #15
 8017f7a:	b2db      	uxtb	r3, r3
 8017f7c:	009b      	lsls	r3, r3, #2
 8017f7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017f80:	7e7b      	ldrb	r3, [r7, #25]
 8017f82:	b29b      	uxth	r3, r3
 8017f84:	8b7a      	ldrh	r2, [r7, #26]
 8017f86:	429a      	cmp	r2, r3
 8017f88:	d202      	bcs.n	8017f90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8017f8e:	e135      	b.n	80181fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017f90:	7e7b      	ldrb	r3, [r7, #25]
 8017f92:	b29b      	uxth	r3, r3
 8017f94:	8b7a      	ldrh	r2, [r7, #26]
 8017f96:	1ad3      	subs	r3, r2, r3
 8017f98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017f9a:	69fb      	ldr	r3, [r7, #28]
 8017f9c:	88db      	ldrh	r3, [r3, #6]
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	4618      	mov	r0, r3
 8017fa2:	f7f5 fdc3 	bl	800db2c <lwip_htons>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017fac:	b29b      	uxth	r3, r3
 8017fae:	00db      	lsls	r3, r3, #3
 8017fb0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017fb2:	68bb      	ldr	r3, [r7, #8]
 8017fb4:	685b      	ldr	r3, [r3, #4]
 8017fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fba:	2200      	movs	r2, #0
 8017fbc:	701a      	strb	r2, [r3, #0]
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	705a      	strb	r2, [r3, #1]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	709a      	strb	r2, [r3, #2]
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fcc:	8afa      	ldrh	r2, [r7, #22]
 8017fce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017fd0:	8afa      	ldrh	r2, [r7, #22]
 8017fd2:	8b7b      	ldrh	r3, [r7, #26]
 8017fd4:	4413      	add	r3, r2
 8017fd6:	b29a      	uxth	r2, r3
 8017fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fda:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fde:	88db      	ldrh	r3, [r3, #6]
 8017fe0:	b29b      	uxth	r3, r3
 8017fe2:	8afa      	ldrh	r2, [r7, #22]
 8017fe4:	429a      	cmp	r2, r3
 8017fe6:	d902      	bls.n	8017fee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8017fec:	e106      	b.n	80181fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	685b      	ldr	r3, [r3, #4]
 8017ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8017ff4:	e068      	b.n	80180c8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff8:	685b      	ldr	r3, [r3, #4]
 8017ffa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ffe:	889b      	ldrh	r3, [r3, #4]
 8018000:	b29a      	uxth	r2, r3
 8018002:	693b      	ldr	r3, [r7, #16]
 8018004:	889b      	ldrh	r3, [r3, #4]
 8018006:	b29b      	uxth	r3, r3
 8018008:	429a      	cmp	r2, r3
 801800a:	d235      	bcs.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801800e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018010:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018014:	2b00      	cmp	r3, #0
 8018016:	d020      	beq.n	801805a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801801a:	889b      	ldrh	r3, [r3, #4]
 801801c:	b29a      	uxth	r2, r3
 801801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018020:	88db      	ldrh	r3, [r3, #6]
 8018022:	b29b      	uxth	r3, r3
 8018024:	429a      	cmp	r2, r3
 8018026:	d307      	bcc.n	8018038 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802a:	88db      	ldrh	r3, [r3, #6]
 801802c:	b29a      	uxth	r2, r3
 801802e:	693b      	ldr	r3, [r7, #16]
 8018030:	889b      	ldrh	r3, [r3, #4]
 8018032:	b29b      	uxth	r3, r3
 8018034:	429a      	cmp	r2, r3
 8018036:	d902      	bls.n	801803e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018038:	f04f 33ff 	mov.w	r3, #4294967295
 801803c:	e0de      	b.n	80181fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018040:	68ba      	ldr	r2, [r7, #8]
 8018042:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018046:	88db      	ldrh	r3, [r3, #6]
 8018048:	b29a      	uxth	r2, r3
 801804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801804c:	889b      	ldrh	r3, [r3, #4]
 801804e:	b29b      	uxth	r3, r3
 8018050:	429a      	cmp	r2, r3
 8018052:	d03d      	beq.n	80180d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018054:	2300      	movs	r3, #0
 8018056:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018058:	e03a      	b.n	80180d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801805c:	88db      	ldrh	r3, [r3, #6]
 801805e:	b29a      	uxth	r2, r3
 8018060:	693b      	ldr	r3, [r7, #16]
 8018062:	889b      	ldrh	r3, [r3, #4]
 8018064:	b29b      	uxth	r3, r3
 8018066:	429a      	cmp	r2, r3
 8018068:	d902      	bls.n	8018070 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801806a:	f04f 33ff 	mov.w	r3, #4294967295
 801806e:	e0c5      	b.n	80181fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	68ba      	ldr	r2, [r7, #8]
 8018074:	605a      	str	r2, [r3, #4]
      break;
 8018076:	e02b      	b.n	80180d0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801807a:	889b      	ldrh	r3, [r3, #4]
 801807c:	b29a      	uxth	r2, r3
 801807e:	693b      	ldr	r3, [r7, #16]
 8018080:	889b      	ldrh	r3, [r3, #4]
 8018082:	b29b      	uxth	r3, r3
 8018084:	429a      	cmp	r2, r3
 8018086:	d102      	bne.n	801808e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018088:	f04f 33ff 	mov.w	r3, #4294967295
 801808c:	e0b6      	b.n	80181fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018090:	889b      	ldrh	r3, [r3, #4]
 8018092:	b29a      	uxth	r2, r3
 8018094:	693b      	ldr	r3, [r7, #16]
 8018096:	88db      	ldrh	r3, [r3, #6]
 8018098:	b29b      	uxth	r3, r3
 801809a:	429a      	cmp	r2, r3
 801809c:	d202      	bcs.n	80180a4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801809e:	f04f 33ff 	mov.w	r3, #4294967295
 80180a2:	e0ab      	b.n	80181fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80180a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d009      	beq.n	80180be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80180aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ac:	88db      	ldrh	r3, [r3, #6]
 80180ae:	b29a      	uxth	r2, r3
 80180b0:	693b      	ldr	r3, [r7, #16]
 80180b2:	889b      	ldrh	r3, [r3, #4]
 80180b4:	b29b      	uxth	r3, r3
 80180b6:	429a      	cmp	r2, r3
 80180b8:	d001      	beq.n	80180be <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80180ba:	2300      	movs	r3, #0
 80180bc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80180be:	693b      	ldr	r3, [r7, #16]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80180c4:	693b      	ldr	r3, [r7, #16]
 80180c6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80180c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d193      	bne.n	8017ff6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80180ce:	e000      	b.n	80180d2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80180d0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80180d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d12d      	bne.n	8018134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80180d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d01c      	beq.n	8018118 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80180de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e0:	88db      	ldrh	r3, [r3, #6]
 80180e2:	b29a      	uxth	r2, r3
 80180e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180e6:	889b      	ldrh	r3, [r3, #4]
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	429a      	cmp	r2, r3
 80180ec:	d906      	bls.n	80180fc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80180ee:	4b45      	ldr	r3, [pc, #276]	; (8018204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80180f0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80180f4:	4944      	ldr	r1, [pc, #272]	; (8018208 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80180f6:	4845      	ldr	r0, [pc, #276]	; (801820c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80180f8:	f003 f8b0 	bl	801b25c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80180fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180fe:	68ba      	ldr	r2, [r7, #8]
 8018100:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018104:	88db      	ldrh	r3, [r3, #6]
 8018106:	b29a      	uxth	r2, r3
 8018108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801810a:	889b      	ldrh	r3, [r3, #4]
 801810c:	b29b      	uxth	r3, r3
 801810e:	429a      	cmp	r2, r3
 8018110:	d010      	beq.n	8018134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018112:	2300      	movs	r3, #0
 8018114:	623b      	str	r3, [r7, #32]
 8018116:	e00d      	b.n	8018134 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	685b      	ldr	r3, [r3, #4]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d006      	beq.n	801812e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018120:	4b38      	ldr	r3, [pc, #224]	; (8018204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018122:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018126:	493a      	ldr	r1, [pc, #232]	; (8018210 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018128:	4838      	ldr	r0, [pc, #224]	; (801820c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801812a:	f003 f897 	bl	801b25c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	68ba      	ldr	r2, [r7, #8]
 8018132:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d105      	bne.n	8018146 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	7f9b      	ldrb	r3, [r3, #30]
 801813e:	f003 0301 	and.w	r3, r3, #1
 8018142:	2b00      	cmp	r3, #0
 8018144:	d059      	beq.n	80181fa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018146:	6a3b      	ldr	r3, [r7, #32]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d04f      	beq.n	80181ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	685b      	ldr	r3, [r3, #4]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d006      	beq.n	8018162 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	685b      	ldr	r3, [r3, #4]
 8018158:	685b      	ldr	r3, [r3, #4]
 801815a:	889b      	ldrh	r3, [r3, #4]
 801815c:	b29b      	uxth	r3, r3
 801815e:	2b00      	cmp	r3, #0
 8018160:	d002      	beq.n	8018168 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018162:	2300      	movs	r3, #0
 8018164:	623b      	str	r3, [r7, #32]
 8018166:	e041      	b.n	80181ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801816a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018172:	e012      	b.n	801819a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018176:	685b      	ldr	r3, [r3, #4]
 8018178:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801817c:	88db      	ldrh	r3, [r3, #6]
 801817e:	b29a      	uxth	r2, r3
 8018180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018182:	889b      	ldrh	r3, [r3, #4]
 8018184:	b29b      	uxth	r3, r3
 8018186:	429a      	cmp	r2, r3
 8018188:	d002      	beq.n	8018190 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801818a:	2300      	movs	r3, #0
 801818c:	623b      	str	r3, [r7, #32]
            break;
 801818e:	e007      	b.n	80181a0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018192:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801819c:	2b00      	cmp	r3, #0
 801819e:	d1e9      	bne.n	8018174 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80181a0:	6a3b      	ldr	r3, [r7, #32]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d022      	beq.n	80181ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	685b      	ldr	r3, [r3, #4]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d106      	bne.n	80181bc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80181ae:	4b15      	ldr	r3, [pc, #84]	; (8018204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181b0:	f240 12df 	movw	r2, #479	; 0x1df
 80181b4:	4917      	ldr	r1, [pc, #92]	; (8018214 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80181b6:	4815      	ldr	r0, [pc, #84]	; (801820c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181b8:	f003 f850 	bl	801b25c <iprintf>
          LWIP_ASSERT("sanity check",
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	685b      	ldr	r3, [r3, #4]
 80181c0:	685b      	ldr	r3, [r3, #4]
 80181c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d106      	bne.n	80181d6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80181c8:	4b0e      	ldr	r3, [pc, #56]	; (8018204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80181ce:	4911      	ldr	r1, [pc, #68]	; (8018214 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80181d0:	480e      	ldr	r0, [pc, #56]	; (801820c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181d2:	f003 f843 	bl	801b25c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80181d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d006      	beq.n	80181ec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80181de:	4b09      	ldr	r3, [pc, #36]	; (8018204 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80181e0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80181e4:	490c      	ldr	r1, [pc, #48]	; (8018218 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80181e6:	4809      	ldr	r0, [pc, #36]	; (801820c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80181e8:	f003 f838 	bl	801b25c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80181ec:	6a3b      	ldr	r3, [r7, #32]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	bf14      	ite	ne
 80181f2:	2301      	movne	r3, #1
 80181f4:	2300      	moveq	r3, #0
 80181f6:	b2db      	uxtb	r3, r3
 80181f8:	e000      	b.n	80181fc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80181fa:	2300      	movs	r3, #0
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	3730      	adds	r7, #48	; 0x30
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}
 8018204:	0801f7f0 	.word	0x0801f7f0
 8018208:	0801f8d4 	.word	0x0801f8d4
 801820c:	0801f838 	.word	0x0801f838
 8018210:	0801f8f4 	.word	0x0801f8f4
 8018214:	0801f92c 	.word	0x0801f92c
 8018218:	0801f93c 	.word	0x0801f93c

0801821c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b08e      	sub	sp, #56	; 0x38
 8018220:	af00      	add	r7, sp, #0
 8018222:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	685b      	ldr	r3, [r3, #4]
 8018228:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801822c:	781b      	ldrb	r3, [r3, #0]
 801822e:	f003 030f 	and.w	r3, r3, #15
 8018232:	b2db      	uxtb	r3, r3
 8018234:	009b      	lsls	r3, r3, #2
 8018236:	b2db      	uxtb	r3, r3
 8018238:	2b14      	cmp	r3, #20
 801823a:	f040 8167 	bne.w	801850c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018240:	88db      	ldrh	r3, [r3, #6]
 8018242:	b29b      	uxth	r3, r3
 8018244:	4618      	mov	r0, r3
 8018246:	f7f5 fc71 	bl	800db2c <lwip_htons>
 801824a:	4603      	mov	r3, r0
 801824c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018250:	b29b      	uxth	r3, r3
 8018252:	00db      	lsls	r3, r3, #3
 8018254:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018258:	885b      	ldrh	r3, [r3, #2]
 801825a:	b29b      	uxth	r3, r3
 801825c:	4618      	mov	r0, r3
 801825e:	f7f5 fc65 	bl	800db2c <lwip_htons>
 8018262:	4603      	mov	r3, r0
 8018264:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	f003 030f 	and.w	r3, r3, #15
 801826e:	b2db      	uxtb	r3, r3
 8018270:	009b      	lsls	r3, r3, #2
 8018272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801827a:	b29b      	uxth	r3, r3
 801827c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801827e:	429a      	cmp	r2, r3
 8018280:	f0c0 8146 	bcc.w	8018510 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018284:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018288:	b29b      	uxth	r3, r3
 801828a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801828c:	1ad3      	subs	r3, r2, r3
 801828e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018290:	6878      	ldr	r0, [r7, #4]
 8018292:	f7f7 f885 	bl	800f3a0 <pbuf_clen>
 8018296:	4603      	mov	r3, r0
 8018298:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801829a:	4b9f      	ldr	r3, [pc, #636]	; (8018518 <ip4_reass+0x2fc>)
 801829c:	881b      	ldrh	r3, [r3, #0]
 801829e:	461a      	mov	r2, r3
 80182a0:	8c3b      	ldrh	r3, [r7, #32]
 80182a2:	4413      	add	r3, r2
 80182a4:	2b0a      	cmp	r3, #10
 80182a6:	dd10      	ble.n	80182ca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80182a8:	8c3b      	ldrh	r3, [r7, #32]
 80182aa:	4619      	mov	r1, r3
 80182ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182ae:	f7ff fd81 	bl	8017db4 <ip_reass_remove_oldest_datagram>
 80182b2:	4603      	mov	r3, r0
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	f000 812d 	beq.w	8018514 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80182ba:	4b97      	ldr	r3, [pc, #604]	; (8018518 <ip4_reass+0x2fc>)
 80182bc:	881b      	ldrh	r3, [r3, #0]
 80182be:	461a      	mov	r2, r3
 80182c0:	8c3b      	ldrh	r3, [r7, #32]
 80182c2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80182c4:	2b0a      	cmp	r3, #10
 80182c6:	f300 8125 	bgt.w	8018514 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80182ca:	4b94      	ldr	r3, [pc, #592]	; (801851c <ip4_reass+0x300>)
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	633b      	str	r3, [r7, #48]	; 0x30
 80182d0:	e015      	b.n	80182fe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80182d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182d4:	695a      	ldr	r2, [r3, #20]
 80182d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d8:	68db      	ldr	r3, [r3, #12]
 80182da:	429a      	cmp	r2, r3
 80182dc:	d10c      	bne.n	80182f8 <ip4_reass+0xdc>
 80182de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e0:	699a      	ldr	r2, [r3, #24]
 80182e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182e4:	691b      	ldr	r3, [r3, #16]
 80182e6:	429a      	cmp	r2, r3
 80182e8:	d106      	bne.n	80182f8 <ip4_reass+0xdc>
 80182ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ec:	899a      	ldrh	r2, [r3, #12]
 80182ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182f0:	889b      	ldrh	r3, [r3, #4]
 80182f2:	b29b      	uxth	r3, r3
 80182f4:	429a      	cmp	r2, r3
 80182f6:	d006      	beq.n	8018306 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80182f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	633b      	str	r3, [r7, #48]	; 0x30
 80182fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018300:	2b00      	cmp	r3, #0
 8018302:	d1e6      	bne.n	80182d2 <ip4_reass+0xb6>
 8018304:	e000      	b.n	8018308 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018306:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801830a:	2b00      	cmp	r3, #0
 801830c:	d109      	bne.n	8018322 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801830e:	8c3b      	ldrh	r3, [r7, #32]
 8018310:	4619      	mov	r1, r3
 8018312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018314:	f7ff fdb0 	bl	8017e78 <ip_reass_enqueue_new_datagram>
 8018318:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801831c:	2b00      	cmp	r3, #0
 801831e:	d11c      	bne.n	801835a <ip4_reass+0x13e>
      goto nullreturn;
 8018320:	e109      	b.n	8018536 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018324:	88db      	ldrh	r3, [r3, #6]
 8018326:	b29b      	uxth	r3, r3
 8018328:	4618      	mov	r0, r3
 801832a:	f7f5 fbff 	bl	800db2c <lwip_htons>
 801832e:	4603      	mov	r3, r0
 8018330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018334:	2b00      	cmp	r3, #0
 8018336:	d110      	bne.n	801835a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801833a:	89db      	ldrh	r3, [r3, #14]
 801833c:	4618      	mov	r0, r3
 801833e:	f7f5 fbf5 	bl	800db2c <lwip_htons>
 8018342:	4603      	mov	r3, r0
 8018344:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018348:	2b00      	cmp	r3, #0
 801834a:	d006      	beq.n	801835a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801834e:	3308      	adds	r3, #8
 8018350:	2214      	movs	r2, #20
 8018352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018354:	4618      	mov	r0, r3
 8018356:	f002 fec1 	bl	801b0dc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801835c:	88db      	ldrh	r3, [r3, #6]
 801835e:	b29b      	uxth	r3, r3
 8018360:	f003 0320 	and.w	r3, r3, #32
 8018364:	2b00      	cmp	r3, #0
 8018366:	bf0c      	ite	eq
 8018368:	2301      	moveq	r3, #1
 801836a:	2300      	movne	r3, #0
 801836c:	b2db      	uxtb	r3, r3
 801836e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018370:	69fb      	ldr	r3, [r7, #28]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d00e      	beq.n	8018394 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018376:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801837a:	4413      	add	r3, r2
 801837c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801837e:	8b7a      	ldrh	r2, [r7, #26]
 8018380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018382:	429a      	cmp	r2, r3
 8018384:	f0c0 80a0 	bcc.w	80184c8 <ip4_reass+0x2ac>
 8018388:	8b7b      	ldrh	r3, [r7, #26]
 801838a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801838e:	4293      	cmp	r3, r2
 8018390:	f200 809a 	bhi.w	80184c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018394:	69fa      	ldr	r2, [r7, #28]
 8018396:	6879      	ldr	r1, [r7, #4]
 8018398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801839a:	f7ff fdd5 	bl	8017f48 <ip_reass_chain_frag_into_datagram_and_validate>
 801839e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80183a0:	697b      	ldr	r3, [r7, #20]
 80183a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183a6:	f000 8091 	beq.w	80184cc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80183aa:	4b5b      	ldr	r3, [pc, #364]	; (8018518 <ip4_reass+0x2fc>)
 80183ac:	881a      	ldrh	r2, [r3, #0]
 80183ae:	8c3b      	ldrh	r3, [r7, #32]
 80183b0:	4413      	add	r3, r2
 80183b2:	b29a      	uxth	r2, r3
 80183b4:	4b58      	ldr	r3, [pc, #352]	; (8018518 <ip4_reass+0x2fc>)
 80183b6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80183b8:	69fb      	ldr	r3, [r7, #28]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d00d      	beq.n	80183da <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80183be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80183c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183c2:	4413      	add	r3, r2
 80183c4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80183c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183c8:	8a7a      	ldrh	r2, [r7, #18]
 80183ca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80183cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ce:	7f9b      	ldrb	r3, [r3, #30]
 80183d0:	f043 0301 	orr.w	r3, r3, #1
 80183d4:	b2da      	uxtb	r2, r3
 80183d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80183da:	697b      	ldr	r3, [r7, #20]
 80183dc:	2b01      	cmp	r3, #1
 80183de:	d171      	bne.n	80184c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80183e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e2:	8b9b      	ldrh	r3, [r3, #28]
 80183e4:	3314      	adds	r3, #20
 80183e6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80183e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183ea:	685b      	ldr	r3, [r3, #4]
 80183ec:	685b      	ldr	r3, [r3, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80183f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183f4:	685b      	ldr	r3, [r3, #4]
 80183f6:	685b      	ldr	r3, [r3, #4]
 80183f8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80183fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183fc:	3308      	adds	r3, #8
 80183fe:	2214      	movs	r2, #20
 8018400:	4619      	mov	r1, r3
 8018402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018404:	f002 fe6a 	bl	801b0dc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018408:	8a3b      	ldrh	r3, [r7, #16]
 801840a:	4618      	mov	r0, r3
 801840c:	f7f5 fb8e 	bl	800db2c <lwip_htons>
 8018410:	4603      	mov	r3, r0
 8018412:	461a      	mov	r2, r3
 8018414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018416:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801841a:	2200      	movs	r2, #0
 801841c:	719a      	strb	r2, [r3, #6]
 801841e:	2200      	movs	r2, #0
 8018420:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018424:	2200      	movs	r2, #0
 8018426:	729a      	strb	r2, [r3, #10]
 8018428:	2200      	movs	r2, #0
 801842a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801842c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801842e:	685b      	ldr	r3, [r3, #4]
 8018430:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018432:	e00d      	b.n	8018450 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018436:	685b      	ldr	r3, [r3, #4]
 8018438:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801843a:	2114      	movs	r1, #20
 801843c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801843e:	f7f6 fe9b 	bl	800f178 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018442:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f7f6 ffeb 	bl	800f420 <pbuf_cat>
      r = iprh->next_pbuf;
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018452:	2b00      	cmp	r3, #0
 8018454:	d1ee      	bne.n	8018434 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018456:	4b31      	ldr	r3, [pc, #196]	; (801851c <ip4_reass+0x300>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801845c:	429a      	cmp	r2, r3
 801845e:	d102      	bne.n	8018466 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018460:	2300      	movs	r3, #0
 8018462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018464:	e010      	b.n	8018488 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018466:	4b2d      	ldr	r3, [pc, #180]	; (801851c <ip4_reass+0x300>)
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801846c:	e007      	b.n	801847e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018474:	429a      	cmp	r2, r3
 8018476:	d006      	beq.n	8018486 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801847e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018480:	2b00      	cmp	r3, #0
 8018482:	d1f4      	bne.n	801846e <ip4_reass+0x252>
 8018484:	e000      	b.n	8018488 <ip4_reass+0x26c>
          break;
 8018486:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018488:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801848a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801848c:	f7ff fd2e 	bl	8017eec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018490:	6878      	ldr	r0, [r7, #4]
 8018492:	f7f6 ff85 	bl	800f3a0 <pbuf_clen>
 8018496:	4603      	mov	r3, r0
 8018498:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801849a:	4b1f      	ldr	r3, [pc, #124]	; (8018518 <ip4_reass+0x2fc>)
 801849c:	881b      	ldrh	r3, [r3, #0]
 801849e:	8c3a      	ldrh	r2, [r7, #32]
 80184a0:	429a      	cmp	r2, r3
 80184a2:	d906      	bls.n	80184b2 <ip4_reass+0x296>
 80184a4:	4b1e      	ldr	r3, [pc, #120]	; (8018520 <ip4_reass+0x304>)
 80184a6:	f240 229b 	movw	r2, #667	; 0x29b
 80184aa:	491e      	ldr	r1, [pc, #120]	; (8018524 <ip4_reass+0x308>)
 80184ac:	481e      	ldr	r0, [pc, #120]	; (8018528 <ip4_reass+0x30c>)
 80184ae:	f002 fed5 	bl	801b25c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80184b2:	4b19      	ldr	r3, [pc, #100]	; (8018518 <ip4_reass+0x2fc>)
 80184b4:	881a      	ldrh	r2, [r3, #0]
 80184b6:	8c3b      	ldrh	r3, [r7, #32]
 80184b8:	1ad3      	subs	r3, r2, r3
 80184ba:	b29a      	uxth	r2, r3
 80184bc:	4b16      	ldr	r3, [pc, #88]	; (8018518 <ip4_reass+0x2fc>)
 80184be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	e03c      	b.n	801853e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80184c4:	2300      	movs	r3, #0
 80184c6:	e03a      	b.n	801853e <ip4_reass+0x322>
      goto nullreturn_ipr;
 80184c8:	bf00      	nop
 80184ca:	e000      	b.n	80184ce <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80184cc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80184ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d106      	bne.n	80184e2 <ip4_reass+0x2c6>
 80184d4:	4b12      	ldr	r3, [pc, #72]	; (8018520 <ip4_reass+0x304>)
 80184d6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80184da:	4914      	ldr	r1, [pc, #80]	; (801852c <ip4_reass+0x310>)
 80184dc:	4812      	ldr	r0, [pc, #72]	; (8018528 <ip4_reass+0x30c>)
 80184de:	f002 febd 	bl	801b25c <iprintf>
  if (ipr->p == NULL) {
 80184e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e4:	685b      	ldr	r3, [r3, #4]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d124      	bne.n	8018534 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80184ea:	4b0c      	ldr	r3, [pc, #48]	; (801851c <ip4_reass+0x300>)
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184f0:	429a      	cmp	r2, r3
 80184f2:	d006      	beq.n	8018502 <ip4_reass+0x2e6>
 80184f4:	4b0a      	ldr	r3, [pc, #40]	; (8018520 <ip4_reass+0x304>)
 80184f6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80184fa:	490d      	ldr	r1, [pc, #52]	; (8018530 <ip4_reass+0x314>)
 80184fc:	480a      	ldr	r0, [pc, #40]	; (8018528 <ip4_reass+0x30c>)
 80184fe:	f002 fead 	bl	801b25c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018502:	2100      	movs	r1, #0
 8018504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018506:	f7ff fcf1 	bl	8017eec <ip_reass_dequeue_datagram>
 801850a:	e014      	b.n	8018536 <ip4_reass+0x31a>
    goto nullreturn;
 801850c:	bf00      	nop
 801850e:	e012      	b.n	8018536 <ip4_reass+0x31a>
    goto nullreturn;
 8018510:	bf00      	nop
 8018512:	e010      	b.n	8018536 <ip4_reass+0x31a>
      goto nullreturn;
 8018514:	bf00      	nop
 8018516:	e00e      	b.n	8018536 <ip4_reass+0x31a>
 8018518:	20004ca4 	.word	0x20004ca4
 801851c:	20004ca0 	.word	0x20004ca0
 8018520:	0801f7f0 	.word	0x0801f7f0
 8018524:	0801f960 	.word	0x0801f960
 8018528:	0801f838 	.word	0x0801f838
 801852c:	0801f97c 	.word	0x0801f97c
 8018530:	0801f988 	.word	0x0801f988
  }

nullreturn:
 8018534:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018536:	6878      	ldr	r0, [r7, #4]
 8018538:	f7f6 fea4 	bl	800f284 <pbuf_free>
  return NULL;
 801853c:	2300      	movs	r3, #0
}
 801853e:	4618      	mov	r0, r3
 8018540:	3738      	adds	r7, #56	; 0x38
 8018542:	46bd      	mov	sp, r7
 8018544:	bd80      	pop	{r7, pc}
 8018546:	bf00      	nop

08018548 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018548:	b580      	push	{r7, lr}
 801854a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801854c:	2005      	movs	r0, #5
 801854e:	f7f5 ffa3 	bl	800e498 <memp_malloc>
 8018552:	4603      	mov	r3, r0
}
 8018554:	4618      	mov	r0, r3
 8018556:	bd80      	pop	{r7, pc}

08018558 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b082      	sub	sp, #8
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d106      	bne.n	8018574 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018566:	4b07      	ldr	r3, [pc, #28]	; (8018584 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018568:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801856c:	4906      	ldr	r1, [pc, #24]	; (8018588 <ip_frag_free_pbuf_custom_ref+0x30>)
 801856e:	4807      	ldr	r0, [pc, #28]	; (801858c <ip_frag_free_pbuf_custom_ref+0x34>)
 8018570:	f002 fe74 	bl	801b25c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018574:	6879      	ldr	r1, [r7, #4]
 8018576:	2005      	movs	r0, #5
 8018578:	f7f5 ffe0 	bl	800e53c <memp_free>
}
 801857c:	bf00      	nop
 801857e:	3708      	adds	r7, #8
 8018580:	46bd      	mov	sp, r7
 8018582:	bd80      	pop	{r7, pc}
 8018584:	0801f7f0 	.word	0x0801f7f0
 8018588:	0801f9a8 	.word	0x0801f9a8
 801858c:	0801f838 	.word	0x0801f838

08018590 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b084      	sub	sp, #16
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d106      	bne.n	80185b0 <ipfrag_free_pbuf_custom+0x20>
 80185a2:	4b11      	ldr	r3, [pc, #68]	; (80185e8 <ipfrag_free_pbuf_custom+0x58>)
 80185a4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80185a8:	4910      	ldr	r1, [pc, #64]	; (80185ec <ipfrag_free_pbuf_custom+0x5c>)
 80185aa:	4811      	ldr	r0, [pc, #68]	; (80185f0 <ipfrag_free_pbuf_custom+0x60>)
 80185ac:	f002 fe56 	bl	801b25c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80185b0:	68fa      	ldr	r2, [r7, #12]
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	429a      	cmp	r2, r3
 80185b6:	d006      	beq.n	80185c6 <ipfrag_free_pbuf_custom+0x36>
 80185b8:	4b0b      	ldr	r3, [pc, #44]	; (80185e8 <ipfrag_free_pbuf_custom+0x58>)
 80185ba:	f240 22cf 	movw	r2, #719	; 0x2cf
 80185be:	490d      	ldr	r1, [pc, #52]	; (80185f4 <ipfrag_free_pbuf_custom+0x64>)
 80185c0:	480b      	ldr	r0, [pc, #44]	; (80185f0 <ipfrag_free_pbuf_custom+0x60>)
 80185c2:	f002 fe4b 	bl	801b25c <iprintf>
  if (pcr->original != NULL) {
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	695b      	ldr	r3, [r3, #20]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d004      	beq.n	80185d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	695b      	ldr	r3, [r3, #20]
 80185d2:	4618      	mov	r0, r3
 80185d4:	f7f6 fe56 	bl	800f284 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80185d8:	68f8      	ldr	r0, [r7, #12]
 80185da:	f7ff ffbd 	bl	8018558 <ip_frag_free_pbuf_custom_ref>
}
 80185de:	bf00      	nop
 80185e0:	3710      	adds	r7, #16
 80185e2:	46bd      	mov	sp, r7
 80185e4:	bd80      	pop	{r7, pc}
 80185e6:	bf00      	nop
 80185e8:	0801f7f0 	.word	0x0801f7f0
 80185ec:	0801f9b4 	.word	0x0801f9b4
 80185f0:	0801f838 	.word	0x0801f838
 80185f4:	0801f9c0 	.word	0x0801f9c0

080185f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b094      	sub	sp, #80	; 0x50
 80185fc:	af02      	add	r7, sp, #8
 80185fe:	60f8      	str	r0, [r7, #12]
 8018600:	60b9      	str	r1, [r7, #8]
 8018602:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018604:	2300      	movs	r3, #0
 8018606:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801860a:	68bb      	ldr	r3, [r7, #8]
 801860c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801860e:	3b14      	subs	r3, #20
 8018610:	2b00      	cmp	r3, #0
 8018612:	da00      	bge.n	8018616 <ip4_frag+0x1e>
 8018614:	3307      	adds	r3, #7
 8018616:	10db      	asrs	r3, r3, #3
 8018618:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801861a:	2314      	movs	r3, #20
 801861c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	685b      	ldr	r3, [r3, #4]
 8018622:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018626:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801862a:	781b      	ldrb	r3, [r3, #0]
 801862c:	f003 030f 	and.w	r3, r3, #15
 8018630:	b2db      	uxtb	r3, r3
 8018632:	009b      	lsls	r3, r3, #2
 8018634:	b2db      	uxtb	r3, r3
 8018636:	2b14      	cmp	r3, #20
 8018638:	d002      	beq.n	8018640 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801863a:	f06f 0305 	mvn.w	r3, #5
 801863e:	e110      	b.n	8018862 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	895b      	ldrh	r3, [r3, #10]
 8018644:	2b13      	cmp	r3, #19
 8018646:	d809      	bhi.n	801865c <ip4_frag+0x64>
 8018648:	4b88      	ldr	r3, [pc, #544]	; (801886c <ip4_frag+0x274>)
 801864a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801864e:	4988      	ldr	r1, [pc, #544]	; (8018870 <ip4_frag+0x278>)
 8018650:	4888      	ldr	r0, [pc, #544]	; (8018874 <ip4_frag+0x27c>)
 8018652:	f002 fe03 	bl	801b25c <iprintf>
 8018656:	f06f 0305 	mvn.w	r3, #5
 801865a:	e102      	b.n	8018862 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801865e:	88db      	ldrh	r3, [r3, #6]
 8018660:	b29b      	uxth	r3, r3
 8018662:	4618      	mov	r0, r3
 8018664:	f7f5 fa62 	bl	800db2c <lwip_htons>
 8018668:	4603      	mov	r3, r0
 801866a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801866c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801866e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018672:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018676:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801867c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	891b      	ldrh	r3, [r3, #8]
 8018682:	3b14      	subs	r3, #20
 8018684:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018688:	e0e1      	b.n	801884e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801868a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801868c:	00db      	lsls	r3, r3, #3
 801868e:	b29b      	uxth	r3, r3
 8018690:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018694:	4293      	cmp	r3, r2
 8018696:	bf28      	it	cs
 8018698:	4613      	movcs	r3, r2
 801869a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801869c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80186a0:	2114      	movs	r1, #20
 80186a2:	200e      	movs	r0, #14
 80186a4:	f7f6 fb0a 	bl	800ecbc <pbuf_alloc>
 80186a8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80186aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	f000 80d5 	beq.w	801885c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80186b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186b4:	895b      	ldrh	r3, [r3, #10]
 80186b6:	2b13      	cmp	r3, #19
 80186b8:	d806      	bhi.n	80186c8 <ip4_frag+0xd0>
 80186ba:	4b6c      	ldr	r3, [pc, #432]	; (801886c <ip4_frag+0x274>)
 80186bc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80186c0:	496d      	ldr	r1, [pc, #436]	; (8018878 <ip4_frag+0x280>)
 80186c2:	486c      	ldr	r0, [pc, #432]	; (8018874 <ip4_frag+0x27c>)
 80186c4:	f002 fdca 	bl	801b25c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80186c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186ca:	685b      	ldr	r3, [r3, #4]
 80186cc:	2214      	movs	r2, #20
 80186ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80186d0:	4618      	mov	r0, r3
 80186d2:	f002 fd03 	bl	801b0dc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80186d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186d8:	685b      	ldr	r3, [r3, #4]
 80186da:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80186dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80186de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80186e2:	e064      	b.n	80187ae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	895a      	ldrh	r2, [r3, #10]
 80186e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80186ea:	1ad3      	subs	r3, r2, r3
 80186ec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	895b      	ldrh	r3, [r3, #10]
 80186f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d906      	bls.n	8018706 <ip4_frag+0x10e>
 80186f8:	4b5c      	ldr	r3, [pc, #368]	; (801886c <ip4_frag+0x274>)
 80186fa:	f240 322d 	movw	r2, #813	; 0x32d
 80186fe:	495f      	ldr	r1, [pc, #380]	; (801887c <ip4_frag+0x284>)
 8018700:	485c      	ldr	r0, [pc, #368]	; (8018874 <ip4_frag+0x27c>)
 8018702:	f002 fdab 	bl	801b25c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018706:	8bfa      	ldrh	r2, [r7, #30]
 8018708:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801870c:	4293      	cmp	r3, r2
 801870e:	bf28      	it	cs
 8018710:	4613      	movcs	r3, r2
 8018712:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018716:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801871a:	2b00      	cmp	r3, #0
 801871c:	d105      	bne.n	801872a <ip4_frag+0x132>
        poff = 0;
 801871e:	2300      	movs	r3, #0
 8018720:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	60fb      	str	r3, [r7, #12]
        continue;
 8018728:	e041      	b.n	80187ae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801872a:	f7ff ff0d 	bl	8018548 <ip_frag_alloc_pbuf_custom_ref>
 801872e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018730:	69bb      	ldr	r3, [r7, #24]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d103      	bne.n	801873e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018738:	f7f6 fda4 	bl	800f284 <pbuf_free>
        goto memerr;
 801873c:	e08f      	b.n	801885e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801873e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018744:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018746:	4413      	add	r3, r2
 8018748:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801874c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018750:	9201      	str	r2, [sp, #4]
 8018752:	9300      	str	r3, [sp, #0]
 8018754:	4603      	mov	r3, r0
 8018756:	2241      	movs	r2, #65	; 0x41
 8018758:	2000      	movs	r0, #0
 801875a:	f7f6 fbd9 	bl	800ef10 <pbuf_alloced_custom>
 801875e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018760:	697b      	ldr	r3, [r7, #20]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d106      	bne.n	8018774 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018766:	69b8      	ldr	r0, [r7, #24]
 8018768:	f7ff fef6 	bl	8018558 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801876c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801876e:	f7f6 fd89 	bl	800f284 <pbuf_free>
        goto memerr;
 8018772:	e074      	b.n	801885e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018774:	68f8      	ldr	r0, [r7, #12]
 8018776:	f7f6 fe2b 	bl	800f3d0 <pbuf_ref>
      pcr->original = p;
 801877a:	69bb      	ldr	r3, [r7, #24]
 801877c:	68fa      	ldr	r2, [r7, #12]
 801877e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018780:	69bb      	ldr	r3, [r7, #24]
 8018782:	4a3f      	ldr	r2, [pc, #252]	; (8018880 <ip4_frag+0x288>)
 8018784:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018786:	6979      	ldr	r1, [r7, #20]
 8018788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801878a:	f7f6 fe49 	bl	800f420 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801878e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018792:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018796:	1ad3      	subs	r3, r2, r3
 8018798:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801879c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d004      	beq.n	80187ae <ip4_frag+0x1b6>
        poff = 0;
 80187a4:	2300      	movs	r3, #0
 80187a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80187ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d196      	bne.n	80186e4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80187b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80187b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80187bc:	4413      	add	r3, r2
 80187be:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80187c4:	f1a3 0213 	sub.w	r2, r3, #19
 80187c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80187cc:	429a      	cmp	r2, r3
 80187ce:	bfcc      	ite	gt
 80187d0:	2301      	movgt	r3, #1
 80187d2:	2300      	movle	r3, #0
 80187d4:	b2db      	uxtb	r3, r3
 80187d6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80187d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80187dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80187e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80187e2:	6a3b      	ldr	r3, [r7, #32]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d002      	beq.n	80187ee <ip4_frag+0x1f6>
 80187e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d003      	beq.n	80187f6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80187ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80187f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80187f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80187f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7f5 f997 	bl	800db2c <lwip_htons>
 80187fe:	4603      	mov	r3, r0
 8018800:	461a      	mov	r2, r3
 8018802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018804:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018806:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018808:	3314      	adds	r3, #20
 801880a:	b29b      	uxth	r3, r3
 801880c:	4618      	mov	r0, r3
 801880e:	f7f5 f98d 	bl	800db2c <lwip_htons>
 8018812:	4603      	mov	r3, r0
 8018814:	461a      	mov	r2, r3
 8018816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018818:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801881c:	2200      	movs	r2, #0
 801881e:	729a      	strb	r2, [r3, #10]
 8018820:	2200      	movs	r2, #0
 8018822:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	695b      	ldr	r3, [r3, #20]
 8018828:	687a      	ldr	r2, [r7, #4]
 801882a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801882c:	68b8      	ldr	r0, [r7, #8]
 801882e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018832:	f7f6 fd27 	bl	800f284 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018836:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801883a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801883c:	1ad3      	subs	r3, r2, r3
 801883e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018842:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018846:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018848:	4413      	add	r3, r2
 801884a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801884e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018852:	2b00      	cmp	r3, #0
 8018854:	f47f af19 	bne.w	801868a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018858:	2300      	movs	r3, #0
 801885a:	e002      	b.n	8018862 <ip4_frag+0x26a>
      goto memerr;
 801885c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801885e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018862:	4618      	mov	r0, r3
 8018864:	3748      	adds	r7, #72	; 0x48
 8018866:	46bd      	mov	sp, r7
 8018868:	bd80      	pop	{r7, pc}
 801886a:	bf00      	nop
 801886c:	0801f7f0 	.word	0x0801f7f0
 8018870:	0801f9cc 	.word	0x0801f9cc
 8018874:	0801f838 	.word	0x0801f838
 8018878:	0801f9e8 	.word	0x0801f9e8
 801887c:	0801fa08 	.word	0x0801fa08
 8018880:	08018591 	.word	0x08018591

08018884 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018884:	b580      	push	{r7, lr}
 8018886:	b086      	sub	sp, #24
 8018888:	af00      	add	r7, sp, #0
 801888a:	6078      	str	r0, [r7, #4]
 801888c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801888e:	230e      	movs	r3, #14
 8018890:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	895b      	ldrh	r3, [r3, #10]
 8018896:	2b0e      	cmp	r3, #14
 8018898:	d96e      	bls.n	8018978 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	7bdb      	ldrb	r3, [r3, #15]
 801889e:	2b00      	cmp	r3, #0
 80188a0:	d106      	bne.n	80188b0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80188a2:	683b      	ldr	r3, [r7, #0]
 80188a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80188a8:	3301      	adds	r3, #1
 80188aa:	b2da      	uxtb	r2, r3
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	685b      	ldr	r3, [r3, #4]
 80188b4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80188b6:	693b      	ldr	r3, [r7, #16]
 80188b8:	7b1a      	ldrb	r2, [r3, #12]
 80188ba:	7b5b      	ldrb	r3, [r3, #13]
 80188bc:	021b      	lsls	r3, r3, #8
 80188be:	4313      	orrs	r3, r2
 80188c0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80188c2:	693b      	ldr	r3, [r7, #16]
 80188c4:	781b      	ldrb	r3, [r3, #0]
 80188c6:	f003 0301 	and.w	r3, r3, #1
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d023      	beq.n	8018916 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80188ce:	693b      	ldr	r3, [r7, #16]
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	2b01      	cmp	r3, #1
 80188d4:	d10f      	bne.n	80188f6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80188d6:	693b      	ldr	r3, [r7, #16]
 80188d8:	785b      	ldrb	r3, [r3, #1]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d11b      	bne.n	8018916 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80188de:	693b      	ldr	r3, [r7, #16]
 80188e0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80188e2:	2b5e      	cmp	r3, #94	; 0x5e
 80188e4:	d117      	bne.n	8018916 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	7b5b      	ldrb	r3, [r3, #13]
 80188ea:	f043 0310 	orr.w	r3, r3, #16
 80188ee:	b2da      	uxtb	r2, r3
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	735a      	strb	r2, [r3, #13]
 80188f4:	e00f      	b.n	8018916 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80188f6:	693b      	ldr	r3, [r7, #16]
 80188f8:	2206      	movs	r2, #6
 80188fa:	4928      	ldr	r1, [pc, #160]	; (801899c <ethernet_input+0x118>)
 80188fc:	4618      	mov	r0, r3
 80188fe:	f002 fbdf 	bl	801b0c0 <memcmp>
 8018902:	4603      	mov	r3, r0
 8018904:	2b00      	cmp	r3, #0
 8018906:	d106      	bne.n	8018916 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	7b5b      	ldrb	r3, [r3, #13]
 801890c:	f043 0308 	orr.w	r3, r3, #8
 8018910:	b2da      	uxtb	r2, r3
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018916:	89fb      	ldrh	r3, [r7, #14]
 8018918:	2b08      	cmp	r3, #8
 801891a:	d003      	beq.n	8018924 <ethernet_input+0xa0>
 801891c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018920:	d014      	beq.n	801894c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018922:	e032      	b.n	801898a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018924:	683b      	ldr	r3, [r7, #0]
 8018926:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801892a:	f003 0308 	and.w	r3, r3, #8
 801892e:	2b00      	cmp	r3, #0
 8018930:	d024      	beq.n	801897c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018932:	8afb      	ldrh	r3, [r7, #22]
 8018934:	4619      	mov	r1, r3
 8018936:	6878      	ldr	r0, [r7, #4]
 8018938:	f7f6 fc1e 	bl	800f178 <pbuf_remove_header>
 801893c:	4603      	mov	r3, r0
 801893e:	2b00      	cmp	r3, #0
 8018940:	d11e      	bne.n	8018980 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018942:	6839      	ldr	r1, [r7, #0]
 8018944:	6878      	ldr	r0, [r7, #4]
 8018946:	f7fe ff27 	bl	8017798 <ip4_input>
      break;
 801894a:	e013      	b.n	8018974 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801894c:	683b      	ldr	r3, [r7, #0]
 801894e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018952:	f003 0308 	and.w	r3, r3, #8
 8018956:	2b00      	cmp	r3, #0
 8018958:	d014      	beq.n	8018984 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801895a:	8afb      	ldrh	r3, [r7, #22]
 801895c:	4619      	mov	r1, r3
 801895e:	6878      	ldr	r0, [r7, #4]
 8018960:	f7f6 fc0a 	bl	800f178 <pbuf_remove_header>
 8018964:	4603      	mov	r3, r0
 8018966:	2b00      	cmp	r3, #0
 8018968:	d10e      	bne.n	8018988 <ethernet_input+0x104>
        etharp_input(p, netif);
 801896a:	6839      	ldr	r1, [r7, #0]
 801896c:	6878      	ldr	r0, [r7, #4]
 801896e:	f7fe f8c7 	bl	8016b00 <etharp_input>
      break;
 8018972:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018974:	2300      	movs	r3, #0
 8018976:	e00c      	b.n	8018992 <ethernet_input+0x10e>
    goto free_and_return;
 8018978:	bf00      	nop
 801897a:	e006      	b.n	801898a <ethernet_input+0x106>
        goto free_and_return;
 801897c:	bf00      	nop
 801897e:	e004      	b.n	801898a <ethernet_input+0x106>
        goto free_and_return;
 8018980:	bf00      	nop
 8018982:	e002      	b.n	801898a <ethernet_input+0x106>
        goto free_and_return;
 8018984:	bf00      	nop
 8018986:	e000      	b.n	801898a <ethernet_input+0x106>
        goto free_and_return;
 8018988:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801898a:	6878      	ldr	r0, [r7, #4]
 801898c:	f7f6 fc7a 	bl	800f284 <pbuf_free>
  return ERR_OK;
 8018990:	2300      	movs	r3, #0
}
 8018992:	4618      	mov	r0, r3
 8018994:	3718      	adds	r7, #24
 8018996:	46bd      	mov	sp, r7
 8018998:	bd80      	pop	{r7, pc}
 801899a:	bf00      	nop
 801899c:	0801fdf8 	.word	0x0801fdf8

080189a0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b086      	sub	sp, #24
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	60f8      	str	r0, [r7, #12]
 80189a8:	60b9      	str	r1, [r7, #8]
 80189aa:	607a      	str	r2, [r7, #4]
 80189ac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80189ae:	8c3b      	ldrh	r3, [r7, #32]
 80189b0:	4618      	mov	r0, r3
 80189b2:	f7f5 f8bb 	bl	800db2c <lwip_htons>
 80189b6:	4603      	mov	r3, r0
 80189b8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80189ba:	210e      	movs	r1, #14
 80189bc:	68b8      	ldr	r0, [r7, #8]
 80189be:	f7f6 fbcb 	bl	800f158 <pbuf_add_header>
 80189c2:	4603      	mov	r3, r0
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d125      	bne.n	8018a14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80189c8:	68bb      	ldr	r3, [r7, #8]
 80189ca:	685b      	ldr	r3, [r3, #4]
 80189cc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80189ce:	693b      	ldr	r3, [r7, #16]
 80189d0:	8afa      	ldrh	r2, [r7, #22]
 80189d2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80189d4:	693b      	ldr	r3, [r7, #16]
 80189d6:	2206      	movs	r2, #6
 80189d8:	6839      	ldr	r1, [r7, #0]
 80189da:	4618      	mov	r0, r3
 80189dc:	f002 fb7e 	bl	801b0dc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80189e0:	693b      	ldr	r3, [r7, #16]
 80189e2:	3306      	adds	r3, #6
 80189e4:	2206      	movs	r2, #6
 80189e6:	6879      	ldr	r1, [r7, #4]
 80189e8:	4618      	mov	r0, r3
 80189ea:	f002 fb77 	bl	801b0dc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80189ee:	68fb      	ldr	r3, [r7, #12]
 80189f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80189f4:	2b06      	cmp	r3, #6
 80189f6:	d006      	beq.n	8018a06 <ethernet_output+0x66>
 80189f8:	4b0a      	ldr	r3, [pc, #40]	; (8018a24 <ethernet_output+0x84>)
 80189fa:	f44f 7299 	mov.w	r2, #306	; 0x132
 80189fe:	490a      	ldr	r1, [pc, #40]	; (8018a28 <ethernet_output+0x88>)
 8018a00:	480a      	ldr	r0, [pc, #40]	; (8018a2c <ethernet_output+0x8c>)
 8018a02:	f002 fc2b 	bl	801b25c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	699b      	ldr	r3, [r3, #24]
 8018a0a:	68b9      	ldr	r1, [r7, #8]
 8018a0c:	68f8      	ldr	r0, [r7, #12]
 8018a0e:	4798      	blx	r3
 8018a10:	4603      	mov	r3, r0
 8018a12:	e002      	b.n	8018a1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018a14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018a16:	f06f 0301 	mvn.w	r3, #1
}
 8018a1a:	4618      	mov	r0, r3
 8018a1c:	3718      	adds	r7, #24
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	bd80      	pop	{r7, pc}
 8018a22:	bf00      	nop
 8018a24:	0801fa18 	.word	0x0801fa18
 8018a28:	0801fa50 	.word	0x0801fa50
 8018a2c:	0801fa84 	.word	0x0801fa84

08018a30 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
 8018a38:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018a3a:	683b      	ldr	r3, [r7, #0]
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	2104      	movs	r1, #4
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7ef fda5 	bl	8008590 <osMessageQueueNew>
 8018a46:	4602      	mov	r2, r0
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d102      	bne.n	8018a5a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018a54:	f04f 33ff 	mov.w	r3, #4294967295
 8018a58:	e000      	b.n	8018a5c <sys_mbox_new+0x2c>

  return ERR_OK;
 8018a5a:	2300      	movs	r3, #0
}
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	3708      	adds	r7, #8
 8018a60:	46bd      	mov	sp, r7
 8018a62:	bd80      	pop	{r7, pc}

08018a64 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b082      	sub	sp, #8
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	4618      	mov	r0, r3
 8018a72:	f7ef fed5 	bl	8008820 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f7ef fef0 	bl	8008860 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018a80:	bf00      	nop
 8018a82:	3708      	adds	r7, #8
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}

08018a88 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b084      	sub	sp, #16
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
 8018a90:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	6818      	ldr	r0, [r3, #0]
 8018a96:	4639      	mov	r1, r7
 8018a98:	2300      	movs	r3, #0
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	f7ef fdec 	bl	8008678 <osMessageQueuePut>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d102      	bne.n	8018aac <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	73fb      	strb	r3, [r7, #15]
 8018aaa:	e001      	b.n	8018ab0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018aac:	23ff      	movs	r3, #255	; 0xff
 8018aae:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	3710      	adds	r7, #16
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	bd80      	pop	{r7, pc}

08018abc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b086      	sub	sp, #24
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	60f8      	str	r0, [r7, #12]
 8018ac4:	60b9      	str	r1, [r7, #8]
 8018ac6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018ac8:	f7ef f98e 	bl	8007de8 <osKernelGetTickCount>
 8018acc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d013      	beq.n	8018afc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	6818      	ldr	r0, [r3, #0]
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	2200      	movs	r2, #0
 8018adc:	68b9      	ldr	r1, [r7, #8]
 8018ade:	f7ef fe2b 	bl	8008738 <osMessageQueueGet>
 8018ae2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018ae4:	693b      	ldr	r3, [r7, #16]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d105      	bne.n	8018af6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018aea:	f7ef f97d 	bl	8007de8 <osKernelGetTickCount>
 8018aee:	4602      	mov	r2, r0
 8018af0:	697b      	ldr	r3, [r7, #20]
 8018af2:	1ad3      	subs	r3, r2, r3
 8018af4:	e00f      	b.n	8018b16 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018af6:	f04f 33ff 	mov.w	r3, #4294967295
 8018afa:	e00c      	b.n	8018b16 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	6818      	ldr	r0, [r3, #0]
 8018b00:	f04f 33ff 	mov.w	r3, #4294967295
 8018b04:	2200      	movs	r2, #0
 8018b06:	68b9      	ldr	r1, [r7, #8]
 8018b08:	f7ef fe16 	bl	8008738 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018b0c:	f7ef f96c 	bl	8007de8 <osKernelGetTickCount>
 8018b10:	4602      	mov	r2, r0
 8018b12:	697b      	ldr	r3, [r7, #20]
 8018b14:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018b16:	4618      	mov	r0, r3
 8018b18:	3718      	adds	r7, #24
 8018b1a:	46bd      	mov	sp, r7
 8018b1c:	bd80      	pop	{r7, pc}

08018b1e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018b1e:	b580      	push	{r7, lr}
 8018b20:	b082      	sub	sp, #8
 8018b22:	af00      	add	r7, sp, #0
 8018b24:	6078      	str	r0, [r7, #4]
 8018b26:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6818      	ldr	r0, [r3, #0]
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	2200      	movs	r2, #0
 8018b30:	6839      	ldr	r1, [r7, #0]
 8018b32:	f7ef fe01 	bl	8008738 <osMessageQueueGet>
 8018b36:	4603      	mov	r3, r0
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	d101      	bne.n	8018b40 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	e001      	b.n	8018b44 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018b40:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018b44:	4618      	mov	r0, r3
 8018b46:	3708      	adds	r7, #8
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	bd80      	pop	{r7, pc}

08018b4c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018b4c:	b480      	push	{r7}
 8018b4e:	b083      	sub	sp, #12
 8018b50:	af00      	add	r7, sp, #0
 8018b52:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d101      	bne.n	8018b60 <sys_mbox_valid+0x14>
    return 0;
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	e000      	b.n	8018b62 <sys_mbox_valid+0x16>
  else
    return 1;
 8018b60:	2301      	movs	r3, #1
}
 8018b62:	4618      	mov	r0, r3
 8018b64:	370c      	adds	r7, #12
 8018b66:	46bd      	mov	sp, r7
 8018b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6c:	4770      	bx	lr

08018b6e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018b6e:	b480      	push	{r7}
 8018b70:	b083      	sub	sp, #12
 8018b72:	af00      	add	r7, sp, #0
 8018b74:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	2200      	movs	r2, #0
 8018b7a:	601a      	str	r2, [r3, #0]
}
 8018b7c:	bf00      	nop
 8018b7e:	370c      	adds	r7, #12
 8018b80:	46bd      	mov	sp, r7
 8018b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b86:	4770      	bx	lr

08018b88 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b082      	sub	sp, #8
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
 8018b90:	460b      	mov	r3, r1
 8018b92:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8018b94:	78fb      	ldrb	r3, [r7, #3]
 8018b96:	2200      	movs	r2, #0
 8018b98:	4619      	mov	r1, r3
 8018b9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018b9e:	f7ef fbb3 	bl	8008308 <osSemaphoreNew>
 8018ba2:	4602      	mov	r2, r0
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d102      	bne.n	8018bb6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bb4:	e009      	b.n	8018bca <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8018bb6:	78fb      	ldrb	r3, [r7, #3]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d105      	bne.n	8018bc8 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	2100      	movs	r1, #0
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	f7ef fc2a 	bl	800841c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018bc8:	2300      	movs	r3, #0
}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	3708      	adds	r7, #8
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}

08018bd2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018bd2:	b580      	push	{r7, lr}
 8018bd4:	b084      	sub	sp, #16
 8018bd6:	af00      	add	r7, sp, #0
 8018bd8:	6078      	str	r0, [r7, #4]
 8018bda:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8018bdc:	f7ef f904 	bl	8007de8 <osKernelGetTickCount>
 8018be0:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8018be2:	683b      	ldr	r3, [r7, #0]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d011      	beq.n	8018c0c <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	6839      	ldr	r1, [r7, #0]
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f7ef fc14 	bl	800841c <osSemaphoreAcquire>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d105      	bne.n	8018c06 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8018bfa:	f7ef f8f5 	bl	8007de8 <osKernelGetTickCount>
 8018bfe:	4602      	mov	r2, r0
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	1ad3      	subs	r3, r2, r3
 8018c04:	e012      	b.n	8018c2c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018c06:	f04f 33ff 	mov.w	r3, #4294967295
 8018c0a:	e00f      	b.n	8018c2c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018c0c:	bf00      	nop
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	f04f 31ff 	mov.w	r1, #4294967295
 8018c16:	4618      	mov	r0, r3
 8018c18:	f7ef fc00 	bl	800841c <osSemaphoreAcquire>
 8018c1c:	4603      	mov	r3, r0
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d1f5      	bne.n	8018c0e <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8018c22:	f7ef f8e1 	bl	8007de8 <osKernelGetTickCount>
 8018c26:	4602      	mov	r2, r0
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	3710      	adds	r7, #16
 8018c30:	46bd      	mov	sp, r7
 8018c32:	bd80      	pop	{r7, pc}

08018c34 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b082      	sub	sp, #8
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	4618      	mov	r0, r3
 8018c42:	f7ef fc3d 	bl	80084c0 <osSemaphoreRelease>
}
 8018c46:	bf00      	nop
 8018c48:	3708      	adds	r7, #8
 8018c4a:	46bd      	mov	sp, r7
 8018c4c:	bd80      	pop	{r7, pc}

08018c4e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018c4e:	b580      	push	{r7, lr}
 8018c50:	b082      	sub	sp, #8
 8018c52:	af00      	add	r7, sp, #0
 8018c54:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	f7ef fc74 	bl	8008548 <osSemaphoreDelete>
}
 8018c60:	bf00      	nop
 8018c62:	3708      	adds	r7, #8
 8018c64:	46bd      	mov	sp, r7
 8018c66:	bd80      	pop	{r7, pc}

08018c68 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018c68:	b480      	push	{r7}
 8018c6a:	b083      	sub	sp, #12
 8018c6c:	af00      	add	r7, sp, #0
 8018c6e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d101      	bne.n	8018c7c <sys_sem_valid+0x14>
    return 0;
 8018c78:	2300      	movs	r3, #0
 8018c7a:	e000      	b.n	8018c7e <sys_sem_valid+0x16>
  else
    return 1;
 8018c7c:	2301      	movs	r3, #1
}
 8018c7e:	4618      	mov	r0, r3
 8018c80:	370c      	adds	r7, #12
 8018c82:	46bd      	mov	sp, r7
 8018c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c88:	4770      	bx	lr

08018c8a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018c8a:	b480      	push	{r7}
 8018c8c:	b083      	sub	sp, #12
 8018c8e:	af00      	add	r7, sp, #0
 8018c90:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	2200      	movs	r2, #0
 8018c96:	601a      	str	r2, [r3, #0]
}
 8018c98:	bf00      	nop
 8018c9a:	370c      	adds	r7, #12
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca2:	4770      	bx	lr

08018ca4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018ca8:	2000      	movs	r0, #0
 8018caa:	f7ef fa1f 	bl	80080ec <osMutexNew>
 8018cae:	4603      	mov	r3, r0
 8018cb0:	4a01      	ldr	r2, [pc, #4]	; (8018cb8 <sys_init+0x14>)
 8018cb2:	6013      	str	r3, [r2, #0]
#endif
}
 8018cb4:	bf00      	nop
 8018cb6:	bd80      	pop	{r7, pc}
 8018cb8:	20011070 	.word	0x20011070

08018cbc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b082      	sub	sp, #8
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018cc4:	2000      	movs	r0, #0
 8018cc6:	f7ef fa11 	bl	80080ec <osMutexNew>
 8018cca:	4602      	mov	r2, r0
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d102      	bne.n	8018cde <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8018cdc:	e000      	b.n	8018ce0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018cde:	2300      	movs	r3, #0
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}

08018ce8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b082      	sub	sp, #8
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f7ef fa7d 	bl	80081f8 <osMutexAcquire>
#endif
}
 8018cfe:	bf00      	nop
 8018d00:	3708      	adds	r7, #8
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd80      	pop	{r7, pc}

08018d06 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018d06:	b580      	push	{r7, lr}
 8018d08:	b082      	sub	sp, #8
 8018d0a:	af00      	add	r7, sp, #0
 8018d0c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	4618      	mov	r0, r3
 8018d14:	f7ef fabb 	bl	800828e <osMutexRelease>
}
 8018d18:	bf00      	nop
 8018d1a:	3708      	adds	r7, #8
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}

08018d20 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b08e      	sub	sp, #56	; 0x38
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	60f8      	str	r0, [r7, #12]
 8018d28:	60b9      	str	r1, [r7, #8]
 8018d2a:	607a      	str	r2, [r7, #4]
 8018d2c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018d2e:	f107 0314 	add.w	r3, r7, #20
 8018d32:	2224      	movs	r2, #36	; 0x24
 8018d34:	2100      	movs	r1, #0
 8018d36:	4618      	mov	r0, r3
 8018d38:	f002 f9de 	bl	801b0f8 <memset>
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	617b      	str	r3, [r7, #20]
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8018d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d46:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018d48:	f107 0314 	add.w	r3, r7, #20
 8018d4c:	461a      	mov	r2, r3
 8018d4e:	6879      	ldr	r1, [r7, #4]
 8018d50:	68b8      	ldr	r0, [r7, #8]
 8018d52:	f7ef f85e 	bl	8007e12 <osThreadNew>
 8018d56:	4603      	mov	r3, r0
#endif
}
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3738      	adds	r7, #56	; 0x38
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}

08018d60 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018d64:	4b04      	ldr	r3, [pc, #16]	; (8018d78 <sys_arch_protect+0x18>)
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	f04f 31ff 	mov.w	r1, #4294967295
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	f7ef fa43 	bl	80081f8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018d72:	2301      	movs	r3, #1
}
 8018d74:	4618      	mov	r0, r3
 8018d76:	bd80      	pop	{r7, pc}
 8018d78:	20011070 	.word	0x20011070

08018d7c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b082      	sub	sp, #8
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018d84:	4b04      	ldr	r3, [pc, #16]	; (8018d98 <sys_arch_unprotect+0x1c>)
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	4618      	mov	r0, r3
 8018d8a:	f7ef fa80 	bl	800828e <osMutexRelease>
}
 8018d8e:	bf00      	nop
 8018d90:	3708      	adds	r7, #8
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}
 8018d96:	bf00      	nop
 8018d98:	20011070 	.word	0x20011070

08018d9c <get_add>:
/**
 * Function: solve the check sum of the data to send
 *           the check sum add all send data except the sum_check itself.
 */
uint8_t get_add(uint8_t* array, const uint8_t length)
{
 8018d9c:	b480      	push	{r7}
 8018d9e:	b085      	sub	sp, #20
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	6078      	str	r0, [r7, #4]
 8018da4:	460b      	mov	r3, r1
 8018da6:	70fb      	strb	r3, [r7, #3]
	uint8_t sum = 0;
 8018da8:	2300      	movs	r3, #0
 8018daa:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i<length; i++)
 8018dac:	2300      	movs	r3, #0
 8018dae:	73bb      	strb	r3, [r7, #14]
 8018db0:	e009      	b.n	8018dc6 <get_add+0x2a>
	{
		sum += array[i];
 8018db2:	7bbb      	ldrb	r3, [r7, #14]
 8018db4:	687a      	ldr	r2, [r7, #4]
 8018db6:	4413      	add	r3, r2
 8018db8:	781a      	ldrb	r2, [r3, #0]
 8018dba:	7bfb      	ldrb	r3, [r7, #15]
 8018dbc:	4413      	add	r3, r2
 8018dbe:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0; i<length; i++)
 8018dc0:	7bbb      	ldrb	r3, [r7, #14]
 8018dc2:	3301      	adds	r3, #1
 8018dc4:	73bb      	strb	r3, [r7, #14]
 8018dc6:	7bba      	ldrb	r2, [r7, #14]
 8018dc8:	78fb      	ldrb	r3, [r7, #3]
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d3f1      	bcc.n	8018db2 <get_add+0x16>
	}
	return sum;
 8018dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	3714      	adds	r7, #20
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dda:	4770      	bx	lr

08018ddc <Update_Current_X_Degree_To_Upper>:
 * 输入：data will be sent
 * 调用：send函数，定义在 communicate.h中
 * 返回：void
 ***************************************************************************/
static void Update_Current_X_Degree_To_Upper(const uint8_t degree)
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b084      	sub	sp, #16
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	4603      	mov	r3, r0
 8018de4:	71fb      	strb	r3, [r7, #7]
	uint8_t senddata[7];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 8018de6:	23fe      	movs	r3, #254	; 0xfe
 8018de8:	723b      	strb	r3, [r7, #8]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 8018dea:	23fe      	movs	r3, #254	; 0xfe
 8018dec:	727b      	strb	r3, [r7, #9]
	senddata[2] = 0x04;
 8018dee:	2304      	movs	r3, #4
 8018df0:	72bb      	strb	r3, [r7, #10]
	senddata[3] = 0x00;
 8018df2:	2300      	movs	r3, #0
 8018df4:	72fb      	strb	r3, [r7, #11]
	senddata[4] = Control_Motor_X_run;
 8018df6:	2300      	movs	r3, #0
 8018df8:	733b      	strb	r3, [r7, #12]
	senddata[5] = degree;
 8018dfa:	79fb      	ldrb	r3, [r7, #7]
 8018dfc:	737b      	strb	r3, [r7, #13]
	senddata[6] = get_add(senddata, sizeof(senddata)-1);
 8018dfe:	f107 0308 	add.w	r3, r7, #8
 8018e02:	2106      	movs	r1, #6
 8018e04:	4618      	mov	r0, r3
 8018e06:	f7ff ffc9 	bl	8018d9c <get_add>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	73bb      	strb	r3, [r7, #14]
	IPC_UART_SendData(senddata, sizeof(senddata));
 8018e0e:	f107 0308 	add.w	r3, r7, #8
 8018e12:	2107      	movs	r1, #7
 8018e14:	4618      	mov	r0, r3
 8018e16:	f000 fc83 	bl	8019720 <IPC_UART_SendData>
}
 8018e1a:	bf00      	nop
 8018e1c:	3710      	adds	r7, #16
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}

08018e22 <Update_Current_Y_Degree_To_Upper>:

static void Update_Current_Y_Degree_To_Upper(const uint8_t degree)
{
 8018e22:	b580      	push	{r7, lr}
 8018e24:	b084      	sub	sp, #16
 8018e26:	af00      	add	r7, sp, #0
 8018e28:	4603      	mov	r3, r0
 8018e2a:	71fb      	strb	r3, [r7, #7]
	uint8_t senddata[7];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 8018e2c:	23fe      	movs	r3, #254	; 0xfe
 8018e2e:	723b      	strb	r3, [r7, #8]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 8018e30:	23fe      	movs	r3, #254	; 0xfe
 8018e32:	727b      	strb	r3, [r7, #9]
	senddata[2] = 0x04;
 8018e34:	2304      	movs	r3, #4
 8018e36:	72bb      	strb	r3, [r7, #10]
	senddata[3] = 0x00;
 8018e38:	2300      	movs	r3, #0
 8018e3a:	72fb      	strb	r3, [r7, #11]
	senddata[4] = Control_Motor_Y_run;
 8018e3c:	2301      	movs	r3, #1
 8018e3e:	733b      	strb	r3, [r7, #12]
	senddata[5] = degree;
 8018e40:	79fb      	ldrb	r3, [r7, #7]
 8018e42:	737b      	strb	r3, [r7, #13]
	senddata[6] = get_add(senddata, sizeof(senddata)-1);
 8018e44:	f107 0308 	add.w	r3, r7, #8
 8018e48:	2106      	movs	r1, #6
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7ff ffa6 	bl	8018d9c <get_add>
 8018e50:	4603      	mov	r3, r0
 8018e52:	73bb      	strb	r3, [r7, #14]
	IPC_UART_SendData(senddata, sizeof(senddata));
 8018e54:	f107 0308 	add.w	r3, r7, #8
 8018e58:	2107      	movs	r1, #7
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	f000 fc60 	bl	8019720 <IPC_UART_SendData>
}
 8018e60:	bf00      	nop
 8018e62:	3710      	adds	r7, #16
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}

08018e68 <Update_Welding_State_To_Upper>:

static void Update_Welding_State_To_Upper(const uint8_t state)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b084      	sub	sp, #16
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	4603      	mov	r3, r0
 8018e70:	71fb      	strb	r3, [r7, #7]
	uint8_t senddata[8];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 8018e72:	23fe      	movs	r3, #254	; 0xfe
 8018e74:	723b      	strb	r3, [r7, #8]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 8018e76:	23fe      	movs	r3, #254	; 0xfe
 8018e78:	727b      	strb	r3, [r7, #9]
	senddata[2] = 0x04;
 8018e7a:	2304      	movs	r3, #4
 8018e7c:	72bb      	strb	r3, [r7, #10]
	senddata[3] = 0x00;
 8018e7e:	2300      	movs	r3, #0
 8018e80:	72fb      	strb	r3, [r7, #11]
	senddata[4] = Welding;
 8018e82:	2302      	movs	r3, #2
 8018e84:	733b      	strb	r3, [r7, #12]
	senddata[5] = state;
 8018e86:	79fb      	ldrb	r3, [r7, #7]
 8018e88:	737b      	strb	r3, [r7, #13]
	senddata[6] = get_add(senddata, sizeof(senddata)-1);
 8018e8a:	f107 0308 	add.w	r3, r7, #8
 8018e8e:	2107      	movs	r1, #7
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7ff ff83 	bl	8018d9c <get_add>
 8018e96:	4603      	mov	r3, r0
 8018e98:	73bb      	strb	r3, [r7, #14]
	IPC_UART_SendData(senddata, sizeof(senddata));
 8018e9a:	f107 0308 	add.w	r3, r7, #8
 8018e9e:	2108      	movs	r1, #8
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f000 fc3d 	bl	8019720 <IPC_UART_SendData>
}
 8018ea6:	bf00      	nop
 8018ea8:	3710      	adds	r7, #16
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}
	...

08018eb0 <Update_Current_Warning_To_Upper>:

static void Update_Current_Warning_To_Upper(void)
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b082      	sub	sp, #8
 8018eb4:	af00      	add	r7, sp, #0
	uint8_t senddata[6+WARNING_BYTE];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 8018eb6:	23fe      	movs	r3, #254	; 0xfe
 8018eb8:	703b      	strb	r3, [r7, #0]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 8018eba:	23fe      	movs	r3, #254	; 0xfe
 8018ebc:	707b      	strb	r3, [r7, #1]
	senddata[2] = 0x03 + WARNING_BYTE;
 8018ebe:	2305      	movs	r3, #5
 8018ec0:	70bb      	strb	r3, [r7, #2]
	senddata[3] = 0x00;
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	70fb      	strb	r3, [r7, #3]
	senddata[4] = Alarm_Information;
 8018ec6:	2303      	movs	r3, #3
 8018ec8:	713b      	strb	r3, [r7, #4]
 8018eca:	4b0a      	ldr	r3, [pc, #40]	; (8018ef4 <Update_Current_Warning_To_Upper+0x44>)
 8018ecc:	881b      	ldrh	r3, [r3, #0]
 8018ece:	b29b      	uxth	r3, r3
	memcpy(&senddata[5], warning, sizeof(warning));
 8018ed0:	f8a7 3005 	strh.w	r3, [r7, #5]
	senddata[5+WARNING_BYTE] = get_add(senddata, sizeof(senddata)-1);
 8018ed4:	463b      	mov	r3, r7
 8018ed6:	2107      	movs	r1, #7
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7ff ff5f 	bl	8018d9c <get_add>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	71fb      	strb	r3, [r7, #7]
	IPC_UART_SendData(senddata, sizeof(senddata));
 8018ee2:	463b      	mov	r3, r7
 8018ee4:	2108      	movs	r1, #8
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f000 fc1a 	bl	8019720 <IPC_UART_SendData>
}
 8018eec:	bf00      	nop
 8018eee:	3708      	adds	r7, #8
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bd80      	pop	{r7, pc}
 8018ef4:	20000118 	.word	0x20000118

08018ef8 <Update_Current_Temperature_To_Upper>:

static void Update_Current_Temperature_To_Upper(const float temperature)
{
 8018ef8:	b580      	push	{r7, lr}
 8018efa:	b084      	sub	sp, #16
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t senddata[8];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 8018f02:	23fe      	movs	r3, #254	; 0xfe
 8018f04:	723b      	strb	r3, [r7, #8]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 8018f06:	23fe      	movs	r3, #254	; 0xfe
 8018f08:	727b      	strb	r3, [r7, #9]
	senddata[2] = 0x05;
 8018f0a:	2305      	movs	r3, #5
 8018f0c:	72bb      	strb	r3, [r7, #10]
	senddata[3] = 0x00;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	72fb      	strb	r3, [r7, #11]
	senddata[4] = Current_Temperature;
 8018f12:	2304      	movs	r3, #4
 8018f14:	733b      	strb	r3, [r7, #12]
	senddata[5] = (uint8_t)(temperature*10);
 8018f16:	edd7 7a01 	vldr	s15, [r7, #4]
 8018f1a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018f26:	edc7 7a00 	vstr	s15, [r7]
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	b2db      	uxtb	r3, r3
 8018f2e:	737b      	strb	r3, [r7, #13]
	senddata[6] = (uint8_t)((uint16_t)(temperature*10)>>8);
 8018f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8018f34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018f40:	ee17 3a90 	vmov	r3, s15
 8018f44:	b29b      	uxth	r3, r3
 8018f46:	0a1b      	lsrs	r3, r3, #8
 8018f48:	b29b      	uxth	r3, r3
 8018f4a:	b2db      	uxtb	r3, r3
 8018f4c:	73bb      	strb	r3, [r7, #14]
	senddata[7] = get_add(senddata, sizeof(senddata)-1);
 8018f4e:	f107 0308 	add.w	r3, r7, #8
 8018f52:	2107      	movs	r1, #7
 8018f54:	4618      	mov	r0, r3
 8018f56:	f7ff ff21 	bl	8018d9c <get_add>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	73fb      	strb	r3, [r7, #15]
	IPC_UART_SendData(senddata, sizeof(senddata));
 8018f5e:	f107 0308 	add.w	r3, r7, #8
 8018f62:	2108      	movs	r1, #8
 8018f64:	4618      	mov	r0, r3
 8018f66:	f000 fbdb 	bl	8019720 <IPC_UART_SendData>
}
 8018f6a:	bf00      	nop
 8018f6c:	3710      	adds	r7, #16
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	bd80      	pop	{r7, pc}

08018f72 <Update_Current_Humidity_To_Upper>:

static void Update_Current_Humidity_To_Upper(const float humidity)
{
 8018f72:	b580      	push	{r7, lr}
 8018f74:	b084      	sub	sp, #16
 8018f76:	af00      	add	r7, sp, #0
 8018f78:	ed87 0a01 	vstr	s0, [r7, #4]
	uint8_t senddata[8];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 8018f7c:	23fe      	movs	r3, #254	; 0xfe
 8018f7e:	723b      	strb	r3, [r7, #8]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 8018f80:	23fe      	movs	r3, #254	; 0xfe
 8018f82:	727b      	strb	r3, [r7, #9]
	senddata[2] = 0x05;
 8018f84:	2305      	movs	r3, #5
 8018f86:	72bb      	strb	r3, [r7, #10]
	senddata[3] = 0x00;
 8018f88:	2300      	movs	r3, #0
 8018f8a:	72fb      	strb	r3, [r7, #11]
	senddata[4] = Current_Humidity;
 8018f8c:	2305      	movs	r3, #5
 8018f8e:	733b      	strb	r3, [r7, #12]
	senddata[5] = (uint8_t)(humidity*10);
 8018f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8018f94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018fa0:	edc7 7a00 	vstr	s15, [r7]
 8018fa4:	683b      	ldr	r3, [r7, #0]
 8018fa6:	b2db      	uxtb	r3, r3
 8018fa8:	737b      	strb	r3, [r7, #13]
	senddata[6] = (uint8_t)((uint16_t)(humidity*10)>>8);
 8018faa:	edd7 7a01 	vldr	s15, [r7, #4]
 8018fae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8018fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018fba:	ee17 3a90 	vmov	r3, s15
 8018fbe:	b29b      	uxth	r3, r3
 8018fc0:	0a1b      	lsrs	r3, r3, #8
 8018fc2:	b29b      	uxth	r3, r3
 8018fc4:	b2db      	uxtb	r3, r3
 8018fc6:	73bb      	strb	r3, [r7, #14]
	senddata[7] = get_add(senddata, sizeof(senddata)-1);
 8018fc8:	f107 0308 	add.w	r3, r7, #8
 8018fcc:	2107      	movs	r1, #7
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7ff fee4 	bl	8018d9c <get_add>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	73fb      	strb	r3, [r7, #15]
	IPC_UART_SendData(senddata, sizeof(senddata));
 8018fd8:	f107 0308 	add.w	r3, r7, #8
 8018fdc:	2108      	movs	r1, #8
 8018fde:	4618      	mov	r0, r3
 8018fe0:	f000 fb9e 	bl	8019720 <IPC_UART_SendData>
}
 8018fe4:	bf00      	nop
 8018fe6:	3710      	adds	r7, #16
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	bd80      	pop	{r7, pc}

08018fec <Update_Current_Welding_Length_To_Upper>:

static void Update_Current_Welding_Length_To_Upper(const uint32_t length)
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b086      	sub	sp, #24
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
	uint8_t senddata[10];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 8018ff4:	23fe      	movs	r3, #254	; 0xfe
 8018ff6:	733b      	strb	r3, [r7, #12]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 8018ff8:	23fe      	movs	r3, #254	; 0xfe
 8018ffa:	737b      	strb	r3, [r7, #13]
	senddata[2] = 0x05;
 8018ffc:	2305      	movs	r3, #5
 8018ffe:	73bb      	strb	r3, [r7, #14]
	senddata[3] = 0x00;
 8019000:	2300      	movs	r3, #0
 8019002:	73fb      	strb	r3, [r7, #15]
	senddata[4] = Current_Welding_Length;
 8019004:	2306      	movs	r3, #6
 8019006:	743b      	strb	r3, [r7, #16]
	senddata[5] = (uint8_t)length;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	b2db      	uxtb	r3, r3
 801900c:	747b      	strb	r3, [r7, #17]
	senddata[6] = (uint8_t)(length>>8);
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	0a1b      	lsrs	r3, r3, #8
 8019012:	b2db      	uxtb	r3, r3
 8019014:	74bb      	strb	r3, [r7, #18]
	senddata[7] = (uint8_t)(length>>16);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	0c1b      	lsrs	r3, r3, #16
 801901a:	b2db      	uxtb	r3, r3
 801901c:	74fb      	strb	r3, [r7, #19]
	senddata[8] = (uint8_t)(length>>24);
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	0e1b      	lsrs	r3, r3, #24
 8019022:	b2db      	uxtb	r3, r3
 8019024:	753b      	strb	r3, [r7, #20]
	senddata[9] = get_add(senddata, sizeof(senddata)-1);
 8019026:	f107 030c 	add.w	r3, r7, #12
 801902a:	2109      	movs	r1, #9
 801902c:	4618      	mov	r0, r3
 801902e:	f7ff feb5 	bl	8018d9c <get_add>
 8019032:	4603      	mov	r3, r0
 8019034:	757b      	strb	r3, [r7, #21]
	IPC_UART_SendData(senddata, sizeof(senddata));
 8019036:	f107 030c 	add.w	r3, r7, #12
 801903a:	210a      	movs	r1, #10
 801903c:	4618      	mov	r0, r3
 801903e:	f000 fb6f 	bl	8019720 <IPC_UART_SendData>
}
 8019042:	bf00      	nop
 8019044:	3718      	adds	r7, #24
 8019046:	46bd      	mov	sp, r7
 8019048:	bd80      	pop	{r7, pc}

0801904a <Update_Total_Welding_Length_To_Upper>:

static void Update_Total_Welding_Length_To_Upper(const uint32_t length)
{
 801904a:	b580      	push	{r7, lr}
 801904c:	b086      	sub	sp, #24
 801904e:	af00      	add	r7, sp, #0
 8019050:	6078      	str	r0, [r7, #4]
	uint8_t senddata[10];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 8019052:	23fe      	movs	r3, #254	; 0xfe
 8019054:	733b      	strb	r3, [r7, #12]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 8019056:	23fe      	movs	r3, #254	; 0xfe
 8019058:	737b      	strb	r3, [r7, #13]
	senddata[2] = 0x05;
 801905a:	2305      	movs	r3, #5
 801905c:	73bb      	strb	r3, [r7, #14]
	senddata[3] = 0x00;
 801905e:	2300      	movs	r3, #0
 8019060:	73fb      	strb	r3, [r7, #15]
	senddata[4] = Total_Welding_Length;
 8019062:	2307      	movs	r3, #7
 8019064:	743b      	strb	r3, [r7, #16]
	senddata[5] = (uint8_t)length;
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	b2db      	uxtb	r3, r3
 801906a:	747b      	strb	r3, [r7, #17]
	senddata[6] = (uint8_t)(length>>8);
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	0a1b      	lsrs	r3, r3, #8
 8019070:	b2db      	uxtb	r3, r3
 8019072:	74bb      	strb	r3, [r7, #18]
	senddata[7] = (uint8_t)(length>>16);
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	0c1b      	lsrs	r3, r3, #16
 8019078:	b2db      	uxtb	r3, r3
 801907a:	74fb      	strb	r3, [r7, #19]
	senddata[8] = (uint8_t)(length>>24);
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	0e1b      	lsrs	r3, r3, #24
 8019080:	b2db      	uxtb	r3, r3
 8019082:	753b      	strb	r3, [r7, #20]
	senddata[9] = get_add(senddata, sizeof(senddata)-1);
 8019084:	f107 030c 	add.w	r3, r7, #12
 8019088:	2109      	movs	r1, #9
 801908a:	4618      	mov	r0, r3
 801908c:	f7ff fe86 	bl	8018d9c <get_add>
 8019090:	4603      	mov	r3, r0
 8019092:	757b      	strb	r3, [r7, #21]
	IPC_UART_SendData(senddata, sizeof(senddata));
 8019094:	f107 030c 	add.w	r3, r7, #12
 8019098:	210a      	movs	r1, #10
 801909a:	4618      	mov	r0, r3
 801909c:	f000 fb40 	bl	8019720 <IPC_UART_SendData>
}
 80190a0:	bf00      	nop
 80190a2:	3718      	adds	r7, #24
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd80      	pop	{r7, pc}

080190a8 <Update_Current_Data_And_Time_To_Upper>:

static void Update_Current_Data_And_Time_To_Upper(RTC_DateTypeDef data, RTC_TimeTypeDef time)
{
 80190a8:	b084      	sub	sp, #16
 80190aa:	b580      	push	{r7, lr}
 80190ac:	b086      	sub	sp, #24
 80190ae:	af00      	add	r7, sp, #0
 80190b0:	6078      	str	r0, [r7, #4]
 80190b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80190b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t senddata[13];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 80190ba:	23fe      	movs	r3, #254	; 0xfe
 80190bc:	723b      	strb	r3, [r7, #8]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 80190be:	23fe      	movs	r3, #254	; 0xfe
 80190c0:	727b      	strb	r3, [r7, #9]
	senddata[2] = 0x0a;
 80190c2:	230a      	movs	r3, #10
 80190c4:	72bb      	strb	r3, [r7, #10]
	senddata[3] = 0x00;
 80190c6:	2300      	movs	r3, #0
 80190c8:	72fb      	strb	r3, [r7, #11]
	senddata[4] = Current_Date_And_Time;
 80190ca:	2308      	movs	r3, #8
 80190cc:	733b      	strb	r3, [r7, #12]
	senddata[5] = (uint8_t)(data.Year+2000);
 80190ce:	79fb      	ldrb	r3, [r7, #7]
 80190d0:	3b30      	subs	r3, #48	; 0x30
 80190d2:	b2db      	uxtb	r3, r3
 80190d4:	737b      	strb	r3, [r7, #13]
	senddata[6] = (uint8_t)((data.Year+2000)>>8);
 80190d6:	79fb      	ldrb	r3, [r7, #7]
 80190d8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80190dc:	121b      	asrs	r3, r3, #8
 80190de:	b2db      	uxtb	r3, r3
 80190e0:	73bb      	strb	r3, [r7, #14]
	senddata[7] = (uint8_t)data.Month;
 80190e2:	797b      	ldrb	r3, [r7, #5]
 80190e4:	73fb      	strb	r3, [r7, #15]
	senddata[8] = (uint8_t)data.Date;
 80190e6:	79bb      	ldrb	r3, [r7, #6]
 80190e8:	743b      	strb	r3, [r7, #16]
	senddata[9] = (uint8_t)time.Hours;
 80190ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80190ee:	747b      	strb	r3, [r7, #17]
	senddata[10] = (uint8_t)time.Minutes;
 80190f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80190f4:	74bb      	strb	r3, [r7, #18]
	senddata[11] = (uint8_t)time.Seconds;
 80190f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190fa:	74fb      	strb	r3, [r7, #19]
	senddata[12] = get_add(senddata, sizeof(senddata)-1);
 80190fc:	f107 0308 	add.w	r3, r7, #8
 8019100:	210c      	movs	r1, #12
 8019102:	4618      	mov	r0, r3
 8019104:	f7ff fe4a 	bl	8018d9c <get_add>
 8019108:	4603      	mov	r3, r0
 801910a:	753b      	strb	r3, [r7, #20]
	IPC_UART_SendData(senddata, sizeof(senddata));
 801910c:	f107 0308 	add.w	r3, r7, #8
 8019110:	210d      	movs	r1, #13
 8019112:	4618      	mov	r0, r3
 8019114:	f000 fb04 	bl	8019720 <IPC_UART_SendData>
}
 8019118:	bf00      	nop
 801911a:	3718      	adds	r7, #24
 801911c:	46bd      	mov	sp, r7
 801911e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8019122:	b004      	add	sp, #16
 8019124:	4770      	bx	lr

08019126 <Update_Weld_Track_State_To_Upper>:

static void Update_Weld_Track_State_To_Upper(const uint8_t state)
{
 8019126:	b580      	push	{r7, lr}
 8019128:	b084      	sub	sp, #16
 801912a:	af00      	add	r7, sp, #0
 801912c:	4603      	mov	r3, r0
 801912e:	71fb      	strb	r3, [r7, #7]
	uint8_t senddata[8];
	senddata[0] = BOARD_RESPONSE_HEAD1;
 8019130:	23fe      	movs	r3, #254	; 0xfe
 8019132:	723b      	strb	r3, [r7, #8]
	senddata[1] = BOARD_RESPONSE_HEAD2;
 8019134:	23fe      	movs	r3, #254	; 0xfe
 8019136:	727b      	strb	r3, [r7, #9]
	senddata[2] = 0x04;
 8019138:	2304      	movs	r3, #4
 801913a:	72bb      	strb	r3, [r7, #10]
	senddata[3] = 0x00;
 801913c:	2300      	movs	r3, #0
 801913e:	72fb      	strb	r3, [r7, #11]
	senddata[4] = Weld_Tracking;
 8019140:	2309      	movs	r3, #9
 8019142:	733b      	strb	r3, [r7, #12]
	senddata[5] = state;
 8019144:	79fb      	ldrb	r3, [r7, #7]
 8019146:	737b      	strb	r3, [r7, #13]
	senddata[6] = get_add(senddata, sizeof(senddata)-1);
 8019148:	f107 0308 	add.w	r3, r7, #8
 801914c:	2107      	movs	r1, #7
 801914e:	4618      	mov	r0, r3
 8019150:	f7ff fe24 	bl	8018d9c <get_add>
 8019154:	4603      	mov	r3, r0
 8019156:	73bb      	strb	r3, [r7, #14]
	IPC_UART_SendData(senddata, sizeof(senddata));
 8019158:	f107 0308 	add.w	r3, r7, #8
 801915c:	2108      	movs	r1, #8
 801915e:	4618      	mov	r0, r3
 8019160:	f000 fade 	bl	8019720 <IPC_UART_SendData>
}
 8019164:	bf00      	nop
 8019166:	3710      	adds	r7, #16
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}

0801916c <Cmd_Handle>:
 * Input: the pointer of command array
 *        the length of command array
 * Return: void
 */
void Cmd_Handle(uint8_t* cmd, const uint8_t len)
{
 801916c:	b5b0      	push	{r4, r5, r7, lr}
 801916e:	b08a      	sub	sp, #40	; 0x28
 8019170:	af02      	add	r7, sp, #8
 8019172:	60f8      	str	r0, [r7, #12]
 8019174:	460b      	mov	r3, r1
 8019176:	72fb      	strb	r3, [r7, #11]
	uint8_t msg_prio = 0;
 8019178:	2300      	movs	r3, #0
 801917a:	77fb      	strb	r3, [r7, #31]
	typedef_stepmotor_para stepmotor_para;

	switch(cmd[5])
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	3305      	adds	r3, #5
 8019180:	781b      	ldrb	r3, [r3, #0]
 8019182:	2b0a      	cmp	r3, #10
 8019184:	f200 81ca 	bhi.w	801951c <Cmd_Handle+0x3b0>
 8019188:	a201      	add	r2, pc, #4	; (adr r2, 8019190 <Cmd_Handle+0x24>)
 801918a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801918e:	bf00      	nop
 8019190:	080191bd 	.word	0x080191bd
 8019194:	08019231 	.word	0x08019231
 8019198:	080192a5 	.word	0x080192a5
 801919c:	08019345 	.word	0x08019345
 80191a0:	08019363 	.word	0x08019363
 80191a4:	0801938b 	.word	0x0801938b
 80191a8:	080193b3 	.word	0x080193b3
 80191ac:	080193d7 	.word	0x080193d7
 80191b0:	080193fb 	.word	0x080193fb
 80191b4:	08019435 	.word	0x08019435
 80191b8:	080194c9 	.word	0x080194c9
	{
		case Control_Motor_X_run:
			if(cmd[4] == Write)
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	3304      	adds	r3, #4
 80191c0:	781b      	ldrb	r3, [r3, #0]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d128      	bne.n	8019218 <Cmd_Handle+0xac>
			{
				stepmotor_para.stepmotor = STEPMOTOR_X;
 80191c6:	2300      	movs	r3, #0
 80191c8:	753b      	strb	r3, [r7, #20]
				stepmotor_para.direction = FORWARD;
 80191ca:	2300      	movs	r3, #0
 80191cc:	757b      	strb	r3, [r7, #21]
				stepmotor_para.degree = cmd[6];
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	3306      	adds	r3, #6
 80191d2:	781b      	ldrb	r3, [r3, #0]
 80191d4:	ee07 3a90 	vmov	s15, r3
 80191d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80191dc:	edc7 7a06 	vstr	s15, [r7, #24]
				osMessageQueuePut((osMessageQueueId_t)MotorControlQueueHandle,
 80191e0:	4baa      	ldr	r3, [pc, #680]	; (801948c <Cmd_Handle+0x320>)
 80191e2:	6818      	ldr	r0, [r3, #0]
 80191e4:	7ffa      	ldrb	r2, [r7, #31]
 80191e6:	f107 0114 	add.w	r1, r7, #20
 80191ea:	f04f 33ff 	mov.w	r3, #4294967295
 80191ee:	f7ef fa43 	bl	8008678 <osMessageQueuePut>
						  	  	  (const void *)&stepmotor_para,
								  (uint8_t)msg_prio,
								  (uint32_t)osWaitForever);
				x_degree += stepmotor_para.degree;
 80191f2:	4ba7      	ldr	r3, [pc, #668]	; (8019490 <Cmd_Handle+0x324>)
 80191f4:	781b      	ldrb	r3, [r3, #0]
 80191f6:	ee07 3a90 	vmov	s15, r3
 80191fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80191fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8019202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801920a:	edc7 7a01 	vstr	s15, [r7, #4]
 801920e:	793b      	ldrb	r3, [r7, #4]
 8019210:	b2da      	uxtb	r2, r3
 8019212:	4b9f      	ldr	r3, [pc, #636]	; (8019490 <Cmd_Handle+0x324>)
 8019214:	701a      	strb	r2, [r3, #0]
			}
			else if(cmd[4] == Read)
			{
				Update_Current_X_Degree_To_Upper(x_degree);
			}
			break;
 8019216:	e183      	b.n	8019520 <Cmd_Handle+0x3b4>
			else if(cmd[4] == Read)
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	3304      	adds	r3, #4
 801921c:	781b      	ldrb	r3, [r3, #0]
 801921e:	2b01      	cmp	r3, #1
 8019220:	f040 817e 	bne.w	8019520 <Cmd_Handle+0x3b4>
				Update_Current_X_Degree_To_Upper(x_degree);
 8019224:	4b9a      	ldr	r3, [pc, #616]	; (8019490 <Cmd_Handle+0x324>)
 8019226:	781b      	ldrb	r3, [r3, #0]
 8019228:	4618      	mov	r0, r3
 801922a:	f7ff fdd7 	bl	8018ddc <Update_Current_X_Degree_To_Upper>
			break;
 801922e:	e177      	b.n	8019520 <Cmd_Handle+0x3b4>

		case Control_Motor_Y_run:
			if(cmd[4] == Write)
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	3304      	adds	r3, #4
 8019234:	781b      	ldrb	r3, [r3, #0]
 8019236:	2b00      	cmp	r3, #0
 8019238:	d128      	bne.n	801928c <Cmd_Handle+0x120>
			{
				stepmotor_para.stepmotor = STEPMOTOR_Y;
 801923a:	2301      	movs	r3, #1
 801923c:	753b      	strb	r3, [r7, #20]
				stepmotor_para.direction = FORWARD;
 801923e:	2300      	movs	r3, #0
 8019240:	757b      	strb	r3, [r7, #21]
				stepmotor_para.degree = cmd[6];
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	3306      	adds	r3, #6
 8019246:	781b      	ldrb	r3, [r3, #0]
 8019248:	ee07 3a90 	vmov	s15, r3
 801924c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019250:	edc7 7a06 	vstr	s15, [r7, #24]
				osMessageQueuePut((osMessageQueueId_t)MotorControlQueueHandle,
 8019254:	4b8d      	ldr	r3, [pc, #564]	; (801948c <Cmd_Handle+0x320>)
 8019256:	6818      	ldr	r0, [r3, #0]
 8019258:	7ffa      	ldrb	r2, [r7, #31]
 801925a:	f107 0114 	add.w	r1, r7, #20
 801925e:	f04f 33ff 	mov.w	r3, #4294967295
 8019262:	f7ef fa09 	bl	8008678 <osMessageQueuePut>
						  	  	  (const void *)&stepmotor_para,
								  (uint8_t)msg_prio,
								  (uint32_t)osWaitForever);
				y_degree += stepmotor_para.degree;
 8019266:	4b8b      	ldr	r3, [pc, #556]	; (8019494 <Cmd_Handle+0x328>)
 8019268:	781b      	ldrb	r3, [r3, #0]
 801926a:	ee07 3a90 	vmov	s15, r3
 801926e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019272:	edd7 7a06 	vldr	s15, [r7, #24]
 8019276:	ee77 7a27 	vadd.f32	s15, s14, s15
 801927a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801927e:	edc7 7a01 	vstr	s15, [r7, #4]
 8019282:	793b      	ldrb	r3, [r7, #4]
 8019284:	b2da      	uxtb	r2, r3
 8019286:	4b83      	ldr	r3, [pc, #524]	; (8019494 <Cmd_Handle+0x328>)
 8019288:	701a      	strb	r2, [r3, #0]
			}
			else if(cmd[4] == Read)
			{
				Update_Current_Y_Degree_To_Upper(y_degree);
			}
			break;
 801928a:	e14b      	b.n	8019524 <Cmd_Handle+0x3b8>
			else if(cmd[4] == Read)
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	3304      	adds	r3, #4
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	2b01      	cmp	r3, #1
 8019294:	f040 8146 	bne.w	8019524 <Cmd_Handle+0x3b8>
				Update_Current_Y_Degree_To_Upper(y_degree);
 8019298:	4b7e      	ldr	r3, [pc, #504]	; (8019494 <Cmd_Handle+0x328>)
 801929a:	781b      	ldrb	r3, [r3, #0]
 801929c:	4618      	mov	r0, r3
 801929e:	f7ff fdc0 	bl	8018e22 <Update_Current_Y_Degree_To_Upper>
			break;
 80192a2:	e13f      	b.n	8019524 <Cmd_Handle+0x3b8>

		case Welding:
			if(cmd[4] == Write)
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	3304      	adds	r3, #4
 80192a8:	781b      	ldrb	r3, [r3, #0]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d13e      	bne.n	801932c <Cmd_Handle+0x1c0>
			{
				if(cmd[6] == 0x01)  // start welding
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	3306      	adds	r3, #6
 80192b2:	781b      	ldrb	r3, [r3, #0]
 80192b4:	2b01      	cmp	r3, #1
 80192b6:	d119      	bne.n	80192ec <Cmd_Handle+0x180>
				{
					HAL_GPIO_WritePin(LASER_INTERLOCK_GPIO_Port, LASER_INTERLOCK_Pin, GPIO_PIN_RESET);
 80192b8:	2200      	movs	r2, #0
 80192ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80192be:	4876      	ldr	r0, [pc, #472]	; (8019498 <Cmd_Handle+0x32c>)
 80192c0:	f7eb f8c6 	bl	8004450 <HAL_GPIO_WritePin>
					laser_on_cmd[7] = get_add(laser_on_cmd, sizeof(laser_on_cmd)-1);
 80192c4:	2107      	movs	r1, #7
 80192c6:	4875      	ldr	r0, [pc, #468]	; (801949c <Cmd_Handle+0x330>)
 80192c8:	f7ff fd68 	bl	8018d9c <get_add>
 80192cc:	4603      	mov	r3, r0
 80192ce:	461a      	mov	r2, r3
 80192d0:	4b72      	ldr	r3, [pc, #456]	; (801949c <Cmd_Handle+0x330>)
 80192d2:	71da      	strb	r2, [r3, #7]

					osMessageQueuePut((osMessageQueueId_t)LaserEthernetQueueHandle,
 80192d4:	4b72      	ldr	r3, [pc, #456]	; (80194a0 <Cmd_Handle+0x334>)
 80192d6:	6818      	ldr	r0, [r3, #0]
 80192d8:	7ffa      	ldrb	r2, [r7, #31]
 80192da:	f04f 33ff 	mov.w	r3, #4294967295
 80192de:	496f      	ldr	r1, [pc, #444]	; (801949c <Cmd_Handle+0x330>)
 80192e0:	f7ef f9ca 	bl	8008678 <osMessageQueuePut>
					  				  (const void *)laser_on_cmd,
					  				  (uint8_t)msg_prio,
					  				  (uint32_t)osWaitForever);

					welding_state = 0x00;
 80192e4:	4b6f      	ldr	r3, [pc, #444]	; (80194a4 <Cmd_Handle+0x338>)
 80192e6:	2200      	movs	r2, #0
 80192e8:	701a      	strb	r2, [r3, #0]
			}
			else if(cmd[4] == Read)
			{
				Update_Welding_State_To_Upper(welding_state);
			}
			break;
 80192ea:	e11d      	b.n	8019528 <Cmd_Handle+0x3bc>
				else if(cmd[6] == 0x00)  // stop welding
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	3306      	adds	r3, #6
 80192f0:	781b      	ldrb	r3, [r3, #0]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	f040 8118 	bne.w	8019528 <Cmd_Handle+0x3bc>
					HAL_GPIO_WritePin(LASER_INTERLOCK_GPIO_Port, LASER_INTERLOCK_Pin, GPIO_PIN_SET);
 80192f8:	2201      	movs	r2, #1
 80192fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80192fe:	4866      	ldr	r0, [pc, #408]	; (8019498 <Cmd_Handle+0x32c>)
 8019300:	f7eb f8a6 	bl	8004450 <HAL_GPIO_WritePin>
					laser_off_cmd[7] = get_add(laser_off_cmd, sizeof(laser_off_cmd)-1);
 8019304:	2107      	movs	r1, #7
 8019306:	4868      	ldr	r0, [pc, #416]	; (80194a8 <Cmd_Handle+0x33c>)
 8019308:	f7ff fd48 	bl	8018d9c <get_add>
 801930c:	4603      	mov	r3, r0
 801930e:	461a      	mov	r2, r3
 8019310:	4b65      	ldr	r3, [pc, #404]	; (80194a8 <Cmd_Handle+0x33c>)
 8019312:	71da      	strb	r2, [r3, #7]
					osMessageQueuePut((osMessageQueueId_t)LaserEthernetQueueHandle,
 8019314:	4b62      	ldr	r3, [pc, #392]	; (80194a0 <Cmd_Handle+0x334>)
 8019316:	6818      	ldr	r0, [r3, #0]
 8019318:	7ffa      	ldrb	r2, [r7, #31]
 801931a:	f04f 33ff 	mov.w	r3, #4294967295
 801931e:	4962      	ldr	r1, [pc, #392]	; (80194a8 <Cmd_Handle+0x33c>)
 8019320:	f7ef f9aa 	bl	8008678 <osMessageQueuePut>
					welding_state = 0x01;
 8019324:	4b5f      	ldr	r3, [pc, #380]	; (80194a4 <Cmd_Handle+0x338>)
 8019326:	2201      	movs	r2, #1
 8019328:	701a      	strb	r2, [r3, #0]
			break;
 801932a:	e0fd      	b.n	8019528 <Cmd_Handle+0x3bc>
			else if(cmd[4] == Read)
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	3304      	adds	r3, #4
 8019330:	781b      	ldrb	r3, [r3, #0]
 8019332:	2b01      	cmp	r3, #1
 8019334:	f040 80f8 	bne.w	8019528 <Cmd_Handle+0x3bc>
				Update_Welding_State_To_Upper(welding_state);
 8019338:	4b5a      	ldr	r3, [pc, #360]	; (80194a4 <Cmd_Handle+0x338>)
 801933a:	781b      	ldrb	r3, [r3, #0]
 801933c:	4618      	mov	r0, r3
 801933e:	f7ff fd93 	bl	8018e68 <Update_Welding_State_To_Upper>
			break;
 8019342:	e0f1      	b.n	8019528 <Cmd_Handle+0x3bc>

		case Alarm_Information:
			if(cmd[4] == Write)
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	3304      	adds	r3, #4
 8019348:	781b      	ldrb	r3, [r3, #0]
 801934a:	2b00      	cmp	r3, #0
 801934c:	f000 80ee 	beq.w	801952c <Cmd_Handle+0x3c0>
			{
				// do nothing
			}
			else if(cmd[4] == Read)
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	3304      	adds	r3, #4
 8019354:	781b      	ldrb	r3, [r3, #0]
 8019356:	2b01      	cmp	r3, #1
 8019358:	f040 80e8 	bne.w	801952c <Cmd_Handle+0x3c0>
			{
				Update_Current_Warning_To_Upper();
 801935c:	f7ff fda8 	bl	8018eb0 <Update_Current_Warning_To_Upper>
			}
			break;
 8019360:	e0e4      	b.n	801952c <Cmd_Handle+0x3c0>

		case Current_Temperature:
			if(cmd[4] == Write)
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	3304      	adds	r3, #4
 8019366:	781b      	ldrb	r3, [r3, #0]
 8019368:	2b00      	cmp	r3, #0
 801936a:	f000 80e1 	beq.w	8019530 <Cmd_Handle+0x3c4>
			{
				// do nothing
			}
			else if(cmd[4] == Read)
 801936e:	68fb      	ldr	r3, [r7, #12]
 8019370:	3304      	adds	r3, #4
 8019372:	781b      	ldrb	r3, [r3, #0]
 8019374:	2b01      	cmp	r3, #1
 8019376:	f040 80db 	bne.w	8019530 <Cmd_Handle+0x3c4>
			{
				Update_Current_Temperature_To_Upper(shtc3_temp);
 801937a:	4b4c      	ldr	r3, [pc, #304]	; (80194ac <Cmd_Handle+0x340>)
 801937c:	edd3 7a00 	vldr	s15, [r3]
 8019380:	eeb0 0a67 	vmov.f32	s0, s15
 8019384:	f7ff fdb8 	bl	8018ef8 <Update_Current_Temperature_To_Upper>
			}
			break;
 8019388:	e0d2      	b.n	8019530 <Cmd_Handle+0x3c4>

		case Current_Humidity:
			if(cmd[4] == Write)
 801938a:	68fb      	ldr	r3, [r7, #12]
 801938c:	3304      	adds	r3, #4
 801938e:	781b      	ldrb	r3, [r3, #0]
 8019390:	2b00      	cmp	r3, #0
 8019392:	f000 80cf 	beq.w	8019534 <Cmd_Handle+0x3c8>
			{
				// do nothing
			}
			else if(cmd[4] == Read)
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	3304      	adds	r3, #4
 801939a:	781b      	ldrb	r3, [r3, #0]
 801939c:	2b01      	cmp	r3, #1
 801939e:	f040 80c9 	bne.w	8019534 <Cmd_Handle+0x3c8>
			{
				Update_Current_Humidity_To_Upper(shtc3_hum);
 80193a2:	4b43      	ldr	r3, [pc, #268]	; (80194b0 <Cmd_Handle+0x344>)
 80193a4:	edd3 7a00 	vldr	s15, [r3]
 80193a8:	eeb0 0a67 	vmov.f32	s0, s15
 80193ac:	f7ff fde1 	bl	8018f72 <Update_Current_Humidity_To_Upper>
			}
			break;
 80193b0:	e0c0      	b.n	8019534 <Cmd_Handle+0x3c8>

		case Current_Welding_Length:
			if(cmd[4] == Write)
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	3304      	adds	r3, #4
 80193b6:	781b      	ldrb	r3, [r3, #0]
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	f000 80bd 	beq.w	8019538 <Cmd_Handle+0x3cc>
			{
				// do nothing
			}
			else if(cmd[4] == Read)
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	3304      	adds	r3, #4
 80193c2:	781b      	ldrb	r3, [r3, #0]
 80193c4:	2b01      	cmp	r3, #1
 80193c6:	f040 80b7 	bne.w	8019538 <Cmd_Handle+0x3cc>
			{
				Update_Current_Welding_Length_To_Upper(current_welding_length);
 80193ca:	4b3a      	ldr	r3, [pc, #232]	; (80194b4 <Cmd_Handle+0x348>)
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	4618      	mov	r0, r3
 80193d0:	f7ff fe0c 	bl	8018fec <Update_Current_Welding_Length_To_Upper>
			}
			break;
 80193d4:	e0b0      	b.n	8019538 <Cmd_Handle+0x3cc>

		case Total_Welding_Length:
			if(cmd[4] == Write)
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	3304      	adds	r3, #4
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	2b00      	cmp	r3, #0
 80193de:	f000 80ad 	beq.w	801953c <Cmd_Handle+0x3d0>
			{
				// TODO: get total welding length from the master
			}
			else if(cmd[4]==Read)
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	3304      	adds	r3, #4
 80193e6:	781b      	ldrb	r3, [r3, #0]
 80193e8:	2b01      	cmp	r3, #1
 80193ea:	f040 80a7 	bne.w	801953c <Cmd_Handle+0x3d0>
			{
				Update_Total_Welding_Length_To_Upper(total_welding_length);
 80193ee:	4b32      	ldr	r3, [pc, #200]	; (80194b8 <Cmd_Handle+0x34c>)
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	4618      	mov	r0, r3
 80193f4:	f7ff fe29 	bl	801904a <Update_Total_Welding_Length_To_Upper>
			}
			break;
 80193f8:	e0a0      	b.n	801953c <Cmd_Handle+0x3d0>

		case Current_Date_And_Time:
			if(cmd[4] == Write)
 80193fa:	68fb      	ldr	r3, [r7, #12]
 80193fc:	3304      	adds	r3, #4
 80193fe:	781b      	ldrb	r3, [r3, #0]
 8019400:	2b00      	cmp	r3, #0
 8019402:	f000 809d 	beq.w	8019540 <Cmd_Handle+0x3d4>
			{
				// do nothing
			}
			else if(cmd[4] == Read)
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	3304      	adds	r3, #4
 801940a:	781b      	ldrb	r3, [r3, #0]
 801940c:	2b01      	cmp	r3, #1
 801940e:	f040 8097 	bne.w	8019540 <Cmd_Handle+0x3d4>
			{
				Update_Current_Data_And_Time_To_Upper(DateNow, TimeNow);
 8019412:	4b2a      	ldr	r3, [pc, #168]	; (80194bc <Cmd_Handle+0x350>)
 8019414:	4a2a      	ldr	r2, [pc, #168]	; (80194c0 <Cmd_Handle+0x354>)
 8019416:	6812      	ldr	r2, [r2, #0]
 8019418:	2500      	movs	r5, #0
 801941a:	4615      	mov	r5, r2
 801941c:	466c      	mov	r4, sp
 801941e:	f103 020c 	add.w	r2, r3, #12
 8019422:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019426:	e884 0003 	stmia.w	r4, {r0, r1}
 801942a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801942c:	4628      	mov	r0, r5
 801942e:	f7ff fe3b 	bl	80190a8 <Update_Current_Data_And_Time_To_Upper>
			}
			break;
 8019432:	e085      	b.n	8019540 <Cmd_Handle+0x3d4>

		case Weld_Tracking:
			if(cmd[4] == Write)
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	3304      	adds	r3, #4
 8019438:	781b      	ldrb	r3, [r3, #0]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d11b      	bne.n	8019476 <Cmd_Handle+0x30a>
			{
				if(cmd[6] == 0x00)  // close
 801943e:	68fb      	ldr	r3, [r7, #12]
 8019440:	3306      	adds	r3, #6
 8019442:	781b      	ldrb	r3, [r3, #0]
 8019444:	2b00      	cmp	r3, #0
 8019446:	d108      	bne.n	801945a <Cmd_Handle+0x2ee>
				{
					HAL_GPIO_WritePin(LINE_LASER_GPIO_Port, LINE_LASER_Pin, GPIO_PIN_SET);
 8019448:	2201      	movs	r2, #1
 801944a:	2180      	movs	r1, #128	; 0x80
 801944c:	4812      	ldr	r0, [pc, #72]	; (8019498 <Cmd_Handle+0x32c>)
 801944e:	f7ea ffff 	bl	8004450 <HAL_GPIO_WritePin>
					weld_track_state = 0x00;
 8019452:	4b1c      	ldr	r3, [pc, #112]	; (80194c4 <Cmd_Handle+0x358>)
 8019454:	2200      	movs	r2, #0
 8019456:	701a      	strb	r2, [r3, #0]
			}
			else if(cmd[4] == Read)
			{
				Update_Weld_Track_State_To_Upper(weld_track_state);
			}
			break;
 8019458:	e074      	b.n	8019544 <Cmd_Handle+0x3d8>
				else if(cmd[6] == 0x01)  // open
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	3306      	adds	r3, #6
 801945e:	781b      	ldrb	r3, [r3, #0]
 8019460:	2b01      	cmp	r3, #1
 8019462:	d16f      	bne.n	8019544 <Cmd_Handle+0x3d8>
					HAL_GPIO_WritePin(LINE_LASER_GPIO_Port, LINE_LASER_Pin, GPIO_PIN_RESET);
 8019464:	2200      	movs	r2, #0
 8019466:	2180      	movs	r1, #128	; 0x80
 8019468:	480b      	ldr	r0, [pc, #44]	; (8019498 <Cmd_Handle+0x32c>)
 801946a:	f7ea fff1 	bl	8004450 <HAL_GPIO_WritePin>
					weld_track_state = 0x01;
 801946e:	4b15      	ldr	r3, [pc, #84]	; (80194c4 <Cmd_Handle+0x358>)
 8019470:	2201      	movs	r2, #1
 8019472:	701a      	strb	r2, [r3, #0]
			break;
 8019474:	e066      	b.n	8019544 <Cmd_Handle+0x3d8>
			else if(cmd[4] == Read)
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	3304      	adds	r3, #4
 801947a:	781b      	ldrb	r3, [r3, #0]
 801947c:	2b01      	cmp	r3, #1
 801947e:	d161      	bne.n	8019544 <Cmd_Handle+0x3d8>
				Update_Weld_Track_State_To_Upper(weld_track_state);
 8019480:	4b10      	ldr	r3, [pc, #64]	; (80194c4 <Cmd_Handle+0x358>)
 8019482:	781b      	ldrb	r3, [r3, #0]
 8019484:	4618      	mov	r0, r3
 8019486:	f7ff fe4e 	bl	8019126 <Update_Weld_Track_State_To_Upper>
			break;
 801948a:	e05b      	b.n	8019544 <Cmd_Handle+0x3d8>
 801948c:	2000a608 	.word	0x2000a608
 8019490:	2000a66c 	.word	0x2000a66c
 8019494:	2000a600 	.word	0x2000a600
 8019498:	40020c00 	.word	0x40020c00
 801949c:	2000001c 	.word	0x2000001c
 80194a0:	2000a6e4 	.word	0x2000a6e4
 80194a4:	20004ca7 	.word	0x20004ca7
 80194a8:	20000024 	.word	0x20000024
 80194ac:	2000a6e0 	.word	0x2000a6e0
 80194b0:	2000a530 	.word	0x2000a530
 80194b4:	20000114 	.word	0x20000114
 80194b8:	2000a694 	.word	0x2000a694
 80194bc:	2000a5e4 	.word	0x2000a5e4
 80194c0:	2000a6dc 	.word	0x2000a6dc
 80194c4:	20004ca6 	.word	0x20004ca6

		case Check_Parameter:
			Update_Current_X_Degree_To_Upper(x_degree);
 80194c8:	4b21      	ldr	r3, [pc, #132]	; (8019550 <Cmd_Handle+0x3e4>)
 80194ca:	781b      	ldrb	r3, [r3, #0]
 80194cc:	4618      	mov	r0, r3
 80194ce:	f7ff fc85 	bl	8018ddc <Update_Current_X_Degree_To_Upper>
			Update_Current_Y_Degree_To_Upper(y_degree);
 80194d2:	4b20      	ldr	r3, [pc, #128]	; (8019554 <Cmd_Handle+0x3e8>)
 80194d4:	781b      	ldrb	r3, [r3, #0]
 80194d6:	4618      	mov	r0, r3
 80194d8:	f7ff fca3 	bl	8018e22 <Update_Current_Y_Degree_To_Upper>
			Update_Welding_State_To_Upper(welding_state);
 80194dc:	4b1e      	ldr	r3, [pc, #120]	; (8019558 <Cmd_Handle+0x3ec>)
 80194de:	781b      	ldrb	r3, [r3, #0]
 80194e0:	4618      	mov	r0, r3
 80194e2:	f7ff fcc1 	bl	8018e68 <Update_Welding_State_To_Upper>
			Update_Current_Warning_To_Upper();
 80194e6:	f7ff fce3 	bl	8018eb0 <Update_Current_Warning_To_Upper>
			Update_Current_Temperature_To_Upper(shtc3_temp);
 80194ea:	4b1c      	ldr	r3, [pc, #112]	; (801955c <Cmd_Handle+0x3f0>)
 80194ec:	edd3 7a00 	vldr	s15, [r3]
 80194f0:	eeb0 0a67 	vmov.f32	s0, s15
 80194f4:	f7ff fd00 	bl	8018ef8 <Update_Current_Temperature_To_Upper>
			Update_Current_Humidity_To_Upper(shtc3_hum);
 80194f8:	4b19      	ldr	r3, [pc, #100]	; (8019560 <Cmd_Handle+0x3f4>)
 80194fa:	edd3 7a00 	vldr	s15, [r3]
 80194fe:	eeb0 0a67 	vmov.f32	s0, s15
 8019502:	f7ff fd36 	bl	8018f72 <Update_Current_Humidity_To_Upper>
			Update_Total_Welding_Length_To_Upper(total_welding_length);
 8019506:	4b17      	ldr	r3, [pc, #92]	; (8019564 <Cmd_Handle+0x3f8>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	4618      	mov	r0, r3
 801950c:	f7ff fd9d 	bl	801904a <Update_Total_Welding_Length_To_Upper>
			Update_Weld_Track_State_To_Upper(weld_track_state);
 8019510:	4b15      	ldr	r3, [pc, #84]	; (8019568 <Cmd_Handle+0x3fc>)
 8019512:	781b      	ldrb	r3, [r3, #0]
 8019514:	4618      	mov	r0, r3
 8019516:	f7ff fe06 	bl	8019126 <Update_Weld_Track_State_To_Upper>
			break;
 801951a:	e014      	b.n	8019546 <Cmd_Handle+0x3da>

		default:
			break;
 801951c:	bf00      	nop
 801951e:	e012      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 8019520:	bf00      	nop
 8019522:	e010      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 8019524:	bf00      	nop
 8019526:	e00e      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 8019528:	bf00      	nop
 801952a:	e00c      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 801952c:	bf00      	nop
 801952e:	e00a      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 8019530:	bf00      	nop
 8019532:	e008      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 8019534:	bf00      	nop
 8019536:	e006      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 8019538:	bf00      	nop
 801953a:	e004      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 801953c:	bf00      	nop
 801953e:	e002      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 8019540:	bf00      	nop
 8019542:	e000      	b.n	8019546 <Cmd_Handle+0x3da>
			break;
 8019544:	bf00      	nop
	}
}
 8019546:	bf00      	nop
 8019548:	3720      	adds	r7, #32
 801954a:	46bd      	mov	sp, r7
 801954c:	bdb0      	pop	{r4, r5, r7, pc}
 801954e:	bf00      	nop
 8019550:	2000a66c 	.word	0x2000a66c
 8019554:	2000a600 	.word	0x2000a600
 8019558:	20004ca7 	.word	0x20004ca7
 801955c:	2000a6e0 	.word	0x2000a6e0
 8019560:	2000a530 	.word	0x2000a530
 8019564:	2000a694 	.word	0x2000a694
 8019568:	20004ca6 	.word	0x20004ca6

0801956c <software_init>:
 * 参数：void
 * 返回：void
 * 备注：所有用到的模块初始化
 */
void software_init(void)
{
 801956c:	b480      	push	{r7}
 801956e:	af00      	add	r7, sp, #0
//	SHTC3_Init();      //shtc3初始化
	//TODO 水冷机初始化
}
 8019570:	bf00      	nop
 8019572:	46bd      	mov	sp, r7
 8019574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019578:	4770      	bx	lr
	...

0801957c <get_eeprom_data>:
 * 参数：void
 * 返回：void
 * 备注：
 */
void get_eeprom_data(void)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b084      	sub	sp, #16
 8019580:	af00      	add	r7, sp, #0
	uint8_t temp[12];
	M24512_ReadBuffer(temp, TOTAL_WELDING_LENGTH_ADDRESS, 12);
 8019582:	1d3b      	adds	r3, r7, #4
 8019584:	220c      	movs	r2, #12
 8019586:	2100      	movs	r1, #0
 8019588:	4618      	mov	r0, r3
 801958a:	f000 f8e9 	bl	8019760 <M24512_ReadBuffer>

	total_welding_length = temp[0] | (temp[1]<<8) | (temp[2]<<16) | (temp[3]<<24);
 801958e:	793b      	ldrb	r3, [r7, #4]
 8019590:	461a      	mov	r2, r3
 8019592:	797b      	ldrb	r3, [r7, #5]
 8019594:	021b      	lsls	r3, r3, #8
 8019596:	431a      	orrs	r2, r3
 8019598:	79bb      	ldrb	r3, [r7, #6]
 801959a:	041b      	lsls	r3, r3, #16
 801959c:	431a      	orrs	r2, r3
 801959e:	79fb      	ldrb	r3, [r7, #7]
 80195a0:	061b      	lsls	r3, r3, #24
 80195a2:	4313      	orrs	r3, r2
 80195a4:	461a      	mov	r2, r3
 80195a6:	4b17      	ldr	r3, [pc, #92]	; (8019604 <get_eeprom_data+0x88>)
 80195a8:	601a      	str	r2, [r3, #0]
	x_degree = temp[4] | (temp[5]<<8) | (temp[6]<<16) | (temp[7]<<24);
 80195aa:	7a3b      	ldrb	r3, [r7, #8]
 80195ac:	b25a      	sxtb	r2, r3
 80195ae:	7a7b      	ldrb	r3, [r7, #9]
 80195b0:	021b      	lsls	r3, r3, #8
 80195b2:	b25b      	sxtb	r3, r3
 80195b4:	4313      	orrs	r3, r2
 80195b6:	b25a      	sxtb	r2, r3
 80195b8:	7abb      	ldrb	r3, [r7, #10]
 80195ba:	041b      	lsls	r3, r3, #16
 80195bc:	b25b      	sxtb	r3, r3
 80195be:	4313      	orrs	r3, r2
 80195c0:	b25a      	sxtb	r2, r3
 80195c2:	7afb      	ldrb	r3, [r7, #11]
 80195c4:	061b      	lsls	r3, r3, #24
 80195c6:	b25b      	sxtb	r3, r3
 80195c8:	4313      	orrs	r3, r2
 80195ca:	b25b      	sxtb	r3, r3
 80195cc:	b2da      	uxtb	r2, r3
 80195ce:	4b0e      	ldr	r3, [pc, #56]	; (8019608 <get_eeprom_data+0x8c>)
 80195d0:	701a      	strb	r2, [r3, #0]
	y_degree = temp[8] | (temp[9]<<8) | (temp[10]<<16) | (temp[11]<<24);
 80195d2:	7b3b      	ldrb	r3, [r7, #12]
 80195d4:	b25a      	sxtb	r2, r3
 80195d6:	7b7b      	ldrb	r3, [r7, #13]
 80195d8:	021b      	lsls	r3, r3, #8
 80195da:	b25b      	sxtb	r3, r3
 80195dc:	4313      	orrs	r3, r2
 80195de:	b25a      	sxtb	r2, r3
 80195e0:	7bbb      	ldrb	r3, [r7, #14]
 80195e2:	041b      	lsls	r3, r3, #16
 80195e4:	b25b      	sxtb	r3, r3
 80195e6:	4313      	orrs	r3, r2
 80195e8:	b25a      	sxtb	r2, r3
 80195ea:	7bfb      	ldrb	r3, [r7, #15]
 80195ec:	061b      	lsls	r3, r3, #24
 80195ee:	b25b      	sxtb	r3, r3
 80195f0:	4313      	orrs	r3, r2
 80195f2:	b25b      	sxtb	r3, r3
 80195f4:	b2da      	uxtb	r2, r3
 80195f6:	4b05      	ldr	r3, [pc, #20]	; (801960c <get_eeprom_data+0x90>)
 80195f8:	701a      	strb	r2, [r3, #0]

}
 80195fa:	bf00      	nop
 80195fc:	3710      	adds	r7, #16
 80195fe:	46bd      	mov	sp, r7
 8019600:	bd80      	pop	{r7, pc}
 8019602:	bf00      	nop
 8019604:	2000a694 	.word	0x2000a694
 8019608:	2000a66c 	.word	0x2000a66c
 801960c:	2000a600 	.word	0x2000a600

08019610 <check_machine>:
 * 参数：void
 * 返回：void
 * 备注：所有用到的模块自检一遍，如果有问题，上传给上位机处理
 */
void check_machine(void)
{
 8019610:	b480      	push	{r7}
 8019612:	af00      	add	r7, sp, #0
//		warning[0] = OTHER_WARNING_BIT;
//		waring[1] = M24512_INIT_ERROR;
	}
	// 自检通过，停止闪烁
//	HAL_TIM_Base_Stop_IT(&htim7);
}
 8019614:	bf00      	nop
 8019616:	46bd      	mov	sp, r7
 8019618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801961c:	4770      	bx	lr
	...

08019620 <laser_tcp_init>:
 *           passing the msg to TCP_thread
 * &return the connection pointer to the laser
 */
struct netconn *
laser_tcp_init(void)
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b082      	sub	sp, #8
 8019624:	af00      	add	r7, sp, #0
	struct netconn *laser_conn;
	ip_addr_t laser_ip;

	laser_conn = netconn_new(NETCONN_TCP);
 8019626:	2200      	movs	r2, #0
 8019628:	2100      	movs	r1, #0
 801962a:	2010      	movs	r0, #16
 801962c:	f7f2 fbcc 	bl	800bdc8 <netconn_new_with_proto_and_callback>
 8019630:	6078      	str	r0, [r7, #4]
	if (laser_conn != NULL)
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	2b00      	cmp	r3, #0
 8019636:	d008      	beq.n	801964a <laser_tcp_init+0x2a>
	{
		IP4_ADDR(&laser_ip, LASER_IP_ADDR0, LASER_IP_ADDR1, LASER_IP_ADDR2, LASER_IP_ADDR3);
 8019638:	4b06      	ldr	r3, [pc, #24]	; (8019654 <laser_tcp_init+0x34>)
 801963a:	603b      	str	r3, [r7, #0]
		netconn_bind(laser_conn, &laser_ip, LASER_PORT);
 801963c:	463b      	mov	r3, r7
 801963e:	f640 5205 	movw	r2, #3333	; 0xd05
 8019642:	4619      	mov	r1, r3
 8019644:	6878      	ldr	r0, [r7, #4]
 8019646:	f7f2 fc39 	bl	800bebc <netconn_bind>
	}

	return laser_conn;
 801964a:	687b      	ldr	r3, [r7, #4]
}
 801964c:	4618      	mov	r0, r3
 801964e:	3708      	adds	r7, #8
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}
 8019654:	2102a8c0 	.word	0x2102a8c0

08019658 <laser_tcp_comm>:
 * @param len: the length of data
 * @param new_buff: the pointer to the netbuf of receive message
 */
void
laser_tcp_comm(const void *array, uint16_t len, struct netconn *new_conn)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b088      	sub	sp, #32
 801965c:	af00      	add	r7, sp, #0
 801965e:	60f8      	str	r0, [r7, #12]
 8019660:	460b      	mov	r3, r1
 8019662:	607a      	str	r2, [r7, #4]
 8019664:	817b      	strh	r3, [r7, #10]
    struct netbuf *laser_buff = NULL;
 8019666:	2300      	movs	r3, #0
 8019668:	617b      	str	r3, [r7, #20]
    void **ptr_laser_data = NULL;
 801966a:	2300      	movs	r3, #0
 801966c:	61fb      	str	r3, [r7, #28]
    uint8_t *resp_data;  // the laser response command, usually 8 bytes
    uint16_t resp_cmd_len;

    //-- allocate the memory for LwIP buffer
    laser_buff = netbuf_new();
 801966e:	f7f4 f827 	bl	800d6c0 <netbuf_new>
 8019672:	4603      	mov	r3, r0
 8019674:	617b      	str	r3, [r7, #20]

	//-- send command to the laser
	if (netbuf_take(laser_buff, array, len) == ERR_OK)
 8019676:	697b      	ldr	r3, [r7, #20]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	897a      	ldrh	r2, [r7, #10]
 801967c:	68f9      	ldr	r1, [r7, #12]
 801967e:	4618      	mov	r0, r3
 8019680:	f7f6 f878 	bl	800f774 <pbuf_take>
 8019684:	4603      	mov	r3, r0
 8019686:	2b00      	cmp	r3, #0
 8019688:	d104      	bne.n	8019694 <laser_tcp_comm+0x3c>
	{
		netconn_send(new_conn, laser_buff);
 801968a:	697b      	ldr	r3, [r7, #20]
 801968c:	4619      	mov	r1, r3
 801968e:	6878      	ldr	r0, [r7, #4]
 8019690:	f7f2 fe42 	bl	800c318 <netconn_send>
	}

	//-- transfer the received data from the laser to the master
	if (netconn_recv(new_conn, &laser_buff) == ERR_OK)
 8019694:	f107 0314 	add.w	r3, r7, #20
 8019698:	4619      	mov	r1, r3
 801969a:	6878      	ldr	r0, [r7, #4]
 801969c:	f7f2 fdc2 	bl	800c224 <netconn_recv>
 80196a0:	4603      	mov	r3, r0
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d113      	bne.n	80196ce <laser_tcp_comm+0x76>
	{
		if (netbuf_data(laser_buff, ptr_laser_data, &resp_cmd_len) == ERR_OK)
 80196a6:	697b      	ldr	r3, [r7, #20]
 80196a8:	f107 0212 	add.w	r2, r7, #18
 80196ac:	69f9      	ldr	r1, [r7, #28]
 80196ae:	4618      	mov	r0, r3
 80196b0:	f7f4 f83a 	bl	800d728 <netbuf_data>
 80196b4:	4603      	mov	r3, r0
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d109      	bne.n	80196ce <laser_tcp_comm+0x76>
		{
			if (resp_cmd_len <= 10)
 80196ba:	8a7b      	ldrh	r3, [r7, #18]
 80196bc:	2b0a      	cmp	r3, #10
 80196be:	d806      	bhi.n	80196ce <laser_tcp_comm+0x76>
			{
			    resp_data = (uint8_t *)ptr_laser_data;
 80196c0:	69fb      	ldr	r3, [r7, #28]
 80196c2:	61bb      	str	r3, [r7, #24]
				IPC_UART_SendData(resp_data, resp_cmd_len);
 80196c4:	8a7b      	ldrh	r3, [r7, #18]
 80196c6:	4619      	mov	r1, r3
 80196c8:	69b8      	ldr	r0, [r7, #24]
 80196ca:	f000 f829 	bl	8019720 <IPC_UART_SendData>
			}
		}
	}

	netbuf_delete(laser_buff);
 80196ce:	697b      	ldr	r3, [r7, #20]
 80196d0:	4618      	mov	r0, r3
 80196d2:	f7f4 f809 	bl	800d6e8 <netbuf_delete>
}
 80196d6:	bf00      	nop
 80196d8:	3720      	adds	r7, #32
 80196da:	46bd      	mov	sp, r7
 80196dc:	bd80      	pop	{r7, pc}
	...

080196e0 <CCD_UART_SendData>:
/**
 * Function: send the command to the CCD to read pixel data.
 *           using HAL send function
 */
void CCD_UART_SendData(uint8_t* array, uint16_t len)
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b082      	sub	sp, #8
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	6078      	str	r0, [r7, #4]
 80196e8:	460b      	mov	r3, r1
 80196ea:	807b      	strh	r3, [r7, #2]
	osMutexAcquire((osMutexId_t)CCDUartMutexHandle,
 80196ec:	4b0a      	ldr	r3, [pc, #40]	; (8019718 <CCD_UART_SendData+0x38>)
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	f04f 31ff 	mov.w	r1, #4294967295
 80196f4:	4618      	mov	r0, r3
 80196f6:	f7ee fd7f 	bl	80081f8 <osMutexAcquire>
				   (uint32_t)portMAX_DELAY);
	HAL_UART_Transmit(&CCD_UART, array, len, 100);
 80196fa:	887a      	ldrh	r2, [r7, #2]
 80196fc:	2364      	movs	r3, #100	; 0x64
 80196fe:	6879      	ldr	r1, [r7, #4]
 8019700:	4806      	ldr	r0, [pc, #24]	; (801971c <CCD_UART_SendData+0x3c>)
 8019702:	f7ec fc0a 	bl	8005f1a <HAL_UART_Transmit>
	osMutexRelease((osMutexId_t)CCDUartMutexHandle);
 8019706:	4b04      	ldr	r3, [pc, #16]	; (8019718 <CCD_UART_SendData+0x38>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	4618      	mov	r0, r3
 801970c:	f7ee fdbf 	bl	800828e <osMutexRelease>
}
 8019710:	bf00      	nop
 8019712:	3708      	adds	r7, #8
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}
 8019718:	2000a690 	.word	0x2000a690
 801971c:	2000a598 	.word	0x2000a598

08019720 <IPC_UART_SendData>:
/**
 * Function: send the command to the master.
 *           using HAL send function
 */
void IPC_UART_SendData(uint8_t* array, uint16_t len)
{
 8019720:	b580      	push	{r7, lr}
 8019722:	b082      	sub	sp, #8
 8019724:	af00      	add	r7, sp, #0
 8019726:	6078      	str	r0, [r7, #4]
 8019728:	460b      	mov	r3, r1
 801972a:	807b      	strh	r3, [r7, #2]
	osMutexAcquire((osMutexId_t)IPCUartMutexHandle,
 801972c:	4b0a      	ldr	r3, [pc, #40]	; (8019758 <IPC_UART_SendData+0x38>)
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	f04f 31ff 	mov.w	r1, #4294967295
 8019734:	4618      	mov	r0, r3
 8019736:	f7ee fd5f 	bl	80081f8 <osMutexAcquire>
				   (uint32_t)portMAX_DELAY);
	HAL_UART_Transmit(&IPC_UART, array, len, 100);
 801973a:	887a      	ldrh	r2, [r7, #2]
 801973c:	2364      	movs	r3, #100	; 0x64
 801973e:	6879      	ldr	r1, [r7, #4]
 8019740:	4806      	ldr	r0, [pc, #24]	; (801975c <IPC_UART_SendData+0x3c>)
 8019742:	f7ec fbea 	bl	8005f1a <HAL_UART_Transmit>
	osMutexRelease((osMutexId_t)IPCUartMutexHandle);
 8019746:	4b04      	ldr	r3, [pc, #16]	; (8019758 <IPC_UART_SendData+0x38>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	4618      	mov	r0, r3
 801974c:	f7ee fd9f 	bl	800828e <osMutexRelease>
}
 8019750:	bf00      	nop
 8019752:	3708      	adds	r7, #8
 8019754:	46bd      	mov	sp, r7
 8019756:	bd80      	pop	{r7, pc}
 8019758:	2000a52c 	.word	0x2000a52c
 801975c:	2000a698 	.word	0x2000a698

08019760 <M24512_ReadBuffer>:
	EEPROM_WC_HIGH;
	return 0;
}

uint8_t M24512_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint8_t NumByteToRead)
{
 8019760:	b590      	push	{r4, r7, lr}
 8019762:	b085      	sub	sp, #20
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
 8019768:	460b      	mov	r3, r1
 801976a:	807b      	strh	r3, [r7, #2]
 801976c:	4613      	mov	r3, r2
 801976e:	707b      	strb	r3, [r7, #1]
	volatile uint8_t temp,i;
	osMutexAcquire(	(osMutexId_t)M24512MutexHandle,
 8019770:	4b4d      	ldr	r3, [pc, #308]	; (80198a8 <M24512_ReadBuffer+0x148>)
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	f04f 31ff 	mov.w	r1, #4294967295
 8019778:	4618      	mov	r0, r3
 801977a:	f7ee fd3d 	bl	80081f8 <osMutexAcquire>
					(uint32_t)portMAX_DELAY);
	EEPROM_WC_LOW;
 801977e:	4b4b      	ldr	r3, [pc, #300]	; (80198ac <M24512_ReadBuffer+0x14c>)
 8019780:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8019784:	619a      	str	r2, [r3, #24]
	i2c_delay(10);
 8019786:	200a      	movs	r0, #10
 8019788:	f001 f9e4 	bl	801ab54 <i2c_delay>
	i2c_stop();
 801978c:	f001 fa1c 	bl	801abc8 <i2c_stop>
	i2c_delay(50);
 8019790:	2032      	movs	r0, #50	; 0x32
 8019792:	f001 f9df 	bl	801ab54 <i2c_delay>
	EEPROM_WC_HIGH;
 8019796:	4b45      	ldr	r3, [pc, #276]	; (80198ac <M24512_ReadBuffer+0x14c>)
 8019798:	2280      	movs	r2, #128	; 0x80
 801979a:	619a      	str	r2, [r3, #24]
	for(i=0;i<100;i++)
 801979c:	2300      	movs	r3, #0
 801979e:	73bb      	strb	r3, [r7, #14]
 80197a0:	e013      	b.n	80197ca <M24512_ReadBuffer+0x6a>
	{
		i2c_start();
 80197a2:	f001 f9f5 	bl	801ab90 <i2c_start>
		i2c_write_one_byte(M24512_ADDR&0xfe);
 80197a6:	20a0      	movs	r0, #160	; 0xa0
 80197a8:	f001 fab2 	bl	801ad10 <i2c_write_one_byte>
		temp=i2c_waitack();
 80197ac:	f001 fa28 	bl	801ac00 <i2c_waitack>
 80197b0:	4603      	mov	r3, r0
 80197b2:	73fb      	strb	r3, [r7, #15]
		if(temp!=0)
 80197b4:	7bfb      	ldrb	r3, [r7, #15]
 80197b6:	b2db      	uxtb	r3, r3
 80197b8:	2b00      	cmp	r3, #0
 80197ba:	d10b      	bne.n	80197d4 <M24512_ReadBuffer+0x74>
			break;
		i2c_stop();
 80197bc:	f001 fa04 	bl	801abc8 <i2c_stop>
	for(i=0;i<100;i++)
 80197c0:	7bbb      	ldrb	r3, [r7, #14]
 80197c2:	b2db      	uxtb	r3, r3
 80197c4:	3301      	adds	r3, #1
 80197c6:	b2db      	uxtb	r3, r3
 80197c8:	73bb      	strb	r3, [r7, #14]
 80197ca:	7bbb      	ldrb	r3, [r7, #14]
 80197cc:	b2db      	uxtb	r3, r3
 80197ce:	2b63      	cmp	r3, #99	; 0x63
 80197d0:	d9e7      	bls.n	80197a2 <M24512_ReadBuffer+0x42>
 80197d2:	e000      	b.n	80197d6 <M24512_ReadBuffer+0x76>
			break;
 80197d4:	bf00      	nop
	}
	if(temp==0)
 80197d6:	7bfb      	ldrb	r3, [r7, #15]
 80197d8:	b2db      	uxtb	r3, r3
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d101      	bne.n	80197e2 <M24512_ReadBuffer+0x82>
	{
		return 1;
 80197de:	2301      	movs	r3, #1
 80197e0:	e05e      	b.n	80198a0 <M24512_ReadBuffer+0x140>
	}
	i2c_write_one_byte(ReadAddr>>8);
 80197e2:	887b      	ldrh	r3, [r7, #2]
 80197e4:	0a1b      	lsrs	r3, r3, #8
 80197e6:	b29b      	uxth	r3, r3
 80197e8:	b2db      	uxtb	r3, r3
 80197ea:	4618      	mov	r0, r3
 80197ec:	f001 fa90 	bl	801ad10 <i2c_write_one_byte>
	temp=i2c_waitack();
 80197f0:	f001 fa06 	bl	801ac00 <i2c_waitack>
 80197f4:	4603      	mov	r3, r0
 80197f6:	73fb      	strb	r3, [r7, #15]
	if(temp==0)
 80197f8:	7bfb      	ldrb	r3, [r7, #15]
 80197fa:	b2db      	uxtb	r3, r3
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d103      	bne.n	8019808 <M24512_ReadBuffer+0xa8>
	{
		i2c_stop();
 8019800:	f001 f9e2 	bl	801abc8 <i2c_stop>
		return 2;
 8019804:	2302      	movs	r3, #2
 8019806:	e04b      	b.n	80198a0 <M24512_ReadBuffer+0x140>
	}
	i2c_write_one_byte((uint8_t)ReadAddr);
 8019808:	887b      	ldrh	r3, [r7, #2]
 801980a:	b2db      	uxtb	r3, r3
 801980c:	4618      	mov	r0, r3
 801980e:	f001 fa7f 	bl	801ad10 <i2c_write_one_byte>
	temp=i2c_waitack();
 8019812:	f001 f9f5 	bl	801ac00 <i2c_waitack>
 8019816:	4603      	mov	r3, r0
 8019818:	73fb      	strb	r3, [r7, #15]
	if(temp==0)
 801981a:	7bfb      	ldrb	r3, [r7, #15]
 801981c:	b2db      	uxtb	r3, r3
 801981e:	2b00      	cmp	r3, #0
 8019820:	d103      	bne.n	801982a <M24512_ReadBuffer+0xca>
	{
		i2c_stop();
 8019822:	f001 f9d1 	bl	801abc8 <i2c_stop>
		return 3;
 8019826:	2303      	movs	r3, #3
 8019828:	e03a      	b.n	80198a0 <M24512_ReadBuffer+0x140>
	}
	i2c_start();
 801982a:	f001 f9b1 	bl	801ab90 <i2c_start>
	i2c_write_one_byte(M24512_ADDR|0x01);
 801982e:	20a1      	movs	r0, #161	; 0xa1
 8019830:	f001 fa6e 	bl	801ad10 <i2c_write_one_byte>
	temp=i2c_waitack();
 8019834:	f001 f9e4 	bl	801ac00 <i2c_waitack>
 8019838:	4603      	mov	r3, r0
 801983a:	73fb      	strb	r3, [r7, #15]
	if(temp==0)
 801983c:	7bfb      	ldrb	r3, [r7, #15]
 801983e:	b2db      	uxtb	r3, r3
 8019840:	2b00      	cmp	r3, #0
 8019842:	d103      	bne.n	801984c <M24512_ReadBuffer+0xec>
	{
		i2c_stop();
 8019844:	f001 f9c0 	bl	801abc8 <i2c_stop>
		return 4;
 8019848:	2304      	movs	r3, #4
 801984a:	e029      	b.n	80198a0 <M24512_ReadBuffer+0x140>
	}
	for(i=0;i<NumByteToRead;i++)
 801984c:	2300      	movs	r3, #0
 801984e:	73bb      	strb	r3, [r7, #14]
 8019850:	e019      	b.n	8019886 <M24512_ReadBuffer+0x126>
	{
		pBuffer[i]=i2c_read_one_byte();
 8019852:	7bbb      	ldrb	r3, [r7, #14]
 8019854:	b2db      	uxtb	r3, r3
 8019856:	461a      	mov	r2, r3
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	189c      	adds	r4, r3, r2
 801985c:	f001 fa9a 	bl	801ad94 <i2c_read_one_byte>
 8019860:	4603      	mov	r3, r0
 8019862:	7023      	strb	r3, [r4, #0]
		if(i==NumByteToRead-1)
 8019864:	7bbb      	ldrb	r3, [r7, #14]
 8019866:	b2db      	uxtb	r3, r3
 8019868:	461a      	mov	r2, r3
 801986a:	787b      	ldrb	r3, [r7, #1]
 801986c:	3b01      	subs	r3, #1
 801986e:	429a      	cmp	r2, r3
 8019870:	d102      	bne.n	8019878 <M24512_ReadBuffer+0x118>
		{
			i2c_sendnack();
 8019872:	f001 fa23 	bl	801acbc <i2c_sendnack>
 8019876:	e001      	b.n	801987c <M24512_ReadBuffer+0x11c>
		}
		else
		{
			i2c_sendack();
 8019878:	f001 fa04 	bl	801ac84 <i2c_sendack>
	for(i=0;i<NumByteToRead;i++)
 801987c:	7bbb      	ldrb	r3, [r7, #14]
 801987e:	b2db      	uxtb	r3, r3
 8019880:	3301      	adds	r3, #1
 8019882:	b2db      	uxtb	r3, r3
 8019884:	73bb      	strb	r3, [r7, #14]
 8019886:	7bbb      	ldrb	r3, [r7, #14]
 8019888:	b2db      	uxtb	r3, r3
 801988a:	787a      	ldrb	r2, [r7, #1]
 801988c:	429a      	cmp	r2, r3
 801988e:	d8e0      	bhi.n	8019852 <M24512_ReadBuffer+0xf2>
		}
	}
	i2c_stop();
 8019890:	f001 f99a 	bl	801abc8 <i2c_stop>
	osMutexRelease((osMutexId_t)M24512MutexHandle);
 8019894:	4b04      	ldr	r3, [pc, #16]	; (80198a8 <M24512_ReadBuffer+0x148>)
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	4618      	mov	r0, r3
 801989a:	f7ee fcf8 	bl	800828e <osMutexRelease>
	return 0;
 801989e:	2300      	movs	r3, #0
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	3714      	adds	r7, #20
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd90      	pop	{r4, r7, pc}
 80198a8:	2000a748 	.word	0x2000a748
 80198ac:	40020400 	.word	0x40020400

080198b0 <pretreat>:
 *              ypos, the position of pixel
 * Return: the size of valid data
 */
static uint16_t pretreat(const uint16_t *seam_location,
		uint16_t *light_data, uint16_t *ypos)
{
 80198b0:	b5b0      	push	{r4, r5, r7, lr}
 80198b2:	b088      	sub	sp, #32
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	60f8      	str	r0, [r7, #12]
 80198b8:	60b9      	str	r1, [r7, #8]
 80198ba:	607a      	str	r2, [r7, #4]
	uint16_t ndata = 0;
 80198bc:	2300      	movs	r3, #0
 80198be:	82fb      	strh	r3, [r7, #22]
	uint16_t start_pixel;
	uint16_t end_pixel;
	uint16_t i;

	// search the peak intensity with the bubble sort method
	uint16_t peak = 0;  // the maximum is 4096 for 12 bits CCD
 80198c0:	2300      	movs	r3, #0
 80198c2:	833b      	strh	r3, [r7, #24]
	for (i=0; i<3648; i++)
 80198c4:	2300      	movs	r3, #0
 80198c6:	837b      	strh	r3, [r7, #26]
 80198c8:	e010      	b.n	80198ec <pretreat+0x3c>
	{
		if (seam_location[i] > peak)
 80198ca:	8b7b      	ldrh	r3, [r7, #26]
 80198cc:	005b      	lsls	r3, r3, #1
 80198ce:	68fa      	ldr	r2, [r7, #12]
 80198d0:	4413      	add	r3, r2
 80198d2:	881b      	ldrh	r3, [r3, #0]
 80198d4:	8b3a      	ldrh	r2, [r7, #24]
 80198d6:	429a      	cmp	r2, r3
 80198d8:	d205      	bcs.n	80198e6 <pretreat+0x36>
			peak = seam_location[i];
 80198da:	8b7b      	ldrh	r3, [r7, #26]
 80198dc:	005b      	lsls	r3, r3, #1
 80198de:	68fa      	ldr	r2, [r7, #12]
 80198e0:	4413      	add	r3, r2
 80198e2:	881b      	ldrh	r3, [r3, #0]
 80198e4:	833b      	strh	r3, [r7, #24]
	for (i=0; i<3648; i++)
 80198e6:	8b7b      	ldrh	r3, [r7, #26]
 80198e8:	3301      	adds	r3, #1
 80198ea:	837b      	strh	r3, [r7, #26]
 80198ec:	8b7b      	ldrh	r3, [r7, #26]
 80198ee:	f5b3 6f64 	cmp.w	r3, #3648	; 0xe40
 80198f2:	d3ea      	bcc.n	80198ca <pretreat+0x1a>
	}

	// pick the useful data
	i = 0;
 80198f4:	2300      	movs	r3, #0
 80198f6:	837b      	strh	r3, [r7, #26]
	while(seam_location[i] < 0.1*peak)  // the threshold of valid pixel
 80198f8:	e004      	b.n	8019904 <pretreat+0x54>
	{
		start_pixel = i;
 80198fa:	8b7b      	ldrh	r3, [r7, #26]
 80198fc:	83fb      	strh	r3, [r7, #30]
		i++;
 80198fe:	8b7b      	ldrh	r3, [r7, #26]
 8019900:	3301      	adds	r3, #1
 8019902:	837b      	strh	r3, [r7, #26]
	while(seam_location[i] < 0.1*peak)  // the threshold of valid pixel
 8019904:	8b7b      	ldrh	r3, [r7, #26]
 8019906:	005b      	lsls	r3, r3, #1
 8019908:	68fa      	ldr	r2, [r7, #12]
 801990a:	4413      	add	r3, r2
 801990c:	881b      	ldrh	r3, [r3, #0]
 801990e:	4618      	mov	r0, r3
 8019910:	f7e6 fe10 	bl	8000534 <__aeabi_i2d>
 8019914:	4604      	mov	r4, r0
 8019916:	460d      	mov	r5, r1
 8019918:	8b3b      	ldrh	r3, [r7, #24]
 801991a:	4618      	mov	r0, r3
 801991c:	f7e6 fe0a 	bl	8000534 <__aeabi_i2d>
 8019920:	a32b      	add	r3, pc, #172	; (adr r3, 80199d0 <pretreat+0x120>)
 8019922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019926:	f7e6 fe6f 	bl	8000608 <__aeabi_dmul>
 801992a:	4602      	mov	r2, r0
 801992c:	460b      	mov	r3, r1
 801992e:	4620      	mov	r0, r4
 8019930:	4629      	mov	r1, r5
 8019932:	f7e7 f8db 	bl	8000aec <__aeabi_dcmplt>
 8019936:	4603      	mov	r3, r0
 8019938:	2b00      	cmp	r3, #0
 801993a:	d1de      	bne.n	80198fa <pretreat+0x4a>
	}


	i = 3647;
 801993c:	f640 633f 	movw	r3, #3647	; 0xe3f
 8019940:	837b      	strh	r3, [r7, #26]
	while (seam_location[i] < 0.1*peak)  // the threshold of valid pixel
 8019942:	e004      	b.n	801994e <pretreat+0x9e>
	{
		end_pixel = i;
 8019944:	8b7b      	ldrh	r3, [r7, #26]
 8019946:	83bb      	strh	r3, [r7, #28]
		i--;
 8019948:	8b7b      	ldrh	r3, [r7, #26]
 801994a:	3b01      	subs	r3, #1
 801994c:	837b      	strh	r3, [r7, #26]
	while (seam_location[i] < 0.1*peak)  // the threshold of valid pixel
 801994e:	8b7b      	ldrh	r3, [r7, #26]
 8019950:	005b      	lsls	r3, r3, #1
 8019952:	68fa      	ldr	r2, [r7, #12]
 8019954:	4413      	add	r3, r2
 8019956:	881b      	ldrh	r3, [r3, #0]
 8019958:	4618      	mov	r0, r3
 801995a:	f7e6 fdeb 	bl	8000534 <__aeabi_i2d>
 801995e:	4604      	mov	r4, r0
 8019960:	460d      	mov	r5, r1
 8019962:	8b3b      	ldrh	r3, [r7, #24]
 8019964:	4618      	mov	r0, r3
 8019966:	f7e6 fde5 	bl	8000534 <__aeabi_i2d>
 801996a:	a319      	add	r3, pc, #100	; (adr r3, 80199d0 <pretreat+0x120>)
 801996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019970:	f7e6 fe4a 	bl	8000608 <__aeabi_dmul>
 8019974:	4602      	mov	r2, r0
 8019976:	460b      	mov	r3, r1
 8019978:	4620      	mov	r0, r4
 801997a:	4629      	mov	r1, r5
 801997c:	f7e7 f8b6 	bl	8000aec <__aeabi_dcmplt>
 8019980:	4603      	mov	r3, r0
 8019982:	2b00      	cmp	r3, #0
 8019984:	d1de      	bne.n	8019944 <pretreat+0x94>
	}


	for (i=start_pixel; i<=end_pixel; i++)
 8019986:	8bfb      	ldrh	r3, [r7, #30]
 8019988:	837b      	strh	r3, [r7, #26]
 801998a:	e012      	b.n	80199b2 <pretreat+0x102>
	{
		*(++light_data) = seam_location[i];
 801998c:	8b7b      	ldrh	r3, [r7, #26]
 801998e:	005b      	lsls	r3, r3, #1
 8019990:	68fa      	ldr	r2, [r7, #12]
 8019992:	4413      	add	r3, r2
 8019994:	68ba      	ldr	r2, [r7, #8]
 8019996:	3202      	adds	r2, #2
 8019998:	60ba      	str	r2, [r7, #8]
 801999a:	881a      	ldrh	r2, [r3, #0]
 801999c:	68bb      	ldr	r3, [r7, #8]
 801999e:	801a      	strh	r2, [r3, #0]
		*(++ypos) = i;
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	3302      	adds	r3, #2
 80199a4:	607b      	str	r3, [r7, #4]
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	8b7a      	ldrh	r2, [r7, #26]
 80199aa:	801a      	strh	r2, [r3, #0]
	for (i=start_pixel; i<=end_pixel; i++)
 80199ac:	8b7b      	ldrh	r3, [r7, #26]
 80199ae:	3301      	adds	r3, #1
 80199b0:	837b      	strh	r3, [r7, #26]
 80199b2:	8b7a      	ldrh	r2, [r7, #26]
 80199b4:	8bbb      	ldrh	r3, [r7, #28]
 80199b6:	429a      	cmp	r2, r3
 80199b8:	d9e8      	bls.n	801998c <pretreat+0xdc>
	}

	ndata = end_pixel - start_pixel;
 80199ba:	8bba      	ldrh	r2, [r7, #28]
 80199bc:	8bfb      	ldrh	r3, [r7, #30]
 80199be:	1ad3      	subs	r3, r2, r3
 80199c0:	82fb      	strh	r3, [r7, #22]
	return ndata;
 80199c2:	8afb      	ldrh	r3, [r7, #22]
}
 80199c4:	4618      	mov	r0, r3
 80199c6:	3720      	adds	r7, #32
 80199c8:	46bd      	mov	sp, r7
 80199ca:	bdb0      	pop	{r4, r5, r7, pc}
 80199cc:	f3af 8000 	nop.w
 80199d0:	9999999a 	.word	0x9999999a
 80199d4:	3fb99999 	.word	0x3fb99999

080199d8 <vector>:
* Function: float *vector(long n)
* allocate a float vector with subscript range v[nl...nh]
* Return: a pointer to the top of memory.
*/
float* vector(long n)
{
 80199d8:	b580      	push	{r7, lr}
 80199da:	b084      	sub	sp, #16
 80199dc:	af00      	add	r7, sp, #0
 80199de:	6078      	str	r0, [r7, #4]
    float* v;
    v = (float*)malloc((size_t)(n + NR_END * sizeof(float)));
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	3304      	adds	r3, #4
 80199e4:	4618      	mov	r0, r3
 80199e6:	f001 fb5b 	bl	801b0a0 <malloc>
 80199ea:	4603      	mov	r3, r0
 80199ec:	60fb      	str	r3, [r7, #12]
    if (!v) exit(1);
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d102      	bne.n	80199fa <vector+0x22>
 80199f4:	2001      	movs	r0, #1
 80199f6:	f001 fa21 	bl	801ae3c <exit>
    return v;
 80199fa:	68fb      	ldr	r3, [r7, #12]
}
 80199fc:	4618      	mov	r0, r3
 80199fe:	3710      	adds	r7, #16
 8019a00:	46bd      	mov	sp, r7
 8019a02:	bd80      	pop	{r7, pc}

08019a04 <matrix>:
* Function: float **matrix()
* allocate a float matrix with subscript range m[nrl...nrh][ncl...nch]
* Return: a pointer to the top of memory.
*/
float** matrix(const long nrow, const long ncol)
{
 8019a04:	b580      	push	{r7, lr}
 8019a06:	b084      	sub	sp, #16
 8019a08:	af00      	add	r7, sp, #0
 8019a0a:	6078      	str	r0, [r7, #4]
 8019a0c:	6039      	str	r1, [r7, #0]
    float** m;

    // allocate the pointers to rows
    m = (float**)malloc((size_t)(nrow * sizeof(float*)));
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	009b      	lsls	r3, r3, #2
 8019a12:	4618      	mov	r0, r3
 8019a14:	f001 fb44 	bl	801b0a0 <malloc>
 8019a18:	4603      	mov	r3, r0
 8019a1a:	60bb      	str	r3, [r7, #8]

    // allocate rows and set pointers to them.
    m[0] = (float*)malloc((size_t)(nrow * ncol * sizeof(float)));
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	683a      	ldr	r2, [r7, #0]
 8019a20:	fb02 f303 	mul.w	r3, r2, r3
 8019a24:	009b      	lsls	r3, r3, #2
 8019a26:	4618      	mov	r0, r3
 8019a28:	f001 fb3a 	bl	801b0a0 <malloc>
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	461a      	mov	r2, r3
 8019a30:	68bb      	ldr	r3, [r7, #8]
 8019a32:	601a      	str	r2, [r3, #0]
    if (!m[0]) exit(1);
 8019a34:	68bb      	ldr	r3, [r7, #8]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d102      	bne.n	8019a42 <matrix+0x3e>
 8019a3c:	2001      	movs	r0, #1
 8019a3e:	f001 f9fd 	bl	801ae3c <exit>

    for (long i = 1; i < nrow; i++)
 8019a42:	2301      	movs	r3, #1
 8019a44:	60fb      	str	r3, [r7, #12]
 8019a46:	e012      	b.n	8019a6e <matrix+0x6a>
        m[i] = m[i-1] + ncol;
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8019a4e:	3b01      	subs	r3, #1
 8019a50:	009b      	lsls	r3, r3, #2
 8019a52:	68ba      	ldr	r2, [r7, #8]
 8019a54:	4413      	add	r3, r2
 8019a56:	6819      	ldr	r1, [r3, #0]
 8019a58:	683b      	ldr	r3, [r7, #0]
 8019a5a:	009a      	lsls	r2, r3, #2
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	009b      	lsls	r3, r3, #2
 8019a60:	68b8      	ldr	r0, [r7, #8]
 8019a62:	4403      	add	r3, r0
 8019a64:	440a      	add	r2, r1
 8019a66:	601a      	str	r2, [r3, #0]
    for (long i = 1; i < nrow; i++)
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	3301      	adds	r3, #1
 8019a6c:	60fb      	str	r3, [r7, #12]
 8019a6e:	68fa      	ldr	r2, [r7, #12]
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	429a      	cmp	r2, r3
 8019a74:	dbe8      	blt.n	8019a48 <matrix+0x44>

    return m;
 8019a76:	68bb      	ldr	r3, [r7, #8]
}
 8019a78:	4618      	mov	r0, r3
 8019a7a:	3710      	adds	r7, #16
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bd80      	pop	{r7, pc}

08019a80 <ivector>:
* Function: int *ivector()
* allocate an int vector with subscript range v[nl...nh]
* Return: a pointer to the top of memory.
*/
int* ivector(const long n)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b084      	sub	sp, #16
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
    int* v;
    v = (int*)malloc((size_t)((n + NR_END) * sizeof(int)));
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	3301      	adds	r3, #1
 8019a8c:	009b      	lsls	r3, r3, #2
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f001 fb06 	bl	801b0a0 <malloc>
 8019a94:	4603      	mov	r3, r0
 8019a96:	60fb      	str	r3, [r7, #12]
    if (!v) exit(1);
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d102      	bne.n	8019aa4 <ivector+0x24>
 8019a9e:	2001      	movs	r0, #1
 8019aa0:	f001 f9cc 	bl	801ae3c <exit>
    return v;
 8019aa4:	68fb      	ldr	r3, [r7, #12]
}
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	3710      	adds	r7, #16
 8019aaa:	46bd      	mov	sp, r7
 8019aac:	bd80      	pop	{r7, pc}

08019aae <free_vector>:
/**
* Function: free_vector()
* free a float vector allocated with vector()
*/
void free_vector(float* v)
{
 8019aae:	b580      	push	{r7, lr}
 8019ab0:	b082      	sub	sp, #8
 8019ab2:	af00      	add	r7, sp, #0
 8019ab4:	6078      	str	r0, [r7, #4]
    free((char*)v);
 8019ab6:	6878      	ldr	r0, [r7, #4]
 8019ab8:	f001 fafa 	bl	801b0b0 <free>
}
 8019abc:	bf00      	nop
 8019abe:	3708      	adds	r7, #8
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	bd80      	pop	{r7, pc}

08019ac4 <free_ivector>:
/**
* Function: free_ivector()
* free an int vector allocated with ivector()
*/
void free_ivector(int* v)
{
 8019ac4:	b580      	push	{r7, lr}
 8019ac6:	b082      	sub	sp, #8
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	6078      	str	r0, [r7, #4]
    free((char*)v);
 8019acc:	6878      	ldr	r0, [r7, #4]
 8019ace:	f001 faef 	bl	801b0b0 <free>
}
 8019ad2:	bf00      	nop
 8019ad4:	3708      	adds	r7, #8
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	bd80      	pop	{r7, pc}

08019ada <free_matrix>:
/**
* Function: free_matrix()
* free a float matrix allocated by matrix()
*/
void free_matrix(float** m, long nrow, long ncol)
{
 8019ada:	b580      	push	{r7, lr}
 8019adc:	b086      	sub	sp, #24
 8019ade:	af00      	add	r7, sp, #0
 8019ae0:	60f8      	str	r0, [r7, #12]
 8019ae2:	60b9      	str	r1, [r7, #8]
 8019ae4:	607a      	str	r2, [r7, #4]
    for (int i=0; i<nrow; i++)
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	617b      	str	r3, [r7, #20]
 8019aea:	e00a      	b.n	8019b02 <free_matrix+0x28>
        free((char*)m[i]);
 8019aec:	697b      	ldr	r3, [r7, #20]
 8019aee:	009b      	lsls	r3, r3, #2
 8019af0:	68fa      	ldr	r2, [r7, #12]
 8019af2:	4413      	add	r3, r2
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	4618      	mov	r0, r3
 8019af8:	f001 fada 	bl	801b0b0 <free>
    for (int i=0; i<nrow; i++)
 8019afc:	697b      	ldr	r3, [r7, #20]
 8019afe:	3301      	adds	r3, #1
 8019b00:	617b      	str	r3, [r7, #20]
 8019b02:	697a      	ldr	r2, [r7, #20]
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	429a      	cmp	r2, r3
 8019b08:	dbf0      	blt.n	8019aec <free_matrix+0x12>
    free((char**)m);
 8019b0a:	68f8      	ldr	r0, [r7, #12]
 8019b0c:	f001 fad0 	bl	801b0b0 <free>
}
 8019b10:	bf00      	nop
 8019b12:	3718      	adds	r7, #24
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd80      	pop	{r7, pc}

08019b18 <covsrt>:
*
* Spreading the covariances back into the full ma x ma covariances set
* for variables which were held frozen.
*/
void covsrt(float** covar, const int ma, const int mfit)
{
 8019b18:	b480      	push	{r7}
 8019b1a:	b089      	sub	sp, #36	; 0x24
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	60f8      	str	r0, [r7, #12]
 8019b20:	60b9      	str	r1, [r7, #8]
 8019b22:	607a      	str	r2, [r7, #4]
    int i, j, k;
    float temp;

    for (i = mfit; i < ma; i++)
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	61fb      	str	r3, [r7, #28]
 8019b28:	e021      	b.n	8019b6e <covsrt+0x56>
        for (j = 0; j < i; j++)
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	61bb      	str	r3, [r7, #24]
 8019b2e:	e017      	b.n	8019b60 <covsrt+0x48>
            covar[i][j] = covar[j][i] = 0.0;
 8019b30:	69bb      	ldr	r3, [r7, #24]
 8019b32:	009b      	lsls	r3, r3, #2
 8019b34:	68fa      	ldr	r2, [r7, #12]
 8019b36:	4413      	add	r3, r2
 8019b38:	681a      	ldr	r2, [r3, #0]
 8019b3a:	69fb      	ldr	r3, [r7, #28]
 8019b3c:	009b      	lsls	r3, r3, #2
 8019b3e:	4413      	add	r3, r2
 8019b40:	f04f 0200 	mov.w	r2, #0
 8019b44:	601a      	str	r2, [r3, #0]
 8019b46:	69fa      	ldr	r2, [r7, #28]
 8019b48:	0092      	lsls	r2, r2, #2
 8019b4a:	68f9      	ldr	r1, [r7, #12]
 8019b4c:	440a      	add	r2, r1
 8019b4e:	6811      	ldr	r1, [r2, #0]
 8019b50:	69ba      	ldr	r2, [r7, #24]
 8019b52:	0092      	lsls	r2, r2, #2
 8019b54:	440a      	add	r2, r1
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	6013      	str	r3, [r2, #0]
        for (j = 0; j < i; j++)
 8019b5a:	69bb      	ldr	r3, [r7, #24]
 8019b5c:	3301      	adds	r3, #1
 8019b5e:	61bb      	str	r3, [r7, #24]
 8019b60:	69ba      	ldr	r2, [r7, #24]
 8019b62:	69fb      	ldr	r3, [r7, #28]
 8019b64:	429a      	cmp	r2, r3
 8019b66:	dbe3      	blt.n	8019b30 <covsrt+0x18>
    for (i = mfit; i < ma; i++)
 8019b68:	69fb      	ldr	r3, [r7, #28]
 8019b6a:	3301      	adds	r3, #1
 8019b6c:	61fb      	str	r3, [r7, #28]
 8019b6e:	69fa      	ldr	r2, [r7, #28]
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	429a      	cmp	r2, r3
 8019b74:	dbd9      	blt.n	8019b2a <covsrt+0x12>

    k = mfit;
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	617b      	str	r3, [r7, #20]
    for (j = ma - 1; j >= 0; j--)
 8019b7a:	68bb      	ldr	r3, [r7, #8]
 8019b7c:	3b01      	subs	r3, #1
 8019b7e:	61bb      	str	r3, [r7, #24]
 8019b80:	e065      	b.n	8019c4e <covsrt+0x136>
    {
        for (i = 0; i < ma; i++)
 8019b82:	2300      	movs	r3, #0
 8019b84:	61fb      	str	r3, [r7, #28]
 8019b86:	e028      	b.n	8019bda <covsrt+0xc2>
            SWAP(covar[i][k], covar[i][j]);
 8019b88:	69fb      	ldr	r3, [r7, #28]
 8019b8a:	009b      	lsls	r3, r3, #2
 8019b8c:	68fa      	ldr	r2, [r7, #12]
 8019b8e:	4413      	add	r3, r2
 8019b90:	681a      	ldr	r2, [r3, #0]
 8019b92:	697b      	ldr	r3, [r7, #20]
 8019b94:	009b      	lsls	r3, r3, #2
 8019b96:	4413      	add	r3, r2
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	613b      	str	r3, [r7, #16]
 8019b9c:	69fb      	ldr	r3, [r7, #28]
 8019b9e:	009b      	lsls	r3, r3, #2
 8019ba0:	68fa      	ldr	r2, [r7, #12]
 8019ba2:	4413      	add	r3, r2
 8019ba4:	681a      	ldr	r2, [r3, #0]
 8019ba6:	69bb      	ldr	r3, [r7, #24]
 8019ba8:	009b      	lsls	r3, r3, #2
 8019baa:	441a      	add	r2, r3
 8019bac:	69fb      	ldr	r3, [r7, #28]
 8019bae:	009b      	lsls	r3, r3, #2
 8019bb0:	68f9      	ldr	r1, [r7, #12]
 8019bb2:	440b      	add	r3, r1
 8019bb4:	6819      	ldr	r1, [r3, #0]
 8019bb6:	697b      	ldr	r3, [r7, #20]
 8019bb8:	009b      	lsls	r3, r3, #2
 8019bba:	440b      	add	r3, r1
 8019bbc:	6812      	ldr	r2, [r2, #0]
 8019bbe:	601a      	str	r2, [r3, #0]
 8019bc0:	69fb      	ldr	r3, [r7, #28]
 8019bc2:	009b      	lsls	r3, r3, #2
 8019bc4:	68fa      	ldr	r2, [r7, #12]
 8019bc6:	4413      	add	r3, r2
 8019bc8:	681a      	ldr	r2, [r3, #0]
 8019bca:	69bb      	ldr	r3, [r7, #24]
 8019bcc:	009b      	lsls	r3, r3, #2
 8019bce:	4413      	add	r3, r2
 8019bd0:	693a      	ldr	r2, [r7, #16]
 8019bd2:	601a      	str	r2, [r3, #0]
        for (i = 0; i < ma; i++)
 8019bd4:	69fb      	ldr	r3, [r7, #28]
 8019bd6:	3301      	adds	r3, #1
 8019bd8:	61fb      	str	r3, [r7, #28]
 8019bda:	69fa      	ldr	r2, [r7, #28]
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	429a      	cmp	r2, r3
 8019be0:	dbd2      	blt.n	8019b88 <covsrt+0x70>
        for (i = 0; i < ma; i++)
 8019be2:	2300      	movs	r3, #0
 8019be4:	61fb      	str	r3, [r7, #28]
 8019be6:	e028      	b.n	8019c3a <covsrt+0x122>
            SWAP(covar[k][i], covar[j][i]);
 8019be8:	697b      	ldr	r3, [r7, #20]
 8019bea:	009b      	lsls	r3, r3, #2
 8019bec:	68fa      	ldr	r2, [r7, #12]
 8019bee:	4413      	add	r3, r2
 8019bf0:	681a      	ldr	r2, [r3, #0]
 8019bf2:	69fb      	ldr	r3, [r7, #28]
 8019bf4:	009b      	lsls	r3, r3, #2
 8019bf6:	4413      	add	r3, r2
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	613b      	str	r3, [r7, #16]
 8019bfc:	69bb      	ldr	r3, [r7, #24]
 8019bfe:	009b      	lsls	r3, r3, #2
 8019c00:	68fa      	ldr	r2, [r7, #12]
 8019c02:	4413      	add	r3, r2
 8019c04:	681a      	ldr	r2, [r3, #0]
 8019c06:	69fb      	ldr	r3, [r7, #28]
 8019c08:	009b      	lsls	r3, r3, #2
 8019c0a:	441a      	add	r2, r3
 8019c0c:	697b      	ldr	r3, [r7, #20]
 8019c0e:	009b      	lsls	r3, r3, #2
 8019c10:	68f9      	ldr	r1, [r7, #12]
 8019c12:	440b      	add	r3, r1
 8019c14:	6819      	ldr	r1, [r3, #0]
 8019c16:	69fb      	ldr	r3, [r7, #28]
 8019c18:	009b      	lsls	r3, r3, #2
 8019c1a:	440b      	add	r3, r1
 8019c1c:	6812      	ldr	r2, [r2, #0]
 8019c1e:	601a      	str	r2, [r3, #0]
 8019c20:	69bb      	ldr	r3, [r7, #24]
 8019c22:	009b      	lsls	r3, r3, #2
 8019c24:	68fa      	ldr	r2, [r7, #12]
 8019c26:	4413      	add	r3, r2
 8019c28:	681a      	ldr	r2, [r3, #0]
 8019c2a:	69fb      	ldr	r3, [r7, #28]
 8019c2c:	009b      	lsls	r3, r3, #2
 8019c2e:	4413      	add	r3, r2
 8019c30:	693a      	ldr	r2, [r7, #16]
 8019c32:	601a      	str	r2, [r3, #0]
        for (i = 0; i < ma; i++)
 8019c34:	69fb      	ldr	r3, [r7, #28]
 8019c36:	3301      	adds	r3, #1
 8019c38:	61fb      	str	r3, [r7, #28]
 8019c3a:	69fa      	ldr	r2, [r7, #28]
 8019c3c:	68bb      	ldr	r3, [r7, #8]
 8019c3e:	429a      	cmp	r2, r3
 8019c40:	dbd2      	blt.n	8019be8 <covsrt+0xd0>
        k--;
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	3b01      	subs	r3, #1
 8019c46:	617b      	str	r3, [r7, #20]
    for (j = ma - 1; j >= 0; j--)
 8019c48:	69bb      	ldr	r3, [r7, #24]
 8019c4a:	3b01      	subs	r3, #1
 8019c4c:	61bb      	str	r3, [r7, #24]
 8019c4e:	69bb      	ldr	r3, [r7, #24]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	da96      	bge.n	8019b82 <covsrt+0x6a>
    }
}
 8019c54:	bf00      	nop
 8019c56:	bf00      	nop
 8019c58:	3724      	adds	r7, #36	; 0x24
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c60:	4770      	bx	lr

08019c62 <gaussj>:
*
* @Output a is replaced by its matrix inverse, and b is replaced by the
* corresponding set of solution vectors.
*/
void gaussj(float** a, const int n, float* b)
{
 8019c62:	b580      	push	{r7, lr}
 8019c64:	b092      	sub	sp, #72	; 0x48
 8019c66:	af00      	add	r7, sp, #0
 8019c68:	60f8      	str	r0, [r7, #12]
 8019c6a:	60b9      	str	r1, [r7, #8]
 8019c6c:	607a      	str	r2, [r7, #4]
    int* indxc, * indxr, * ipiv;
    int icol = 0;
 8019c6e:	2300      	movs	r3, #0
 8019c70:	647b      	str	r3, [r7, #68]	; 0x44
    int irow = 0;
 8019c72:	2300      	movs	r3, #0
 8019c74:	643b      	str	r3, [r7, #64]	; 0x40
    int i, j, k, l, ll;
    float big, dum, pivinv, temp;

    // The integer arrays: ipiv, indxr, and indxc are used for bookkeeping
    // on the pivoting.
    indxc = ivector(n);  // column of the pivot element
 8019c76:	68b8      	ldr	r0, [r7, #8]
 8019c78:	f7ff ff02 	bl	8019a80 <ivector>
 8019c7c:	6278      	str	r0, [r7, #36]	; 0x24
    indxr = ivector(n);  // row of the pivot element
 8019c7e:	68b8      	ldr	r0, [r7, #8]
 8019c80:	f7ff fefe 	bl	8019a80 <ivector>
 8019c84:	6238      	str	r0, [r7, #32]
    ipiv = ivector(n);   // index of the biggest element
 8019c86:	68b8      	ldr	r0, [r7, #8]
 8019c88:	f7ff fefa 	bl	8019a80 <ivector>
 8019c8c:	61f8      	str	r0, [r7, #28]

    for (j = 0; j < n; j++) ipiv[j] = 0;
 8019c8e:	2300      	movs	r3, #0
 8019c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8019c92:	e008      	b.n	8019ca6 <gaussj+0x44>
 8019c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019c96:	009b      	lsls	r3, r3, #2
 8019c98:	69fa      	ldr	r2, [r7, #28]
 8019c9a:	4413      	add	r3, r2
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	601a      	str	r2, [r3, #0]
 8019ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ca2:	3301      	adds	r3, #1
 8019ca4:	63bb      	str	r3, [r7, #56]	; 0x38
 8019ca6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019ca8:	68bb      	ldr	r3, [r7, #8]
 8019caa:	429a      	cmp	r2, r3
 8019cac:	dbf2      	blt.n	8019c94 <gaussj+0x32>

    // This is the main loop over the rows to be reduced.
    for (i = 0; i < n; i++)
 8019cae:	2300      	movs	r3, #0
 8019cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019cb2:	e178      	b.n	8019fa6 <gaussj+0x344>
    {
        big = 0.0;  // the largest value of a_ii element.
 8019cb4:	f04f 0300 	mov.w	r3, #0
 8019cb8:	62bb      	str	r3, [r7, #40]	; 0x28

        // This is the outer loop of the search for a pivot element,
        // when the ith row been reduced.
        for (j = 0; j < n; j++)  // over the row
 8019cba:	2300      	movs	r3, #0
 8019cbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8019cbe:	e048      	b.n	8019d52 <gaussj+0xf0>
        {
            // ipiv[j] = 1, the j_col has the biggest element
            // ipiv[j] = 0, the j_col has not been touched.
            // ipiv[j] > 1, two equations have the same value.
            if (ipiv[j] != 1)
 8019cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019cc2:	009b      	lsls	r3, r3, #2
 8019cc4:	69fa      	ldr	r2, [r7, #28]
 8019cc6:	4413      	add	r3, r2
 8019cc8:	681b      	ldr	r3, [r3, #0]
 8019cca:	2b01      	cmp	r3, #1
 8019ccc:	d03e      	beq.n	8019d4c <gaussj+0xea>
            {
                for (k = 0; k < n; k++)  // along the column
 8019cce:	2300      	movs	r3, #0
 8019cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8019cd2:	e037      	b.n	8019d44 <gaussj+0xe2>
                {
                    if (ipiv[k] == 0)  // no touched column only
 8019cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019cd6:	009b      	lsls	r3, r3, #2
 8019cd8:	69fa      	ldr	r2, [r7, #28]
 8019cda:	4413      	add	r3, r2
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d125      	bne.n	8019d2e <gaussj+0xcc>
                    {
                        if (fabs(a[j][k]) >= big)
 8019ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019ce4:	009b      	lsls	r3, r3, #2
 8019ce6:	68fa      	ldr	r2, [r7, #12]
 8019ce8:	4413      	add	r3, r2
 8019cea:	681a      	ldr	r2, [r3, #0]
 8019cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019cee:	009b      	lsls	r3, r3, #2
 8019cf0:	4413      	add	r3, r2
 8019cf2:	edd3 7a00 	vldr	s15, [r3]
 8019cf6:	eef0 7ae7 	vabs.f32	s15, s15
 8019cfa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8019cfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d06:	d81a      	bhi.n	8019d3e <gaussj+0xdc>
                        {
                            big = fabs(a[j][k]);
 8019d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d0a:	009b      	lsls	r3, r3, #2
 8019d0c:	68fa      	ldr	r2, [r7, #12]
 8019d0e:	4413      	add	r3, r2
 8019d10:	681a      	ldr	r2, [r3, #0]
 8019d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d14:	009b      	lsls	r3, r3, #2
 8019d16:	4413      	add	r3, r2
 8019d18:	edd3 7a00 	vldr	s15, [r3]
 8019d1c:	eef0 7ae7 	vabs.f32	s15, s15
 8019d20:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                            irow = j;
 8019d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d26:	643b      	str	r3, [r7, #64]	; 0x40
                            icol = k;
 8019d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8019d2c:	e007      	b.n	8019d3e <gaussj+0xdc>
                        }
                    }
                    else if (ipiv[k] > 1) return;  // Singular Matrix-1
 8019d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d30:	009b      	lsls	r3, r3, #2
 8019d32:	69fa      	ldr	r2, [r7, #28]
 8019d34:	4413      	add	r3, r2
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	2b01      	cmp	r3, #1
 8019d3a:	f300 8199 	bgt.w	801a070 <gaussj+0x40e>
                for (k = 0; k < n; k++)  // along the column
 8019d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019d40:	3301      	adds	r3, #1
 8019d42:	637b      	str	r3, [r7, #52]	; 0x34
 8019d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019d46:	68bb      	ldr	r3, [r7, #8]
 8019d48:	429a      	cmp	r2, r3
 8019d4a:	dbc3      	blt.n	8019cd4 <gaussj+0x72>
        for (j = 0; j < n; j++)  // over the row
 8019d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019d4e:	3301      	adds	r3, #1
 8019d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8019d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019d54:	68bb      	ldr	r3, [r7, #8]
 8019d56:	429a      	cmp	r2, r3
 8019d58:	dbb2      	blt.n	8019cc0 <gaussj+0x5e>
                }
            }
        }

        ++(ipiv[icol]);  // set ipiv[k] once.
 8019d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d5c:	009b      	lsls	r3, r3, #2
 8019d5e:	69fa      	ldr	r2, [r7, #28]
 8019d60:	4413      	add	r3, r2
 8019d62:	681a      	ldr	r2, [r3, #0]
 8019d64:	3201      	adds	r2, #1
 8019d66:	601a      	str	r2, [r3, #0]
        //
        // If indxr[i] \neqn indxc[i] there is an implied column interchange.
        // With this form of bookkeeping, the solution b's will end up in the
        // correct order, and the inverse matrix will be scrambled by columns.
        //-------------------------------------------------------------------
        if (irow != icol)
 8019d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d6c:	429a      	cmp	r2, r3
 8019d6e:	d045      	beq.n	8019dfc <gaussj+0x19a>
        {
            for (l = 0; l < n; l++)
 8019d70:	2300      	movs	r3, #0
 8019d72:	633b      	str	r3, [r7, #48]	; 0x30
 8019d74:	e028      	b.n	8019dc8 <gaussj+0x166>
                SWAP(a[irow][l], a[icol][l]);
 8019d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d78:	009b      	lsls	r3, r3, #2
 8019d7a:	68fa      	ldr	r2, [r7, #12]
 8019d7c:	4413      	add	r3, r2
 8019d7e:	681a      	ldr	r2, [r3, #0]
 8019d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d82:	009b      	lsls	r3, r3, #2
 8019d84:	4413      	add	r3, r2
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	61bb      	str	r3, [r7, #24]
 8019d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d8c:	009b      	lsls	r3, r3, #2
 8019d8e:	68fa      	ldr	r2, [r7, #12]
 8019d90:	4413      	add	r3, r2
 8019d92:	681a      	ldr	r2, [r3, #0]
 8019d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d96:	009b      	lsls	r3, r3, #2
 8019d98:	441a      	add	r2, r3
 8019d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019d9c:	009b      	lsls	r3, r3, #2
 8019d9e:	68f9      	ldr	r1, [r7, #12]
 8019da0:	440b      	add	r3, r1
 8019da2:	6819      	ldr	r1, [r3, #0]
 8019da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019da6:	009b      	lsls	r3, r3, #2
 8019da8:	440b      	add	r3, r1
 8019daa:	6812      	ldr	r2, [r2, #0]
 8019dac:	601a      	str	r2, [r3, #0]
 8019dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019db0:	009b      	lsls	r3, r3, #2
 8019db2:	68fa      	ldr	r2, [r7, #12]
 8019db4:	4413      	add	r3, r2
 8019db6:	681a      	ldr	r2, [r3, #0]
 8019db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dba:	009b      	lsls	r3, r3, #2
 8019dbc:	4413      	add	r3, r2
 8019dbe:	69ba      	ldr	r2, [r7, #24]
 8019dc0:	601a      	str	r2, [r3, #0]
            for (l = 0; l < n; l++)
 8019dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019dc4:	3301      	adds	r3, #1
 8019dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8019dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019dca:	68bb      	ldr	r3, [r7, #8]
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	dbd2      	blt.n	8019d76 <gaussj+0x114>
            SWAP(b[irow], b[icol]);
 8019dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019dd2:	009b      	lsls	r3, r3, #2
 8019dd4:	687a      	ldr	r2, [r7, #4]
 8019dd6:	4413      	add	r3, r2
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	61bb      	str	r3, [r7, #24]
 8019ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019dde:	009b      	lsls	r3, r3, #2
 8019de0:	687a      	ldr	r2, [r7, #4]
 8019de2:	441a      	add	r2, r3
 8019de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019de6:	009b      	lsls	r3, r3, #2
 8019de8:	6879      	ldr	r1, [r7, #4]
 8019dea:	440b      	add	r3, r1
 8019dec:	6812      	ldr	r2, [r2, #0]
 8019dee:	601a      	str	r2, [r3, #0]
 8019df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019df2:	009b      	lsls	r3, r3, #2
 8019df4:	687a      	ldr	r2, [r7, #4]
 8019df6:	4413      	add	r3, r2
 8019df8:	69ba      	ldr	r2, [r7, #24]
 8019dfa:	601a      	str	r2, [r3, #0]
        }

        // We are now ready to divide the pivot row by the pivot element,
        // located at irow and icol.
        indxr[i] = irow;
 8019dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019dfe:	009b      	lsls	r3, r3, #2
 8019e00:	6a3a      	ldr	r2, [r7, #32]
 8019e02:	4413      	add	r3, r2
 8019e04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019e06:	601a      	str	r2, [r3, #0]
        indxc[i] = icol;
 8019e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019e0a:	009b      	lsls	r3, r3, #2
 8019e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e0e:	4413      	add	r3, r2
 8019e10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019e12:	601a      	str	r2, [r3, #0]

        if (a[icol][icol] == 0) return;  // Singular Matrix-2
 8019e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e16:	009b      	lsls	r3, r3, #2
 8019e18:	68fa      	ldr	r2, [r7, #12]
 8019e1a:	4413      	add	r3, r2
 8019e1c:	681a      	ldr	r2, [r3, #0]
 8019e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e20:	009b      	lsls	r3, r3, #2
 8019e22:	4413      	add	r3, r2
 8019e24:	edd3 7a00 	vldr	s15, [r3]
 8019e28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e30:	f000 8120 	beq.w	801a074 <gaussj+0x412>
        pivinv = 1.0 / a[icol][icol];
 8019e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e36:	009b      	lsls	r3, r3, #2
 8019e38:	68fa      	ldr	r2, [r7, #12]
 8019e3a:	4413      	add	r3, r2
 8019e3c:	681a      	ldr	r2, [r3, #0]
 8019e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e40:	009b      	lsls	r3, r3, #2
 8019e42:	4413      	add	r3, r2
 8019e44:	ed93 7a00 	vldr	s14, [r3]
 8019e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8019e50:	edc7 7a05 	vstr	s15, [r7, #20]
        a[icol][icol] = 1.0;
 8019e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e56:	009b      	lsls	r3, r3, #2
 8019e58:	68fa      	ldr	r2, [r7, #12]
 8019e5a:	4413      	add	r3, r2
 8019e5c:	681a      	ldr	r2, [r3, #0]
 8019e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e60:	009b      	lsls	r3, r3, #2
 8019e62:	4413      	add	r3, r2
 8019e64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8019e68:	601a      	str	r2, [r3, #0]

        for (l = 0; l < n; l++)
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8019e6e:	e01a      	b.n	8019ea6 <gaussj+0x244>
            a[icol][l] *= pivinv;
 8019e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e72:	009b      	lsls	r3, r3, #2
 8019e74:	68fa      	ldr	r2, [r7, #12]
 8019e76:	4413      	add	r3, r2
 8019e78:	681a      	ldr	r2, [r3, #0]
 8019e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e7c:	009b      	lsls	r3, r3, #2
 8019e7e:	4413      	add	r3, r2
 8019e80:	ed93 7a00 	vldr	s14, [r3]
 8019e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019e86:	009b      	lsls	r3, r3, #2
 8019e88:	68fa      	ldr	r2, [r7, #12]
 8019e8a:	4413      	add	r3, r2
 8019e8c:	681a      	ldr	r2, [r3, #0]
 8019e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e90:	009b      	lsls	r3, r3, #2
 8019e92:	4413      	add	r3, r2
 8019e94:	edd7 7a05 	vldr	s15, [r7, #20]
 8019e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019e9c:	edc3 7a00 	vstr	s15, [r3]
        for (l = 0; l < n; l++)
 8019ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ea2:	3301      	adds	r3, #1
 8019ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8019ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019ea8:	68bb      	ldr	r3, [r7, #8]
 8019eaa:	429a      	cmp	r2, r3
 8019eac:	dbe0      	blt.n	8019e70 <gaussj+0x20e>
        b[icol] *= pivinv;
 8019eae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019eb0:	009b      	lsls	r3, r3, #2
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	4413      	add	r3, r2
 8019eb6:	ed93 7a00 	vldr	s14, [r3]
 8019eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ebc:	009b      	lsls	r3, r3, #2
 8019ebe:	687a      	ldr	r2, [r7, #4]
 8019ec0:	4413      	add	r3, r2
 8019ec2:	edd7 7a05 	vldr	s15, [r7, #20]
 8019ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019eca:	edc3 7a00 	vstr	s15, [r3]

        // Next, we reduce the row, except for the pivot one.
        for (ll = 0; ll < n; ll++)
 8019ece:	2300      	movs	r3, #0
 8019ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019ed2:	e061      	b.n	8019f98 <gaussj+0x336>
        {
            if (ll != icol)
 8019ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ed8:	429a      	cmp	r2, r3
 8019eda:	d05a      	beq.n	8019f92 <gaussj+0x330>
            {
                dum = a[ll][icol];
 8019edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ede:	009b      	lsls	r3, r3, #2
 8019ee0:	68fa      	ldr	r2, [r7, #12]
 8019ee2:	4413      	add	r3, r2
 8019ee4:	681a      	ldr	r2, [r3, #0]
 8019ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019ee8:	009b      	lsls	r3, r3, #2
 8019eea:	4413      	add	r3, r2
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	613b      	str	r3, [r7, #16]
                a[ll][icol] = 0.0;
 8019ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef2:	009b      	lsls	r3, r3, #2
 8019ef4:	68fa      	ldr	r2, [r7, #12]
 8019ef6:	4413      	add	r3, r2
 8019ef8:	681a      	ldr	r2, [r3, #0]
 8019efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019efc:	009b      	lsls	r3, r3, #2
 8019efe:	4413      	add	r3, r2
 8019f00:	f04f 0200 	mov.w	r2, #0
 8019f04:	601a      	str	r2, [r3, #0]
                for (l = 0; l < n; l++)
 8019f06:	2300      	movs	r3, #0
 8019f08:	633b      	str	r3, [r7, #48]	; 0x30
 8019f0a:	e026      	b.n	8019f5a <gaussj+0x2f8>
                    a[ll][l] -= a[icol][l] * dum;
 8019f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f0e:	009b      	lsls	r3, r3, #2
 8019f10:	68fa      	ldr	r2, [r7, #12]
 8019f12:	4413      	add	r3, r2
 8019f14:	681a      	ldr	r2, [r3, #0]
 8019f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f18:	009b      	lsls	r3, r3, #2
 8019f1a:	4413      	add	r3, r2
 8019f1c:	ed93 7a00 	vldr	s14, [r3]
 8019f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f22:	009b      	lsls	r3, r3, #2
 8019f24:	68fa      	ldr	r2, [r7, #12]
 8019f26:	4413      	add	r3, r2
 8019f28:	681a      	ldr	r2, [r3, #0]
 8019f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f2c:	009b      	lsls	r3, r3, #2
 8019f2e:	4413      	add	r3, r2
 8019f30:	edd3 6a00 	vldr	s13, [r3]
 8019f34:	edd7 7a04 	vldr	s15, [r7, #16]
 8019f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f3e:	009b      	lsls	r3, r3, #2
 8019f40:	68fa      	ldr	r2, [r7, #12]
 8019f42:	4413      	add	r3, r2
 8019f44:	681a      	ldr	r2, [r3, #0]
 8019f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f48:	009b      	lsls	r3, r3, #2
 8019f4a:	4413      	add	r3, r2
 8019f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f50:	edc3 7a00 	vstr	s15, [r3]
                for (l = 0; l < n; l++)
 8019f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019f56:	3301      	adds	r3, #1
 8019f58:	633b      	str	r3, [r7, #48]	; 0x30
 8019f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	429a      	cmp	r2, r3
 8019f60:	dbd4      	blt.n	8019f0c <gaussj+0x2aa>
                b[ll] -= b[icol] * dum;
 8019f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f64:	009b      	lsls	r3, r3, #2
 8019f66:	687a      	ldr	r2, [r7, #4]
 8019f68:	4413      	add	r3, r2
 8019f6a:	ed93 7a00 	vldr	s14, [r3]
 8019f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019f70:	009b      	lsls	r3, r3, #2
 8019f72:	687a      	ldr	r2, [r7, #4]
 8019f74:	4413      	add	r3, r2
 8019f76:	edd3 6a00 	vldr	s13, [r3]
 8019f7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8019f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f84:	009b      	lsls	r3, r3, #2
 8019f86:	687a      	ldr	r2, [r7, #4]
 8019f88:	4413      	add	r3, r2
 8019f8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f8e:	edc3 7a00 	vstr	s15, [r3]
        for (ll = 0; ll < n; ll++)
 8019f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f94:	3301      	adds	r3, #1
 8019f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f9a:	68bb      	ldr	r3, [r7, #8]
 8019f9c:	429a      	cmp	r2, r3
 8019f9e:	db99      	blt.n	8019ed4 <gaussj+0x272>
    for (i = 0; i < n; i++)
 8019fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019fa2:	3301      	adds	r3, #1
 8019fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	429a      	cmp	r2, r3
 8019fac:	f6ff ae82 	blt.w	8019cb4 <gaussj+0x52>
    // It only remains to unscramble the solution in view of the column
    // interchanges.
    //
    // We do this by interchanging pairs of columns in the reverse order
    // that the permutation was built up.
    for (l = n - 1; l >= 0; l--)
 8019fb0:	68bb      	ldr	r3, [r7, #8]
 8019fb2:	3b01      	subs	r3, #1
 8019fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8019fb6:	e04e      	b.n	801a056 <gaussj+0x3f4>
    {
        if (indxr[l] != indxc[l])
 8019fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fba:	009b      	lsls	r3, r3, #2
 8019fbc:	6a3a      	ldr	r2, [r7, #32]
 8019fbe:	4413      	add	r3, r2
 8019fc0:	681a      	ldr	r2, [r3, #0]
 8019fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fc4:	009b      	lsls	r3, r3, #2
 8019fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019fc8:	440b      	add	r3, r1
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	429a      	cmp	r2, r3
 8019fce:	d03f      	beq.n	801a050 <gaussj+0x3ee>
        {
            for (k = 0; k < n; k++)
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8019fd4:	e038      	b.n	801a048 <gaussj+0x3e6>
                SWAP(a[k][indxr[l]], a[k][indxc[l]]);
 8019fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019fd8:	009b      	lsls	r3, r3, #2
 8019fda:	68fa      	ldr	r2, [r7, #12]
 8019fdc:	4413      	add	r3, r2
 8019fde:	681a      	ldr	r2, [r3, #0]
 8019fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019fe2:	009b      	lsls	r3, r3, #2
 8019fe4:	6a39      	ldr	r1, [r7, #32]
 8019fe6:	440b      	add	r3, r1
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	009b      	lsls	r3, r3, #2
 8019fec:	4413      	add	r3, r2
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	61bb      	str	r3, [r7, #24]
 8019ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ff4:	009b      	lsls	r3, r3, #2
 8019ff6:	68fa      	ldr	r2, [r7, #12]
 8019ff8:	4413      	add	r3, r2
 8019ffa:	681a      	ldr	r2, [r3, #0]
 8019ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ffe:	009b      	lsls	r3, r3, #2
 801a000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a002:	440b      	add	r3, r1
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	009b      	lsls	r3, r3, #2
 801a008:	441a      	add	r2, r3
 801a00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a00c:	009b      	lsls	r3, r3, #2
 801a00e:	68f9      	ldr	r1, [r7, #12]
 801a010:	440b      	add	r3, r1
 801a012:	6819      	ldr	r1, [r3, #0]
 801a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a016:	009b      	lsls	r3, r3, #2
 801a018:	6a38      	ldr	r0, [r7, #32]
 801a01a:	4403      	add	r3, r0
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	009b      	lsls	r3, r3, #2
 801a020:	440b      	add	r3, r1
 801a022:	6812      	ldr	r2, [r2, #0]
 801a024:	601a      	str	r2, [r3, #0]
 801a026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a028:	009b      	lsls	r3, r3, #2
 801a02a:	68fa      	ldr	r2, [r7, #12]
 801a02c:	4413      	add	r3, r2
 801a02e:	681a      	ldr	r2, [r3, #0]
 801a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a032:	009b      	lsls	r3, r3, #2
 801a034:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a036:	440b      	add	r3, r1
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	009b      	lsls	r3, r3, #2
 801a03c:	4413      	add	r3, r2
 801a03e:	69ba      	ldr	r2, [r7, #24]
 801a040:	601a      	str	r2, [r3, #0]
            for (k = 0; k < n; k++)
 801a042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a044:	3301      	adds	r3, #1
 801a046:	637b      	str	r3, [r7, #52]	; 0x34
 801a048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a04a:	68bb      	ldr	r3, [r7, #8]
 801a04c:	429a      	cmp	r2, r3
 801a04e:	dbc2      	blt.n	8019fd6 <gaussj+0x374>
    for (l = n - 1; l >= 0; l--)
 801a050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a052:	3b01      	subs	r3, #1
 801a054:	633b      	str	r3, [r7, #48]	; 0x30
 801a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a058:	2b00      	cmp	r3, #0
 801a05a:	daad      	bge.n	8019fb8 <gaussj+0x356>
        }
    }

    free_ivector(ipiv);
 801a05c:	69f8      	ldr	r0, [r7, #28]
 801a05e:	f7ff fd31 	bl	8019ac4 <free_ivector>
    free_ivector(indxr);
 801a062:	6a38      	ldr	r0, [r7, #32]
 801a064:	f7ff fd2e 	bl	8019ac4 <free_ivector>
    free_ivector(indxc);
 801a068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a06a:	f7ff fd2b 	bl	8019ac4 <free_ivector>
 801a06e:	e002      	b.n	801a076 <gaussj+0x414>
                    else if (ipiv[k] > 1) return;  // Singular Matrix-1
 801a070:	bf00      	nop
 801a072:	e000      	b.n	801a076 <gaussj+0x414>
        if (a[icol][icol] == 0) return;  // Singular Matrix-2
 801a074:	bf00      	nop
}
 801a076:	3748      	adds	r7, #72	; 0x48
 801a078:	46bd      	mov	sp, r7
 801a07a:	bd80      	pop	{r7, pc}

0801a07c <seamdata>:
* Input: y = f(x; a), x is position, and a is the fit coefficients
* Output: dyda
*/
void seamdata(const float x, const float a[], float *y,
	float dyda[])
{
 801a07c:	b5b0      	push	{r4, r5, r7, lr}
 801a07e:	b088      	sub	sp, #32
 801a080:	af00      	add	r7, sp, #0
 801a082:	ed87 0a03 	vstr	s0, [r7, #12]
 801a086:	60b8      	str	r0, [r7, #8]
 801a088:	6079      	str	r1, [r7, #4]
 801a08a:	603a      	str	r2, [r7, #0]
    float fac, ex, arg;

    arg = (x-a[0])/a[1];
 801a08c:	68bb      	ldr	r3, [r7, #8]
 801a08e:	edd3 7a00 	vldr	s15, [r3]
 801a092:	ed97 7a03 	vldr	s14, [r7, #12]
 801a096:	ee77 6a67 	vsub.f32	s13, s14, s15
 801a09a:	68bb      	ldr	r3, [r7, #8]
 801a09c:	3304      	adds	r3, #4
 801a09e:	ed93 7a00 	vldr	s14, [r3]
 801a0a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a0a6:	edc7 7a07 	vstr	s15, [r7, #28]
    ex = exp(- (double)arg * (double)arg);
 801a0aa:	69f8      	ldr	r0, [r7, #28]
 801a0ac:	f7e6 fa54 	bl	8000558 <__aeabi_f2d>
 801a0b0:	4602      	mov	r2, r0
 801a0b2:	460b      	mov	r3, r1
 801a0b4:	4614      	mov	r4, r2
 801a0b6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 801a0ba:	69f8      	ldr	r0, [r7, #28]
 801a0bc:	f7e6 fa4c 	bl	8000558 <__aeabi_f2d>
 801a0c0:	4602      	mov	r2, r0
 801a0c2:	460b      	mov	r3, r1
 801a0c4:	4620      	mov	r0, r4
 801a0c6:	4629      	mov	r1, r5
 801a0c8:	f7e6 fa9e 	bl	8000608 <__aeabi_dmul>
 801a0cc:	4602      	mov	r2, r0
 801a0ce:	460b      	mov	r3, r1
 801a0d0:	ec43 2b17 	vmov	d7, r2, r3
 801a0d4:	eeb0 0a47 	vmov.f32	s0, s14
 801a0d8:	eef0 0a67 	vmov.f32	s1, s15
 801a0dc:	f001 ffa0 	bl	801c020 <exp>
 801a0e0:	ec53 2b10 	vmov	r2, r3, d0
 801a0e4:	4610      	mov	r0, r2
 801a0e6:	4619      	mov	r1, r3
 801a0e8:	f7e6 fd50 	bl	8000b8c <__aeabi_d2f>
 801a0ec:	4603      	mov	r3, r0
 801a0ee:	61bb      	str	r3, [r7, #24]
    *y = ex;
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	69ba      	ldr	r2, [r7, #24]
 801a0f4:	601a      	str	r2, [r3, #0]

    fac = 2.0*arg*ex;
 801a0f6:	69f8      	ldr	r0, [r7, #28]
 801a0f8:	f7e6 fa2e 	bl	8000558 <__aeabi_f2d>
 801a0fc:	4602      	mov	r2, r0
 801a0fe:	460b      	mov	r3, r1
 801a100:	f7e6 f8cc 	bl	800029c <__adddf3>
 801a104:	4602      	mov	r2, r0
 801a106:	460b      	mov	r3, r1
 801a108:	4614      	mov	r4, r2
 801a10a:	461d      	mov	r5, r3
 801a10c:	69b8      	ldr	r0, [r7, #24]
 801a10e:	f7e6 fa23 	bl	8000558 <__aeabi_f2d>
 801a112:	4602      	mov	r2, r0
 801a114:	460b      	mov	r3, r1
 801a116:	4620      	mov	r0, r4
 801a118:	4629      	mov	r1, r5
 801a11a:	f7e6 fa75 	bl	8000608 <__aeabi_dmul>
 801a11e:	4602      	mov	r2, r0
 801a120:	460b      	mov	r3, r1
 801a122:	4610      	mov	r0, r2
 801a124:	4619      	mov	r1, r3
 801a126:	f7e6 fd31 	bl	8000b8c <__aeabi_d2f>
 801a12a:	4603      	mov	r3, r0
 801a12c:	617b      	str	r3, [r7, #20]
    dyda[0] = fac/a[1];
 801a12e:	68bb      	ldr	r3, [r7, #8]
 801a130:	3304      	adds	r3, #4
 801a132:	ed93 7a00 	vldr	s14, [r3]
 801a136:	edd7 6a05 	vldr	s13, [r7, #20]
 801a13a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a13e:	683b      	ldr	r3, [r7, #0]
 801a140:	edc3 7a00 	vstr	s15, [r3]
    dyda[1] = fac*arg/a[1];
 801a144:	ed97 7a05 	vldr	s14, [r7, #20]
 801a148:	edd7 7a07 	vldr	s15, [r7, #28]
 801a14c:	ee67 6a27 	vmul.f32	s13, s14, s15
 801a150:	68bb      	ldr	r3, [r7, #8]
 801a152:	3304      	adds	r3, #4
 801a154:	ed93 7a00 	vldr	s14, [r3]
 801a158:	683b      	ldr	r3, [r7, #0]
 801a15a:	3304      	adds	r3, #4
 801a15c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a160:	edc3 7a00 	vstr	s15, [r3]
}
 801a164:	bf00      	nop
 801a166:	3720      	adds	r7, #32
 801a168:	46bd      	mov	sp, r7
 801a16a:	bdb0      	pop	{r4, r5, r7, pc}

0801a16c <mrqcof>:
*          beta, the Jacobian matrix, the gradient
*         chisq, the chi squared coefficient
*/
void mrqcof(const float x[], const float y[], const int ndata,
	float a[], float** alpha, float beta[], float* chisq)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b090      	sub	sp, #64	; 0x40
 801a170:	af00      	add	r7, sp, #0
 801a172:	60f8      	str	r0, [r7, #12]
 801a174:	60b9      	str	r1, [r7, #8]
 801a176:	607a      	str	r2, [r7, #4]
 801a178:	603b      	str	r3, [r7, #0]
    int i, j, k, l, m;
    const int mfit = 2;  // number of fitted coefficients
 801a17a:	2302      	movs	r3, #2
 801a17c:	62bb      	str	r3, [r7, #40]	; 0x28
    float ymod, wt, sig2i, dy, * dyda;

    dyda = vector(2);
 801a17e:	2002      	movs	r0, #2
 801a180:	f7ff fc2a 	bl	80199d8 <vector>
 801a184:	6278      	str	r0, [r7, #36]	; 0x24

    // Initialize (symmetric, only half of matrix) alpha, beta and chisq.
    for (j = 0; j < mfit; j++)
 801a186:	2300      	movs	r3, #0
 801a188:	63bb      	str	r3, [r7, #56]	; 0x38
 801a18a:	e01e      	b.n	801a1ca <mrqcof+0x5e>
    {
        for (k = 0; k <= j; k++) alpha[j][k] = 0.0;
 801a18c:	2300      	movs	r3, #0
 801a18e:	637b      	str	r3, [r7, #52]	; 0x34
 801a190:	e00d      	b.n	801a1ae <mrqcof+0x42>
 801a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a194:	009b      	lsls	r3, r3, #2
 801a196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a198:	4413      	add	r3, r2
 801a19a:	681a      	ldr	r2, [r3, #0]
 801a19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a19e:	009b      	lsls	r3, r3, #2
 801a1a0:	4413      	add	r3, r2
 801a1a2:	f04f 0200 	mov.w	r2, #0
 801a1a6:	601a      	str	r2, [r3, #0]
 801a1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a1aa:	3301      	adds	r3, #1
 801a1ac:	637b      	str	r3, [r7, #52]	; 0x34
 801a1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1b2:	429a      	cmp	r2, r3
 801a1b4:	dded      	ble.n	801a192 <mrqcof+0x26>
        beta[j] = 0.0;
 801a1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1b8:	009b      	lsls	r3, r3, #2
 801a1ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a1bc:	4413      	add	r3, r2
 801a1be:	f04f 0200 	mov.w	r2, #0
 801a1c2:	601a      	str	r2, [r3, #0]
    for (j = 0; j < mfit; j++)
 801a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1c6:	3301      	adds	r3, #1
 801a1c8:	63bb      	str	r3, [r7, #56]	; 0x38
 801a1ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a1ce:	429a      	cmp	r2, r3
 801a1d0:	dbdc      	blt.n	801a18c <mrqcof+0x20>
    }

    // Summation loop over all data.
    *chisq = 0.0;
 801a1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1d4:	f04f 0200 	mov.w	r2, #0
 801a1d8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < ndata; i++)
 801a1da:	2300      	movs	r3, #0
 801a1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a1de:	e08c      	b.n	801a2fa <mrqcof+0x18e>
    {
        // input x[] and a,
        // get data from ymod (y value by the fitting modal) and dyda
        seamdata(x[i], a, &ymod, dyda);
 801a1e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1e2:	009b      	lsls	r3, r3, #2
 801a1e4:	68fa      	ldr	r2, [r7, #12]
 801a1e6:	4413      	add	r3, r2
 801a1e8:	edd3 7a00 	vldr	s15, [r3]
 801a1ec:	f107 0314 	add.w	r3, r7, #20
 801a1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1f2:	4619      	mov	r1, r3
 801a1f4:	6838      	ldr	r0, [r7, #0]
 801a1f6:	eeb0 0a67 	vmov.f32	s0, s15
 801a1fa:	f7ff ff3f 	bl	801a07c <seamdata>
        sig2i = 1.0;  // the measure error is ignored.
 801a1fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801a202:	623b      	str	r3, [r7, #32]
        dy = y[i] - ymod;
 801a204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a206:	009b      	lsls	r3, r3, #2
 801a208:	68ba      	ldr	r2, [r7, #8]
 801a20a:	4413      	add	r3, r2
 801a20c:	ed93 7a00 	vldr	s14, [r3]
 801a210:	edd7 7a05 	vldr	s15, [r7, #20]
 801a214:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a218:	edc7 7a07 	vstr	s15, [r7, #28]

        for (j = 0, l = 0; l < 2; l++)
 801a21c:	2300      	movs	r3, #0
 801a21e:	63bb      	str	r3, [r7, #56]	; 0x38
 801a220:	2300      	movs	r3, #0
 801a222:	633b      	str	r3, [r7, #48]	; 0x30
 801a224:	e053      	b.n	801a2ce <mrqcof+0x162>
        {
            wt = dyda[l] * sig2i;
 801a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a228:	009b      	lsls	r3, r3, #2
 801a22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a22c:	4413      	add	r3, r2
 801a22e:	edd3 7a00 	vldr	s15, [r3]
 801a232:	ed97 7a08 	vldr	s14, [r7, #32]
 801a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a23a:	edc7 7a06 	vstr	s15, [r7, #24]
            for (j++, k = 0, m = 0; m <= l; m++)
 801a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a240:	3301      	adds	r3, #1
 801a242:	63bb      	str	r3, [r7, #56]	; 0x38
 801a244:	2300      	movs	r3, #0
 801a246:	637b      	str	r3, [r7, #52]	; 0x34
 801a248:	2300      	movs	r3, #0
 801a24a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a24c:	e024      	b.n	801a298 <mrqcof+0x12c>
                alpha[j][k++] += wt * dyda[m];
 801a24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a250:	009b      	lsls	r3, r3, #2
 801a252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a254:	4413      	add	r3, r2
 801a256:	6819      	ldr	r1, [r3, #0]
 801a258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a25a:	1c5a      	adds	r2, r3, #1
 801a25c:	637a      	str	r2, [r7, #52]	; 0x34
 801a25e:	461a      	mov	r2, r3
 801a260:	0092      	lsls	r2, r2, #2
 801a262:	440a      	add	r2, r1
 801a264:	ed92 7a00 	vldr	s14, [r2]
 801a268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a26a:	0092      	lsls	r2, r2, #2
 801a26c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a26e:	440a      	add	r2, r1
 801a270:	edd2 6a00 	vldr	s13, [r2]
 801a274:	edd7 7a06 	vldr	s15, [r7, #24]
 801a278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a27c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a27e:	0092      	lsls	r2, r2, #2
 801a280:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a282:	440a      	add	r2, r1
 801a284:	6812      	ldr	r2, [r2, #0]
 801a286:	009b      	lsls	r3, r3, #2
 801a288:	4413      	add	r3, r2
 801a28a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a28e:	edc3 7a00 	vstr	s15, [r3]
            for (j++, k = 0, m = 0; m <= l; m++)
 801a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a294:	3301      	adds	r3, #1
 801a296:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a29c:	429a      	cmp	r2, r3
 801a29e:	ddd6      	ble.n	801a24e <mrqcof+0xe2>
            beta[j] += dy * wt;
 801a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2a2:	009b      	lsls	r3, r3, #2
 801a2a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a2a6:	4413      	add	r3, r2
 801a2a8:	ed93 7a00 	vldr	s14, [r3]
 801a2ac:	edd7 6a07 	vldr	s13, [r7, #28]
 801a2b0:	edd7 7a06 	vldr	s15, [r7, #24]
 801a2b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2ba:	009b      	lsls	r3, r3, #2
 801a2bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a2be:	4413      	add	r3, r2
 801a2c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a2c4:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, l = 0; l < 2; l++)
 801a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2ca:	3301      	adds	r3, #1
 801a2cc:	633b      	str	r3, [r7, #48]	; 0x30
 801a2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2d0:	2b01      	cmp	r3, #1
 801a2d2:	dda8      	ble.n	801a226 <mrqcof+0xba>
        }
        *chisq += dy * dy * sig2i;  // finding \chi^2
 801a2d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2d6:	ed93 7a00 	vldr	s14, [r3]
 801a2da:	edd7 7a07 	vldr	s15, [r7, #28]
 801a2de:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a2e2:	edd7 7a08 	vldr	s15, [r7, #32]
 801a2e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a2ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a2ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a2f0:	edc3 7a00 	vstr	s15, [r3]
    for (i = 0; i < ndata; i++)
 801a2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2f6:	3301      	adds	r3, #1
 801a2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801a2fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	429a      	cmp	r2, r3
 801a300:	f6ff af6e 	blt.w	801a1e0 <mrqcof+0x74>
    }

    // Fill in the symmetric side.
    for (j = 1; j < mfit; j++)
 801a304:	2301      	movs	r3, #1
 801a306:	63bb      	str	r3, [r7, #56]	; 0x38
 801a308:	e01e      	b.n	801a348 <mrqcof+0x1dc>
        for (k = 1; k < j; k++) alpha[k][j] = alpha[j][k];
 801a30a:	2301      	movs	r3, #1
 801a30c:	637b      	str	r3, [r7, #52]	; 0x34
 801a30e:	e014      	b.n	801a33a <mrqcof+0x1ce>
 801a310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a312:	009b      	lsls	r3, r3, #2
 801a314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a316:	4413      	add	r3, r2
 801a318:	681a      	ldr	r2, [r3, #0]
 801a31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a31c:	009b      	lsls	r3, r3, #2
 801a31e:	441a      	add	r2, r3
 801a320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a322:	009b      	lsls	r3, r3, #2
 801a324:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a326:	440b      	add	r3, r1
 801a328:	6819      	ldr	r1, [r3, #0]
 801a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a32c:	009b      	lsls	r3, r3, #2
 801a32e:	440b      	add	r3, r1
 801a330:	6812      	ldr	r2, [r2, #0]
 801a332:	601a      	str	r2, [r3, #0]
 801a334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a336:	3301      	adds	r3, #1
 801a338:	637b      	str	r3, [r7, #52]	; 0x34
 801a33a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a33e:	429a      	cmp	r2, r3
 801a340:	dbe6      	blt.n	801a310 <mrqcof+0x1a4>
    for (j = 1; j < mfit; j++)
 801a342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a344:	3301      	adds	r3, #1
 801a346:	63bb      	str	r3, [r7, #56]	; 0x38
 801a348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a34c:	429a      	cmp	r2, r3
 801a34e:	dbdc      	blt.n	801a30a <mrqcof+0x19e>

    free_vector(dyda);
 801a350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a352:	f7ff fbac 	bl	8019aae <free_vector>
}
 801a356:	bf00      	nop
 801a358:	3740      	adds	r7, #64	; 0x40
 801a35a:	46bd      	mov	sp, r7
 801a35c:	bd80      	pop	{r7, pc}
	...

0801a360 <mrqmin>:
* and \chi^2 = chisq.
*/
void mrqmin(const float x[], const float y[], const int ndata,
    float a[],
    float** covar, float** alpha, float* chisq, float* alamda)
{
 801a360:	b5b0      	push	{r4, r5, r7, lr}
 801a362:	b08c      	sub	sp, #48	; 0x30
 801a364:	af04      	add	r7, sp, #16
 801a366:	60f8      	str	r0, [r7, #12]
 801a368:	60b9      	str	r1, [r7, #8]
 801a36a:	607a      	str	r2, [r7, #4]
 801a36c:	603b      	str	r3, [r7, #0]
    int j, k, l;
    const int mfit = 2;  // number of fitted coefficients
 801a36e:	2302      	movs	r3, #2
 801a370:	613b      	str	r3, [r7, #16]
    static float ochisq;  // old value of chi^2
    static float* atry, * beta, * da, * oneda;

    // Initialization when alamda is set less than 0 in the first step.
    if (*alamda < 0.0)
 801a372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a374:	edd3 7a00 	vldr	s15, [r3]
 801a378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a380:	d540      	bpl.n	801a404 <mrqmin+0xa4>
    {
        // allocate memory, not used in new C version
        atry = vector(mfit);  // try value of a
 801a382:	6938      	ldr	r0, [r7, #16]
 801a384:	f7ff fb28 	bl	80199d8 <vector>
 801a388:	4603      	mov	r3, r0
 801a38a:	4a8d      	ldr	r2, [pc, #564]	; (801a5c0 <mrqmin+0x260>)
 801a38c:	6013      	str	r3, [r2, #0]
        beta = vector(mfit);
 801a38e:	6938      	ldr	r0, [r7, #16]
 801a390:	f7ff fb22 	bl	80199d8 <vector>
 801a394:	4603      	mov	r3, r0
 801a396:	4a8b      	ldr	r2, [pc, #556]	; (801a5c4 <mrqmin+0x264>)
 801a398:	6013      	str	r3, [r2, #0]
        da = vector(mfit);
 801a39a:	6938      	ldr	r0, [r7, #16]
 801a39c:	f7ff fb1c 	bl	80199d8 <vector>
 801a3a0:	4603      	mov	r3, r0
 801a3a2:	4a89      	ldr	r2, [pc, #548]	; (801a5c8 <mrqmin+0x268>)
 801a3a4:	6013      	str	r3, [r2, #0]
        oneda = vector(mfit); // one column of dyda
 801a3a6:	6938      	ldr	r0, [r7, #16]
 801a3a8:	f7ff fb16 	bl	80199d8 <vector>
 801a3ac:	4603      	mov	r3, r0
 801a3ae:	4a87      	ldr	r2, [pc, #540]	; (801a5cc <mrqmin+0x26c>)
 801a3b0:	6013      	str	r3, [r2, #0]

        *alamda = 0.001;
 801a3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a3b4:	4a86      	ldr	r2, [pc, #536]	; (801a5d0 <mrqmin+0x270>)
 801a3b6:	601a      	str	r2, [r3, #0]
        mrqcof(x, y, ndata, a, alpha, beta, chisq);
 801a3b8:	4b82      	ldr	r3, [pc, #520]	; (801a5c4 <mrqmin+0x264>)
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a3be:	9202      	str	r2, [sp, #8]
 801a3c0:	9301      	str	r3, [sp, #4]
 801a3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3c4:	9300      	str	r3, [sp, #0]
 801a3c6:	683b      	ldr	r3, [r7, #0]
 801a3c8:	687a      	ldr	r2, [r7, #4]
 801a3ca:	68b9      	ldr	r1, [r7, #8]
 801a3cc:	68f8      	ldr	r0, [r7, #12]
 801a3ce:	f7ff fecd 	bl	801a16c <mrqcof>
        ochisq = (*chisq);
 801a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	4a7f      	ldr	r2, [pc, #508]	; (801a5d4 <mrqmin+0x274>)
 801a3d8:	6013      	str	r3, [r2, #0]

        for (j = 0; j < mfit; j++) atry[j] = a[j];
 801a3da:	2300      	movs	r3, #0
 801a3dc:	61fb      	str	r3, [r7, #28]
 801a3de:	e00d      	b.n	801a3fc <mrqmin+0x9c>
 801a3e0:	69fb      	ldr	r3, [r7, #28]
 801a3e2:	009b      	lsls	r3, r3, #2
 801a3e4:	683a      	ldr	r2, [r7, #0]
 801a3e6:	441a      	add	r2, r3
 801a3e8:	4b75      	ldr	r3, [pc, #468]	; (801a5c0 <mrqmin+0x260>)
 801a3ea:	6819      	ldr	r1, [r3, #0]
 801a3ec:	69fb      	ldr	r3, [r7, #28]
 801a3ee:	009b      	lsls	r3, r3, #2
 801a3f0:	440b      	add	r3, r1
 801a3f2:	6812      	ldr	r2, [r2, #0]
 801a3f4:	601a      	str	r2, [r3, #0]
 801a3f6:	69fb      	ldr	r3, [r7, #28]
 801a3f8:	3301      	adds	r3, #1
 801a3fa:	61fb      	str	r3, [r7, #28]
 801a3fc:	69fa      	ldr	r2, [r7, #28]
 801a3fe:	693b      	ldr	r3, [r7, #16]
 801a400:	429a      	cmp	r2, r3
 801a402:	dbed      	blt.n	801a3e0 <mrqmin+0x80>
    }

    // Alter linearized fitting matrix, by augmenting diagonal elements
    for (j = 0; j < mfit; j++)
 801a404:	2300      	movs	r3, #0
 801a406:	61fb      	str	r3, [r7, #28]
 801a408:	e058      	b.n	801a4bc <mrqmin+0x15c>
    {
        for (k = 0; k < mfit; k++)
 801a40a:	2300      	movs	r3, #0
 801a40c:	61bb      	str	r3, [r7, #24]
 801a40e:	e014      	b.n	801a43a <mrqmin+0xda>
            covar[j][k] = alpha[j][k];
 801a410:	69fb      	ldr	r3, [r7, #28]
 801a412:	009b      	lsls	r3, r3, #2
 801a414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a416:	4413      	add	r3, r2
 801a418:	681a      	ldr	r2, [r3, #0]
 801a41a:	69bb      	ldr	r3, [r7, #24]
 801a41c:	009b      	lsls	r3, r3, #2
 801a41e:	441a      	add	r2, r3
 801a420:	69fb      	ldr	r3, [r7, #28]
 801a422:	009b      	lsls	r3, r3, #2
 801a424:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a426:	440b      	add	r3, r1
 801a428:	6819      	ldr	r1, [r3, #0]
 801a42a:	69bb      	ldr	r3, [r7, #24]
 801a42c:	009b      	lsls	r3, r3, #2
 801a42e:	440b      	add	r3, r1
 801a430:	6812      	ldr	r2, [r2, #0]
 801a432:	601a      	str	r2, [r3, #0]
        for (k = 0; k < mfit; k++)
 801a434:	69bb      	ldr	r3, [r7, #24]
 801a436:	3301      	adds	r3, #1
 801a438:	61bb      	str	r3, [r7, #24]
 801a43a:	69ba      	ldr	r2, [r7, #24]
 801a43c:	693b      	ldr	r3, [r7, #16]
 801a43e:	429a      	cmp	r2, r3
 801a440:	dbe6      	blt.n	801a410 <mrqmin+0xb0>

        covar[j][k] = alpha[j][j] * (1.0 + (*alamda));
 801a442:	69fb      	ldr	r3, [r7, #28]
 801a444:	009b      	lsls	r3, r3, #2
 801a446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a448:	4413      	add	r3, r2
 801a44a:	681a      	ldr	r2, [r3, #0]
 801a44c:	69fb      	ldr	r3, [r7, #28]
 801a44e:	009b      	lsls	r3, r3, #2
 801a450:	4413      	add	r3, r2
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	4618      	mov	r0, r3
 801a456:	f7e6 f87f 	bl	8000558 <__aeabi_f2d>
 801a45a:	4604      	mov	r4, r0
 801a45c:	460d      	mov	r5, r1
 801a45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	4618      	mov	r0, r3
 801a464:	f7e6 f878 	bl	8000558 <__aeabi_f2d>
 801a468:	f04f 0200 	mov.w	r2, #0
 801a46c:	4b5a      	ldr	r3, [pc, #360]	; (801a5d8 <mrqmin+0x278>)
 801a46e:	f7e5 ff15 	bl	800029c <__adddf3>
 801a472:	4602      	mov	r2, r0
 801a474:	460b      	mov	r3, r1
 801a476:	4620      	mov	r0, r4
 801a478:	4629      	mov	r1, r5
 801a47a:	f7e6 f8c5 	bl	8000608 <__aeabi_dmul>
 801a47e:	4602      	mov	r2, r0
 801a480:	460b      	mov	r3, r1
 801a482:	4610      	mov	r0, r2
 801a484:	4619      	mov	r1, r3
 801a486:	69fb      	ldr	r3, [r7, #28]
 801a488:	009b      	lsls	r3, r3, #2
 801a48a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a48c:	4413      	add	r3, r2
 801a48e:	681a      	ldr	r2, [r3, #0]
 801a490:	69bb      	ldr	r3, [r7, #24]
 801a492:	009b      	lsls	r3, r3, #2
 801a494:	18d4      	adds	r4, r2, r3
 801a496:	f7e6 fb79 	bl	8000b8c <__aeabi_d2f>
 801a49a:	4603      	mov	r3, r0
 801a49c:	6023      	str	r3, [r4, #0]
        oneda[j] = beta[j];
 801a49e:	4b49      	ldr	r3, [pc, #292]	; (801a5c4 <mrqmin+0x264>)
 801a4a0:	681a      	ldr	r2, [r3, #0]
 801a4a2:	69fb      	ldr	r3, [r7, #28]
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	441a      	add	r2, r3
 801a4a8:	4b48      	ldr	r3, [pc, #288]	; (801a5cc <mrqmin+0x26c>)
 801a4aa:	6819      	ldr	r1, [r3, #0]
 801a4ac:	69fb      	ldr	r3, [r7, #28]
 801a4ae:	009b      	lsls	r3, r3, #2
 801a4b0:	440b      	add	r3, r1
 801a4b2:	6812      	ldr	r2, [r2, #0]
 801a4b4:	601a      	str	r2, [r3, #0]
    for (j = 0; j < mfit; j++)
 801a4b6:	69fb      	ldr	r3, [r7, #28]
 801a4b8:	3301      	adds	r3, #1
 801a4ba:	61fb      	str	r3, [r7, #28]
 801a4bc:	69fa      	ldr	r2, [r7, #28]
 801a4be:	693b      	ldr	r3, [r7, #16]
 801a4c0:	429a      	cmp	r2, r3
 801a4c2:	dba2      	blt.n	801a40a <mrqmin+0xaa>
    }

    gaussj(covar, mfit, oneda);  // Matrix solution
 801a4c4:	4b41      	ldr	r3, [pc, #260]	; (801a5cc <mrqmin+0x26c>)
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	461a      	mov	r2, r3
 801a4ca:	6939      	ldr	r1, [r7, #16]
 801a4cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a4ce:	f7ff fbc8 	bl	8019c62 <gaussj>

    for (j = 0; j < mfit; j++) da[j] = oneda[j];
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	61fb      	str	r3, [r7, #28]
 801a4d6:	e00e      	b.n	801a4f6 <mrqmin+0x196>
 801a4d8:	4b3c      	ldr	r3, [pc, #240]	; (801a5cc <mrqmin+0x26c>)
 801a4da:	681a      	ldr	r2, [r3, #0]
 801a4dc:	69fb      	ldr	r3, [r7, #28]
 801a4de:	009b      	lsls	r3, r3, #2
 801a4e0:	441a      	add	r2, r3
 801a4e2:	4b39      	ldr	r3, [pc, #228]	; (801a5c8 <mrqmin+0x268>)
 801a4e4:	6819      	ldr	r1, [r3, #0]
 801a4e6:	69fb      	ldr	r3, [r7, #28]
 801a4e8:	009b      	lsls	r3, r3, #2
 801a4ea:	440b      	add	r3, r1
 801a4ec:	6812      	ldr	r2, [r2, #0]
 801a4ee:	601a      	str	r2, [r3, #0]
 801a4f0:	69fb      	ldr	r3, [r7, #28]
 801a4f2:	3301      	adds	r3, #1
 801a4f4:	61fb      	str	r3, [r7, #28]
 801a4f6:	69fa      	ldr	r2, [r7, #28]
 801a4f8:	693b      	ldr	r3, [r7, #16]
 801a4fa:	429a      	cmp	r2, r3
 801a4fc:	dbec      	blt.n	801a4d8 <mrqmin+0x178>

    // Did the trial succeed?
    for (j = 0, l = 0; l < mfit; l++)
 801a4fe:	2300      	movs	r3, #0
 801a500:	61fb      	str	r3, [r7, #28]
 801a502:	2300      	movs	r3, #0
 801a504:	617b      	str	r3, [r7, #20]
 801a506:	e01b      	b.n	801a540 <mrqmin+0x1e0>
        atry[l] = a[l] + da[++j];
 801a508:	697b      	ldr	r3, [r7, #20]
 801a50a:	009b      	lsls	r3, r3, #2
 801a50c:	683a      	ldr	r2, [r7, #0]
 801a50e:	4413      	add	r3, r2
 801a510:	ed93 7a00 	vldr	s14, [r3]
 801a514:	4b2c      	ldr	r3, [pc, #176]	; (801a5c8 <mrqmin+0x268>)
 801a516:	681a      	ldr	r2, [r3, #0]
 801a518:	69fb      	ldr	r3, [r7, #28]
 801a51a:	3301      	adds	r3, #1
 801a51c:	61fb      	str	r3, [r7, #28]
 801a51e:	69fb      	ldr	r3, [r7, #28]
 801a520:	009b      	lsls	r3, r3, #2
 801a522:	4413      	add	r3, r2
 801a524:	edd3 7a00 	vldr	s15, [r3]
 801a528:	4b25      	ldr	r3, [pc, #148]	; (801a5c0 <mrqmin+0x260>)
 801a52a:	681a      	ldr	r2, [r3, #0]
 801a52c:	697b      	ldr	r3, [r7, #20]
 801a52e:	009b      	lsls	r3, r3, #2
 801a530:	4413      	add	r3, r2
 801a532:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a536:	edc3 7a00 	vstr	s15, [r3]
    for (j = 0, l = 0; l < mfit; l++)
 801a53a:	697b      	ldr	r3, [r7, #20]
 801a53c:	3301      	adds	r3, #1
 801a53e:	617b      	str	r3, [r7, #20]
 801a540:	697a      	ldr	r2, [r7, #20]
 801a542:	693b      	ldr	r3, [r7, #16]
 801a544:	429a      	cmp	r2, r3
 801a546:	dbdf      	blt.n	801a508 <mrqmin+0x1a8>
    mrqcof(x, y, ndata, atry, covar, da, chisq);
 801a548:	4b1d      	ldr	r3, [pc, #116]	; (801a5c0 <mrqmin+0x260>)
 801a54a:	6819      	ldr	r1, [r3, #0]
 801a54c:	4b1e      	ldr	r3, [pc, #120]	; (801a5c8 <mrqmin+0x268>)
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a552:	9202      	str	r2, [sp, #8]
 801a554:	9301      	str	r3, [sp, #4]
 801a556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a558:	9300      	str	r3, [sp, #0]
 801a55a:	460b      	mov	r3, r1
 801a55c:	687a      	ldr	r2, [r7, #4]
 801a55e:	68b9      	ldr	r1, [r7, #8]
 801a560:	68f8      	ldr	r0, [r7, #12]
 801a562:	f7ff fe03 	bl	801a16c <mrqcof>

    // Success, accept the new solution.
    if (*chisq < ochisq)
 801a566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a568:	ed93 7a00 	vldr	s14, [r3]
 801a56c:	4b19      	ldr	r3, [pc, #100]	; (801a5d4 <mrqmin+0x274>)
 801a56e:	edd3 7a00 	vldr	s15, [r3]
 801a572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a57a:	d571      	bpl.n	801a660 <mrqmin+0x300>
    {
        *alamda *= 0.1;
 801a57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	4618      	mov	r0, r3
 801a582:	f7e5 ffe9 	bl	8000558 <__aeabi_f2d>
 801a586:	a30c      	add	r3, pc, #48	; (adr r3, 801a5b8 <mrqmin+0x258>)
 801a588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a58c:	f7e6 f83c 	bl	8000608 <__aeabi_dmul>
 801a590:	4602      	mov	r2, r0
 801a592:	460b      	mov	r3, r1
 801a594:	4610      	mov	r0, r2
 801a596:	4619      	mov	r1, r3
 801a598:	f7e6 faf8 	bl	8000b8c <__aeabi_d2f>
 801a59c:	4602      	mov	r2, r0
 801a59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a5a0:	601a      	str	r2, [r3, #0]
        ochisq = (*chisq);
 801a5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	4a0b      	ldr	r2, [pc, #44]	; (801a5d4 <mrqmin+0x274>)
 801a5a8:	6013      	str	r3, [r2, #0]
        for (j = 0; j < mfit; j++)
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	61fb      	str	r3, [r7, #28]
 801a5ae:	e03d      	b.n	801a62c <mrqmin+0x2cc>
        {
            for (k = 0; k < mfit; k++)
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	61bb      	str	r3, [r7, #24]
 801a5b4:	e027      	b.n	801a606 <mrqmin+0x2a6>
 801a5b6:	bf00      	nop
 801a5b8:	9999999a 	.word	0x9999999a
 801a5bc:	3fb99999 	.word	0x3fb99999
 801a5c0:	200085ac 	.word	0x200085ac
 801a5c4:	200085b0 	.word	0x200085b0
 801a5c8:	200085b4 	.word	0x200085b4
 801a5cc:	200085b8 	.word	0x200085b8
 801a5d0:	3a83126f 	.word	0x3a83126f
 801a5d4:	200085bc 	.word	0x200085bc
 801a5d8:	3ff00000 	.word	0x3ff00000
                alpha[j][k] = covar[j][k];
 801a5dc:	69fb      	ldr	r3, [r7, #28]
 801a5de:	009b      	lsls	r3, r3, #2
 801a5e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a5e2:	4413      	add	r3, r2
 801a5e4:	681a      	ldr	r2, [r3, #0]
 801a5e6:	69bb      	ldr	r3, [r7, #24]
 801a5e8:	009b      	lsls	r3, r3, #2
 801a5ea:	441a      	add	r2, r3
 801a5ec:	69fb      	ldr	r3, [r7, #28]
 801a5ee:	009b      	lsls	r3, r3, #2
 801a5f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a5f2:	440b      	add	r3, r1
 801a5f4:	6819      	ldr	r1, [r3, #0]
 801a5f6:	69bb      	ldr	r3, [r7, #24]
 801a5f8:	009b      	lsls	r3, r3, #2
 801a5fa:	440b      	add	r3, r1
 801a5fc:	6812      	ldr	r2, [r2, #0]
 801a5fe:	601a      	str	r2, [r3, #0]
            for (k = 0; k < mfit; k++)
 801a600:	69bb      	ldr	r3, [r7, #24]
 801a602:	3301      	adds	r3, #1
 801a604:	61bb      	str	r3, [r7, #24]
 801a606:	69ba      	ldr	r2, [r7, #24]
 801a608:	693b      	ldr	r3, [r7, #16]
 801a60a:	429a      	cmp	r2, r3
 801a60c:	dbe6      	blt.n	801a5dc <mrqmin+0x27c>
            beta[j] = da[j];
 801a60e:	4b31      	ldr	r3, [pc, #196]	; (801a6d4 <mrqmin+0x374>)
 801a610:	681a      	ldr	r2, [r3, #0]
 801a612:	69fb      	ldr	r3, [r7, #28]
 801a614:	009b      	lsls	r3, r3, #2
 801a616:	441a      	add	r2, r3
 801a618:	4b2f      	ldr	r3, [pc, #188]	; (801a6d8 <mrqmin+0x378>)
 801a61a:	6819      	ldr	r1, [r3, #0]
 801a61c:	69fb      	ldr	r3, [r7, #28]
 801a61e:	009b      	lsls	r3, r3, #2
 801a620:	440b      	add	r3, r1
 801a622:	6812      	ldr	r2, [r2, #0]
 801a624:	601a      	str	r2, [r3, #0]
        for (j = 0; j < mfit; j++)
 801a626:	69fb      	ldr	r3, [r7, #28]
 801a628:	3301      	adds	r3, #1
 801a62a:	61fb      	str	r3, [r7, #28]
 801a62c:	69fa      	ldr	r2, [r7, #28]
 801a62e:	693b      	ldr	r3, [r7, #16]
 801a630:	429a      	cmp	r2, r3
 801a632:	dbbd      	blt.n	801a5b0 <mrqmin+0x250>
        }

        for (l = 0; l < mfit; l++)
 801a634:	2300      	movs	r3, #0
 801a636:	617b      	str	r3, [r7, #20]
 801a638:	e00d      	b.n	801a656 <mrqmin+0x2f6>
            a[l] = atry[l];
 801a63a:	4b28      	ldr	r3, [pc, #160]	; (801a6dc <mrqmin+0x37c>)
 801a63c:	681a      	ldr	r2, [r3, #0]
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	009b      	lsls	r3, r3, #2
 801a642:	441a      	add	r2, r3
 801a644:	697b      	ldr	r3, [r7, #20]
 801a646:	009b      	lsls	r3, r3, #2
 801a648:	6839      	ldr	r1, [r7, #0]
 801a64a:	440b      	add	r3, r1
 801a64c:	6812      	ldr	r2, [r2, #0]
 801a64e:	601a      	str	r2, [r3, #0]
        for (l = 0; l < mfit; l++)
 801a650:	697b      	ldr	r3, [r7, #20]
 801a652:	3301      	adds	r3, #1
 801a654:	617b      	str	r3, [r7, #20]
 801a656:	697a      	ldr	r2, [r7, #20]
 801a658:	693b      	ldr	r3, [r7, #16]
 801a65a:	429a      	cmp	r2, r3
 801a65c:	dbed      	blt.n	801a63a <mrqmin+0x2da>
 801a65e:	e00d      	b.n	801a67c <mrqmin+0x31c>
    }
    else  // Failure, increase alamda and return.
    {
        *alamda *= 10.0;
 801a660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a662:	edd3 7a00 	vldr	s15, [r3]
 801a666:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801a66a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a670:	edc3 7a00 	vstr	s15, [r3]
        *chisq = ochisq;
 801a674:	4b1a      	ldr	r3, [pc, #104]	; (801a6e0 <mrqmin+0x380>)
 801a676:	681a      	ldr	r2, [r3, #0]
 801a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a67a:	601a      	str	r2, [r3, #0]
    }

    //----------------------------------------------//
    // Once converged, evaluate covariance matrix.
    //----------------------------------------------//
    if (*alamda == 0.0)
 801a67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a67e:	edd3 7a00 	vldr	s15, [r3]
 801a682:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a68a:	d11e      	bne.n	801a6ca <mrqmin+0x36a>
    {
        // Spread out alpha to its full size too.
        covsrt(covar, mfit, mfit);
 801a68c:	693a      	ldr	r2, [r7, #16]
 801a68e:	6939      	ldr	r1, [r7, #16]
 801a690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a692:	f7ff fa41 	bl	8019b18 <covsrt>
        covsrt(alpha, mfit, mfit);
 801a696:	693a      	ldr	r2, [r7, #16]
 801a698:	6939      	ldr	r1, [r7, #16]
 801a69a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a69c:	f7ff fa3c 	bl	8019b18 <covsrt>

        // free the memory, not used in new C version.
        free_vector(oneda);
 801a6a0:	4b10      	ldr	r3, [pc, #64]	; (801a6e4 <mrqmin+0x384>)
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	4618      	mov	r0, r3
 801a6a6:	f7ff fa02 	bl	8019aae <free_vector>
        free_vector(da);
 801a6aa:	4b0a      	ldr	r3, [pc, #40]	; (801a6d4 <mrqmin+0x374>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	f7ff f9fd 	bl	8019aae <free_vector>
        free_vector(beta);
 801a6b4:	4b08      	ldr	r3, [pc, #32]	; (801a6d8 <mrqmin+0x378>)
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	f7ff f9f8 	bl	8019aae <free_vector>
        free_vector(atry);
 801a6be:	4b07      	ldr	r3, [pc, #28]	; (801a6dc <mrqmin+0x37c>)
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	f7ff f9f3 	bl	8019aae <free_vector>
        return;
 801a6c8:	e000      	b.n	801a6cc <mrqmin+0x36c>
    }

    return;
 801a6ca:	bf00      	nop
}
 801a6cc:	3720      	adds	r7, #32
 801a6ce:	46bd      	mov	sp, r7
 801a6d0:	bdb0      	pop	{r4, r5, r7, pc}
 801a6d2:	bf00      	nop
 801a6d4:	200085b4 	.word	0x200085b4
 801a6d8:	200085b0 	.word	0x200085b0
 801a6dc:	200085ac 	.word	0x200085ac
 801a6e0:	200085bc 	.word	0x200085bc
 801a6e4:	200085b8 	.word	0x200085b8

0801a6e8 <lightPeak>:
*     y: light intensity
*     n: the number of data
* Return: the position of maximum
*/
float lightPeak(float* x, float* y, int n)
{
 801a6e8:	b480      	push	{r7}
 801a6ea:	b089      	sub	sp, #36	; 0x24
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	60f8      	str	r0, [r7, #12]
 801a6f0:	60b9      	str	r1, [r7, #8]
 801a6f2:	607a      	str	r2, [r7, #4]
    float big = 0;
 801a6f4:	f04f 0300 	mov.w	r3, #0
 801a6f8:	61fb      	str	r3, [r7, #28]
    int k = 0;
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < n; i++)
 801a6fe:	2300      	movs	r3, #0
 801a700:	617b      	str	r3, [r7, #20]
 801a702:	e017      	b.n	801a734 <lightPeak+0x4c>
    {
        if (y[i] > big)
 801a704:	697b      	ldr	r3, [r7, #20]
 801a706:	009b      	lsls	r3, r3, #2
 801a708:	68ba      	ldr	r2, [r7, #8]
 801a70a:	4413      	add	r3, r2
 801a70c:	edd3 7a00 	vldr	s15, [r3]
 801a710:	ed97 7a07 	vldr	s14, [r7, #28]
 801a714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a71c:	d507      	bpl.n	801a72e <lightPeak+0x46>
        {
            big = y[i];
 801a71e:	697b      	ldr	r3, [r7, #20]
 801a720:	009b      	lsls	r3, r3, #2
 801a722:	68ba      	ldr	r2, [r7, #8]
 801a724:	4413      	add	r3, r2
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	61fb      	str	r3, [r7, #28]
            k = i;
 801a72a:	697b      	ldr	r3, [r7, #20]
 801a72c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; i++)
 801a72e:	697b      	ldr	r3, [r7, #20]
 801a730:	3301      	adds	r3, #1
 801a732:	617b      	str	r3, [r7, #20]
 801a734:	697a      	ldr	r2, [r7, #20]
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	429a      	cmp	r2, r3
 801a73a:	dbe3      	blt.n	801a704 <lightPeak+0x1c>
        }
    }

    return (float)k;
 801a73c:	69bb      	ldr	r3, [r7, #24]
 801a73e:	ee07 3a90 	vmov	s15, r3
 801a742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 801a746:	eeb0 0a67 	vmov.f32	s0, s15
 801a74a:	3724      	adds	r7, #36	; 0x24
 801a74c:	46bd      	mov	sp, r7
 801a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a752:	4770      	bx	lr
 801a754:	0000      	movs	r0, r0
	...

0801a758 <seekSeam>:
*     y: light intensity
*     n: the number of data
* Return: the position of seam
*/
float seekSeam(float* x, float* y, int n)
{
 801a758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a75c:	b08c      	sub	sp, #48	; 0x30
 801a75e:	af04      	add	r7, sp, #16
 801a760:	60f8      	str	r0, [r7, #12]
 801a762:	60b9      	str	r1, [r7, #8]
 801a764:	607a      	str	r2, [r7, #4]
    float alamda, ochisq, chisq;
    static float a[2];
    static float** covar;  // covariance matrix
    static float** alpha;  // Hessian matrix

    covar = matrix(2, 2);
 801a766:	2102      	movs	r1, #2
 801a768:	2002      	movs	r0, #2
 801a76a:	f7ff f94b 	bl	8019a04 <matrix>
 801a76e:	4603      	mov	r3, r0
 801a770:	4a45      	ldr	r2, [pc, #276]	; (801a888 <seekSeam+0x130>)
 801a772:	6013      	str	r3, [r2, #0]
    alpha = matrix(2, 2);
 801a774:	2102      	movs	r1, #2
 801a776:	2002      	movs	r0, #2
 801a778:	f7ff f944 	bl	8019a04 <matrix>
 801a77c:	4603      	mov	r3, r0
 801a77e:	4a43      	ldr	r2, [pc, #268]	; (801a88c <seekSeam+0x134>)
 801a780:	6013      	str	r3, [r2, #0]

    alamda = -1;  // initial the lamda value.
 801a782:	4b43      	ldr	r3, [pc, #268]	; (801a890 <seekSeam+0x138>)
 801a784:	617b      	str	r3, [r7, #20]
    ochisq = chisq = 1;
 801a786:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801a78a:	613b      	str	r3, [r7, #16]
 801a78c:	693b      	ldr	r3, [r7, #16]
 801a78e:	61fb      	str	r3, [r7, #28]

    // initial value on the peak of light intensity
    a[0] = lightPeak(x, y, n);
 801a790:	687a      	ldr	r2, [r7, #4]
 801a792:	68b9      	ldr	r1, [r7, #8]
 801a794:	68f8      	ldr	r0, [r7, #12]
 801a796:	f7ff ffa7 	bl	801a6e8 <lightPeak>
 801a79a:	eef0 7a40 	vmov.f32	s15, s0
 801a79e:	4b3d      	ldr	r3, [pc, #244]	; (801a894 <seekSeam+0x13c>)
 801a7a0:	edc3 7a00 	vstr	s15, [r3]
    a[1] = 125;  // set ~1 mm of half-width
 801a7a4:	4b3b      	ldr	r3, [pc, #236]	; (801a894 <seekSeam+0x13c>)
 801a7a6:	4a3c      	ldr	r2, [pc, #240]	; (801a898 <seekSeam+0x140>)
 801a7a8:	605a      	str	r2, [r3, #4]

    for (int i = 0; i < 10; i++)
 801a7aa:	2300      	movs	r3, #0
 801a7ac:	61bb      	str	r3, [r7, #24]
 801a7ae:	e04a      	b.n	801a846 <seekSeam+0xee>
    {
        mrqmin(x, y, n, a, covar, alpha, &chisq, &alamda);
 801a7b0:	4b35      	ldr	r3, [pc, #212]	; (801a888 <seekSeam+0x130>)
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	4a35      	ldr	r2, [pc, #212]	; (801a88c <seekSeam+0x134>)
 801a7b6:	6812      	ldr	r2, [r2, #0]
 801a7b8:	f107 0114 	add.w	r1, r7, #20
 801a7bc:	9103      	str	r1, [sp, #12]
 801a7be:	f107 0110 	add.w	r1, r7, #16
 801a7c2:	9102      	str	r1, [sp, #8]
 801a7c4:	9201      	str	r2, [sp, #4]
 801a7c6:	9300      	str	r3, [sp, #0]
 801a7c8:	4b32      	ldr	r3, [pc, #200]	; (801a894 <seekSeam+0x13c>)
 801a7ca:	687a      	ldr	r2, [r7, #4]
 801a7cc:	68b9      	ldr	r1, [r7, #8]
 801a7ce:	68f8      	ldr	r0, [r7, #12]
 801a7d0:	f7ff fdc6 	bl	801a360 <mrqmin>
        if (fabs((double)ochisq - (double)chisq) < 0.01)
 801a7d4:	69f8      	ldr	r0, [r7, #28]
 801a7d6:	f7e5 febf 	bl	8000558 <__aeabi_f2d>
 801a7da:	4680      	mov	r8, r0
 801a7dc:	4689      	mov	r9, r1
 801a7de:	693b      	ldr	r3, [r7, #16]
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f7e5 feb9 	bl	8000558 <__aeabi_f2d>
 801a7e6:	4602      	mov	r2, r0
 801a7e8:	460b      	mov	r3, r1
 801a7ea:	4640      	mov	r0, r8
 801a7ec:	4649      	mov	r1, r9
 801a7ee:	f7e5 fd53 	bl	8000298 <__aeabi_dsub>
 801a7f2:	4602      	mov	r2, r0
 801a7f4:	460b      	mov	r3, r1
 801a7f6:	4614      	mov	r4, r2
 801a7f8:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 801a7fc:	a320      	add	r3, pc, #128	; (adr r3, 801a880 <seekSeam+0x128>)
 801a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a802:	4620      	mov	r0, r4
 801a804:	4629      	mov	r1, r5
 801a806:	f7e6 f971 	bl	8000aec <__aeabi_dcmplt>
 801a80a:	4603      	mov	r3, r0
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d015      	beq.n	801a83c <seekSeam+0xe4>
        {
            alamda = 0;
 801a810:	f04f 0300 	mov.w	r3, #0
 801a814:	617b      	str	r3, [r7, #20]
            mrqmin(x, y, n, a, covar, alpha, &chisq, &alamda);
 801a816:	4b1c      	ldr	r3, [pc, #112]	; (801a888 <seekSeam+0x130>)
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	4a1c      	ldr	r2, [pc, #112]	; (801a88c <seekSeam+0x134>)
 801a81c:	6812      	ldr	r2, [r2, #0]
 801a81e:	f107 0114 	add.w	r1, r7, #20
 801a822:	9103      	str	r1, [sp, #12]
 801a824:	f107 0110 	add.w	r1, r7, #16
 801a828:	9102      	str	r1, [sp, #8]
 801a82a:	9201      	str	r2, [sp, #4]
 801a82c:	9300      	str	r3, [sp, #0]
 801a82e:	4b19      	ldr	r3, [pc, #100]	; (801a894 <seekSeam+0x13c>)
 801a830:	687a      	ldr	r2, [r7, #4]
 801a832:	68b9      	ldr	r1, [r7, #8]
 801a834:	68f8      	ldr	r0, [r7, #12]
 801a836:	f7ff fd93 	bl	801a360 <mrqmin>
            break;
 801a83a:	e007      	b.n	801a84c <seekSeam+0xf4>
        }
        ochisq = chisq;
 801a83c:	693b      	ldr	r3, [r7, #16]
 801a83e:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 10; i++)
 801a840:	69bb      	ldr	r3, [r7, #24]
 801a842:	3301      	adds	r3, #1
 801a844:	61bb      	str	r3, [r7, #24]
 801a846:	69bb      	ldr	r3, [r7, #24]
 801a848:	2b09      	cmp	r3, #9
 801a84a:	ddb1      	ble.n	801a7b0 <seekSeam+0x58>
    }

    free_matrix(covar, 2, 2);
 801a84c:	4b0e      	ldr	r3, [pc, #56]	; (801a888 <seekSeam+0x130>)
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	2202      	movs	r2, #2
 801a852:	2102      	movs	r1, #2
 801a854:	4618      	mov	r0, r3
 801a856:	f7ff f940 	bl	8019ada <free_matrix>
    free_matrix(alpha, 2, 2);
 801a85a:	4b0c      	ldr	r3, [pc, #48]	; (801a88c <seekSeam+0x134>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	2202      	movs	r2, #2
 801a860:	2102      	movs	r1, #2
 801a862:	4618      	mov	r0, r3
 801a864:	f7ff f939 	bl	8019ada <free_matrix>
    return a[0];
 801a868:	4b0a      	ldr	r3, [pc, #40]	; (801a894 <seekSeam+0x13c>)
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	ee07 3a90 	vmov	s15, r3
}
 801a870:	eeb0 0a67 	vmov.f32	s0, s15
 801a874:	3720      	adds	r7, #32
 801a876:	46bd      	mov	sp, r7
 801a878:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a87c:	f3af 8000 	nop.w
 801a880:	47ae147b 	.word	0x47ae147b
 801a884:	3f847ae1 	.word	0x3f847ae1
 801a888:	200085c0 	.word	0x200085c0
 801a88c:	200085c4 	.word	0x200085c4
 801a890:	bf800000 	.word	0xbf800000
 801a894:	200085c8 	.word	0x200085c8
 801a898:	42fa0000 	.word	0x42fa0000

0801a89c <motion_dis>:
 * Function: solve the pulse number for the position shift
 * Input: position shift of the seam
 * Return: the degree that the x motor should be moved
 */
static float motion_dis(float diff_position)
{
 801a89c:	b480      	push	{r7}
 801a89e:	b085      	sub	sp, #20
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	ed87 0a01 	vstr	s0, [r7, #4]
	float x_pulse;
	x_pulse = diff_position / PULDIS;
 801a8a6:	eddf 6a09 	vldr	s13, [pc, #36]	; 801a8cc <motion_dis+0x30>
 801a8aa:	ed97 7a01 	vldr	s14, [r7, #4]
 801a8ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801a8b2:	edc7 7a03 	vstr	s15, [r7, #12]
	return x_pulse;
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	ee07 3a90 	vmov	s15, r3
}
 801a8bc:	eeb0 0a67 	vmov.f32	s0, s15
 801a8c0:	3714      	adds	r7, #20
 801a8c2:	46bd      	mov	sp, r7
 801a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8c8:	4770      	bx	lr
 801a8ca:	bf00      	nop
 801a8cc:	3ba3d70a 	.word	0x3ba3d70a

0801a8d0 <motor_action>:
 * Function: move the x motor to the given position
 * Input: the degree that the x motor should be moved
 * Return: void
 */
static void motor_action(float x_pulse)
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b082      	sub	sp, #8
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (x_pulse > 0)
 801a8da:	edd7 7a01 	vldr	s15, [r7, #4]
 801a8de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8e6:	dd05      	ble.n	801a8f4 <motor_action+0x24>
	{
		stepmotor_x_run(FORWARD, x_pulse);
 801a8e8:	ed97 0a01 	vldr	s0, [r7, #4]
 801a8ec:	2000      	movs	r0, #0
 801a8ee:	f000 f8a1 	bl	801aa34 <stepmotor_x_run>
	}
	else if (x_pulse < 0)
	{
		stepmotor_x_run(BACKWARD, x_pulse);
	}
}
 801a8f2:	e00c      	b.n	801a90e <motor_action+0x3e>
	else if (x_pulse < 0)
 801a8f4:	edd7 7a01 	vldr	s15, [r7, #4]
 801a8f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a900:	d400      	bmi.n	801a904 <motor_action+0x34>
}
 801a902:	e004      	b.n	801a90e <motor_action+0x3e>
		stepmotor_x_run(BACKWARD, x_pulse);
 801a904:	ed97 0a01 	vldr	s0, [r7, #4]
 801a908:	2001      	movs	r0, #1
 801a90a:	f000 f893 	bl	801aa34 <stepmotor_x_run>
}
 801a90e:	bf00      	nop
 801a910:	3708      	adds	r7, #8
 801a912:	46bd      	mov	sp, r7
 801a914:	bd80      	pop	{r7, pc}
	...

0801a918 <find_seam>:
 * Function: allots finding tasks
 * Input: CCD raw data for seam location
 * Return: void
 */
void find_seam(const uint16_t *seam_location)
{
 801a918:	b580      	push	{r7, lr}
 801a91a:	b088      	sub	sp, #32
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	6078      	str	r0, [r7, #4]
	uint16_t *light_data;
	uint16_t *ypos;

	light_data = used_pixel;
 801a920:	4b1f      	ldr	r3, [pc, #124]	; (801a9a0 <find_seam+0x88>)
 801a922:	61fb      	str	r3, [r7, #28]
	ypos = pos_space;
 801a924:	4b1f      	ldr	r3, [pc, #124]	; (801a9a4 <find_seam+0x8c>)
 801a926:	61bb      	str	r3, [r7, #24]

	uint16_t ndata;

	ndata = pretreat(seam_location, light_data, ypos);
 801a928:	69ba      	ldr	r2, [r7, #24]
 801a92a:	69f9      	ldr	r1, [r7, #28]
 801a92c:	6878      	ldr	r0, [r7, #4]
 801a92e:	f7fe ffbf 	bl	80198b0 <pretreat>
 801a932:	4603      	mov	r3, r0
 801a934:	82fb      	strh	r3, [r7, #22]
	float position = seekSeam((float*)light_data, (float*)ypos, ndata);
 801a936:	8afb      	ldrh	r3, [r7, #22]
 801a938:	461a      	mov	r2, r3
 801a93a:	69b9      	ldr	r1, [r7, #24]
 801a93c:	69f8      	ldr	r0, [r7, #28]
 801a93e:	f7ff ff0b 	bl	801a758 <seekSeam>
 801a942:	ed87 0a04 	vstr	s0, [r7, #16]

	if (position != p0_position && p0_position != 0)
 801a946:	4b18      	ldr	r3, [pc, #96]	; (801a9a8 <find_seam+0x90>)
 801a948:	edd3 7a00 	vldr	s15, [r3]
 801a94c:	ed97 7a04 	vldr	s14, [r7, #16]
 801a950:	eeb4 7a67 	vcmp.f32	s14, s15
 801a954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a958:	d01d      	beq.n	801a996 <find_seam+0x7e>
 801a95a:	4b13      	ldr	r3, [pc, #76]	; (801a9a8 <find_seam+0x90>)
 801a95c:	edd3 7a00 	vldr	s15, [r3]
 801a960:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a968:	d015      	beq.n	801a996 <find_seam+0x7e>
	{
		float diff_position = position - p0_position;
 801a96a:	4b0f      	ldr	r3, [pc, #60]	; (801a9a8 <find_seam+0x90>)
 801a96c:	edd3 7a00 	vldr	s15, [r3]
 801a970:	ed97 7a04 	vldr	s14, [r7, #16]
 801a974:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a978:	edc7 7a03 	vstr	s15, [r7, #12]
		float x_pulse = motion_dis(diff_position);
 801a97c:	ed97 0a03 	vldr	s0, [r7, #12]
 801a980:	f7ff ff8c 	bl	801a89c <motion_dis>
 801a984:	ed87 0a02 	vstr	s0, [r7, #8]

		motor_action(x_pulse);
 801a988:	ed97 0a02 	vldr	s0, [r7, #8]
 801a98c:	f7ff ffa0 	bl	801a8d0 <motor_action>

		p0_position = position;
 801a990:	4a05      	ldr	r2, [pc, #20]	; (801a9a8 <find_seam+0x90>)
 801a992:	693b      	ldr	r3, [r7, #16]
 801a994:	6013      	str	r3, [r2, #0]
	}
}
 801a996:	bf00      	nop
 801a998:	3720      	adds	r7, #32
 801a99a:	46bd      	mov	sp, r7
 801a99c:	bd80      	pop	{r7, pc}
 801a99e:	bf00      	nop
 801a9a0:	20004cac 	.word	0x20004cac
 801a9a4:	2000692c 	.word	0x2000692c
 801a9a8:	20004ca8 	.word	0x20004ca8

0801a9ac <stepmotor_x_pulse>:
 * 返回：void
 * 备注：给一个脉冲运动一步
 *     此处的脉冲频率并不精确，由于osDelay()函数没有考虑函数本身的运行时间
 */
static void stepmotor_x_pulse(uint8_t step)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b082      	sub	sp, #8
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	4603      	mov	r3, r0
 801a9b4:	71fb      	strb	r3, [r7, #7]
	while(step--)
 801a9b6:	e00f      	b.n	801a9d8 <stepmotor_x_pulse+0x2c>
	{
		HAL_GPIO_WritePin(MOTOR_PU1_GPIO_Port, MOTOR_PU1_Pin, GPIO_PIN_RESET);
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	2108      	movs	r1, #8
 801a9bc:	480b      	ldr	r0, [pc, #44]	; (801a9ec <stepmotor_x_pulse+0x40>)
 801a9be:	f7e9 fd47 	bl	8004450 <HAL_GPIO_WritePin>
		osDelay(1);
 801a9c2:	2001      	movs	r0, #1
 801a9c4:	f7ed fab7 	bl	8007f36 <osDelay>
		HAL_GPIO_WritePin(MOTOR_PU1_GPIO_Port, MOTOR_PU1_Pin, GPIO_PIN_SET);
 801a9c8:	2201      	movs	r2, #1
 801a9ca:	2108      	movs	r1, #8
 801a9cc:	4807      	ldr	r0, [pc, #28]	; (801a9ec <stepmotor_x_pulse+0x40>)
 801a9ce:	f7e9 fd3f 	bl	8004450 <HAL_GPIO_WritePin>
		osDelay(1);
 801a9d2:	2001      	movs	r0, #1
 801a9d4:	f7ed faaf 	bl	8007f36 <osDelay>
	while(step--)
 801a9d8:	79fb      	ldrb	r3, [r7, #7]
 801a9da:	1e5a      	subs	r2, r3, #1
 801a9dc:	71fa      	strb	r2, [r7, #7]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d1ea      	bne.n	801a9b8 <stepmotor_x_pulse+0xc>
	}
}
 801a9e2:	bf00      	nop
 801a9e4:	bf00      	nop
 801a9e6:	3708      	adds	r7, #8
 801a9e8:	46bd      	mov	sp, r7
 801a9ea:	bd80      	pop	{r7, pc}
 801a9ec:	40020000 	.word	0x40020000

0801a9f0 <stepmotor_y_pulse>:
 * 参数：步进数
 * 返回：void
 * 备注：同上
 */
static void stepmotor_y_pulse(uint8_t step)
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b082      	sub	sp, #8
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	71fb      	strb	r3, [r7, #7]
	while(step--)
 801a9fa:	e00f      	b.n	801aa1c <stepmotor_y_pulse+0x2c>
	{
		HAL_GPIO_WritePin(MOTOR_PU2_GPIO_Port, MOTOR_PU2_Pin, GPIO_PIN_RESET);
 801a9fc:	2200      	movs	r2, #0
 801a9fe:	2101      	movs	r1, #1
 801aa00:	480b      	ldr	r0, [pc, #44]	; (801aa30 <stepmotor_y_pulse+0x40>)
 801aa02:	f7e9 fd25 	bl	8004450 <HAL_GPIO_WritePin>
		osDelay(1);
 801aa06:	2001      	movs	r0, #1
 801aa08:	f7ed fa95 	bl	8007f36 <osDelay>
		HAL_GPIO_WritePin(MOTOR_PU2_GPIO_Port, MOTOR_PU2_Pin, GPIO_PIN_SET);
 801aa0c:	2201      	movs	r2, #1
 801aa0e:	2101      	movs	r1, #1
 801aa10:	4807      	ldr	r0, [pc, #28]	; (801aa30 <stepmotor_y_pulse+0x40>)
 801aa12:	f7e9 fd1d 	bl	8004450 <HAL_GPIO_WritePin>
		osDelay(1);
 801aa16:	2001      	movs	r0, #1
 801aa18:	f7ed fa8d 	bl	8007f36 <osDelay>
	while(step--)
 801aa1c:	79fb      	ldrb	r3, [r7, #7]
 801aa1e:	1e5a      	subs	r2, r3, #1
 801aa20:	71fa      	strb	r2, [r7, #7]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d1ea      	bne.n	801a9fc <stepmotor_y_pulse+0xc>
	}
}
 801aa26:	bf00      	nop
 801aa28:	bf00      	nop
 801aa2a:	3708      	adds	r7, #8
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}
 801aa30:	40020400 	.word	0x40020400

0801aa34 <stepmotor_x_run>:
 * 参数：方向，角度
 * 返回：void
 * 备注：运行原理：使能，设置方向，然后旋转，使能关
 */
void stepmotor_x_run(enum_direction direction, float degree)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b084      	sub	sp, #16
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	4603      	mov	r3, r0
 801aa3c:	ed87 0a02 	vstr	s0, [r7, #8]
 801aa40:	73fb      	strb	r3, [r7, #15]
	osMutexAcquire((osMutexId_t)StepMotorXMutexHandle,
 801aa42:	4b1d      	ldr	r3, [pc, #116]	; (801aab8 <stepmotor_x_run+0x84>)
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	f04f 31ff 	mov.w	r1, #4294967295
 801aa4a:	4618      	mov	r0, r3
 801aa4c:	f7ed fbd4 	bl	80081f8 <osMutexAcquire>
				   (uint32_t)portMAX_DELAY);

	STEPMOTOR_X_ENABLE;
 801aa50:	2200      	movs	r2, #0
 801aa52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801aa56:	4819      	ldr	r0, [pc, #100]	; (801aabc <stepmotor_x_run+0x88>)
 801aa58:	f7e9 fcfa 	bl	8004450 <HAL_GPIO_WritePin>

	if(direction == FORWARD)
 801aa5c:	7bfb      	ldrb	r3, [r7, #15]
 801aa5e:	2b00      	cmp	r3, #0
 801aa60:	d106      	bne.n	801aa70 <stepmotor_x_run+0x3c>
		STEPMOTOR_X_FORWARD;
 801aa62:	2200      	movs	r2, #0
 801aa64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801aa68:	4814      	ldr	r0, [pc, #80]	; (801aabc <stepmotor_x_run+0x88>)
 801aa6a:	f7e9 fcf1 	bl	8004450 <HAL_GPIO_WritePin>
 801aa6e:	e005      	b.n	801aa7c <stepmotor_x_run+0x48>
	else
		STEPMOTOR_X_BACKWARD;
 801aa70:	2201      	movs	r2, #1
 801aa72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 801aa76:	4811      	ldr	r0, [pc, #68]	; (801aabc <stepmotor_x_run+0x88>)
 801aa78:	f7e9 fcea 	bl	8004450 <HAL_GPIO_WritePin>

	stepmotor_x_pulse(degree/DEGREE_PER_STEP);
 801aa7c:	ed97 7a02 	vldr	s14, [r7, #8]
 801aa80:	eddf 6a0f 	vldr	s13, [pc, #60]	; 801aac0 <stepmotor_x_run+0x8c>
 801aa84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801aa88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801aa8c:	edc7 7a01 	vstr	s15, [r7, #4]
 801aa90:	793b      	ldrb	r3, [r7, #4]
 801aa92:	b2db      	uxtb	r3, r3
 801aa94:	4618      	mov	r0, r3
 801aa96:	f7ff ff89 	bl	801a9ac <stepmotor_x_pulse>
	STEPMOTOR_X_DISABLE;
 801aa9a:	2201      	movs	r2, #1
 801aa9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801aaa0:	4806      	ldr	r0, [pc, #24]	; (801aabc <stepmotor_x_run+0x88>)
 801aaa2:	f7e9 fcd5 	bl	8004450 <HAL_GPIO_WritePin>

	osMutexRelease((osMutexId_t)StepMotorXMutexHandle);
 801aaa6:	4b04      	ldr	r3, [pc, #16]	; (801aab8 <stepmotor_x_run+0x84>)
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	4618      	mov	r0, r3
 801aaac:	f7ed fbef 	bl	800828e <osMutexRelease>
}
 801aab0:	bf00      	nop
 801aab2:	3710      	adds	r7, #16
 801aab4:	46bd      	mov	sp, r7
 801aab6:	bd80      	pop	{r7, pc}
 801aab8:	2000a744 	.word	0x2000a744
 801aabc:	40020c00 	.word	0x40020c00
 801aac0:	3fe66666 	.word	0x3fe66666

0801aac4 <stepmotor_y_run>:
 * 参数：方向，角度
 * 返回：void
 * 备注：运行原理：使能，设置方向，然后旋转，使能关
 */
void stepmotor_y_run(enum_direction direction, float degree)
{
 801aac4:	b580      	push	{r7, lr}
 801aac6:	b084      	sub	sp, #16
 801aac8:	af00      	add	r7, sp, #0
 801aaca:	4603      	mov	r3, r0
 801aacc:	ed87 0a02 	vstr	s0, [r7, #8]
 801aad0:	73fb      	strb	r3, [r7, #15]
	osMutexAcquire((osMutexId_t)StepMotorYMutexHandle,
 801aad2:	4b1d      	ldr	r3, [pc, #116]	; (801ab48 <stepmotor_y_run+0x84>)
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	f04f 31ff 	mov.w	r1, #4294967295
 801aada:	4618      	mov	r0, r3
 801aadc:	f7ed fb8c 	bl	80081f8 <osMutexAcquire>
				   (uint32_t)portMAX_DELAY);

	STEPMOTOR_Y_ENABLE;
 801aae0:	2200      	movs	r2, #0
 801aae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801aae6:	4819      	ldr	r0, [pc, #100]	; (801ab4c <stepmotor_y_run+0x88>)
 801aae8:	f7e9 fcb2 	bl	8004450 <HAL_GPIO_WritePin>

	if(direction == FORWARD)
 801aaec:	7bfb      	ldrb	r3, [r7, #15]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d106      	bne.n	801ab00 <stepmotor_y_run+0x3c>
		STEPMOTOR_Y_FORWARD;
 801aaf2:	2200      	movs	r2, #0
 801aaf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801aaf8:	4814      	ldr	r0, [pc, #80]	; (801ab4c <stepmotor_y_run+0x88>)
 801aafa:	f7e9 fca9 	bl	8004450 <HAL_GPIO_WritePin>
 801aafe:	e005      	b.n	801ab0c <stepmotor_y_run+0x48>
	else
		STEPMOTOR_Y_BACKWARD;
 801ab00:	2201      	movs	r2, #1
 801ab02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ab06:	4811      	ldr	r0, [pc, #68]	; (801ab4c <stepmotor_y_run+0x88>)
 801ab08:	f7e9 fca2 	bl	8004450 <HAL_GPIO_WritePin>

	stepmotor_y_pulse(degree/DEGREE_PER_STEP);
 801ab0c:	ed97 7a02 	vldr	s14, [r7, #8]
 801ab10:	eddf 6a0f 	vldr	s13, [pc, #60]	; 801ab50 <stepmotor_y_run+0x8c>
 801ab14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ab18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ab1c:	edc7 7a01 	vstr	s15, [r7, #4]
 801ab20:	793b      	ldrb	r3, [r7, #4]
 801ab22:	b2db      	uxtb	r3, r3
 801ab24:	4618      	mov	r0, r3
 801ab26:	f7ff ff63 	bl	801a9f0 <stepmotor_y_pulse>
	STEPMOTOR_Y_DISABLE;
 801ab2a:	2201      	movs	r2, #1
 801ab2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ab30:	4806      	ldr	r0, [pc, #24]	; (801ab4c <stepmotor_y_run+0x88>)
 801ab32:	f7e9 fc8d 	bl	8004450 <HAL_GPIO_WritePin>

	osMutexRelease((osMutexId_t)StepMotorYMutexHandle);
 801ab36:	4b04      	ldr	r3, [pc, #16]	; (801ab48 <stepmotor_y_run+0x84>)
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	4618      	mov	r0, r3
 801ab3c:	f7ed fba7 	bl	800828e <osMutexRelease>
}
 801ab40:	bf00      	nop
 801ab42:	3710      	adds	r7, #16
 801ab44:	46bd      	mov	sp, r7
 801ab46:	bd80      	pop	{r7, pc}
 801ab48:	2000a518 	.word	0x2000a518
 801ab4c:	40020c00 	.word	0x40020c00
 801ab50:	3fe66666 	.word	0x3fe66666

0801ab54 <i2c_delay>:
#include "eeprom_i2c.h"

void i2c_delay(uint16_t del)
{
 801ab54:	b480      	push	{r7}
 801ab56:	b085      	sub	sp, #20
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	4603      	mov	r3, r0
 801ab5c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for(i=0;i<del;i++)
 801ab5e:	2300      	movs	r3, #0
 801ab60:	81fb      	strh	r3, [r7, #14]
 801ab62:	e00a      	b.n	801ab7a <i2c_delay+0x26>
	{
        __NOP();    
 801ab64:	bf00      	nop
        __NOP();
 801ab66:	bf00      	nop
        __NOP();
 801ab68:	bf00      	nop
        __NOP();
 801ab6a:	bf00      	nop
        __NOP();
 801ab6c:	bf00      	nop
        __NOP();
 801ab6e:	bf00      	nop
        __NOP();
 801ab70:	bf00      	nop
        __NOP();
 801ab72:	bf00      	nop
	for(i=0;i<del;i++)
 801ab74:	89fb      	ldrh	r3, [r7, #14]
 801ab76:	3301      	adds	r3, #1
 801ab78:	81fb      	strh	r3, [r7, #14]
 801ab7a:	89fa      	ldrh	r2, [r7, #14]
 801ab7c:	88fb      	ldrh	r3, [r7, #6]
 801ab7e:	429a      	cmp	r2, r3
 801ab80:	d3f0      	bcc.n	801ab64 <i2c_delay+0x10>
	}
}
 801ab82:	bf00      	nop
 801ab84:	bf00      	nop
 801ab86:	3714      	adds	r7, #20
 801ab88:	46bd      	mov	sp, r7
 801ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab8e:	4770      	bx	lr

0801ab90 <i2c_start>:

void i2c_start(void)
{
 801ab90:	b580      	push	{r7, lr}
 801ab92:	af00      	add	r7, sp, #0
	EEPROM_I2C_SCL_HIGH;
 801ab94:	4b0b      	ldr	r3, [pc, #44]	; (801abc4 <i2c_start+0x34>)
 801ab96:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ab9a:	619a      	str	r2, [r3, #24]
	EEPROM_I2C_SDA_HIGH;
 801ab9c:	4b09      	ldr	r3, [pc, #36]	; (801abc4 <i2c_start+0x34>)
 801ab9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801aba2:	619a      	str	r2, [r3, #24]
	i2c_delay(2);
 801aba4:	2002      	movs	r0, #2
 801aba6:	f7ff ffd5 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SDA_LOW;
 801abaa:	4b06      	ldr	r3, [pc, #24]	; (801abc4 <i2c_start+0x34>)
 801abac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801abb0:	619a      	str	r2, [r3, #24]
	i2c_delay(2);
 801abb2:	2002      	movs	r0, #2
 801abb4:	f7ff ffce 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SCL_LOW;
 801abb8:	4b02      	ldr	r3, [pc, #8]	; (801abc4 <i2c_start+0x34>)
 801abba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801abbe:	619a      	str	r2, [r3, #24]
}
 801abc0:	bf00      	nop
 801abc2:	bd80      	pop	{r7, pc}
 801abc4:	40020400 	.word	0x40020400

0801abc8 <i2c_stop>:

void i2c_stop(void)
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	af00      	add	r7, sp, #0
	EEPROM_I2C_SCL_LOW;
 801abcc:	4b0b      	ldr	r3, [pc, #44]	; (801abfc <i2c_stop+0x34>)
 801abce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801abd2:	619a      	str	r2, [r3, #24]
	EEPROM_I2C_SDA_LOW;
 801abd4:	4b09      	ldr	r3, [pc, #36]	; (801abfc <i2c_stop+0x34>)
 801abd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801abda:	619a      	str	r2, [r3, #24]
	i2c_delay(2);
 801abdc:	2002      	movs	r0, #2
 801abde:	f7ff ffb9 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SCL_HIGH;
 801abe2:	4b06      	ldr	r3, [pc, #24]	; (801abfc <i2c_stop+0x34>)
 801abe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801abe8:	619a      	str	r2, [r3, #24]
	i2c_delay(2);
 801abea:	2002      	movs	r0, #2
 801abec:	f7ff ffb2 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SDA_HIGH;
 801abf0:	4b02      	ldr	r3, [pc, #8]	; (801abfc <i2c_stop+0x34>)
 801abf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 801abf6:	619a      	str	r2, [r3, #24]
}
 801abf8:	bf00      	nop
 801abfa:	bd80      	pop	{r7, pc}
 801abfc:	40020400 	.word	0x40020400

0801ac00 <i2c_waitack>:

uint8_t i2c_waitack(void)
{
 801ac00:	b580      	push	{r7, lr}
 801ac02:	b082      	sub	sp, #8
 801ac04:	af00      	add	r7, sp, #0
	uint8_t i=200;
 801ac06:	23c8      	movs	r3, #200	; 0xc8
 801ac08:	71fb      	strb	r3, [r7, #7]
	
	EEPROM_I2C_SCL_LOW;
 801ac0a:	4b1d      	ldr	r3, [pc, #116]	; (801ac80 <i2c_waitack+0x80>)
 801ac0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ac10:	619a      	str	r2, [r3, #24]
//	EEPROM_I2C_SDA_LOW;
	EEPROM_I2C_SDA_IN;
 801ac12:	4b1b      	ldr	r3, [pc, #108]	; (801ac80 <i2c_waitack+0x80>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	4a1a      	ldr	r2, [pc, #104]	; (801ac80 <i2c_waitack+0x80>)
 801ac18:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 801ac1c:	6013      	str	r3, [r2, #0]
	i2c_delay(2);
 801ac1e:	2002      	movs	r0, #2
 801ac20:	f7ff ff98 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SCL_HIGH;
 801ac24:	4b16      	ldr	r3, [pc, #88]	; (801ac80 <i2c_waitack+0x80>)
 801ac26:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ac2a:	619a      	str	r2, [r3, #24]
	i2c_delay(1);
 801ac2c:	2001      	movs	r0, #1
 801ac2e:	f7ff ff91 	bl	801ab54 <i2c_delay>
	
	do
	{
		i--;
 801ac32:	79fb      	ldrb	r3, [r7, #7]
 801ac34:	3b01      	subs	r3, #1
 801ac36:	71fb      	strb	r3, [r7, #7]
	}while((i>0)&&(EEPROM_READ_I2C_SDA==1));
 801ac38:	79fb      	ldrb	r3, [r7, #7]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d007      	beq.n	801ac4e <i2c_waitack+0x4e>
 801ac3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ac42:	480f      	ldr	r0, [pc, #60]	; (801ac80 <i2c_waitack+0x80>)
 801ac44:	f7e9 fbec 	bl	8004420 <HAL_GPIO_ReadPin>
 801ac48:	4603      	mov	r3, r0
 801ac4a:	2b01      	cmp	r3, #1
 801ac4c:	d0f1      	beq.n	801ac32 <i2c_waitack+0x32>
	
	i2c_delay(1);
 801ac4e:	2001      	movs	r0, #1
 801ac50:	f7ff ff80 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SCL_LOW;
 801ac54:	4b0a      	ldr	r3, [pc, #40]	; (801ac80 <i2c_waitack+0x80>)
 801ac56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ac5a:	619a      	str	r2, [r3, #24]
	EEPROM_I2C_SDA_OUT;
 801ac5c:	4b08      	ldr	r3, [pc, #32]	; (801ac80 <i2c_waitack+0x80>)
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	4a07      	ldr	r2, [pc, #28]	; (801ac80 <i2c_waitack+0x80>)
 801ac62:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 801ac66:	6013      	str	r3, [r2, #0]
 801ac68:	4b05      	ldr	r3, [pc, #20]	; (801ac80 <i2c_waitack+0x80>)
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	4a04      	ldr	r2, [pc, #16]	; (801ac80 <i2c_waitack+0x80>)
 801ac6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ac72:	6013      	str	r3, [r2, #0]
	
	return i;
 801ac74:	79fb      	ldrb	r3, [r7, #7]
}
 801ac76:	4618      	mov	r0, r3
 801ac78:	3708      	adds	r7, #8
 801ac7a:	46bd      	mov	sp, r7
 801ac7c:	bd80      	pop	{r7, pc}
 801ac7e:	bf00      	nop
 801ac80:	40020400 	.word	0x40020400

0801ac84 <i2c_sendack>:

void i2c_sendack(void)
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	af00      	add	r7, sp, #0
	EEPROM_I2C_SCL_LOW;
 801ac88:	4b0b      	ldr	r3, [pc, #44]	; (801acb8 <i2c_sendack+0x34>)
 801ac8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ac8e:	619a      	str	r2, [r3, #24]
	EEPROM_I2C_SDA_LOW;
 801ac90:	4b09      	ldr	r3, [pc, #36]	; (801acb8 <i2c_sendack+0x34>)
 801ac92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801ac96:	619a      	str	r2, [r3, #24]
	i2c_delay(2);
 801ac98:	2002      	movs	r0, #2
 801ac9a:	f7ff ff5b 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SCL_HIGH;
 801ac9e:	4b06      	ldr	r3, [pc, #24]	; (801acb8 <i2c_sendack+0x34>)
 801aca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801aca4:	619a      	str	r2, [r3, #24]
	i2c_delay(2);
 801aca6:	2002      	movs	r0, #2
 801aca8:	f7ff ff54 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SCL_LOW;
 801acac:	4b02      	ldr	r3, [pc, #8]	; (801acb8 <i2c_sendack+0x34>)
 801acae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801acb2:	619a      	str	r2, [r3, #24]
}
 801acb4:	bf00      	nop
 801acb6:	bd80      	pop	{r7, pc}
 801acb8:	40020400 	.word	0x40020400

0801acbc <i2c_sendnack>:

void i2c_sendnack(void)
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	af00      	add	r7, sp, #0
	EEPROM_I2C_SCL_LOW;
 801acc0:	4b12      	ldr	r3, [pc, #72]	; (801ad0c <i2c_sendnack+0x50>)
 801acc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801acc6:	619a      	str	r2, [r3, #24]
	EEPROM_I2C_SDA_LOW;
 801acc8:	4b10      	ldr	r3, [pc, #64]	; (801ad0c <i2c_sendnack+0x50>)
 801acca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801acce:	619a      	str	r2, [r3, #24]
	i2c_delay(1);
 801acd0:	2001      	movs	r0, #1
 801acd2:	f7ff ff3f 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SDA_HIGH;
 801acd6:	4b0d      	ldr	r3, [pc, #52]	; (801ad0c <i2c_sendnack+0x50>)
 801acd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801acdc:	619a      	str	r2, [r3, #24]
	i2c_delay(1);
 801acde:	2001      	movs	r0, #1
 801ace0:	f7ff ff38 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SCL_HIGH;
 801ace4:	4b09      	ldr	r3, [pc, #36]	; (801ad0c <i2c_sendnack+0x50>)
 801ace6:	f44f 7280 	mov.w	r2, #256	; 0x100
 801acea:	619a      	str	r2, [r3, #24]
	i2c_delay(2);
 801acec:	2002      	movs	r0, #2
 801acee:	f7ff ff31 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SCL_LOW;
 801acf2:	4b06      	ldr	r3, [pc, #24]	; (801ad0c <i2c_sendnack+0x50>)
 801acf4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801acf8:	619a      	str	r2, [r3, #24]
	i2c_delay(1);
 801acfa:	2001      	movs	r0, #1
 801acfc:	f7ff ff2a 	bl	801ab54 <i2c_delay>
	EEPROM_I2C_SDA_LOW;
 801ad00:	4b02      	ldr	r3, [pc, #8]	; (801ad0c <i2c_sendnack+0x50>)
 801ad02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801ad06:	619a      	str	r2, [r3, #24]
}
 801ad08:	bf00      	nop
 801ad0a:	bd80      	pop	{r7, pc}
 801ad0c:	40020400 	.word	0x40020400

0801ad10 <i2c_write_one_byte>:

void i2c_write_one_byte(uint8_t data)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b084      	sub	sp, #16
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	4603      	mov	r3, r0
 801ad18:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	
	EEPROM_I2C_SCL_LOW;
 801ad1a:	4b1d      	ldr	r3, [pc, #116]	; (801ad90 <i2c_write_one_byte+0x80>)
 801ad1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ad20:	619a      	str	r2, [r3, #24]
	EEPROM_I2C_SDA_LOW;
 801ad22:	4b1b      	ldr	r3, [pc, #108]	; (801ad90 <i2c_write_one_byte+0x80>)
 801ad24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801ad28:	619a      	str	r2, [r3, #24]
	i2c_delay(1);
 801ad2a:	2001      	movs	r0, #1
 801ad2c:	f7ff ff12 	bl	801ab54 <i2c_delay>
	
	for(i=0;i<8;i++)
 801ad30:	2300      	movs	r3, #0
 801ad32:	73fb      	strb	r3, [r7, #15]
 801ad34:	e023      	b.n	801ad7e <i2c_write_one_byte+0x6e>
	{
		if((data&0x80)!=0x00)
 801ad36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	da04      	bge.n	801ad48 <i2c_write_one_byte+0x38>
		{
			EEPROM_I2C_SDA_HIGH;
 801ad3e:	4b14      	ldr	r3, [pc, #80]	; (801ad90 <i2c_write_one_byte+0x80>)
 801ad40:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ad44:	619a      	str	r2, [r3, #24]
 801ad46:	e003      	b.n	801ad50 <i2c_write_one_byte+0x40>
		}
		else
		{
			EEPROM_I2C_SDA_LOW;
 801ad48:	4b11      	ldr	r3, [pc, #68]	; (801ad90 <i2c_write_one_byte+0x80>)
 801ad4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 801ad4e:	619a      	str	r2, [r3, #24]
		}
		i2c_delay(1);
 801ad50:	2001      	movs	r0, #1
 801ad52:	f7ff feff 	bl	801ab54 <i2c_delay>
		data<<=1;
 801ad56:	79fb      	ldrb	r3, [r7, #7]
 801ad58:	005b      	lsls	r3, r3, #1
 801ad5a:	71fb      	strb	r3, [r7, #7]
		EEPROM_I2C_SCL_HIGH;
 801ad5c:	4b0c      	ldr	r3, [pc, #48]	; (801ad90 <i2c_write_one_byte+0x80>)
 801ad5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 801ad62:	619a      	str	r2, [r3, #24]
		i2c_delay(2);
 801ad64:	2002      	movs	r0, #2
 801ad66:	f7ff fef5 	bl	801ab54 <i2c_delay>
		EEPROM_I2C_SCL_LOW;
 801ad6a:	4b09      	ldr	r3, [pc, #36]	; (801ad90 <i2c_write_one_byte+0x80>)
 801ad6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ad70:	619a      	str	r2, [r3, #24]
		i2c_delay(1);
 801ad72:	2001      	movs	r0, #1
 801ad74:	f7ff feee 	bl	801ab54 <i2c_delay>
	for(i=0;i<8;i++)
 801ad78:	7bfb      	ldrb	r3, [r7, #15]
 801ad7a:	3301      	adds	r3, #1
 801ad7c:	73fb      	strb	r3, [r7, #15]
 801ad7e:	7bfb      	ldrb	r3, [r7, #15]
 801ad80:	2b07      	cmp	r3, #7
 801ad82:	d9d8      	bls.n	801ad36 <i2c_write_one_byte+0x26>
	}
}
 801ad84:	bf00      	nop
 801ad86:	bf00      	nop
 801ad88:	3710      	adds	r7, #16
 801ad8a:	46bd      	mov	sp, r7
 801ad8c:	bd80      	pop	{r7, pc}
 801ad8e:	bf00      	nop
 801ad90:	40020400 	.word	0x40020400

0801ad94 <i2c_read_one_byte>:

uint8_t i2c_read_one_byte(void)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b082      	sub	sp, #8
 801ad98:	af00      	add	r7, sp, #0
	uint8_t i,data;
	
	EEPROM_I2C_SCL_LOW;
 801ad9a:	4b27      	ldr	r3, [pc, #156]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801ad9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ada0:	619a      	str	r2, [r3, #24]
//	EEPROM_I2C_SDA_LOW;
	EEPROM_I2C_SDA_IN;
 801ada2:	4b25      	ldr	r3, [pc, #148]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801ada4:	681b      	ldr	r3, [r3, #0]
 801ada6:	4a24      	ldr	r2, [pc, #144]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801ada8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 801adac:	6013      	str	r3, [r2, #0]
	i2c_delay(1);
 801adae:	2001      	movs	r0, #1
 801adb0:	f7ff fed0 	bl	801ab54 <i2c_delay>
	
	for(i=0;i<8;i++)
 801adb4:	2300      	movs	r3, #0
 801adb6:	71fb      	strb	r3, [r7, #7]
 801adb8:	e029      	b.n	801ae0e <i2c_read_one_byte+0x7a>
	{
		data<<=1;
 801adba:	79bb      	ldrb	r3, [r7, #6]
 801adbc:	005b      	lsls	r3, r3, #1
 801adbe:	71bb      	strb	r3, [r7, #6]
		EEPROM_I2C_SCL_LOW;
 801adc0:	4b1d      	ldr	r3, [pc, #116]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801adc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801adc6:	619a      	str	r2, [r3, #24]
		i2c_delay(1);
 801adc8:	2001      	movs	r0, #1
 801adca:	f7ff fec3 	bl	801ab54 <i2c_delay>
		EEPROM_I2C_SCL_HIGH;
 801adce:	4b1a      	ldr	r3, [pc, #104]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801add0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801add4:	619a      	str	r2, [r3, #24]
		i2c_delay(1);
 801add6:	2001      	movs	r0, #1
 801add8:	f7ff febc 	bl	801ab54 <i2c_delay>
		if(EEPROM_READ_I2C_SDA!=0x00)
 801addc:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ade0:	4815      	ldr	r0, [pc, #84]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801ade2:	f7e9 fb1d 	bl	8004420 <HAL_GPIO_ReadPin>
 801ade6:	4603      	mov	r3, r0
 801ade8:	2b01      	cmp	r3, #1
 801adea:	d103      	bne.n	801adf4 <i2c_read_one_byte+0x60>
		{
			data|=0x01;
 801adec:	79bb      	ldrb	r3, [r7, #6]
 801adee:	f043 0301 	orr.w	r3, r3, #1
 801adf2:	71bb      	strb	r3, [r7, #6]
		}
		i2c_delay(1);
 801adf4:	2001      	movs	r0, #1
 801adf6:	f7ff fead 	bl	801ab54 <i2c_delay>
		EEPROM_I2C_SCL_LOW;
 801adfa:	4b0f      	ldr	r3, [pc, #60]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801adfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801ae00:	619a      	str	r2, [r3, #24]
		i2c_delay(1);
 801ae02:	2001      	movs	r0, #1
 801ae04:	f7ff fea6 	bl	801ab54 <i2c_delay>
	for(i=0;i<8;i++)
 801ae08:	79fb      	ldrb	r3, [r7, #7]
 801ae0a:	3301      	adds	r3, #1
 801ae0c:	71fb      	strb	r3, [r7, #7]
 801ae0e:	79fb      	ldrb	r3, [r7, #7]
 801ae10:	2b07      	cmp	r3, #7
 801ae12:	d9d2      	bls.n	801adba <i2c_read_one_byte+0x26>
	}
	
	EEPROM_I2C_SDA_OUT;
 801ae14:	4b08      	ldr	r3, [pc, #32]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	4a07      	ldr	r2, [pc, #28]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801ae1a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 801ae1e:	6013      	str	r3, [r2, #0]
 801ae20:	4b05      	ldr	r3, [pc, #20]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	4a04      	ldr	r2, [pc, #16]	; (801ae38 <i2c_read_one_byte+0xa4>)
 801ae26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801ae2a:	6013      	str	r3, [r2, #0]
	
	return data;
 801ae2c:	79bb      	ldrb	r3, [r7, #6]
}
 801ae2e:	4618      	mov	r0, r3
 801ae30:	3708      	adds	r7, #8
 801ae32:	46bd      	mov	sp, r7
 801ae34:	bd80      	pop	{r7, pc}
 801ae36:	bf00      	nop
 801ae38:	40020400 	.word	0x40020400

0801ae3c <exit>:
 801ae3c:	b508      	push	{r3, lr}
 801ae3e:	4b07      	ldr	r3, [pc, #28]	; (801ae5c <exit+0x20>)
 801ae40:	4604      	mov	r4, r0
 801ae42:	b113      	cbz	r3, 801ae4a <exit+0xe>
 801ae44:	2100      	movs	r1, #0
 801ae46:	f3af 8000 	nop.w
 801ae4a:	4b05      	ldr	r3, [pc, #20]	; (801ae60 <exit+0x24>)
 801ae4c:	6818      	ldr	r0, [r3, #0]
 801ae4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801ae50:	b103      	cbz	r3, 801ae54 <exit+0x18>
 801ae52:	4798      	blx	r3
 801ae54:	4620      	mov	r0, r4
 801ae56:	f7e7 f95b 	bl	8002110 <_exit>
 801ae5a:	bf00      	nop
 801ae5c:	00000000 	.word	0x00000000
 801ae60:	0801fe68 	.word	0x0801fe68

0801ae64 <std>:
 801ae64:	2300      	movs	r3, #0
 801ae66:	b510      	push	{r4, lr}
 801ae68:	4604      	mov	r4, r0
 801ae6a:	e9c0 3300 	strd	r3, r3, [r0]
 801ae6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae72:	6083      	str	r3, [r0, #8]
 801ae74:	8181      	strh	r1, [r0, #12]
 801ae76:	6643      	str	r3, [r0, #100]	; 0x64
 801ae78:	81c2      	strh	r2, [r0, #14]
 801ae7a:	6183      	str	r3, [r0, #24]
 801ae7c:	4619      	mov	r1, r3
 801ae7e:	2208      	movs	r2, #8
 801ae80:	305c      	adds	r0, #92	; 0x5c
 801ae82:	f000 f939 	bl	801b0f8 <memset>
 801ae86:	4b05      	ldr	r3, [pc, #20]	; (801ae9c <std+0x38>)
 801ae88:	6263      	str	r3, [r4, #36]	; 0x24
 801ae8a:	4b05      	ldr	r3, [pc, #20]	; (801aea0 <std+0x3c>)
 801ae8c:	62a3      	str	r3, [r4, #40]	; 0x28
 801ae8e:	4b05      	ldr	r3, [pc, #20]	; (801aea4 <std+0x40>)
 801ae90:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ae92:	4b05      	ldr	r3, [pc, #20]	; (801aea8 <std+0x44>)
 801ae94:	6224      	str	r4, [r4, #32]
 801ae96:	6323      	str	r3, [r4, #48]	; 0x30
 801ae98:	bd10      	pop	{r4, pc}
 801ae9a:	bf00      	nop
 801ae9c:	0801b401 	.word	0x0801b401
 801aea0:	0801b423 	.word	0x0801b423
 801aea4:	0801b45b 	.word	0x0801b45b
 801aea8:	0801b47f 	.word	0x0801b47f

0801aeac <_cleanup_r>:
 801aeac:	4901      	ldr	r1, [pc, #4]	; (801aeb4 <_cleanup_r+0x8>)
 801aeae:	f000 b8af 	b.w	801b010 <_fwalk_reent>
 801aeb2:	bf00      	nop
 801aeb4:	0801b621 	.word	0x0801b621

0801aeb8 <__sfmoreglue>:
 801aeb8:	b570      	push	{r4, r5, r6, lr}
 801aeba:	1e4a      	subs	r2, r1, #1
 801aebc:	2568      	movs	r5, #104	; 0x68
 801aebe:	4355      	muls	r5, r2
 801aec0:	460e      	mov	r6, r1
 801aec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aec6:	f000 f96f 	bl	801b1a8 <_malloc_r>
 801aeca:	4604      	mov	r4, r0
 801aecc:	b140      	cbz	r0, 801aee0 <__sfmoreglue+0x28>
 801aece:	2100      	movs	r1, #0
 801aed0:	e9c0 1600 	strd	r1, r6, [r0]
 801aed4:	300c      	adds	r0, #12
 801aed6:	60a0      	str	r0, [r4, #8]
 801aed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aedc:	f000 f90c 	bl	801b0f8 <memset>
 801aee0:	4620      	mov	r0, r4
 801aee2:	bd70      	pop	{r4, r5, r6, pc}

0801aee4 <__sfp_lock_acquire>:
 801aee4:	4801      	ldr	r0, [pc, #4]	; (801aeec <__sfp_lock_acquire+0x8>)
 801aee6:	f000 b8d8 	b.w	801b09a <__retarget_lock_acquire_recursive>
 801aeea:	bf00      	nop
 801aeec:	2001107c 	.word	0x2001107c

0801aef0 <__sfp_lock_release>:
 801aef0:	4801      	ldr	r0, [pc, #4]	; (801aef8 <__sfp_lock_release+0x8>)
 801aef2:	f000 b8d3 	b.w	801b09c <__retarget_lock_release_recursive>
 801aef6:	bf00      	nop
 801aef8:	2001107c 	.word	0x2001107c

0801aefc <__sinit_lock_acquire>:
 801aefc:	4801      	ldr	r0, [pc, #4]	; (801af04 <__sinit_lock_acquire+0x8>)
 801aefe:	f000 b8cc 	b.w	801b09a <__retarget_lock_acquire_recursive>
 801af02:	bf00      	nop
 801af04:	20011077 	.word	0x20011077

0801af08 <__sinit_lock_release>:
 801af08:	4801      	ldr	r0, [pc, #4]	; (801af10 <__sinit_lock_release+0x8>)
 801af0a:	f000 b8c7 	b.w	801b09c <__retarget_lock_release_recursive>
 801af0e:	bf00      	nop
 801af10:	20011077 	.word	0x20011077

0801af14 <__sinit>:
 801af14:	b510      	push	{r4, lr}
 801af16:	4604      	mov	r4, r0
 801af18:	f7ff fff0 	bl	801aefc <__sinit_lock_acquire>
 801af1c:	69a3      	ldr	r3, [r4, #24]
 801af1e:	b11b      	cbz	r3, 801af28 <__sinit+0x14>
 801af20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af24:	f7ff bff0 	b.w	801af08 <__sinit_lock_release>
 801af28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801af2c:	6523      	str	r3, [r4, #80]	; 0x50
 801af2e:	4b13      	ldr	r3, [pc, #76]	; (801af7c <__sinit+0x68>)
 801af30:	4a13      	ldr	r2, [pc, #76]	; (801af80 <__sinit+0x6c>)
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	62a2      	str	r2, [r4, #40]	; 0x28
 801af36:	42a3      	cmp	r3, r4
 801af38:	bf04      	itt	eq
 801af3a:	2301      	moveq	r3, #1
 801af3c:	61a3      	streq	r3, [r4, #24]
 801af3e:	4620      	mov	r0, r4
 801af40:	f000 f820 	bl	801af84 <__sfp>
 801af44:	6060      	str	r0, [r4, #4]
 801af46:	4620      	mov	r0, r4
 801af48:	f000 f81c 	bl	801af84 <__sfp>
 801af4c:	60a0      	str	r0, [r4, #8]
 801af4e:	4620      	mov	r0, r4
 801af50:	f000 f818 	bl	801af84 <__sfp>
 801af54:	2200      	movs	r2, #0
 801af56:	60e0      	str	r0, [r4, #12]
 801af58:	2104      	movs	r1, #4
 801af5a:	6860      	ldr	r0, [r4, #4]
 801af5c:	f7ff ff82 	bl	801ae64 <std>
 801af60:	68a0      	ldr	r0, [r4, #8]
 801af62:	2201      	movs	r2, #1
 801af64:	2109      	movs	r1, #9
 801af66:	f7ff ff7d 	bl	801ae64 <std>
 801af6a:	68e0      	ldr	r0, [r4, #12]
 801af6c:	2202      	movs	r2, #2
 801af6e:	2112      	movs	r1, #18
 801af70:	f7ff ff78 	bl	801ae64 <std>
 801af74:	2301      	movs	r3, #1
 801af76:	61a3      	str	r3, [r4, #24]
 801af78:	e7d2      	b.n	801af20 <__sinit+0xc>
 801af7a:	bf00      	nop
 801af7c:	0801fe68 	.word	0x0801fe68
 801af80:	0801aead 	.word	0x0801aead

0801af84 <__sfp>:
 801af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af86:	4607      	mov	r7, r0
 801af88:	f7ff ffac 	bl	801aee4 <__sfp_lock_acquire>
 801af8c:	4b1e      	ldr	r3, [pc, #120]	; (801b008 <__sfp+0x84>)
 801af8e:	681e      	ldr	r6, [r3, #0]
 801af90:	69b3      	ldr	r3, [r6, #24]
 801af92:	b913      	cbnz	r3, 801af9a <__sfp+0x16>
 801af94:	4630      	mov	r0, r6
 801af96:	f7ff ffbd 	bl	801af14 <__sinit>
 801af9a:	3648      	adds	r6, #72	; 0x48
 801af9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801afa0:	3b01      	subs	r3, #1
 801afa2:	d503      	bpl.n	801afac <__sfp+0x28>
 801afa4:	6833      	ldr	r3, [r6, #0]
 801afa6:	b30b      	cbz	r3, 801afec <__sfp+0x68>
 801afa8:	6836      	ldr	r6, [r6, #0]
 801afaa:	e7f7      	b.n	801af9c <__sfp+0x18>
 801afac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801afb0:	b9d5      	cbnz	r5, 801afe8 <__sfp+0x64>
 801afb2:	4b16      	ldr	r3, [pc, #88]	; (801b00c <__sfp+0x88>)
 801afb4:	60e3      	str	r3, [r4, #12]
 801afb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801afba:	6665      	str	r5, [r4, #100]	; 0x64
 801afbc:	f000 f86c 	bl	801b098 <__retarget_lock_init_recursive>
 801afc0:	f7ff ff96 	bl	801aef0 <__sfp_lock_release>
 801afc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801afc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801afcc:	6025      	str	r5, [r4, #0]
 801afce:	61a5      	str	r5, [r4, #24]
 801afd0:	2208      	movs	r2, #8
 801afd2:	4629      	mov	r1, r5
 801afd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801afd8:	f000 f88e 	bl	801b0f8 <memset>
 801afdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801afe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801afe4:	4620      	mov	r0, r4
 801afe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afe8:	3468      	adds	r4, #104	; 0x68
 801afea:	e7d9      	b.n	801afa0 <__sfp+0x1c>
 801afec:	2104      	movs	r1, #4
 801afee:	4638      	mov	r0, r7
 801aff0:	f7ff ff62 	bl	801aeb8 <__sfmoreglue>
 801aff4:	4604      	mov	r4, r0
 801aff6:	6030      	str	r0, [r6, #0]
 801aff8:	2800      	cmp	r0, #0
 801affa:	d1d5      	bne.n	801afa8 <__sfp+0x24>
 801affc:	f7ff ff78 	bl	801aef0 <__sfp_lock_release>
 801b000:	230c      	movs	r3, #12
 801b002:	603b      	str	r3, [r7, #0]
 801b004:	e7ee      	b.n	801afe4 <__sfp+0x60>
 801b006:	bf00      	nop
 801b008:	0801fe68 	.word	0x0801fe68
 801b00c:	ffff0001 	.word	0xffff0001

0801b010 <_fwalk_reent>:
 801b010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b014:	4606      	mov	r6, r0
 801b016:	4688      	mov	r8, r1
 801b018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b01c:	2700      	movs	r7, #0
 801b01e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b022:	f1b9 0901 	subs.w	r9, r9, #1
 801b026:	d505      	bpl.n	801b034 <_fwalk_reent+0x24>
 801b028:	6824      	ldr	r4, [r4, #0]
 801b02a:	2c00      	cmp	r4, #0
 801b02c:	d1f7      	bne.n	801b01e <_fwalk_reent+0xe>
 801b02e:	4638      	mov	r0, r7
 801b030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b034:	89ab      	ldrh	r3, [r5, #12]
 801b036:	2b01      	cmp	r3, #1
 801b038:	d907      	bls.n	801b04a <_fwalk_reent+0x3a>
 801b03a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b03e:	3301      	adds	r3, #1
 801b040:	d003      	beq.n	801b04a <_fwalk_reent+0x3a>
 801b042:	4629      	mov	r1, r5
 801b044:	4630      	mov	r0, r6
 801b046:	47c0      	blx	r8
 801b048:	4307      	orrs	r7, r0
 801b04a:	3568      	adds	r5, #104	; 0x68
 801b04c:	e7e9      	b.n	801b022 <_fwalk_reent+0x12>
	...

0801b050 <__libc_init_array>:
 801b050:	b570      	push	{r4, r5, r6, lr}
 801b052:	4d0d      	ldr	r5, [pc, #52]	; (801b088 <__libc_init_array+0x38>)
 801b054:	4c0d      	ldr	r4, [pc, #52]	; (801b08c <__libc_init_array+0x3c>)
 801b056:	1b64      	subs	r4, r4, r5
 801b058:	10a4      	asrs	r4, r4, #2
 801b05a:	2600      	movs	r6, #0
 801b05c:	42a6      	cmp	r6, r4
 801b05e:	d109      	bne.n	801b074 <__libc_init_array+0x24>
 801b060:	4d0b      	ldr	r5, [pc, #44]	; (801b090 <__libc_init_array+0x40>)
 801b062:	4c0c      	ldr	r4, [pc, #48]	; (801b094 <__libc_init_array+0x44>)
 801b064:	f001 f9b2 	bl	801c3cc <_init>
 801b068:	1b64      	subs	r4, r4, r5
 801b06a:	10a4      	asrs	r4, r4, #2
 801b06c:	2600      	movs	r6, #0
 801b06e:	42a6      	cmp	r6, r4
 801b070:	d105      	bne.n	801b07e <__libc_init_array+0x2e>
 801b072:	bd70      	pop	{r4, r5, r6, pc}
 801b074:	f855 3b04 	ldr.w	r3, [r5], #4
 801b078:	4798      	blx	r3
 801b07a:	3601      	adds	r6, #1
 801b07c:	e7ee      	b.n	801b05c <__libc_init_array+0xc>
 801b07e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b082:	4798      	blx	r3
 801b084:	3601      	adds	r6, #1
 801b086:	e7f2      	b.n	801b06e <__libc_init_array+0x1e>
 801b088:	0801ff90 	.word	0x0801ff90
 801b08c:	0801ff90 	.word	0x0801ff90
 801b090:	0801ff90 	.word	0x0801ff90
 801b094:	0801ff94 	.word	0x0801ff94

0801b098 <__retarget_lock_init_recursive>:
 801b098:	4770      	bx	lr

0801b09a <__retarget_lock_acquire_recursive>:
 801b09a:	4770      	bx	lr

0801b09c <__retarget_lock_release_recursive>:
 801b09c:	4770      	bx	lr
	...

0801b0a0 <malloc>:
 801b0a0:	4b02      	ldr	r3, [pc, #8]	; (801b0ac <malloc+0xc>)
 801b0a2:	4601      	mov	r1, r0
 801b0a4:	6818      	ldr	r0, [r3, #0]
 801b0a6:	f000 b87f 	b.w	801b1a8 <_malloc_r>
 801b0aa:	bf00      	nop
 801b0ac:	2000002c 	.word	0x2000002c

0801b0b0 <free>:
 801b0b0:	4b02      	ldr	r3, [pc, #8]	; (801b0bc <free+0xc>)
 801b0b2:	4601      	mov	r1, r0
 801b0b4:	6818      	ldr	r0, [r3, #0]
 801b0b6:	f000 b827 	b.w	801b108 <_free_r>
 801b0ba:	bf00      	nop
 801b0bc:	2000002c 	.word	0x2000002c

0801b0c0 <memcmp>:
 801b0c0:	b530      	push	{r4, r5, lr}
 801b0c2:	3901      	subs	r1, #1
 801b0c4:	2400      	movs	r4, #0
 801b0c6:	42a2      	cmp	r2, r4
 801b0c8:	d101      	bne.n	801b0ce <memcmp+0xe>
 801b0ca:	2000      	movs	r0, #0
 801b0cc:	e005      	b.n	801b0da <memcmp+0x1a>
 801b0ce:	5d03      	ldrb	r3, [r0, r4]
 801b0d0:	3401      	adds	r4, #1
 801b0d2:	5d0d      	ldrb	r5, [r1, r4]
 801b0d4:	42ab      	cmp	r3, r5
 801b0d6:	d0f6      	beq.n	801b0c6 <memcmp+0x6>
 801b0d8:	1b58      	subs	r0, r3, r5
 801b0da:	bd30      	pop	{r4, r5, pc}

0801b0dc <memcpy>:
 801b0dc:	440a      	add	r2, r1
 801b0de:	4291      	cmp	r1, r2
 801b0e0:	f100 33ff 	add.w	r3, r0, #4294967295
 801b0e4:	d100      	bne.n	801b0e8 <memcpy+0xc>
 801b0e6:	4770      	bx	lr
 801b0e8:	b510      	push	{r4, lr}
 801b0ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b0ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b0f2:	4291      	cmp	r1, r2
 801b0f4:	d1f9      	bne.n	801b0ea <memcpy+0xe>
 801b0f6:	bd10      	pop	{r4, pc}

0801b0f8 <memset>:
 801b0f8:	4402      	add	r2, r0
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	4293      	cmp	r3, r2
 801b0fe:	d100      	bne.n	801b102 <memset+0xa>
 801b100:	4770      	bx	lr
 801b102:	f803 1b01 	strb.w	r1, [r3], #1
 801b106:	e7f9      	b.n	801b0fc <memset+0x4>

0801b108 <_free_r>:
 801b108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b10a:	2900      	cmp	r1, #0
 801b10c:	d048      	beq.n	801b1a0 <_free_r+0x98>
 801b10e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b112:	9001      	str	r0, [sp, #4]
 801b114:	2b00      	cmp	r3, #0
 801b116:	f1a1 0404 	sub.w	r4, r1, #4
 801b11a:	bfb8      	it	lt
 801b11c:	18e4      	addlt	r4, r4, r3
 801b11e:	f000 fadf 	bl	801b6e0 <__malloc_lock>
 801b122:	4a20      	ldr	r2, [pc, #128]	; (801b1a4 <_free_r+0x9c>)
 801b124:	9801      	ldr	r0, [sp, #4]
 801b126:	6813      	ldr	r3, [r2, #0]
 801b128:	4615      	mov	r5, r2
 801b12a:	b933      	cbnz	r3, 801b13a <_free_r+0x32>
 801b12c:	6063      	str	r3, [r4, #4]
 801b12e:	6014      	str	r4, [r2, #0]
 801b130:	b003      	add	sp, #12
 801b132:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b136:	f000 bad9 	b.w	801b6ec <__malloc_unlock>
 801b13a:	42a3      	cmp	r3, r4
 801b13c:	d90b      	bls.n	801b156 <_free_r+0x4e>
 801b13e:	6821      	ldr	r1, [r4, #0]
 801b140:	1862      	adds	r2, r4, r1
 801b142:	4293      	cmp	r3, r2
 801b144:	bf04      	itt	eq
 801b146:	681a      	ldreq	r2, [r3, #0]
 801b148:	685b      	ldreq	r3, [r3, #4]
 801b14a:	6063      	str	r3, [r4, #4]
 801b14c:	bf04      	itt	eq
 801b14e:	1852      	addeq	r2, r2, r1
 801b150:	6022      	streq	r2, [r4, #0]
 801b152:	602c      	str	r4, [r5, #0]
 801b154:	e7ec      	b.n	801b130 <_free_r+0x28>
 801b156:	461a      	mov	r2, r3
 801b158:	685b      	ldr	r3, [r3, #4]
 801b15a:	b10b      	cbz	r3, 801b160 <_free_r+0x58>
 801b15c:	42a3      	cmp	r3, r4
 801b15e:	d9fa      	bls.n	801b156 <_free_r+0x4e>
 801b160:	6811      	ldr	r1, [r2, #0]
 801b162:	1855      	adds	r5, r2, r1
 801b164:	42a5      	cmp	r5, r4
 801b166:	d10b      	bne.n	801b180 <_free_r+0x78>
 801b168:	6824      	ldr	r4, [r4, #0]
 801b16a:	4421      	add	r1, r4
 801b16c:	1854      	adds	r4, r2, r1
 801b16e:	42a3      	cmp	r3, r4
 801b170:	6011      	str	r1, [r2, #0]
 801b172:	d1dd      	bne.n	801b130 <_free_r+0x28>
 801b174:	681c      	ldr	r4, [r3, #0]
 801b176:	685b      	ldr	r3, [r3, #4]
 801b178:	6053      	str	r3, [r2, #4]
 801b17a:	4421      	add	r1, r4
 801b17c:	6011      	str	r1, [r2, #0]
 801b17e:	e7d7      	b.n	801b130 <_free_r+0x28>
 801b180:	d902      	bls.n	801b188 <_free_r+0x80>
 801b182:	230c      	movs	r3, #12
 801b184:	6003      	str	r3, [r0, #0]
 801b186:	e7d3      	b.n	801b130 <_free_r+0x28>
 801b188:	6825      	ldr	r5, [r4, #0]
 801b18a:	1961      	adds	r1, r4, r5
 801b18c:	428b      	cmp	r3, r1
 801b18e:	bf04      	itt	eq
 801b190:	6819      	ldreq	r1, [r3, #0]
 801b192:	685b      	ldreq	r3, [r3, #4]
 801b194:	6063      	str	r3, [r4, #4]
 801b196:	bf04      	itt	eq
 801b198:	1949      	addeq	r1, r1, r5
 801b19a:	6021      	streq	r1, [r4, #0]
 801b19c:	6054      	str	r4, [r2, #4]
 801b19e:	e7c7      	b.n	801b130 <_free_r+0x28>
 801b1a0:	b003      	add	sp, #12
 801b1a2:	bd30      	pop	{r4, r5, pc}
 801b1a4:	200085d0 	.word	0x200085d0

0801b1a8 <_malloc_r>:
 801b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1aa:	1ccd      	adds	r5, r1, #3
 801b1ac:	f025 0503 	bic.w	r5, r5, #3
 801b1b0:	3508      	adds	r5, #8
 801b1b2:	2d0c      	cmp	r5, #12
 801b1b4:	bf38      	it	cc
 801b1b6:	250c      	movcc	r5, #12
 801b1b8:	2d00      	cmp	r5, #0
 801b1ba:	4606      	mov	r6, r0
 801b1bc:	db01      	blt.n	801b1c2 <_malloc_r+0x1a>
 801b1be:	42a9      	cmp	r1, r5
 801b1c0:	d903      	bls.n	801b1ca <_malloc_r+0x22>
 801b1c2:	230c      	movs	r3, #12
 801b1c4:	6033      	str	r3, [r6, #0]
 801b1c6:	2000      	movs	r0, #0
 801b1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1ca:	f000 fa89 	bl	801b6e0 <__malloc_lock>
 801b1ce:	4921      	ldr	r1, [pc, #132]	; (801b254 <_malloc_r+0xac>)
 801b1d0:	680a      	ldr	r2, [r1, #0]
 801b1d2:	4614      	mov	r4, r2
 801b1d4:	b99c      	cbnz	r4, 801b1fe <_malloc_r+0x56>
 801b1d6:	4f20      	ldr	r7, [pc, #128]	; (801b258 <_malloc_r+0xb0>)
 801b1d8:	683b      	ldr	r3, [r7, #0]
 801b1da:	b923      	cbnz	r3, 801b1e6 <_malloc_r+0x3e>
 801b1dc:	4621      	mov	r1, r4
 801b1de:	4630      	mov	r0, r6
 801b1e0:	f000 f8fe 	bl	801b3e0 <_sbrk_r>
 801b1e4:	6038      	str	r0, [r7, #0]
 801b1e6:	4629      	mov	r1, r5
 801b1e8:	4630      	mov	r0, r6
 801b1ea:	f000 f8f9 	bl	801b3e0 <_sbrk_r>
 801b1ee:	1c43      	adds	r3, r0, #1
 801b1f0:	d123      	bne.n	801b23a <_malloc_r+0x92>
 801b1f2:	230c      	movs	r3, #12
 801b1f4:	6033      	str	r3, [r6, #0]
 801b1f6:	4630      	mov	r0, r6
 801b1f8:	f000 fa78 	bl	801b6ec <__malloc_unlock>
 801b1fc:	e7e3      	b.n	801b1c6 <_malloc_r+0x1e>
 801b1fe:	6823      	ldr	r3, [r4, #0]
 801b200:	1b5b      	subs	r3, r3, r5
 801b202:	d417      	bmi.n	801b234 <_malloc_r+0x8c>
 801b204:	2b0b      	cmp	r3, #11
 801b206:	d903      	bls.n	801b210 <_malloc_r+0x68>
 801b208:	6023      	str	r3, [r4, #0]
 801b20a:	441c      	add	r4, r3
 801b20c:	6025      	str	r5, [r4, #0]
 801b20e:	e004      	b.n	801b21a <_malloc_r+0x72>
 801b210:	6863      	ldr	r3, [r4, #4]
 801b212:	42a2      	cmp	r2, r4
 801b214:	bf0c      	ite	eq
 801b216:	600b      	streq	r3, [r1, #0]
 801b218:	6053      	strne	r3, [r2, #4]
 801b21a:	4630      	mov	r0, r6
 801b21c:	f000 fa66 	bl	801b6ec <__malloc_unlock>
 801b220:	f104 000b 	add.w	r0, r4, #11
 801b224:	1d23      	adds	r3, r4, #4
 801b226:	f020 0007 	bic.w	r0, r0, #7
 801b22a:	1ac2      	subs	r2, r0, r3
 801b22c:	d0cc      	beq.n	801b1c8 <_malloc_r+0x20>
 801b22e:	1a1b      	subs	r3, r3, r0
 801b230:	50a3      	str	r3, [r4, r2]
 801b232:	e7c9      	b.n	801b1c8 <_malloc_r+0x20>
 801b234:	4622      	mov	r2, r4
 801b236:	6864      	ldr	r4, [r4, #4]
 801b238:	e7cc      	b.n	801b1d4 <_malloc_r+0x2c>
 801b23a:	1cc4      	adds	r4, r0, #3
 801b23c:	f024 0403 	bic.w	r4, r4, #3
 801b240:	42a0      	cmp	r0, r4
 801b242:	d0e3      	beq.n	801b20c <_malloc_r+0x64>
 801b244:	1a21      	subs	r1, r4, r0
 801b246:	4630      	mov	r0, r6
 801b248:	f000 f8ca 	bl	801b3e0 <_sbrk_r>
 801b24c:	3001      	adds	r0, #1
 801b24e:	d1dd      	bne.n	801b20c <_malloc_r+0x64>
 801b250:	e7cf      	b.n	801b1f2 <_malloc_r+0x4a>
 801b252:	bf00      	nop
 801b254:	200085d0 	.word	0x200085d0
 801b258:	200085d4 	.word	0x200085d4

0801b25c <iprintf>:
 801b25c:	b40f      	push	{r0, r1, r2, r3}
 801b25e:	4b0a      	ldr	r3, [pc, #40]	; (801b288 <iprintf+0x2c>)
 801b260:	b513      	push	{r0, r1, r4, lr}
 801b262:	681c      	ldr	r4, [r3, #0]
 801b264:	b124      	cbz	r4, 801b270 <iprintf+0x14>
 801b266:	69a3      	ldr	r3, [r4, #24]
 801b268:	b913      	cbnz	r3, 801b270 <iprintf+0x14>
 801b26a:	4620      	mov	r0, r4
 801b26c:	f7ff fe52 	bl	801af14 <__sinit>
 801b270:	ab05      	add	r3, sp, #20
 801b272:	9a04      	ldr	r2, [sp, #16]
 801b274:	68a1      	ldr	r1, [r4, #8]
 801b276:	9301      	str	r3, [sp, #4]
 801b278:	4620      	mov	r0, r4
 801b27a:	f000 fa67 	bl	801b74c <_vfiprintf_r>
 801b27e:	b002      	add	sp, #8
 801b280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b284:	b004      	add	sp, #16
 801b286:	4770      	bx	lr
 801b288:	2000002c 	.word	0x2000002c

0801b28c <rand>:
 801b28c:	4b17      	ldr	r3, [pc, #92]	; (801b2ec <rand+0x60>)
 801b28e:	b510      	push	{r4, lr}
 801b290:	681c      	ldr	r4, [r3, #0]
 801b292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b294:	b9b3      	cbnz	r3, 801b2c4 <rand+0x38>
 801b296:	2018      	movs	r0, #24
 801b298:	f7ff ff02 	bl	801b0a0 <malloc>
 801b29c:	63a0      	str	r0, [r4, #56]	; 0x38
 801b29e:	b928      	cbnz	r0, 801b2ac <rand+0x20>
 801b2a0:	4602      	mov	r2, r0
 801b2a2:	4b13      	ldr	r3, [pc, #76]	; (801b2f0 <rand+0x64>)
 801b2a4:	4813      	ldr	r0, [pc, #76]	; (801b2f4 <rand+0x68>)
 801b2a6:	214e      	movs	r1, #78	; 0x4e
 801b2a8:	f000 f900 	bl	801b4ac <__assert_func>
 801b2ac:	4a12      	ldr	r2, [pc, #72]	; (801b2f8 <rand+0x6c>)
 801b2ae:	4b13      	ldr	r3, [pc, #76]	; (801b2fc <rand+0x70>)
 801b2b0:	e9c0 2300 	strd	r2, r3, [r0]
 801b2b4:	4b12      	ldr	r3, [pc, #72]	; (801b300 <rand+0x74>)
 801b2b6:	6083      	str	r3, [r0, #8]
 801b2b8:	230b      	movs	r3, #11
 801b2ba:	8183      	strh	r3, [r0, #12]
 801b2bc:	2201      	movs	r2, #1
 801b2be:	2300      	movs	r3, #0
 801b2c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b2c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b2c6:	480f      	ldr	r0, [pc, #60]	; (801b304 <rand+0x78>)
 801b2c8:	690a      	ldr	r2, [r1, #16]
 801b2ca:	694b      	ldr	r3, [r1, #20]
 801b2cc:	4c0e      	ldr	r4, [pc, #56]	; (801b308 <rand+0x7c>)
 801b2ce:	4350      	muls	r0, r2
 801b2d0:	fb04 0003 	mla	r0, r4, r3, r0
 801b2d4:	fba2 3404 	umull	r3, r4, r2, r4
 801b2d8:	1c5a      	adds	r2, r3, #1
 801b2da:	4404      	add	r4, r0
 801b2dc:	f144 0000 	adc.w	r0, r4, #0
 801b2e0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801b2e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b2e8:	bd10      	pop	{r4, pc}
 801b2ea:	bf00      	nop
 801b2ec:	2000002c 	.word	0x2000002c
 801b2f0:	0801fe6c 	.word	0x0801fe6c
 801b2f4:	0801fe83 	.word	0x0801fe83
 801b2f8:	abcd330e 	.word	0xabcd330e
 801b2fc:	e66d1234 	.word	0xe66d1234
 801b300:	0005deec 	.word	0x0005deec
 801b304:	5851f42d 	.word	0x5851f42d
 801b308:	4c957f2d 	.word	0x4c957f2d

0801b30c <cleanup_glue>:
 801b30c:	b538      	push	{r3, r4, r5, lr}
 801b30e:	460c      	mov	r4, r1
 801b310:	6809      	ldr	r1, [r1, #0]
 801b312:	4605      	mov	r5, r0
 801b314:	b109      	cbz	r1, 801b31a <cleanup_glue+0xe>
 801b316:	f7ff fff9 	bl	801b30c <cleanup_glue>
 801b31a:	4621      	mov	r1, r4
 801b31c:	4628      	mov	r0, r5
 801b31e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b322:	f7ff bef1 	b.w	801b108 <_free_r>
	...

0801b328 <_reclaim_reent>:
 801b328:	4b2c      	ldr	r3, [pc, #176]	; (801b3dc <_reclaim_reent+0xb4>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	4283      	cmp	r3, r0
 801b32e:	b570      	push	{r4, r5, r6, lr}
 801b330:	4604      	mov	r4, r0
 801b332:	d051      	beq.n	801b3d8 <_reclaim_reent+0xb0>
 801b334:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b336:	b143      	cbz	r3, 801b34a <_reclaim_reent+0x22>
 801b338:	68db      	ldr	r3, [r3, #12]
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d14a      	bne.n	801b3d4 <_reclaim_reent+0xac>
 801b33e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b340:	6819      	ldr	r1, [r3, #0]
 801b342:	b111      	cbz	r1, 801b34a <_reclaim_reent+0x22>
 801b344:	4620      	mov	r0, r4
 801b346:	f7ff fedf 	bl	801b108 <_free_r>
 801b34a:	6961      	ldr	r1, [r4, #20]
 801b34c:	b111      	cbz	r1, 801b354 <_reclaim_reent+0x2c>
 801b34e:	4620      	mov	r0, r4
 801b350:	f7ff feda 	bl	801b108 <_free_r>
 801b354:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b356:	b111      	cbz	r1, 801b35e <_reclaim_reent+0x36>
 801b358:	4620      	mov	r0, r4
 801b35a:	f7ff fed5 	bl	801b108 <_free_r>
 801b35e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b360:	b111      	cbz	r1, 801b368 <_reclaim_reent+0x40>
 801b362:	4620      	mov	r0, r4
 801b364:	f7ff fed0 	bl	801b108 <_free_r>
 801b368:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b36a:	b111      	cbz	r1, 801b372 <_reclaim_reent+0x4a>
 801b36c:	4620      	mov	r0, r4
 801b36e:	f7ff fecb 	bl	801b108 <_free_r>
 801b372:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b374:	b111      	cbz	r1, 801b37c <_reclaim_reent+0x54>
 801b376:	4620      	mov	r0, r4
 801b378:	f7ff fec6 	bl	801b108 <_free_r>
 801b37c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b37e:	b111      	cbz	r1, 801b386 <_reclaim_reent+0x5e>
 801b380:	4620      	mov	r0, r4
 801b382:	f7ff fec1 	bl	801b108 <_free_r>
 801b386:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b388:	b111      	cbz	r1, 801b390 <_reclaim_reent+0x68>
 801b38a:	4620      	mov	r0, r4
 801b38c:	f7ff febc 	bl	801b108 <_free_r>
 801b390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b392:	b111      	cbz	r1, 801b39a <_reclaim_reent+0x72>
 801b394:	4620      	mov	r0, r4
 801b396:	f7ff feb7 	bl	801b108 <_free_r>
 801b39a:	69a3      	ldr	r3, [r4, #24]
 801b39c:	b1e3      	cbz	r3, 801b3d8 <_reclaim_reent+0xb0>
 801b39e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b3a0:	4620      	mov	r0, r4
 801b3a2:	4798      	blx	r3
 801b3a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b3a6:	b1b9      	cbz	r1, 801b3d8 <_reclaim_reent+0xb0>
 801b3a8:	4620      	mov	r0, r4
 801b3aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3ae:	f7ff bfad 	b.w	801b30c <cleanup_glue>
 801b3b2:	5949      	ldr	r1, [r1, r5]
 801b3b4:	b941      	cbnz	r1, 801b3c8 <_reclaim_reent+0xa0>
 801b3b6:	3504      	adds	r5, #4
 801b3b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b3ba:	2d80      	cmp	r5, #128	; 0x80
 801b3bc:	68d9      	ldr	r1, [r3, #12]
 801b3be:	d1f8      	bne.n	801b3b2 <_reclaim_reent+0x8a>
 801b3c0:	4620      	mov	r0, r4
 801b3c2:	f7ff fea1 	bl	801b108 <_free_r>
 801b3c6:	e7ba      	b.n	801b33e <_reclaim_reent+0x16>
 801b3c8:	680e      	ldr	r6, [r1, #0]
 801b3ca:	4620      	mov	r0, r4
 801b3cc:	f7ff fe9c 	bl	801b108 <_free_r>
 801b3d0:	4631      	mov	r1, r6
 801b3d2:	e7ef      	b.n	801b3b4 <_reclaim_reent+0x8c>
 801b3d4:	2500      	movs	r5, #0
 801b3d6:	e7ef      	b.n	801b3b8 <_reclaim_reent+0x90>
 801b3d8:	bd70      	pop	{r4, r5, r6, pc}
 801b3da:	bf00      	nop
 801b3dc:	2000002c 	.word	0x2000002c

0801b3e0 <_sbrk_r>:
 801b3e0:	b538      	push	{r3, r4, r5, lr}
 801b3e2:	4d06      	ldr	r5, [pc, #24]	; (801b3fc <_sbrk_r+0x1c>)
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	4604      	mov	r4, r0
 801b3e8:	4608      	mov	r0, r1
 801b3ea:	602b      	str	r3, [r5, #0]
 801b3ec:	f7e6 ff08 	bl	8002200 <_sbrk>
 801b3f0:	1c43      	adds	r3, r0, #1
 801b3f2:	d102      	bne.n	801b3fa <_sbrk_r+0x1a>
 801b3f4:	682b      	ldr	r3, [r5, #0]
 801b3f6:	b103      	cbz	r3, 801b3fa <_sbrk_r+0x1a>
 801b3f8:	6023      	str	r3, [r4, #0]
 801b3fa:	bd38      	pop	{r3, r4, r5, pc}
 801b3fc:	2001106c 	.word	0x2001106c

0801b400 <__sread>:
 801b400:	b510      	push	{r4, lr}
 801b402:	460c      	mov	r4, r1
 801b404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b408:	f000 fc64 	bl	801bcd4 <_read_r>
 801b40c:	2800      	cmp	r0, #0
 801b40e:	bfab      	itete	ge
 801b410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b412:	89a3      	ldrhlt	r3, [r4, #12]
 801b414:	181b      	addge	r3, r3, r0
 801b416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b41a:	bfac      	ite	ge
 801b41c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b41e:	81a3      	strhlt	r3, [r4, #12]
 801b420:	bd10      	pop	{r4, pc}

0801b422 <__swrite>:
 801b422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b426:	461f      	mov	r7, r3
 801b428:	898b      	ldrh	r3, [r1, #12]
 801b42a:	05db      	lsls	r3, r3, #23
 801b42c:	4605      	mov	r5, r0
 801b42e:	460c      	mov	r4, r1
 801b430:	4616      	mov	r6, r2
 801b432:	d505      	bpl.n	801b440 <__swrite+0x1e>
 801b434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b438:	2302      	movs	r3, #2
 801b43a:	2200      	movs	r2, #0
 801b43c:	f000 f93e 	bl	801b6bc <_lseek_r>
 801b440:	89a3      	ldrh	r3, [r4, #12]
 801b442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b44a:	81a3      	strh	r3, [r4, #12]
 801b44c:	4632      	mov	r2, r6
 801b44e:	463b      	mov	r3, r7
 801b450:	4628      	mov	r0, r5
 801b452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b456:	f000 b817 	b.w	801b488 <_write_r>

0801b45a <__sseek>:
 801b45a:	b510      	push	{r4, lr}
 801b45c:	460c      	mov	r4, r1
 801b45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b462:	f000 f92b 	bl	801b6bc <_lseek_r>
 801b466:	1c43      	adds	r3, r0, #1
 801b468:	89a3      	ldrh	r3, [r4, #12]
 801b46a:	bf15      	itete	ne
 801b46c:	6560      	strne	r0, [r4, #84]	; 0x54
 801b46e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b476:	81a3      	strheq	r3, [r4, #12]
 801b478:	bf18      	it	ne
 801b47a:	81a3      	strhne	r3, [r4, #12]
 801b47c:	bd10      	pop	{r4, pc}

0801b47e <__sclose>:
 801b47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b482:	f000 b831 	b.w	801b4e8 <_close_r>
	...

0801b488 <_write_r>:
 801b488:	b538      	push	{r3, r4, r5, lr}
 801b48a:	4d07      	ldr	r5, [pc, #28]	; (801b4a8 <_write_r+0x20>)
 801b48c:	4604      	mov	r4, r0
 801b48e:	4608      	mov	r0, r1
 801b490:	4611      	mov	r1, r2
 801b492:	2200      	movs	r2, #0
 801b494:	602a      	str	r2, [r5, #0]
 801b496:	461a      	mov	r2, r3
 801b498:	f7e6 fe61 	bl	800215e <_write>
 801b49c:	1c43      	adds	r3, r0, #1
 801b49e:	d102      	bne.n	801b4a6 <_write_r+0x1e>
 801b4a0:	682b      	ldr	r3, [r5, #0]
 801b4a2:	b103      	cbz	r3, 801b4a6 <_write_r+0x1e>
 801b4a4:	6023      	str	r3, [r4, #0]
 801b4a6:	bd38      	pop	{r3, r4, r5, pc}
 801b4a8:	2001106c 	.word	0x2001106c

0801b4ac <__assert_func>:
 801b4ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b4ae:	4614      	mov	r4, r2
 801b4b0:	461a      	mov	r2, r3
 801b4b2:	4b09      	ldr	r3, [pc, #36]	; (801b4d8 <__assert_func+0x2c>)
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	4605      	mov	r5, r0
 801b4b8:	68d8      	ldr	r0, [r3, #12]
 801b4ba:	b14c      	cbz	r4, 801b4d0 <__assert_func+0x24>
 801b4bc:	4b07      	ldr	r3, [pc, #28]	; (801b4dc <__assert_func+0x30>)
 801b4be:	9100      	str	r1, [sp, #0]
 801b4c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b4c4:	4906      	ldr	r1, [pc, #24]	; (801b4e0 <__assert_func+0x34>)
 801b4c6:	462b      	mov	r3, r5
 801b4c8:	f000 f8e6 	bl	801b698 <fiprintf>
 801b4cc:	f000 fcd4 	bl	801be78 <abort>
 801b4d0:	4b04      	ldr	r3, [pc, #16]	; (801b4e4 <__assert_func+0x38>)
 801b4d2:	461c      	mov	r4, r3
 801b4d4:	e7f3      	b.n	801b4be <__assert_func+0x12>
 801b4d6:	bf00      	nop
 801b4d8:	2000002c 	.word	0x2000002c
 801b4dc:	0801fee2 	.word	0x0801fee2
 801b4e0:	0801feef 	.word	0x0801feef
 801b4e4:	0801ff1d 	.word	0x0801ff1d

0801b4e8 <_close_r>:
 801b4e8:	b538      	push	{r3, r4, r5, lr}
 801b4ea:	4d06      	ldr	r5, [pc, #24]	; (801b504 <_close_r+0x1c>)
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	4604      	mov	r4, r0
 801b4f0:	4608      	mov	r0, r1
 801b4f2:	602b      	str	r3, [r5, #0]
 801b4f4:	f7e6 fe4f 	bl	8002196 <_close>
 801b4f8:	1c43      	adds	r3, r0, #1
 801b4fa:	d102      	bne.n	801b502 <_close_r+0x1a>
 801b4fc:	682b      	ldr	r3, [r5, #0]
 801b4fe:	b103      	cbz	r3, 801b502 <_close_r+0x1a>
 801b500:	6023      	str	r3, [r4, #0]
 801b502:	bd38      	pop	{r3, r4, r5, pc}
 801b504:	2001106c 	.word	0x2001106c

0801b508 <__errno>:
 801b508:	4b01      	ldr	r3, [pc, #4]	; (801b510 <__errno+0x8>)
 801b50a:	6818      	ldr	r0, [r3, #0]
 801b50c:	4770      	bx	lr
 801b50e:	bf00      	nop
 801b510:	2000002c 	.word	0x2000002c

0801b514 <__sflush_r>:
 801b514:	898a      	ldrh	r2, [r1, #12]
 801b516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b51a:	4605      	mov	r5, r0
 801b51c:	0710      	lsls	r0, r2, #28
 801b51e:	460c      	mov	r4, r1
 801b520:	d458      	bmi.n	801b5d4 <__sflush_r+0xc0>
 801b522:	684b      	ldr	r3, [r1, #4]
 801b524:	2b00      	cmp	r3, #0
 801b526:	dc05      	bgt.n	801b534 <__sflush_r+0x20>
 801b528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	dc02      	bgt.n	801b534 <__sflush_r+0x20>
 801b52e:	2000      	movs	r0, #0
 801b530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b536:	2e00      	cmp	r6, #0
 801b538:	d0f9      	beq.n	801b52e <__sflush_r+0x1a>
 801b53a:	2300      	movs	r3, #0
 801b53c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b540:	682f      	ldr	r7, [r5, #0]
 801b542:	602b      	str	r3, [r5, #0]
 801b544:	d032      	beq.n	801b5ac <__sflush_r+0x98>
 801b546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b548:	89a3      	ldrh	r3, [r4, #12]
 801b54a:	075a      	lsls	r2, r3, #29
 801b54c:	d505      	bpl.n	801b55a <__sflush_r+0x46>
 801b54e:	6863      	ldr	r3, [r4, #4]
 801b550:	1ac0      	subs	r0, r0, r3
 801b552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b554:	b10b      	cbz	r3, 801b55a <__sflush_r+0x46>
 801b556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b558:	1ac0      	subs	r0, r0, r3
 801b55a:	2300      	movs	r3, #0
 801b55c:	4602      	mov	r2, r0
 801b55e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b560:	6a21      	ldr	r1, [r4, #32]
 801b562:	4628      	mov	r0, r5
 801b564:	47b0      	blx	r6
 801b566:	1c43      	adds	r3, r0, #1
 801b568:	89a3      	ldrh	r3, [r4, #12]
 801b56a:	d106      	bne.n	801b57a <__sflush_r+0x66>
 801b56c:	6829      	ldr	r1, [r5, #0]
 801b56e:	291d      	cmp	r1, #29
 801b570:	d82c      	bhi.n	801b5cc <__sflush_r+0xb8>
 801b572:	4a2a      	ldr	r2, [pc, #168]	; (801b61c <__sflush_r+0x108>)
 801b574:	40ca      	lsrs	r2, r1
 801b576:	07d6      	lsls	r6, r2, #31
 801b578:	d528      	bpl.n	801b5cc <__sflush_r+0xb8>
 801b57a:	2200      	movs	r2, #0
 801b57c:	6062      	str	r2, [r4, #4]
 801b57e:	04d9      	lsls	r1, r3, #19
 801b580:	6922      	ldr	r2, [r4, #16]
 801b582:	6022      	str	r2, [r4, #0]
 801b584:	d504      	bpl.n	801b590 <__sflush_r+0x7c>
 801b586:	1c42      	adds	r2, r0, #1
 801b588:	d101      	bne.n	801b58e <__sflush_r+0x7a>
 801b58a:	682b      	ldr	r3, [r5, #0]
 801b58c:	b903      	cbnz	r3, 801b590 <__sflush_r+0x7c>
 801b58e:	6560      	str	r0, [r4, #84]	; 0x54
 801b590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b592:	602f      	str	r7, [r5, #0]
 801b594:	2900      	cmp	r1, #0
 801b596:	d0ca      	beq.n	801b52e <__sflush_r+0x1a>
 801b598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b59c:	4299      	cmp	r1, r3
 801b59e:	d002      	beq.n	801b5a6 <__sflush_r+0x92>
 801b5a0:	4628      	mov	r0, r5
 801b5a2:	f7ff fdb1 	bl	801b108 <_free_r>
 801b5a6:	2000      	movs	r0, #0
 801b5a8:	6360      	str	r0, [r4, #52]	; 0x34
 801b5aa:	e7c1      	b.n	801b530 <__sflush_r+0x1c>
 801b5ac:	6a21      	ldr	r1, [r4, #32]
 801b5ae:	2301      	movs	r3, #1
 801b5b0:	4628      	mov	r0, r5
 801b5b2:	47b0      	blx	r6
 801b5b4:	1c41      	adds	r1, r0, #1
 801b5b6:	d1c7      	bne.n	801b548 <__sflush_r+0x34>
 801b5b8:	682b      	ldr	r3, [r5, #0]
 801b5ba:	2b00      	cmp	r3, #0
 801b5bc:	d0c4      	beq.n	801b548 <__sflush_r+0x34>
 801b5be:	2b1d      	cmp	r3, #29
 801b5c0:	d001      	beq.n	801b5c6 <__sflush_r+0xb2>
 801b5c2:	2b16      	cmp	r3, #22
 801b5c4:	d101      	bne.n	801b5ca <__sflush_r+0xb6>
 801b5c6:	602f      	str	r7, [r5, #0]
 801b5c8:	e7b1      	b.n	801b52e <__sflush_r+0x1a>
 801b5ca:	89a3      	ldrh	r3, [r4, #12]
 801b5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b5d0:	81a3      	strh	r3, [r4, #12]
 801b5d2:	e7ad      	b.n	801b530 <__sflush_r+0x1c>
 801b5d4:	690f      	ldr	r7, [r1, #16]
 801b5d6:	2f00      	cmp	r7, #0
 801b5d8:	d0a9      	beq.n	801b52e <__sflush_r+0x1a>
 801b5da:	0793      	lsls	r3, r2, #30
 801b5dc:	680e      	ldr	r6, [r1, #0]
 801b5de:	bf08      	it	eq
 801b5e0:	694b      	ldreq	r3, [r1, #20]
 801b5e2:	600f      	str	r7, [r1, #0]
 801b5e4:	bf18      	it	ne
 801b5e6:	2300      	movne	r3, #0
 801b5e8:	eba6 0807 	sub.w	r8, r6, r7
 801b5ec:	608b      	str	r3, [r1, #8]
 801b5ee:	f1b8 0f00 	cmp.w	r8, #0
 801b5f2:	dd9c      	ble.n	801b52e <__sflush_r+0x1a>
 801b5f4:	6a21      	ldr	r1, [r4, #32]
 801b5f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b5f8:	4643      	mov	r3, r8
 801b5fa:	463a      	mov	r2, r7
 801b5fc:	4628      	mov	r0, r5
 801b5fe:	47b0      	blx	r6
 801b600:	2800      	cmp	r0, #0
 801b602:	dc06      	bgt.n	801b612 <__sflush_r+0xfe>
 801b604:	89a3      	ldrh	r3, [r4, #12]
 801b606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b60a:	81a3      	strh	r3, [r4, #12]
 801b60c:	f04f 30ff 	mov.w	r0, #4294967295
 801b610:	e78e      	b.n	801b530 <__sflush_r+0x1c>
 801b612:	4407      	add	r7, r0
 801b614:	eba8 0800 	sub.w	r8, r8, r0
 801b618:	e7e9      	b.n	801b5ee <__sflush_r+0xda>
 801b61a:	bf00      	nop
 801b61c:	20400001 	.word	0x20400001

0801b620 <_fflush_r>:
 801b620:	b538      	push	{r3, r4, r5, lr}
 801b622:	690b      	ldr	r3, [r1, #16]
 801b624:	4605      	mov	r5, r0
 801b626:	460c      	mov	r4, r1
 801b628:	b913      	cbnz	r3, 801b630 <_fflush_r+0x10>
 801b62a:	2500      	movs	r5, #0
 801b62c:	4628      	mov	r0, r5
 801b62e:	bd38      	pop	{r3, r4, r5, pc}
 801b630:	b118      	cbz	r0, 801b63a <_fflush_r+0x1a>
 801b632:	6983      	ldr	r3, [r0, #24]
 801b634:	b90b      	cbnz	r3, 801b63a <_fflush_r+0x1a>
 801b636:	f7ff fc6d 	bl	801af14 <__sinit>
 801b63a:	4b14      	ldr	r3, [pc, #80]	; (801b68c <_fflush_r+0x6c>)
 801b63c:	429c      	cmp	r4, r3
 801b63e:	d11b      	bne.n	801b678 <_fflush_r+0x58>
 801b640:	686c      	ldr	r4, [r5, #4]
 801b642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d0ef      	beq.n	801b62a <_fflush_r+0xa>
 801b64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b64c:	07d0      	lsls	r0, r2, #31
 801b64e:	d404      	bmi.n	801b65a <_fflush_r+0x3a>
 801b650:	0599      	lsls	r1, r3, #22
 801b652:	d402      	bmi.n	801b65a <_fflush_r+0x3a>
 801b654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b656:	f7ff fd20 	bl	801b09a <__retarget_lock_acquire_recursive>
 801b65a:	4628      	mov	r0, r5
 801b65c:	4621      	mov	r1, r4
 801b65e:	f7ff ff59 	bl	801b514 <__sflush_r>
 801b662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b664:	07da      	lsls	r2, r3, #31
 801b666:	4605      	mov	r5, r0
 801b668:	d4e0      	bmi.n	801b62c <_fflush_r+0xc>
 801b66a:	89a3      	ldrh	r3, [r4, #12]
 801b66c:	059b      	lsls	r3, r3, #22
 801b66e:	d4dd      	bmi.n	801b62c <_fflush_r+0xc>
 801b670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b672:	f7ff fd13 	bl	801b09c <__retarget_lock_release_recursive>
 801b676:	e7d9      	b.n	801b62c <_fflush_r+0xc>
 801b678:	4b05      	ldr	r3, [pc, #20]	; (801b690 <_fflush_r+0x70>)
 801b67a:	429c      	cmp	r4, r3
 801b67c:	d101      	bne.n	801b682 <_fflush_r+0x62>
 801b67e:	68ac      	ldr	r4, [r5, #8]
 801b680:	e7df      	b.n	801b642 <_fflush_r+0x22>
 801b682:	4b04      	ldr	r3, [pc, #16]	; (801b694 <_fflush_r+0x74>)
 801b684:	429c      	cmp	r4, r3
 801b686:	bf08      	it	eq
 801b688:	68ec      	ldreq	r4, [r5, #12]
 801b68a:	e7da      	b.n	801b642 <_fflush_r+0x22>
 801b68c:	0801fe28 	.word	0x0801fe28
 801b690:	0801fe48 	.word	0x0801fe48
 801b694:	0801fe08 	.word	0x0801fe08

0801b698 <fiprintf>:
 801b698:	b40e      	push	{r1, r2, r3}
 801b69a:	b503      	push	{r0, r1, lr}
 801b69c:	4601      	mov	r1, r0
 801b69e:	ab03      	add	r3, sp, #12
 801b6a0:	4805      	ldr	r0, [pc, #20]	; (801b6b8 <fiprintf+0x20>)
 801b6a2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b6a6:	6800      	ldr	r0, [r0, #0]
 801b6a8:	9301      	str	r3, [sp, #4]
 801b6aa:	f000 f84f 	bl	801b74c <_vfiprintf_r>
 801b6ae:	b002      	add	sp, #8
 801b6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b6b4:	b003      	add	sp, #12
 801b6b6:	4770      	bx	lr
 801b6b8:	2000002c 	.word	0x2000002c

0801b6bc <_lseek_r>:
 801b6bc:	b538      	push	{r3, r4, r5, lr}
 801b6be:	4d07      	ldr	r5, [pc, #28]	; (801b6dc <_lseek_r+0x20>)
 801b6c0:	4604      	mov	r4, r0
 801b6c2:	4608      	mov	r0, r1
 801b6c4:	4611      	mov	r1, r2
 801b6c6:	2200      	movs	r2, #0
 801b6c8:	602a      	str	r2, [r5, #0]
 801b6ca:	461a      	mov	r2, r3
 801b6cc:	f7e6 fd8a 	bl	80021e4 <_lseek>
 801b6d0:	1c43      	adds	r3, r0, #1
 801b6d2:	d102      	bne.n	801b6da <_lseek_r+0x1e>
 801b6d4:	682b      	ldr	r3, [r5, #0]
 801b6d6:	b103      	cbz	r3, 801b6da <_lseek_r+0x1e>
 801b6d8:	6023      	str	r3, [r4, #0]
 801b6da:	bd38      	pop	{r3, r4, r5, pc}
 801b6dc:	2001106c 	.word	0x2001106c

0801b6e0 <__malloc_lock>:
 801b6e0:	4801      	ldr	r0, [pc, #4]	; (801b6e8 <__malloc_lock+0x8>)
 801b6e2:	f7ff bcda 	b.w	801b09a <__retarget_lock_acquire_recursive>
 801b6e6:	bf00      	nop
 801b6e8:	20011078 	.word	0x20011078

0801b6ec <__malloc_unlock>:
 801b6ec:	4801      	ldr	r0, [pc, #4]	; (801b6f4 <__malloc_unlock+0x8>)
 801b6ee:	f7ff bcd5 	b.w	801b09c <__retarget_lock_release_recursive>
 801b6f2:	bf00      	nop
 801b6f4:	20011078 	.word	0x20011078

0801b6f8 <__sfputc_r>:
 801b6f8:	6893      	ldr	r3, [r2, #8]
 801b6fa:	3b01      	subs	r3, #1
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	b410      	push	{r4}
 801b700:	6093      	str	r3, [r2, #8]
 801b702:	da08      	bge.n	801b716 <__sfputc_r+0x1e>
 801b704:	6994      	ldr	r4, [r2, #24]
 801b706:	42a3      	cmp	r3, r4
 801b708:	db01      	blt.n	801b70e <__sfputc_r+0x16>
 801b70a:	290a      	cmp	r1, #10
 801b70c:	d103      	bne.n	801b716 <__sfputc_r+0x1e>
 801b70e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b712:	f000 baf1 	b.w	801bcf8 <__swbuf_r>
 801b716:	6813      	ldr	r3, [r2, #0]
 801b718:	1c58      	adds	r0, r3, #1
 801b71a:	6010      	str	r0, [r2, #0]
 801b71c:	7019      	strb	r1, [r3, #0]
 801b71e:	4608      	mov	r0, r1
 801b720:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b724:	4770      	bx	lr

0801b726 <__sfputs_r>:
 801b726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b728:	4606      	mov	r6, r0
 801b72a:	460f      	mov	r7, r1
 801b72c:	4614      	mov	r4, r2
 801b72e:	18d5      	adds	r5, r2, r3
 801b730:	42ac      	cmp	r4, r5
 801b732:	d101      	bne.n	801b738 <__sfputs_r+0x12>
 801b734:	2000      	movs	r0, #0
 801b736:	e007      	b.n	801b748 <__sfputs_r+0x22>
 801b738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b73c:	463a      	mov	r2, r7
 801b73e:	4630      	mov	r0, r6
 801b740:	f7ff ffda 	bl	801b6f8 <__sfputc_r>
 801b744:	1c43      	adds	r3, r0, #1
 801b746:	d1f3      	bne.n	801b730 <__sfputs_r+0xa>
 801b748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b74c <_vfiprintf_r>:
 801b74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b750:	460d      	mov	r5, r1
 801b752:	b09d      	sub	sp, #116	; 0x74
 801b754:	4614      	mov	r4, r2
 801b756:	4698      	mov	r8, r3
 801b758:	4606      	mov	r6, r0
 801b75a:	b118      	cbz	r0, 801b764 <_vfiprintf_r+0x18>
 801b75c:	6983      	ldr	r3, [r0, #24]
 801b75e:	b90b      	cbnz	r3, 801b764 <_vfiprintf_r+0x18>
 801b760:	f7ff fbd8 	bl	801af14 <__sinit>
 801b764:	4b89      	ldr	r3, [pc, #548]	; (801b98c <_vfiprintf_r+0x240>)
 801b766:	429d      	cmp	r5, r3
 801b768:	d11b      	bne.n	801b7a2 <_vfiprintf_r+0x56>
 801b76a:	6875      	ldr	r5, [r6, #4]
 801b76c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b76e:	07d9      	lsls	r1, r3, #31
 801b770:	d405      	bmi.n	801b77e <_vfiprintf_r+0x32>
 801b772:	89ab      	ldrh	r3, [r5, #12]
 801b774:	059a      	lsls	r2, r3, #22
 801b776:	d402      	bmi.n	801b77e <_vfiprintf_r+0x32>
 801b778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b77a:	f7ff fc8e 	bl	801b09a <__retarget_lock_acquire_recursive>
 801b77e:	89ab      	ldrh	r3, [r5, #12]
 801b780:	071b      	lsls	r3, r3, #28
 801b782:	d501      	bpl.n	801b788 <_vfiprintf_r+0x3c>
 801b784:	692b      	ldr	r3, [r5, #16]
 801b786:	b9eb      	cbnz	r3, 801b7c4 <_vfiprintf_r+0x78>
 801b788:	4629      	mov	r1, r5
 801b78a:	4630      	mov	r0, r6
 801b78c:	f000 fb06 	bl	801bd9c <__swsetup_r>
 801b790:	b1c0      	cbz	r0, 801b7c4 <_vfiprintf_r+0x78>
 801b792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b794:	07dc      	lsls	r4, r3, #31
 801b796:	d50e      	bpl.n	801b7b6 <_vfiprintf_r+0x6a>
 801b798:	f04f 30ff 	mov.w	r0, #4294967295
 801b79c:	b01d      	add	sp, #116	; 0x74
 801b79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7a2:	4b7b      	ldr	r3, [pc, #492]	; (801b990 <_vfiprintf_r+0x244>)
 801b7a4:	429d      	cmp	r5, r3
 801b7a6:	d101      	bne.n	801b7ac <_vfiprintf_r+0x60>
 801b7a8:	68b5      	ldr	r5, [r6, #8]
 801b7aa:	e7df      	b.n	801b76c <_vfiprintf_r+0x20>
 801b7ac:	4b79      	ldr	r3, [pc, #484]	; (801b994 <_vfiprintf_r+0x248>)
 801b7ae:	429d      	cmp	r5, r3
 801b7b0:	bf08      	it	eq
 801b7b2:	68f5      	ldreq	r5, [r6, #12]
 801b7b4:	e7da      	b.n	801b76c <_vfiprintf_r+0x20>
 801b7b6:	89ab      	ldrh	r3, [r5, #12]
 801b7b8:	0598      	lsls	r0, r3, #22
 801b7ba:	d4ed      	bmi.n	801b798 <_vfiprintf_r+0x4c>
 801b7bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b7be:	f7ff fc6d 	bl	801b09c <__retarget_lock_release_recursive>
 801b7c2:	e7e9      	b.n	801b798 <_vfiprintf_r+0x4c>
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	9309      	str	r3, [sp, #36]	; 0x24
 801b7c8:	2320      	movs	r3, #32
 801b7ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b7ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801b7d2:	2330      	movs	r3, #48	; 0x30
 801b7d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b998 <_vfiprintf_r+0x24c>
 801b7d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b7dc:	f04f 0901 	mov.w	r9, #1
 801b7e0:	4623      	mov	r3, r4
 801b7e2:	469a      	mov	sl, r3
 801b7e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b7e8:	b10a      	cbz	r2, 801b7ee <_vfiprintf_r+0xa2>
 801b7ea:	2a25      	cmp	r2, #37	; 0x25
 801b7ec:	d1f9      	bne.n	801b7e2 <_vfiprintf_r+0x96>
 801b7ee:	ebba 0b04 	subs.w	fp, sl, r4
 801b7f2:	d00b      	beq.n	801b80c <_vfiprintf_r+0xc0>
 801b7f4:	465b      	mov	r3, fp
 801b7f6:	4622      	mov	r2, r4
 801b7f8:	4629      	mov	r1, r5
 801b7fa:	4630      	mov	r0, r6
 801b7fc:	f7ff ff93 	bl	801b726 <__sfputs_r>
 801b800:	3001      	adds	r0, #1
 801b802:	f000 80aa 	beq.w	801b95a <_vfiprintf_r+0x20e>
 801b806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b808:	445a      	add	r2, fp
 801b80a:	9209      	str	r2, [sp, #36]	; 0x24
 801b80c:	f89a 3000 	ldrb.w	r3, [sl]
 801b810:	2b00      	cmp	r3, #0
 801b812:	f000 80a2 	beq.w	801b95a <_vfiprintf_r+0x20e>
 801b816:	2300      	movs	r3, #0
 801b818:	f04f 32ff 	mov.w	r2, #4294967295
 801b81c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b820:	f10a 0a01 	add.w	sl, sl, #1
 801b824:	9304      	str	r3, [sp, #16]
 801b826:	9307      	str	r3, [sp, #28]
 801b828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b82c:	931a      	str	r3, [sp, #104]	; 0x68
 801b82e:	4654      	mov	r4, sl
 801b830:	2205      	movs	r2, #5
 801b832:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b836:	4858      	ldr	r0, [pc, #352]	; (801b998 <_vfiprintf_r+0x24c>)
 801b838:	f7e4 fcda 	bl	80001f0 <memchr>
 801b83c:	9a04      	ldr	r2, [sp, #16]
 801b83e:	b9d8      	cbnz	r0, 801b878 <_vfiprintf_r+0x12c>
 801b840:	06d1      	lsls	r1, r2, #27
 801b842:	bf44      	itt	mi
 801b844:	2320      	movmi	r3, #32
 801b846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b84a:	0713      	lsls	r3, r2, #28
 801b84c:	bf44      	itt	mi
 801b84e:	232b      	movmi	r3, #43	; 0x2b
 801b850:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b854:	f89a 3000 	ldrb.w	r3, [sl]
 801b858:	2b2a      	cmp	r3, #42	; 0x2a
 801b85a:	d015      	beq.n	801b888 <_vfiprintf_r+0x13c>
 801b85c:	9a07      	ldr	r2, [sp, #28]
 801b85e:	4654      	mov	r4, sl
 801b860:	2000      	movs	r0, #0
 801b862:	f04f 0c0a 	mov.w	ip, #10
 801b866:	4621      	mov	r1, r4
 801b868:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b86c:	3b30      	subs	r3, #48	; 0x30
 801b86e:	2b09      	cmp	r3, #9
 801b870:	d94e      	bls.n	801b910 <_vfiprintf_r+0x1c4>
 801b872:	b1b0      	cbz	r0, 801b8a2 <_vfiprintf_r+0x156>
 801b874:	9207      	str	r2, [sp, #28]
 801b876:	e014      	b.n	801b8a2 <_vfiprintf_r+0x156>
 801b878:	eba0 0308 	sub.w	r3, r0, r8
 801b87c:	fa09 f303 	lsl.w	r3, r9, r3
 801b880:	4313      	orrs	r3, r2
 801b882:	9304      	str	r3, [sp, #16]
 801b884:	46a2      	mov	sl, r4
 801b886:	e7d2      	b.n	801b82e <_vfiprintf_r+0xe2>
 801b888:	9b03      	ldr	r3, [sp, #12]
 801b88a:	1d19      	adds	r1, r3, #4
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	9103      	str	r1, [sp, #12]
 801b890:	2b00      	cmp	r3, #0
 801b892:	bfbb      	ittet	lt
 801b894:	425b      	neglt	r3, r3
 801b896:	f042 0202 	orrlt.w	r2, r2, #2
 801b89a:	9307      	strge	r3, [sp, #28]
 801b89c:	9307      	strlt	r3, [sp, #28]
 801b89e:	bfb8      	it	lt
 801b8a0:	9204      	strlt	r2, [sp, #16]
 801b8a2:	7823      	ldrb	r3, [r4, #0]
 801b8a4:	2b2e      	cmp	r3, #46	; 0x2e
 801b8a6:	d10c      	bne.n	801b8c2 <_vfiprintf_r+0x176>
 801b8a8:	7863      	ldrb	r3, [r4, #1]
 801b8aa:	2b2a      	cmp	r3, #42	; 0x2a
 801b8ac:	d135      	bne.n	801b91a <_vfiprintf_r+0x1ce>
 801b8ae:	9b03      	ldr	r3, [sp, #12]
 801b8b0:	1d1a      	adds	r2, r3, #4
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	9203      	str	r2, [sp, #12]
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	bfb8      	it	lt
 801b8ba:	f04f 33ff 	movlt.w	r3, #4294967295
 801b8be:	3402      	adds	r4, #2
 801b8c0:	9305      	str	r3, [sp, #20]
 801b8c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b9a8 <_vfiprintf_r+0x25c>
 801b8c6:	7821      	ldrb	r1, [r4, #0]
 801b8c8:	2203      	movs	r2, #3
 801b8ca:	4650      	mov	r0, sl
 801b8cc:	f7e4 fc90 	bl	80001f0 <memchr>
 801b8d0:	b140      	cbz	r0, 801b8e4 <_vfiprintf_r+0x198>
 801b8d2:	2340      	movs	r3, #64	; 0x40
 801b8d4:	eba0 000a 	sub.w	r0, r0, sl
 801b8d8:	fa03 f000 	lsl.w	r0, r3, r0
 801b8dc:	9b04      	ldr	r3, [sp, #16]
 801b8de:	4303      	orrs	r3, r0
 801b8e0:	3401      	adds	r4, #1
 801b8e2:	9304      	str	r3, [sp, #16]
 801b8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8e8:	482c      	ldr	r0, [pc, #176]	; (801b99c <_vfiprintf_r+0x250>)
 801b8ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b8ee:	2206      	movs	r2, #6
 801b8f0:	f7e4 fc7e 	bl	80001f0 <memchr>
 801b8f4:	2800      	cmp	r0, #0
 801b8f6:	d03f      	beq.n	801b978 <_vfiprintf_r+0x22c>
 801b8f8:	4b29      	ldr	r3, [pc, #164]	; (801b9a0 <_vfiprintf_r+0x254>)
 801b8fa:	bb1b      	cbnz	r3, 801b944 <_vfiprintf_r+0x1f8>
 801b8fc:	9b03      	ldr	r3, [sp, #12]
 801b8fe:	3307      	adds	r3, #7
 801b900:	f023 0307 	bic.w	r3, r3, #7
 801b904:	3308      	adds	r3, #8
 801b906:	9303      	str	r3, [sp, #12]
 801b908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b90a:	443b      	add	r3, r7
 801b90c:	9309      	str	r3, [sp, #36]	; 0x24
 801b90e:	e767      	b.n	801b7e0 <_vfiprintf_r+0x94>
 801b910:	fb0c 3202 	mla	r2, ip, r2, r3
 801b914:	460c      	mov	r4, r1
 801b916:	2001      	movs	r0, #1
 801b918:	e7a5      	b.n	801b866 <_vfiprintf_r+0x11a>
 801b91a:	2300      	movs	r3, #0
 801b91c:	3401      	adds	r4, #1
 801b91e:	9305      	str	r3, [sp, #20]
 801b920:	4619      	mov	r1, r3
 801b922:	f04f 0c0a 	mov.w	ip, #10
 801b926:	4620      	mov	r0, r4
 801b928:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b92c:	3a30      	subs	r2, #48	; 0x30
 801b92e:	2a09      	cmp	r2, #9
 801b930:	d903      	bls.n	801b93a <_vfiprintf_r+0x1ee>
 801b932:	2b00      	cmp	r3, #0
 801b934:	d0c5      	beq.n	801b8c2 <_vfiprintf_r+0x176>
 801b936:	9105      	str	r1, [sp, #20]
 801b938:	e7c3      	b.n	801b8c2 <_vfiprintf_r+0x176>
 801b93a:	fb0c 2101 	mla	r1, ip, r1, r2
 801b93e:	4604      	mov	r4, r0
 801b940:	2301      	movs	r3, #1
 801b942:	e7f0      	b.n	801b926 <_vfiprintf_r+0x1da>
 801b944:	ab03      	add	r3, sp, #12
 801b946:	9300      	str	r3, [sp, #0]
 801b948:	462a      	mov	r2, r5
 801b94a:	4b16      	ldr	r3, [pc, #88]	; (801b9a4 <_vfiprintf_r+0x258>)
 801b94c:	a904      	add	r1, sp, #16
 801b94e:	4630      	mov	r0, r6
 801b950:	f3af 8000 	nop.w
 801b954:	4607      	mov	r7, r0
 801b956:	1c78      	adds	r0, r7, #1
 801b958:	d1d6      	bne.n	801b908 <_vfiprintf_r+0x1bc>
 801b95a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b95c:	07d9      	lsls	r1, r3, #31
 801b95e:	d405      	bmi.n	801b96c <_vfiprintf_r+0x220>
 801b960:	89ab      	ldrh	r3, [r5, #12]
 801b962:	059a      	lsls	r2, r3, #22
 801b964:	d402      	bmi.n	801b96c <_vfiprintf_r+0x220>
 801b966:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b968:	f7ff fb98 	bl	801b09c <__retarget_lock_release_recursive>
 801b96c:	89ab      	ldrh	r3, [r5, #12]
 801b96e:	065b      	lsls	r3, r3, #25
 801b970:	f53f af12 	bmi.w	801b798 <_vfiprintf_r+0x4c>
 801b974:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b976:	e711      	b.n	801b79c <_vfiprintf_r+0x50>
 801b978:	ab03      	add	r3, sp, #12
 801b97a:	9300      	str	r3, [sp, #0]
 801b97c:	462a      	mov	r2, r5
 801b97e:	4b09      	ldr	r3, [pc, #36]	; (801b9a4 <_vfiprintf_r+0x258>)
 801b980:	a904      	add	r1, sp, #16
 801b982:	4630      	mov	r0, r6
 801b984:	f000 f880 	bl	801ba88 <_printf_i>
 801b988:	e7e4      	b.n	801b954 <_vfiprintf_r+0x208>
 801b98a:	bf00      	nop
 801b98c:	0801fe28 	.word	0x0801fe28
 801b990:	0801fe48 	.word	0x0801fe48
 801b994:	0801fe08 	.word	0x0801fe08
 801b998:	0801ff1e 	.word	0x0801ff1e
 801b99c:	0801ff28 	.word	0x0801ff28
 801b9a0:	00000000 	.word	0x00000000
 801b9a4:	0801b727 	.word	0x0801b727
 801b9a8:	0801ff24 	.word	0x0801ff24

0801b9ac <_printf_common>:
 801b9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9b0:	4616      	mov	r6, r2
 801b9b2:	4699      	mov	r9, r3
 801b9b4:	688a      	ldr	r2, [r1, #8]
 801b9b6:	690b      	ldr	r3, [r1, #16]
 801b9b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b9bc:	4293      	cmp	r3, r2
 801b9be:	bfb8      	it	lt
 801b9c0:	4613      	movlt	r3, r2
 801b9c2:	6033      	str	r3, [r6, #0]
 801b9c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b9c8:	4607      	mov	r7, r0
 801b9ca:	460c      	mov	r4, r1
 801b9cc:	b10a      	cbz	r2, 801b9d2 <_printf_common+0x26>
 801b9ce:	3301      	adds	r3, #1
 801b9d0:	6033      	str	r3, [r6, #0]
 801b9d2:	6823      	ldr	r3, [r4, #0]
 801b9d4:	0699      	lsls	r1, r3, #26
 801b9d6:	bf42      	ittt	mi
 801b9d8:	6833      	ldrmi	r3, [r6, #0]
 801b9da:	3302      	addmi	r3, #2
 801b9dc:	6033      	strmi	r3, [r6, #0]
 801b9de:	6825      	ldr	r5, [r4, #0]
 801b9e0:	f015 0506 	ands.w	r5, r5, #6
 801b9e4:	d106      	bne.n	801b9f4 <_printf_common+0x48>
 801b9e6:	f104 0a19 	add.w	sl, r4, #25
 801b9ea:	68e3      	ldr	r3, [r4, #12]
 801b9ec:	6832      	ldr	r2, [r6, #0]
 801b9ee:	1a9b      	subs	r3, r3, r2
 801b9f0:	42ab      	cmp	r3, r5
 801b9f2:	dc26      	bgt.n	801ba42 <_printf_common+0x96>
 801b9f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b9f8:	1e13      	subs	r3, r2, #0
 801b9fa:	6822      	ldr	r2, [r4, #0]
 801b9fc:	bf18      	it	ne
 801b9fe:	2301      	movne	r3, #1
 801ba00:	0692      	lsls	r2, r2, #26
 801ba02:	d42b      	bmi.n	801ba5c <_printf_common+0xb0>
 801ba04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ba08:	4649      	mov	r1, r9
 801ba0a:	4638      	mov	r0, r7
 801ba0c:	47c0      	blx	r8
 801ba0e:	3001      	adds	r0, #1
 801ba10:	d01e      	beq.n	801ba50 <_printf_common+0xa4>
 801ba12:	6823      	ldr	r3, [r4, #0]
 801ba14:	68e5      	ldr	r5, [r4, #12]
 801ba16:	6832      	ldr	r2, [r6, #0]
 801ba18:	f003 0306 	and.w	r3, r3, #6
 801ba1c:	2b04      	cmp	r3, #4
 801ba1e:	bf08      	it	eq
 801ba20:	1aad      	subeq	r5, r5, r2
 801ba22:	68a3      	ldr	r3, [r4, #8]
 801ba24:	6922      	ldr	r2, [r4, #16]
 801ba26:	bf0c      	ite	eq
 801ba28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ba2c:	2500      	movne	r5, #0
 801ba2e:	4293      	cmp	r3, r2
 801ba30:	bfc4      	itt	gt
 801ba32:	1a9b      	subgt	r3, r3, r2
 801ba34:	18ed      	addgt	r5, r5, r3
 801ba36:	2600      	movs	r6, #0
 801ba38:	341a      	adds	r4, #26
 801ba3a:	42b5      	cmp	r5, r6
 801ba3c:	d11a      	bne.n	801ba74 <_printf_common+0xc8>
 801ba3e:	2000      	movs	r0, #0
 801ba40:	e008      	b.n	801ba54 <_printf_common+0xa8>
 801ba42:	2301      	movs	r3, #1
 801ba44:	4652      	mov	r2, sl
 801ba46:	4649      	mov	r1, r9
 801ba48:	4638      	mov	r0, r7
 801ba4a:	47c0      	blx	r8
 801ba4c:	3001      	adds	r0, #1
 801ba4e:	d103      	bne.n	801ba58 <_printf_common+0xac>
 801ba50:	f04f 30ff 	mov.w	r0, #4294967295
 801ba54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba58:	3501      	adds	r5, #1
 801ba5a:	e7c6      	b.n	801b9ea <_printf_common+0x3e>
 801ba5c:	18e1      	adds	r1, r4, r3
 801ba5e:	1c5a      	adds	r2, r3, #1
 801ba60:	2030      	movs	r0, #48	; 0x30
 801ba62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ba66:	4422      	add	r2, r4
 801ba68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ba6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ba70:	3302      	adds	r3, #2
 801ba72:	e7c7      	b.n	801ba04 <_printf_common+0x58>
 801ba74:	2301      	movs	r3, #1
 801ba76:	4622      	mov	r2, r4
 801ba78:	4649      	mov	r1, r9
 801ba7a:	4638      	mov	r0, r7
 801ba7c:	47c0      	blx	r8
 801ba7e:	3001      	adds	r0, #1
 801ba80:	d0e6      	beq.n	801ba50 <_printf_common+0xa4>
 801ba82:	3601      	adds	r6, #1
 801ba84:	e7d9      	b.n	801ba3a <_printf_common+0x8e>
	...

0801ba88 <_printf_i>:
 801ba88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ba8c:	460c      	mov	r4, r1
 801ba8e:	4691      	mov	r9, r2
 801ba90:	7e27      	ldrb	r7, [r4, #24]
 801ba92:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ba94:	2f78      	cmp	r7, #120	; 0x78
 801ba96:	4680      	mov	r8, r0
 801ba98:	469a      	mov	sl, r3
 801ba9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ba9e:	d807      	bhi.n	801bab0 <_printf_i+0x28>
 801baa0:	2f62      	cmp	r7, #98	; 0x62
 801baa2:	d80a      	bhi.n	801baba <_printf_i+0x32>
 801baa4:	2f00      	cmp	r7, #0
 801baa6:	f000 80d8 	beq.w	801bc5a <_printf_i+0x1d2>
 801baaa:	2f58      	cmp	r7, #88	; 0x58
 801baac:	f000 80a3 	beq.w	801bbf6 <_printf_i+0x16e>
 801bab0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801bab8:	e03a      	b.n	801bb30 <_printf_i+0xa8>
 801baba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801babe:	2b15      	cmp	r3, #21
 801bac0:	d8f6      	bhi.n	801bab0 <_printf_i+0x28>
 801bac2:	a001      	add	r0, pc, #4	; (adr r0, 801bac8 <_printf_i+0x40>)
 801bac4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801bac8:	0801bb21 	.word	0x0801bb21
 801bacc:	0801bb35 	.word	0x0801bb35
 801bad0:	0801bab1 	.word	0x0801bab1
 801bad4:	0801bab1 	.word	0x0801bab1
 801bad8:	0801bab1 	.word	0x0801bab1
 801badc:	0801bab1 	.word	0x0801bab1
 801bae0:	0801bb35 	.word	0x0801bb35
 801bae4:	0801bab1 	.word	0x0801bab1
 801bae8:	0801bab1 	.word	0x0801bab1
 801baec:	0801bab1 	.word	0x0801bab1
 801baf0:	0801bab1 	.word	0x0801bab1
 801baf4:	0801bc41 	.word	0x0801bc41
 801baf8:	0801bb65 	.word	0x0801bb65
 801bafc:	0801bc23 	.word	0x0801bc23
 801bb00:	0801bab1 	.word	0x0801bab1
 801bb04:	0801bab1 	.word	0x0801bab1
 801bb08:	0801bc63 	.word	0x0801bc63
 801bb0c:	0801bab1 	.word	0x0801bab1
 801bb10:	0801bb65 	.word	0x0801bb65
 801bb14:	0801bab1 	.word	0x0801bab1
 801bb18:	0801bab1 	.word	0x0801bab1
 801bb1c:	0801bc2b 	.word	0x0801bc2b
 801bb20:	680b      	ldr	r3, [r1, #0]
 801bb22:	1d1a      	adds	r2, r3, #4
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	600a      	str	r2, [r1, #0]
 801bb28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bb2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bb30:	2301      	movs	r3, #1
 801bb32:	e0a3      	b.n	801bc7c <_printf_i+0x1f4>
 801bb34:	6825      	ldr	r5, [r4, #0]
 801bb36:	6808      	ldr	r0, [r1, #0]
 801bb38:	062e      	lsls	r6, r5, #24
 801bb3a:	f100 0304 	add.w	r3, r0, #4
 801bb3e:	d50a      	bpl.n	801bb56 <_printf_i+0xce>
 801bb40:	6805      	ldr	r5, [r0, #0]
 801bb42:	600b      	str	r3, [r1, #0]
 801bb44:	2d00      	cmp	r5, #0
 801bb46:	da03      	bge.n	801bb50 <_printf_i+0xc8>
 801bb48:	232d      	movs	r3, #45	; 0x2d
 801bb4a:	426d      	negs	r5, r5
 801bb4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bb50:	485e      	ldr	r0, [pc, #376]	; (801bccc <_printf_i+0x244>)
 801bb52:	230a      	movs	r3, #10
 801bb54:	e019      	b.n	801bb8a <_printf_i+0x102>
 801bb56:	f015 0f40 	tst.w	r5, #64	; 0x40
 801bb5a:	6805      	ldr	r5, [r0, #0]
 801bb5c:	600b      	str	r3, [r1, #0]
 801bb5e:	bf18      	it	ne
 801bb60:	b22d      	sxthne	r5, r5
 801bb62:	e7ef      	b.n	801bb44 <_printf_i+0xbc>
 801bb64:	680b      	ldr	r3, [r1, #0]
 801bb66:	6825      	ldr	r5, [r4, #0]
 801bb68:	1d18      	adds	r0, r3, #4
 801bb6a:	6008      	str	r0, [r1, #0]
 801bb6c:	0628      	lsls	r0, r5, #24
 801bb6e:	d501      	bpl.n	801bb74 <_printf_i+0xec>
 801bb70:	681d      	ldr	r5, [r3, #0]
 801bb72:	e002      	b.n	801bb7a <_printf_i+0xf2>
 801bb74:	0669      	lsls	r1, r5, #25
 801bb76:	d5fb      	bpl.n	801bb70 <_printf_i+0xe8>
 801bb78:	881d      	ldrh	r5, [r3, #0]
 801bb7a:	4854      	ldr	r0, [pc, #336]	; (801bccc <_printf_i+0x244>)
 801bb7c:	2f6f      	cmp	r7, #111	; 0x6f
 801bb7e:	bf0c      	ite	eq
 801bb80:	2308      	moveq	r3, #8
 801bb82:	230a      	movne	r3, #10
 801bb84:	2100      	movs	r1, #0
 801bb86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bb8a:	6866      	ldr	r6, [r4, #4]
 801bb8c:	60a6      	str	r6, [r4, #8]
 801bb8e:	2e00      	cmp	r6, #0
 801bb90:	bfa2      	ittt	ge
 801bb92:	6821      	ldrge	r1, [r4, #0]
 801bb94:	f021 0104 	bicge.w	r1, r1, #4
 801bb98:	6021      	strge	r1, [r4, #0]
 801bb9a:	b90d      	cbnz	r5, 801bba0 <_printf_i+0x118>
 801bb9c:	2e00      	cmp	r6, #0
 801bb9e:	d04d      	beq.n	801bc3c <_printf_i+0x1b4>
 801bba0:	4616      	mov	r6, r2
 801bba2:	fbb5 f1f3 	udiv	r1, r5, r3
 801bba6:	fb03 5711 	mls	r7, r3, r1, r5
 801bbaa:	5dc7      	ldrb	r7, [r0, r7]
 801bbac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bbb0:	462f      	mov	r7, r5
 801bbb2:	42bb      	cmp	r3, r7
 801bbb4:	460d      	mov	r5, r1
 801bbb6:	d9f4      	bls.n	801bba2 <_printf_i+0x11a>
 801bbb8:	2b08      	cmp	r3, #8
 801bbba:	d10b      	bne.n	801bbd4 <_printf_i+0x14c>
 801bbbc:	6823      	ldr	r3, [r4, #0]
 801bbbe:	07df      	lsls	r7, r3, #31
 801bbc0:	d508      	bpl.n	801bbd4 <_printf_i+0x14c>
 801bbc2:	6923      	ldr	r3, [r4, #16]
 801bbc4:	6861      	ldr	r1, [r4, #4]
 801bbc6:	4299      	cmp	r1, r3
 801bbc8:	bfde      	ittt	le
 801bbca:	2330      	movle	r3, #48	; 0x30
 801bbcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bbd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bbd4:	1b92      	subs	r2, r2, r6
 801bbd6:	6122      	str	r2, [r4, #16]
 801bbd8:	f8cd a000 	str.w	sl, [sp]
 801bbdc:	464b      	mov	r3, r9
 801bbde:	aa03      	add	r2, sp, #12
 801bbe0:	4621      	mov	r1, r4
 801bbe2:	4640      	mov	r0, r8
 801bbe4:	f7ff fee2 	bl	801b9ac <_printf_common>
 801bbe8:	3001      	adds	r0, #1
 801bbea:	d14c      	bne.n	801bc86 <_printf_i+0x1fe>
 801bbec:	f04f 30ff 	mov.w	r0, #4294967295
 801bbf0:	b004      	add	sp, #16
 801bbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbf6:	4835      	ldr	r0, [pc, #212]	; (801bccc <_printf_i+0x244>)
 801bbf8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801bbfc:	6823      	ldr	r3, [r4, #0]
 801bbfe:	680e      	ldr	r6, [r1, #0]
 801bc00:	061f      	lsls	r7, r3, #24
 801bc02:	f856 5b04 	ldr.w	r5, [r6], #4
 801bc06:	600e      	str	r6, [r1, #0]
 801bc08:	d514      	bpl.n	801bc34 <_printf_i+0x1ac>
 801bc0a:	07d9      	lsls	r1, r3, #31
 801bc0c:	bf44      	itt	mi
 801bc0e:	f043 0320 	orrmi.w	r3, r3, #32
 801bc12:	6023      	strmi	r3, [r4, #0]
 801bc14:	b91d      	cbnz	r5, 801bc1e <_printf_i+0x196>
 801bc16:	6823      	ldr	r3, [r4, #0]
 801bc18:	f023 0320 	bic.w	r3, r3, #32
 801bc1c:	6023      	str	r3, [r4, #0]
 801bc1e:	2310      	movs	r3, #16
 801bc20:	e7b0      	b.n	801bb84 <_printf_i+0xfc>
 801bc22:	6823      	ldr	r3, [r4, #0]
 801bc24:	f043 0320 	orr.w	r3, r3, #32
 801bc28:	6023      	str	r3, [r4, #0]
 801bc2a:	2378      	movs	r3, #120	; 0x78
 801bc2c:	4828      	ldr	r0, [pc, #160]	; (801bcd0 <_printf_i+0x248>)
 801bc2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bc32:	e7e3      	b.n	801bbfc <_printf_i+0x174>
 801bc34:	065e      	lsls	r6, r3, #25
 801bc36:	bf48      	it	mi
 801bc38:	b2ad      	uxthmi	r5, r5
 801bc3a:	e7e6      	b.n	801bc0a <_printf_i+0x182>
 801bc3c:	4616      	mov	r6, r2
 801bc3e:	e7bb      	b.n	801bbb8 <_printf_i+0x130>
 801bc40:	680b      	ldr	r3, [r1, #0]
 801bc42:	6826      	ldr	r6, [r4, #0]
 801bc44:	6960      	ldr	r0, [r4, #20]
 801bc46:	1d1d      	adds	r5, r3, #4
 801bc48:	600d      	str	r5, [r1, #0]
 801bc4a:	0635      	lsls	r5, r6, #24
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	d501      	bpl.n	801bc54 <_printf_i+0x1cc>
 801bc50:	6018      	str	r0, [r3, #0]
 801bc52:	e002      	b.n	801bc5a <_printf_i+0x1d2>
 801bc54:	0671      	lsls	r1, r6, #25
 801bc56:	d5fb      	bpl.n	801bc50 <_printf_i+0x1c8>
 801bc58:	8018      	strh	r0, [r3, #0]
 801bc5a:	2300      	movs	r3, #0
 801bc5c:	6123      	str	r3, [r4, #16]
 801bc5e:	4616      	mov	r6, r2
 801bc60:	e7ba      	b.n	801bbd8 <_printf_i+0x150>
 801bc62:	680b      	ldr	r3, [r1, #0]
 801bc64:	1d1a      	adds	r2, r3, #4
 801bc66:	600a      	str	r2, [r1, #0]
 801bc68:	681e      	ldr	r6, [r3, #0]
 801bc6a:	6862      	ldr	r2, [r4, #4]
 801bc6c:	2100      	movs	r1, #0
 801bc6e:	4630      	mov	r0, r6
 801bc70:	f7e4 fabe 	bl	80001f0 <memchr>
 801bc74:	b108      	cbz	r0, 801bc7a <_printf_i+0x1f2>
 801bc76:	1b80      	subs	r0, r0, r6
 801bc78:	6060      	str	r0, [r4, #4]
 801bc7a:	6863      	ldr	r3, [r4, #4]
 801bc7c:	6123      	str	r3, [r4, #16]
 801bc7e:	2300      	movs	r3, #0
 801bc80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc84:	e7a8      	b.n	801bbd8 <_printf_i+0x150>
 801bc86:	6923      	ldr	r3, [r4, #16]
 801bc88:	4632      	mov	r2, r6
 801bc8a:	4649      	mov	r1, r9
 801bc8c:	4640      	mov	r0, r8
 801bc8e:	47d0      	blx	sl
 801bc90:	3001      	adds	r0, #1
 801bc92:	d0ab      	beq.n	801bbec <_printf_i+0x164>
 801bc94:	6823      	ldr	r3, [r4, #0]
 801bc96:	079b      	lsls	r3, r3, #30
 801bc98:	d413      	bmi.n	801bcc2 <_printf_i+0x23a>
 801bc9a:	68e0      	ldr	r0, [r4, #12]
 801bc9c:	9b03      	ldr	r3, [sp, #12]
 801bc9e:	4298      	cmp	r0, r3
 801bca0:	bfb8      	it	lt
 801bca2:	4618      	movlt	r0, r3
 801bca4:	e7a4      	b.n	801bbf0 <_printf_i+0x168>
 801bca6:	2301      	movs	r3, #1
 801bca8:	4632      	mov	r2, r6
 801bcaa:	4649      	mov	r1, r9
 801bcac:	4640      	mov	r0, r8
 801bcae:	47d0      	blx	sl
 801bcb0:	3001      	adds	r0, #1
 801bcb2:	d09b      	beq.n	801bbec <_printf_i+0x164>
 801bcb4:	3501      	adds	r5, #1
 801bcb6:	68e3      	ldr	r3, [r4, #12]
 801bcb8:	9903      	ldr	r1, [sp, #12]
 801bcba:	1a5b      	subs	r3, r3, r1
 801bcbc:	42ab      	cmp	r3, r5
 801bcbe:	dcf2      	bgt.n	801bca6 <_printf_i+0x21e>
 801bcc0:	e7eb      	b.n	801bc9a <_printf_i+0x212>
 801bcc2:	2500      	movs	r5, #0
 801bcc4:	f104 0619 	add.w	r6, r4, #25
 801bcc8:	e7f5      	b.n	801bcb6 <_printf_i+0x22e>
 801bcca:	bf00      	nop
 801bccc:	0801ff2f 	.word	0x0801ff2f
 801bcd0:	0801ff40 	.word	0x0801ff40

0801bcd4 <_read_r>:
 801bcd4:	b538      	push	{r3, r4, r5, lr}
 801bcd6:	4d07      	ldr	r5, [pc, #28]	; (801bcf4 <_read_r+0x20>)
 801bcd8:	4604      	mov	r4, r0
 801bcda:	4608      	mov	r0, r1
 801bcdc:	4611      	mov	r1, r2
 801bcde:	2200      	movs	r2, #0
 801bce0:	602a      	str	r2, [r5, #0]
 801bce2:	461a      	mov	r2, r3
 801bce4:	f7e6 fa1e 	bl	8002124 <_read>
 801bce8:	1c43      	adds	r3, r0, #1
 801bcea:	d102      	bne.n	801bcf2 <_read_r+0x1e>
 801bcec:	682b      	ldr	r3, [r5, #0]
 801bcee:	b103      	cbz	r3, 801bcf2 <_read_r+0x1e>
 801bcf0:	6023      	str	r3, [r4, #0]
 801bcf2:	bd38      	pop	{r3, r4, r5, pc}
 801bcf4:	2001106c 	.word	0x2001106c

0801bcf8 <__swbuf_r>:
 801bcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcfa:	460e      	mov	r6, r1
 801bcfc:	4614      	mov	r4, r2
 801bcfe:	4605      	mov	r5, r0
 801bd00:	b118      	cbz	r0, 801bd0a <__swbuf_r+0x12>
 801bd02:	6983      	ldr	r3, [r0, #24]
 801bd04:	b90b      	cbnz	r3, 801bd0a <__swbuf_r+0x12>
 801bd06:	f7ff f905 	bl	801af14 <__sinit>
 801bd0a:	4b21      	ldr	r3, [pc, #132]	; (801bd90 <__swbuf_r+0x98>)
 801bd0c:	429c      	cmp	r4, r3
 801bd0e:	d12b      	bne.n	801bd68 <__swbuf_r+0x70>
 801bd10:	686c      	ldr	r4, [r5, #4]
 801bd12:	69a3      	ldr	r3, [r4, #24]
 801bd14:	60a3      	str	r3, [r4, #8]
 801bd16:	89a3      	ldrh	r3, [r4, #12]
 801bd18:	071a      	lsls	r2, r3, #28
 801bd1a:	d52f      	bpl.n	801bd7c <__swbuf_r+0x84>
 801bd1c:	6923      	ldr	r3, [r4, #16]
 801bd1e:	b36b      	cbz	r3, 801bd7c <__swbuf_r+0x84>
 801bd20:	6923      	ldr	r3, [r4, #16]
 801bd22:	6820      	ldr	r0, [r4, #0]
 801bd24:	1ac0      	subs	r0, r0, r3
 801bd26:	6963      	ldr	r3, [r4, #20]
 801bd28:	b2f6      	uxtb	r6, r6
 801bd2a:	4283      	cmp	r3, r0
 801bd2c:	4637      	mov	r7, r6
 801bd2e:	dc04      	bgt.n	801bd3a <__swbuf_r+0x42>
 801bd30:	4621      	mov	r1, r4
 801bd32:	4628      	mov	r0, r5
 801bd34:	f7ff fc74 	bl	801b620 <_fflush_r>
 801bd38:	bb30      	cbnz	r0, 801bd88 <__swbuf_r+0x90>
 801bd3a:	68a3      	ldr	r3, [r4, #8]
 801bd3c:	3b01      	subs	r3, #1
 801bd3e:	60a3      	str	r3, [r4, #8]
 801bd40:	6823      	ldr	r3, [r4, #0]
 801bd42:	1c5a      	adds	r2, r3, #1
 801bd44:	6022      	str	r2, [r4, #0]
 801bd46:	701e      	strb	r6, [r3, #0]
 801bd48:	6963      	ldr	r3, [r4, #20]
 801bd4a:	3001      	adds	r0, #1
 801bd4c:	4283      	cmp	r3, r0
 801bd4e:	d004      	beq.n	801bd5a <__swbuf_r+0x62>
 801bd50:	89a3      	ldrh	r3, [r4, #12]
 801bd52:	07db      	lsls	r3, r3, #31
 801bd54:	d506      	bpl.n	801bd64 <__swbuf_r+0x6c>
 801bd56:	2e0a      	cmp	r6, #10
 801bd58:	d104      	bne.n	801bd64 <__swbuf_r+0x6c>
 801bd5a:	4621      	mov	r1, r4
 801bd5c:	4628      	mov	r0, r5
 801bd5e:	f7ff fc5f 	bl	801b620 <_fflush_r>
 801bd62:	b988      	cbnz	r0, 801bd88 <__swbuf_r+0x90>
 801bd64:	4638      	mov	r0, r7
 801bd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd68:	4b0a      	ldr	r3, [pc, #40]	; (801bd94 <__swbuf_r+0x9c>)
 801bd6a:	429c      	cmp	r4, r3
 801bd6c:	d101      	bne.n	801bd72 <__swbuf_r+0x7a>
 801bd6e:	68ac      	ldr	r4, [r5, #8]
 801bd70:	e7cf      	b.n	801bd12 <__swbuf_r+0x1a>
 801bd72:	4b09      	ldr	r3, [pc, #36]	; (801bd98 <__swbuf_r+0xa0>)
 801bd74:	429c      	cmp	r4, r3
 801bd76:	bf08      	it	eq
 801bd78:	68ec      	ldreq	r4, [r5, #12]
 801bd7a:	e7ca      	b.n	801bd12 <__swbuf_r+0x1a>
 801bd7c:	4621      	mov	r1, r4
 801bd7e:	4628      	mov	r0, r5
 801bd80:	f000 f80c 	bl	801bd9c <__swsetup_r>
 801bd84:	2800      	cmp	r0, #0
 801bd86:	d0cb      	beq.n	801bd20 <__swbuf_r+0x28>
 801bd88:	f04f 37ff 	mov.w	r7, #4294967295
 801bd8c:	e7ea      	b.n	801bd64 <__swbuf_r+0x6c>
 801bd8e:	bf00      	nop
 801bd90:	0801fe28 	.word	0x0801fe28
 801bd94:	0801fe48 	.word	0x0801fe48
 801bd98:	0801fe08 	.word	0x0801fe08

0801bd9c <__swsetup_r>:
 801bd9c:	4b32      	ldr	r3, [pc, #200]	; (801be68 <__swsetup_r+0xcc>)
 801bd9e:	b570      	push	{r4, r5, r6, lr}
 801bda0:	681d      	ldr	r5, [r3, #0]
 801bda2:	4606      	mov	r6, r0
 801bda4:	460c      	mov	r4, r1
 801bda6:	b125      	cbz	r5, 801bdb2 <__swsetup_r+0x16>
 801bda8:	69ab      	ldr	r3, [r5, #24]
 801bdaa:	b913      	cbnz	r3, 801bdb2 <__swsetup_r+0x16>
 801bdac:	4628      	mov	r0, r5
 801bdae:	f7ff f8b1 	bl	801af14 <__sinit>
 801bdb2:	4b2e      	ldr	r3, [pc, #184]	; (801be6c <__swsetup_r+0xd0>)
 801bdb4:	429c      	cmp	r4, r3
 801bdb6:	d10f      	bne.n	801bdd8 <__swsetup_r+0x3c>
 801bdb8:	686c      	ldr	r4, [r5, #4]
 801bdba:	89a3      	ldrh	r3, [r4, #12]
 801bdbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bdc0:	0719      	lsls	r1, r3, #28
 801bdc2:	d42c      	bmi.n	801be1e <__swsetup_r+0x82>
 801bdc4:	06dd      	lsls	r5, r3, #27
 801bdc6:	d411      	bmi.n	801bdec <__swsetup_r+0x50>
 801bdc8:	2309      	movs	r3, #9
 801bdca:	6033      	str	r3, [r6, #0]
 801bdcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bdd0:	81a3      	strh	r3, [r4, #12]
 801bdd2:	f04f 30ff 	mov.w	r0, #4294967295
 801bdd6:	e03e      	b.n	801be56 <__swsetup_r+0xba>
 801bdd8:	4b25      	ldr	r3, [pc, #148]	; (801be70 <__swsetup_r+0xd4>)
 801bdda:	429c      	cmp	r4, r3
 801bddc:	d101      	bne.n	801bde2 <__swsetup_r+0x46>
 801bdde:	68ac      	ldr	r4, [r5, #8]
 801bde0:	e7eb      	b.n	801bdba <__swsetup_r+0x1e>
 801bde2:	4b24      	ldr	r3, [pc, #144]	; (801be74 <__swsetup_r+0xd8>)
 801bde4:	429c      	cmp	r4, r3
 801bde6:	bf08      	it	eq
 801bde8:	68ec      	ldreq	r4, [r5, #12]
 801bdea:	e7e6      	b.n	801bdba <__swsetup_r+0x1e>
 801bdec:	0758      	lsls	r0, r3, #29
 801bdee:	d512      	bpl.n	801be16 <__swsetup_r+0x7a>
 801bdf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bdf2:	b141      	cbz	r1, 801be06 <__swsetup_r+0x6a>
 801bdf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bdf8:	4299      	cmp	r1, r3
 801bdfa:	d002      	beq.n	801be02 <__swsetup_r+0x66>
 801bdfc:	4630      	mov	r0, r6
 801bdfe:	f7ff f983 	bl	801b108 <_free_r>
 801be02:	2300      	movs	r3, #0
 801be04:	6363      	str	r3, [r4, #52]	; 0x34
 801be06:	89a3      	ldrh	r3, [r4, #12]
 801be08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801be0c:	81a3      	strh	r3, [r4, #12]
 801be0e:	2300      	movs	r3, #0
 801be10:	6063      	str	r3, [r4, #4]
 801be12:	6923      	ldr	r3, [r4, #16]
 801be14:	6023      	str	r3, [r4, #0]
 801be16:	89a3      	ldrh	r3, [r4, #12]
 801be18:	f043 0308 	orr.w	r3, r3, #8
 801be1c:	81a3      	strh	r3, [r4, #12]
 801be1e:	6923      	ldr	r3, [r4, #16]
 801be20:	b94b      	cbnz	r3, 801be36 <__swsetup_r+0x9a>
 801be22:	89a3      	ldrh	r3, [r4, #12]
 801be24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801be28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801be2c:	d003      	beq.n	801be36 <__swsetup_r+0x9a>
 801be2e:	4621      	mov	r1, r4
 801be30:	4630      	mov	r0, r6
 801be32:	f000 f84d 	bl	801bed0 <__smakebuf_r>
 801be36:	89a0      	ldrh	r0, [r4, #12]
 801be38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801be3c:	f010 0301 	ands.w	r3, r0, #1
 801be40:	d00a      	beq.n	801be58 <__swsetup_r+0xbc>
 801be42:	2300      	movs	r3, #0
 801be44:	60a3      	str	r3, [r4, #8]
 801be46:	6963      	ldr	r3, [r4, #20]
 801be48:	425b      	negs	r3, r3
 801be4a:	61a3      	str	r3, [r4, #24]
 801be4c:	6923      	ldr	r3, [r4, #16]
 801be4e:	b943      	cbnz	r3, 801be62 <__swsetup_r+0xc6>
 801be50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801be54:	d1ba      	bne.n	801bdcc <__swsetup_r+0x30>
 801be56:	bd70      	pop	{r4, r5, r6, pc}
 801be58:	0781      	lsls	r1, r0, #30
 801be5a:	bf58      	it	pl
 801be5c:	6963      	ldrpl	r3, [r4, #20]
 801be5e:	60a3      	str	r3, [r4, #8]
 801be60:	e7f4      	b.n	801be4c <__swsetup_r+0xb0>
 801be62:	2000      	movs	r0, #0
 801be64:	e7f7      	b.n	801be56 <__swsetup_r+0xba>
 801be66:	bf00      	nop
 801be68:	2000002c 	.word	0x2000002c
 801be6c:	0801fe28 	.word	0x0801fe28
 801be70:	0801fe48 	.word	0x0801fe48
 801be74:	0801fe08 	.word	0x0801fe08

0801be78 <abort>:
 801be78:	b508      	push	{r3, lr}
 801be7a:	2006      	movs	r0, #6
 801be7c:	f000 f890 	bl	801bfa0 <raise>
 801be80:	2001      	movs	r0, #1
 801be82:	f7e6 f945 	bl	8002110 <_exit>

0801be86 <__swhatbuf_r>:
 801be86:	b570      	push	{r4, r5, r6, lr}
 801be88:	460e      	mov	r6, r1
 801be8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be8e:	2900      	cmp	r1, #0
 801be90:	b096      	sub	sp, #88	; 0x58
 801be92:	4614      	mov	r4, r2
 801be94:	461d      	mov	r5, r3
 801be96:	da07      	bge.n	801bea8 <__swhatbuf_r+0x22>
 801be98:	2300      	movs	r3, #0
 801be9a:	602b      	str	r3, [r5, #0]
 801be9c:	89b3      	ldrh	r3, [r6, #12]
 801be9e:	061a      	lsls	r2, r3, #24
 801bea0:	d410      	bmi.n	801bec4 <__swhatbuf_r+0x3e>
 801bea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bea6:	e00e      	b.n	801bec6 <__swhatbuf_r+0x40>
 801bea8:	466a      	mov	r2, sp
 801beaa:	f000 f895 	bl	801bfd8 <_fstat_r>
 801beae:	2800      	cmp	r0, #0
 801beb0:	dbf2      	blt.n	801be98 <__swhatbuf_r+0x12>
 801beb2:	9a01      	ldr	r2, [sp, #4]
 801beb4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801beb8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bebc:	425a      	negs	r2, r3
 801bebe:	415a      	adcs	r2, r3
 801bec0:	602a      	str	r2, [r5, #0]
 801bec2:	e7ee      	b.n	801bea2 <__swhatbuf_r+0x1c>
 801bec4:	2340      	movs	r3, #64	; 0x40
 801bec6:	2000      	movs	r0, #0
 801bec8:	6023      	str	r3, [r4, #0]
 801beca:	b016      	add	sp, #88	; 0x58
 801becc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bed0 <__smakebuf_r>:
 801bed0:	898b      	ldrh	r3, [r1, #12]
 801bed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bed4:	079d      	lsls	r5, r3, #30
 801bed6:	4606      	mov	r6, r0
 801bed8:	460c      	mov	r4, r1
 801beda:	d507      	bpl.n	801beec <__smakebuf_r+0x1c>
 801bedc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bee0:	6023      	str	r3, [r4, #0]
 801bee2:	6123      	str	r3, [r4, #16]
 801bee4:	2301      	movs	r3, #1
 801bee6:	6163      	str	r3, [r4, #20]
 801bee8:	b002      	add	sp, #8
 801beea:	bd70      	pop	{r4, r5, r6, pc}
 801beec:	ab01      	add	r3, sp, #4
 801beee:	466a      	mov	r2, sp
 801bef0:	f7ff ffc9 	bl	801be86 <__swhatbuf_r>
 801bef4:	9900      	ldr	r1, [sp, #0]
 801bef6:	4605      	mov	r5, r0
 801bef8:	4630      	mov	r0, r6
 801befa:	f7ff f955 	bl	801b1a8 <_malloc_r>
 801befe:	b948      	cbnz	r0, 801bf14 <__smakebuf_r+0x44>
 801bf00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf04:	059a      	lsls	r2, r3, #22
 801bf06:	d4ef      	bmi.n	801bee8 <__smakebuf_r+0x18>
 801bf08:	f023 0303 	bic.w	r3, r3, #3
 801bf0c:	f043 0302 	orr.w	r3, r3, #2
 801bf10:	81a3      	strh	r3, [r4, #12]
 801bf12:	e7e3      	b.n	801bedc <__smakebuf_r+0xc>
 801bf14:	4b0d      	ldr	r3, [pc, #52]	; (801bf4c <__smakebuf_r+0x7c>)
 801bf16:	62b3      	str	r3, [r6, #40]	; 0x28
 801bf18:	89a3      	ldrh	r3, [r4, #12]
 801bf1a:	6020      	str	r0, [r4, #0]
 801bf1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bf20:	81a3      	strh	r3, [r4, #12]
 801bf22:	9b00      	ldr	r3, [sp, #0]
 801bf24:	6163      	str	r3, [r4, #20]
 801bf26:	9b01      	ldr	r3, [sp, #4]
 801bf28:	6120      	str	r0, [r4, #16]
 801bf2a:	b15b      	cbz	r3, 801bf44 <__smakebuf_r+0x74>
 801bf2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bf30:	4630      	mov	r0, r6
 801bf32:	f000 f863 	bl	801bffc <_isatty_r>
 801bf36:	b128      	cbz	r0, 801bf44 <__smakebuf_r+0x74>
 801bf38:	89a3      	ldrh	r3, [r4, #12]
 801bf3a:	f023 0303 	bic.w	r3, r3, #3
 801bf3e:	f043 0301 	orr.w	r3, r3, #1
 801bf42:	81a3      	strh	r3, [r4, #12]
 801bf44:	89a0      	ldrh	r0, [r4, #12]
 801bf46:	4305      	orrs	r5, r0
 801bf48:	81a5      	strh	r5, [r4, #12]
 801bf4a:	e7cd      	b.n	801bee8 <__smakebuf_r+0x18>
 801bf4c:	0801aead 	.word	0x0801aead

0801bf50 <_raise_r>:
 801bf50:	291f      	cmp	r1, #31
 801bf52:	b538      	push	{r3, r4, r5, lr}
 801bf54:	4604      	mov	r4, r0
 801bf56:	460d      	mov	r5, r1
 801bf58:	d904      	bls.n	801bf64 <_raise_r+0x14>
 801bf5a:	2316      	movs	r3, #22
 801bf5c:	6003      	str	r3, [r0, #0]
 801bf5e:	f04f 30ff 	mov.w	r0, #4294967295
 801bf62:	bd38      	pop	{r3, r4, r5, pc}
 801bf64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bf66:	b112      	cbz	r2, 801bf6e <_raise_r+0x1e>
 801bf68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bf6c:	b94b      	cbnz	r3, 801bf82 <_raise_r+0x32>
 801bf6e:	4620      	mov	r0, r4
 801bf70:	f000 f830 	bl	801bfd4 <_getpid_r>
 801bf74:	462a      	mov	r2, r5
 801bf76:	4601      	mov	r1, r0
 801bf78:	4620      	mov	r0, r4
 801bf7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bf7e:	f000 b817 	b.w	801bfb0 <_kill_r>
 801bf82:	2b01      	cmp	r3, #1
 801bf84:	d00a      	beq.n	801bf9c <_raise_r+0x4c>
 801bf86:	1c59      	adds	r1, r3, #1
 801bf88:	d103      	bne.n	801bf92 <_raise_r+0x42>
 801bf8a:	2316      	movs	r3, #22
 801bf8c:	6003      	str	r3, [r0, #0]
 801bf8e:	2001      	movs	r0, #1
 801bf90:	e7e7      	b.n	801bf62 <_raise_r+0x12>
 801bf92:	2400      	movs	r4, #0
 801bf94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bf98:	4628      	mov	r0, r5
 801bf9a:	4798      	blx	r3
 801bf9c:	2000      	movs	r0, #0
 801bf9e:	e7e0      	b.n	801bf62 <_raise_r+0x12>

0801bfa0 <raise>:
 801bfa0:	4b02      	ldr	r3, [pc, #8]	; (801bfac <raise+0xc>)
 801bfa2:	4601      	mov	r1, r0
 801bfa4:	6818      	ldr	r0, [r3, #0]
 801bfa6:	f7ff bfd3 	b.w	801bf50 <_raise_r>
 801bfaa:	bf00      	nop
 801bfac:	2000002c 	.word	0x2000002c

0801bfb0 <_kill_r>:
 801bfb0:	b538      	push	{r3, r4, r5, lr}
 801bfb2:	4d07      	ldr	r5, [pc, #28]	; (801bfd0 <_kill_r+0x20>)
 801bfb4:	2300      	movs	r3, #0
 801bfb6:	4604      	mov	r4, r0
 801bfb8:	4608      	mov	r0, r1
 801bfba:	4611      	mov	r1, r2
 801bfbc:	602b      	str	r3, [r5, #0]
 801bfbe:	f7e6 f895 	bl	80020ec <_kill>
 801bfc2:	1c43      	adds	r3, r0, #1
 801bfc4:	d102      	bne.n	801bfcc <_kill_r+0x1c>
 801bfc6:	682b      	ldr	r3, [r5, #0]
 801bfc8:	b103      	cbz	r3, 801bfcc <_kill_r+0x1c>
 801bfca:	6023      	str	r3, [r4, #0]
 801bfcc:	bd38      	pop	{r3, r4, r5, pc}
 801bfce:	bf00      	nop
 801bfd0:	2001106c 	.word	0x2001106c

0801bfd4 <_getpid_r>:
 801bfd4:	f7e6 b882 	b.w	80020dc <_getpid>

0801bfd8 <_fstat_r>:
 801bfd8:	b538      	push	{r3, r4, r5, lr}
 801bfda:	4d07      	ldr	r5, [pc, #28]	; (801bff8 <_fstat_r+0x20>)
 801bfdc:	2300      	movs	r3, #0
 801bfde:	4604      	mov	r4, r0
 801bfe0:	4608      	mov	r0, r1
 801bfe2:	4611      	mov	r1, r2
 801bfe4:	602b      	str	r3, [r5, #0]
 801bfe6:	f7e6 f8e2 	bl	80021ae <_fstat>
 801bfea:	1c43      	adds	r3, r0, #1
 801bfec:	d102      	bne.n	801bff4 <_fstat_r+0x1c>
 801bfee:	682b      	ldr	r3, [r5, #0]
 801bff0:	b103      	cbz	r3, 801bff4 <_fstat_r+0x1c>
 801bff2:	6023      	str	r3, [r4, #0]
 801bff4:	bd38      	pop	{r3, r4, r5, pc}
 801bff6:	bf00      	nop
 801bff8:	2001106c 	.word	0x2001106c

0801bffc <_isatty_r>:
 801bffc:	b538      	push	{r3, r4, r5, lr}
 801bffe:	4d06      	ldr	r5, [pc, #24]	; (801c018 <_isatty_r+0x1c>)
 801c000:	2300      	movs	r3, #0
 801c002:	4604      	mov	r4, r0
 801c004:	4608      	mov	r0, r1
 801c006:	602b      	str	r3, [r5, #0]
 801c008:	f7e6 f8e1 	bl	80021ce <_isatty>
 801c00c:	1c43      	adds	r3, r0, #1
 801c00e:	d102      	bne.n	801c016 <_isatty_r+0x1a>
 801c010:	682b      	ldr	r3, [r5, #0]
 801c012:	b103      	cbz	r3, 801c016 <_isatty_r+0x1a>
 801c014:	6023      	str	r3, [r4, #0]
 801c016:	bd38      	pop	{r3, r4, r5, pc}
 801c018:	2001106c 	.word	0x2001106c
 801c01c:	00000000 	.word	0x00000000

0801c020 <exp>:
 801c020:	b538      	push	{r3, r4, r5, lr}
 801c022:	ed2d 8b02 	vpush	{d8}
 801c026:	ec55 4b10 	vmov	r4, r5, d0
 801c02a:	f000 f849 	bl	801c0c0 <__ieee754_exp>
 801c02e:	4b22      	ldr	r3, [pc, #136]	; (801c0b8 <exp+0x98>)
 801c030:	eeb0 8a40 	vmov.f32	s16, s0
 801c034:	eef0 8a60 	vmov.f32	s17, s1
 801c038:	f993 3000 	ldrsb.w	r3, [r3]
 801c03c:	3301      	adds	r3, #1
 801c03e:	d012      	beq.n	801c066 <exp+0x46>
 801c040:	ec45 4b10 	vmov	d0, r4, r5
 801c044:	f000 f9b6 	bl	801c3b4 <finite>
 801c048:	b168      	cbz	r0, 801c066 <exp+0x46>
 801c04a:	a313      	add	r3, pc, #76	; (adr r3, 801c098 <exp+0x78>)
 801c04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c050:	4620      	mov	r0, r4
 801c052:	4629      	mov	r1, r5
 801c054:	f7e4 fd68 	bl	8000b28 <__aeabi_dcmpgt>
 801c058:	b160      	cbz	r0, 801c074 <exp+0x54>
 801c05a:	f7ff fa55 	bl	801b508 <__errno>
 801c05e:	ed9f 8b10 	vldr	d8, [pc, #64]	; 801c0a0 <exp+0x80>
 801c062:	2322      	movs	r3, #34	; 0x22
 801c064:	6003      	str	r3, [r0, #0]
 801c066:	eeb0 0a48 	vmov.f32	s0, s16
 801c06a:	eef0 0a68 	vmov.f32	s1, s17
 801c06e:	ecbd 8b02 	vpop	{d8}
 801c072:	bd38      	pop	{r3, r4, r5, pc}
 801c074:	a30c      	add	r3, pc, #48	; (adr r3, 801c0a8 <exp+0x88>)
 801c076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c07a:	4620      	mov	r0, r4
 801c07c:	4629      	mov	r1, r5
 801c07e:	f7e4 fd35 	bl	8000aec <__aeabi_dcmplt>
 801c082:	2800      	cmp	r0, #0
 801c084:	d0ef      	beq.n	801c066 <exp+0x46>
 801c086:	f7ff fa3f 	bl	801b508 <__errno>
 801c08a:	2322      	movs	r3, #34	; 0x22
 801c08c:	ed9f 8b08 	vldr	d8, [pc, #32]	; 801c0b0 <exp+0x90>
 801c090:	6003      	str	r3, [r0, #0]
 801c092:	e7e8      	b.n	801c066 <exp+0x46>
 801c094:	f3af 8000 	nop.w
 801c098:	fefa39ef 	.word	0xfefa39ef
 801c09c:	40862e42 	.word	0x40862e42
 801c0a0:	00000000 	.word	0x00000000
 801c0a4:	7ff00000 	.word	0x7ff00000
 801c0a8:	d52d3051 	.word	0xd52d3051
 801c0ac:	c0874910 	.word	0xc0874910
	...
 801c0b8:	20000090 	.word	0x20000090
 801c0bc:	00000000 	.word	0x00000000

0801c0c0 <__ieee754_exp>:
 801c0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0c4:	ec55 4b10 	vmov	r4, r5, d0
 801c0c8:	49b1      	ldr	r1, [pc, #708]	; (801c390 <__ieee754_exp+0x2d0>)
 801c0ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c0ce:	428b      	cmp	r3, r1
 801c0d0:	ed2d 8b04 	vpush	{d8-d9}
 801c0d4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 801c0d8:	d937      	bls.n	801c14a <__ieee754_exp+0x8a>
 801c0da:	49ae      	ldr	r1, [pc, #696]	; (801c394 <__ieee754_exp+0x2d4>)
 801c0dc:	428b      	cmp	r3, r1
 801c0de:	d916      	bls.n	801c10e <__ieee754_exp+0x4e>
 801c0e0:	ee10 3a10 	vmov	r3, s0
 801c0e4:	f3c5 0213 	ubfx	r2, r5, #0, #20
 801c0e8:	4313      	orrs	r3, r2
 801c0ea:	d009      	beq.n	801c100 <__ieee754_exp+0x40>
 801c0ec:	ee10 2a10 	vmov	r2, s0
 801c0f0:	462b      	mov	r3, r5
 801c0f2:	4620      	mov	r0, r4
 801c0f4:	4629      	mov	r1, r5
 801c0f6:	f7e4 f8d1 	bl	800029c <__adddf3>
 801c0fa:	4604      	mov	r4, r0
 801c0fc:	460d      	mov	r5, r1
 801c0fe:	e000      	b.n	801c102 <__ieee754_exp+0x42>
 801c100:	bb06      	cbnz	r6, 801c144 <__ieee754_exp+0x84>
 801c102:	ecbd 8b04 	vpop	{d8-d9}
 801c106:	ec45 4b10 	vmov	d0, r4, r5
 801c10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c10e:	a38a      	add	r3, pc, #552	; (adr r3, 801c338 <__ieee754_exp+0x278>)
 801c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c114:	ee10 0a10 	vmov	r0, s0
 801c118:	4629      	mov	r1, r5
 801c11a:	f7e4 fd05 	bl	8000b28 <__aeabi_dcmpgt>
 801c11e:	b138      	cbz	r0, 801c130 <__ieee754_exp+0x70>
 801c120:	a387      	add	r3, pc, #540	; (adr r3, 801c340 <__ieee754_exp+0x280>)
 801c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c126:	4610      	mov	r0, r2
 801c128:	4619      	mov	r1, r3
 801c12a:	f7e4 fa6d 	bl	8000608 <__aeabi_dmul>
 801c12e:	e7e4      	b.n	801c0fa <__ieee754_exp+0x3a>
 801c130:	a385      	add	r3, pc, #532	; (adr r3, 801c348 <__ieee754_exp+0x288>)
 801c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c136:	4620      	mov	r0, r4
 801c138:	4629      	mov	r1, r5
 801c13a:	f7e4 fcd7 	bl	8000aec <__aeabi_dcmplt>
 801c13e:	2800      	cmp	r0, #0
 801c140:	f000 8087 	beq.w	801c252 <__ieee754_exp+0x192>
 801c144:	2400      	movs	r4, #0
 801c146:	2500      	movs	r5, #0
 801c148:	e7db      	b.n	801c102 <__ieee754_exp+0x42>
 801c14a:	4a93      	ldr	r2, [pc, #588]	; (801c398 <__ieee754_exp+0x2d8>)
 801c14c:	4293      	cmp	r3, r2
 801c14e:	f240 80ac 	bls.w	801c2aa <__ieee754_exp+0x1ea>
 801c152:	4a92      	ldr	r2, [pc, #584]	; (801c39c <__ieee754_exp+0x2dc>)
 801c154:	4293      	cmp	r3, r2
 801c156:	d87c      	bhi.n	801c252 <__ieee754_exp+0x192>
 801c158:	4b91      	ldr	r3, [pc, #580]	; (801c3a0 <__ieee754_exp+0x2e0>)
 801c15a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c162:	ee10 0a10 	vmov	r0, s0
 801c166:	4629      	mov	r1, r5
 801c168:	f7e4 f896 	bl	8000298 <__aeabi_dsub>
 801c16c:	4b8d      	ldr	r3, [pc, #564]	; (801c3a4 <__ieee754_exp+0x2e4>)
 801c16e:	00f7      	lsls	r7, r6, #3
 801c170:	443b      	add	r3, r7
 801c172:	ed93 7b00 	vldr	d7, [r3]
 801c176:	f1c6 0a01 	rsb	sl, r6, #1
 801c17a:	4680      	mov	r8, r0
 801c17c:	4689      	mov	r9, r1
 801c17e:	ebaa 0a06 	sub.w	sl, sl, r6
 801c182:	eeb0 8a47 	vmov.f32	s16, s14
 801c186:	eef0 8a67 	vmov.f32	s17, s15
 801c18a:	ec53 2b18 	vmov	r2, r3, d8
 801c18e:	4640      	mov	r0, r8
 801c190:	4649      	mov	r1, r9
 801c192:	f7e4 f881 	bl	8000298 <__aeabi_dsub>
 801c196:	4604      	mov	r4, r0
 801c198:	460d      	mov	r5, r1
 801c19a:	4622      	mov	r2, r4
 801c19c:	462b      	mov	r3, r5
 801c19e:	4620      	mov	r0, r4
 801c1a0:	4629      	mov	r1, r5
 801c1a2:	f7e4 fa31 	bl	8000608 <__aeabi_dmul>
 801c1a6:	a36a      	add	r3, pc, #424	; (adr r3, 801c350 <__ieee754_exp+0x290>)
 801c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ac:	4606      	mov	r6, r0
 801c1ae:	460f      	mov	r7, r1
 801c1b0:	f7e4 fa2a 	bl	8000608 <__aeabi_dmul>
 801c1b4:	a368      	add	r3, pc, #416	; (adr r3, 801c358 <__ieee754_exp+0x298>)
 801c1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ba:	f7e4 f86d 	bl	8000298 <__aeabi_dsub>
 801c1be:	4632      	mov	r2, r6
 801c1c0:	463b      	mov	r3, r7
 801c1c2:	f7e4 fa21 	bl	8000608 <__aeabi_dmul>
 801c1c6:	a366      	add	r3, pc, #408	; (adr r3, 801c360 <__ieee754_exp+0x2a0>)
 801c1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1cc:	f7e4 f866 	bl	800029c <__adddf3>
 801c1d0:	4632      	mov	r2, r6
 801c1d2:	463b      	mov	r3, r7
 801c1d4:	f7e4 fa18 	bl	8000608 <__aeabi_dmul>
 801c1d8:	a363      	add	r3, pc, #396	; (adr r3, 801c368 <__ieee754_exp+0x2a8>)
 801c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1de:	f7e4 f85b 	bl	8000298 <__aeabi_dsub>
 801c1e2:	4632      	mov	r2, r6
 801c1e4:	463b      	mov	r3, r7
 801c1e6:	f7e4 fa0f 	bl	8000608 <__aeabi_dmul>
 801c1ea:	a361      	add	r3, pc, #388	; (adr r3, 801c370 <__ieee754_exp+0x2b0>)
 801c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1f0:	f7e4 f854 	bl	800029c <__adddf3>
 801c1f4:	4632      	mov	r2, r6
 801c1f6:	463b      	mov	r3, r7
 801c1f8:	f7e4 fa06 	bl	8000608 <__aeabi_dmul>
 801c1fc:	4602      	mov	r2, r0
 801c1fe:	460b      	mov	r3, r1
 801c200:	4620      	mov	r0, r4
 801c202:	4629      	mov	r1, r5
 801c204:	f7e4 f848 	bl	8000298 <__aeabi_dsub>
 801c208:	4602      	mov	r2, r0
 801c20a:	460b      	mov	r3, r1
 801c20c:	4606      	mov	r6, r0
 801c20e:	460f      	mov	r7, r1
 801c210:	4620      	mov	r0, r4
 801c212:	4629      	mov	r1, r5
 801c214:	f7e4 f9f8 	bl	8000608 <__aeabi_dmul>
 801c218:	ec41 0b19 	vmov	d9, r0, r1
 801c21c:	f1ba 0f00 	cmp.w	sl, #0
 801c220:	d15d      	bne.n	801c2de <__ieee754_exp+0x21e>
 801c222:	2200      	movs	r2, #0
 801c224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c228:	4630      	mov	r0, r6
 801c22a:	4639      	mov	r1, r7
 801c22c:	f7e4 f834 	bl	8000298 <__aeabi_dsub>
 801c230:	4602      	mov	r2, r0
 801c232:	460b      	mov	r3, r1
 801c234:	ec51 0b19 	vmov	r0, r1, d9
 801c238:	f7e4 fb10 	bl	800085c <__aeabi_ddiv>
 801c23c:	4622      	mov	r2, r4
 801c23e:	462b      	mov	r3, r5
 801c240:	f7e4 f82a 	bl	8000298 <__aeabi_dsub>
 801c244:	4602      	mov	r2, r0
 801c246:	460b      	mov	r3, r1
 801c248:	2000      	movs	r0, #0
 801c24a:	4957      	ldr	r1, [pc, #348]	; (801c3a8 <__ieee754_exp+0x2e8>)
 801c24c:	f7e4 f824 	bl	8000298 <__aeabi_dsub>
 801c250:	e753      	b.n	801c0fa <__ieee754_exp+0x3a>
 801c252:	4856      	ldr	r0, [pc, #344]	; (801c3ac <__ieee754_exp+0x2ec>)
 801c254:	a348      	add	r3, pc, #288	; (adr r3, 801c378 <__ieee754_exp+0x2b8>)
 801c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c25a:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 801c25e:	4629      	mov	r1, r5
 801c260:	4620      	mov	r0, r4
 801c262:	f7e4 f9d1 	bl	8000608 <__aeabi_dmul>
 801c266:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c26a:	f7e4 f817 	bl	800029c <__adddf3>
 801c26e:	f7e4 fc65 	bl	8000b3c <__aeabi_d2iz>
 801c272:	4682      	mov	sl, r0
 801c274:	f7e4 f95e 	bl	8000534 <__aeabi_i2d>
 801c278:	a341      	add	r3, pc, #260	; (adr r3, 801c380 <__ieee754_exp+0x2c0>)
 801c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c27e:	4606      	mov	r6, r0
 801c280:	460f      	mov	r7, r1
 801c282:	f7e4 f9c1 	bl	8000608 <__aeabi_dmul>
 801c286:	4602      	mov	r2, r0
 801c288:	460b      	mov	r3, r1
 801c28a:	4620      	mov	r0, r4
 801c28c:	4629      	mov	r1, r5
 801c28e:	f7e4 f803 	bl	8000298 <__aeabi_dsub>
 801c292:	a33d      	add	r3, pc, #244	; (adr r3, 801c388 <__ieee754_exp+0x2c8>)
 801c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c298:	4680      	mov	r8, r0
 801c29a:	4689      	mov	r9, r1
 801c29c:	4630      	mov	r0, r6
 801c29e:	4639      	mov	r1, r7
 801c2a0:	f7e4 f9b2 	bl	8000608 <__aeabi_dmul>
 801c2a4:	ec41 0b18 	vmov	d8, r0, r1
 801c2a8:	e76f      	b.n	801c18a <__ieee754_exp+0xca>
 801c2aa:	4a41      	ldr	r2, [pc, #260]	; (801c3b0 <__ieee754_exp+0x2f0>)
 801c2ac:	4293      	cmp	r3, r2
 801c2ae:	d811      	bhi.n	801c2d4 <__ieee754_exp+0x214>
 801c2b0:	a323      	add	r3, pc, #140	; (adr r3, 801c340 <__ieee754_exp+0x280>)
 801c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2b6:	ee10 0a10 	vmov	r0, s0
 801c2ba:	4629      	mov	r1, r5
 801c2bc:	f7e3 ffee 	bl	800029c <__adddf3>
 801c2c0:	4b39      	ldr	r3, [pc, #228]	; (801c3a8 <__ieee754_exp+0x2e8>)
 801c2c2:	2200      	movs	r2, #0
 801c2c4:	f7e4 fc30 	bl	8000b28 <__aeabi_dcmpgt>
 801c2c8:	b138      	cbz	r0, 801c2da <__ieee754_exp+0x21a>
 801c2ca:	4b37      	ldr	r3, [pc, #220]	; (801c3a8 <__ieee754_exp+0x2e8>)
 801c2cc:	2200      	movs	r2, #0
 801c2ce:	4620      	mov	r0, r4
 801c2d0:	4629      	mov	r1, r5
 801c2d2:	e710      	b.n	801c0f6 <__ieee754_exp+0x36>
 801c2d4:	f04f 0a00 	mov.w	sl, #0
 801c2d8:	e75f      	b.n	801c19a <__ieee754_exp+0xda>
 801c2da:	4682      	mov	sl, r0
 801c2dc:	e75d      	b.n	801c19a <__ieee754_exp+0xda>
 801c2de:	4632      	mov	r2, r6
 801c2e0:	463b      	mov	r3, r7
 801c2e2:	2000      	movs	r0, #0
 801c2e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801c2e8:	f7e3 ffd6 	bl	8000298 <__aeabi_dsub>
 801c2ec:	4602      	mov	r2, r0
 801c2ee:	460b      	mov	r3, r1
 801c2f0:	ec51 0b19 	vmov	r0, r1, d9
 801c2f4:	f7e4 fab2 	bl	800085c <__aeabi_ddiv>
 801c2f8:	4602      	mov	r2, r0
 801c2fa:	460b      	mov	r3, r1
 801c2fc:	ec51 0b18 	vmov	r0, r1, d8
 801c300:	f7e3 ffca 	bl	8000298 <__aeabi_dsub>
 801c304:	4642      	mov	r2, r8
 801c306:	464b      	mov	r3, r9
 801c308:	f7e3 ffc6 	bl	8000298 <__aeabi_dsub>
 801c30c:	4602      	mov	r2, r0
 801c30e:	460b      	mov	r3, r1
 801c310:	2000      	movs	r0, #0
 801c312:	4925      	ldr	r1, [pc, #148]	; (801c3a8 <__ieee754_exp+0x2e8>)
 801c314:	f7e3 ffc0 	bl	8000298 <__aeabi_dsub>
 801c318:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 801c31c:	4592      	cmp	sl, r2
 801c31e:	db02      	blt.n	801c326 <__ieee754_exp+0x266>
 801c320:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801c324:	e6e9      	b.n	801c0fa <__ieee754_exp+0x3a>
 801c326:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 801c32a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801c32e:	2200      	movs	r2, #0
 801c330:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801c334:	e6f9      	b.n	801c12a <__ieee754_exp+0x6a>
 801c336:	bf00      	nop
 801c338:	fefa39ef 	.word	0xfefa39ef
 801c33c:	40862e42 	.word	0x40862e42
 801c340:	8800759c 	.word	0x8800759c
 801c344:	7e37e43c 	.word	0x7e37e43c
 801c348:	d52d3051 	.word	0xd52d3051
 801c34c:	c0874910 	.word	0xc0874910
 801c350:	72bea4d0 	.word	0x72bea4d0
 801c354:	3e663769 	.word	0x3e663769
 801c358:	c5d26bf1 	.word	0xc5d26bf1
 801c35c:	3ebbbd41 	.word	0x3ebbbd41
 801c360:	af25de2c 	.word	0xaf25de2c
 801c364:	3f11566a 	.word	0x3f11566a
 801c368:	16bebd93 	.word	0x16bebd93
 801c36c:	3f66c16c 	.word	0x3f66c16c
 801c370:	5555553e 	.word	0x5555553e
 801c374:	3fc55555 	.word	0x3fc55555
 801c378:	652b82fe 	.word	0x652b82fe
 801c37c:	3ff71547 	.word	0x3ff71547
 801c380:	fee00000 	.word	0xfee00000
 801c384:	3fe62e42 	.word	0x3fe62e42
 801c388:	35793c76 	.word	0x35793c76
 801c38c:	3dea39ef 	.word	0x3dea39ef
 801c390:	40862e41 	.word	0x40862e41
 801c394:	7fefffff 	.word	0x7fefffff
 801c398:	3fd62e42 	.word	0x3fd62e42
 801c39c:	3ff0a2b1 	.word	0x3ff0a2b1
 801c3a0:	0801ff68 	.word	0x0801ff68
 801c3a4:	0801ff78 	.word	0x0801ff78
 801c3a8:	3ff00000 	.word	0x3ff00000
 801c3ac:	0801ff58 	.word	0x0801ff58
 801c3b0:	3e2fffff 	.word	0x3e2fffff

0801c3b4 <finite>:
 801c3b4:	b082      	sub	sp, #8
 801c3b6:	ed8d 0b00 	vstr	d0, [sp]
 801c3ba:	9801      	ldr	r0, [sp, #4]
 801c3bc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801c3c0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c3c4:	0fc0      	lsrs	r0, r0, #31
 801c3c6:	b002      	add	sp, #8
 801c3c8:	4770      	bx	lr
	...

0801c3cc <_init>:
 801c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3ce:	bf00      	nop
 801c3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c3d2:	bc08      	pop	{r3}
 801c3d4:	469e      	mov	lr, r3
 801c3d6:	4770      	bx	lr

0801c3d8 <_fini>:
 801c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3da:	bf00      	nop
 801c3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c3de:	bc08      	pop	{r3}
 801c3e0:	469e      	mov	lr, r3
 801c3e2:	4770      	bx	lr
